/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/FuzzBase.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import {Fuzzlib} from "./Fuzzlib.sol";
  5 |     | import {PlatformCrytic} from "./platform/PlatformCrytic.sol";
  6 |     | 
  7 |     | abstract contract FuzzBase {
  8 |     |     Fuzzlib internal fl = new Fuzzlib();
  9 |     | 
 10 |     |     constructor() {
 11 |     |         fl.setPlatform(address(new PlatformCrytic()));
 12 |     |     }
 13 |     | }
 14 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/FuzzLibString.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | /// @notice Efficient library for creating string representations of integers.
   5 |     | /// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)
   6 |     | /// @author Modified from Solady (https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol)
   7 |     | /// @author Modified from Crytic Properties (https://github.com/crytic/properties/blob/main/contracts/util/PropertiesHelper.sol)
   8 |     | library FuzzLibString {
   9 |     |     bytes16 internal constant HEX_DIGITS = "0123456789abcdef";
  10 |     | 
  11 |     |     function toString(int256 value) internal pure returns (string memory str) {
  12 |     |         uint256 absValue = value >= 0 ? uint256(value) : uint256(-value);
  13 |     |         str = toString(absValue);
  14 |     | 
  15 |     |         if (value < 0) {
  16 |     |             str = string(abi.encodePacked("-", str));
  17 |     |         }
  18 |     |     }
  19 |     | 
  20 |     |     function toString(uint256 value) internal pure returns (string memory str) {
  21 |     |         /// @solidity memory-safe-assembly
  22 |     |         assembly {
  23 |     |             // The maximum value of a uint256 contains 78 digits (1 byte per digit), but we allocate 160 bytes
  24 |     |             // to keep the free memory pointer word aligned. We'll need 1 word for the length, 1 word for the
  25 |     |             // trailing zeros padding, and 3 other words for a max of 78 digits. In total: 5 * 32 = 160 bytes.
  26 |     |             let newFreeMemoryPointer := add(mload(0x40), 160)
  27 |     | 
  28 |     |             // Update the free memory pointer to avoid overriding our string.
  29 |     |             mstore(0x40, newFreeMemoryPointer)
  30 |     | 
  31 |     |             // Assign str to the end of the zone of newly allocated memory.
  32 |     |             str := sub(newFreeMemoryPointer, 32)
  33 |     | 
  34 |     |             // Clean the last word of memory it may not be overwritten.
  35 |     |             mstore(str, 0)
  36 |     | 
  37 |     |             // Cache the end of the memory to calculate the length later.
  38 |     |             let end := str
  39 |     | 
  40 |     |             // We write the string from rightmost digit to leftmost digit.
  41 |     |             // The following is essentially a do-while loop that also handles the zero case.
  42 |     |             // prettier-ignore
  43 |     |             for { let temp := value } 1 {} {
  44 |     |                 // Move the pointer 1 byte to the left.
  45 |     |                 str := sub(str, 1)
  46 |     | 
  47 |     |                 // Write the character to the pointer.
  48 |     |                 // The ASCII index of the '0' character is 48.
  49 |     |                 mstore8(str, add(48, mod(temp, 10)))
  50 |     | 
  51 |     |                 // Keep dividing temp until zero.
  52 |     |                 temp := div(temp, 10)
  53 |     | 
  54 |     |                  // prettier-ignore
  55 |     |                 if iszero(temp) { break }
  56 |     |             }
  57 |     | 
  58 |     |             // Compute and cache the final total length of the string.
  59 |     |             let length := sub(end, str)
  60 |     | 
  61 |     |             // Move the pointer 32 bytes leftwards to make room for the length.
  62 |     |             str := sub(str, 32)
  63 |     | 
  64 |     |             // Store the string's length at the start of memory allocated for our string.
  65 |     |             mstore(str, length)
  66 |     |         }
  67 |     |     }
  68 |     | 
  69 |     |     function toString(address value) internal pure returns (string memory str) {
  70 |     |         bytes memory s = new bytes(40);
  71 |     |         for (uint256 i = 0; i < 20; i++) {
  72 |     |             bytes1 b = bytes1(
  73 |     |                 uint8(uint256(uint160(value)) / (2**(8 * (19 - i))))
  74 |     |             );
  75 |     |             bytes1 hi = bytes1(uint8(b) / 16);
  76 |     |             bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));
  77 |     |             s[2 * i] = char(hi);
  78 |     |             s[2 * i + 1] = char(lo);
  79 |     |         }
  80 |     |         return string(s);
  81 |     |     }
  82 |     | 
  83 |     |     function char(bytes1 b) internal pure returns (bytes1 c) {
  84 |     |         if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);
  85 |     |         else return bytes1(uint8(b) + 0x57);
  86 |     |     }
  87 |     | 
  88 |     |     // based on OZ's toHexString
  89 |     |     // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol
  90 |     |     function toHexString(bytes memory value)
  91 |     |         internal
  92 |     |         pure
  93 |     |         returns (string memory)
  94 |     |     {
  95 |     |         bytes memory buffer = new bytes(2 * value.length + 2);
  96 |     |         buffer[0] = "0";
  97 |     |         buffer[1] = "x";
  98 |     |         for (uint256 i = 0; i < value.length; i++) {
  99 |     |             uint8 valueByte = uint8(value[i]);
 100 |     |             buffer[2 * i + 2] = HEX_DIGITS[valueByte >> 4];
 101 |     |             buffer[2 * i + 3] = HEX_DIGITS[valueByte & 0xf];
 102 |     |         }
 103 |     |         return string(buffer);
 104 |     |     }
 105 |     | 
 106 |     |     // https://ethereum.stackexchange.com/a/83577
 107 |     |     function getRevertMsg(bytes memory returnData)
 108 |     |         internal
 109 |     |         pure
 110 |     |         returns (string memory)
 111 |     |     {
 112 |     |         // Check that the data has the right size: 4 bytes for signature + 32 bytes for panic code
 113 |     |         if (returnData.length == 4 + 32) {
 114 |     |             // Check that the data starts with the Panic signature
 115 |     |             bytes4 panicSignature = bytes4(keccak256(bytes("Panic(uint256)")));
 116 |     |             for (uint256 i = 0; i < 4; i++) {
 117 |     |                 if (returnData[i] != panicSignature[i])
 118 |     |                     return "Undefined signature";
 119 |     |             }
 120 |     | 
 121 |     |             uint256 panicCode;
 122 |     |             for (uint256 i = 4; i < 36; i++) {
 123 |     |                 panicCode = panicCode << 8;
 124 |     |                 panicCode |= uint8(returnData[i]);
 125 |     |             }
 126 |     | 
 127 |     |             // Now convert the panic code into its string representation
 128 |     |             if (panicCode == 17) {
 129 |     |                 return "Panic(17)";
 130 |     |             }
 131 |     | 
 132 |     |             // Add other panic codes as needed or return a generic "Unknown panic"
 133 |     |             return "Undefined panic code";
 134 |     |         }
 135 |     | 
 136 |     |         // If the returnData length is less than 68, then the transaction failed silently (without a revert message)
 137 |     |         if (returnData.length < 68) return "Transaction reverted silently";
 138 |     | 
 139 |     |         assembly {
 140 |     |             // Slice the sighash.
 141 |     |             returnData := add(returnData, 0x04)
 142 |     |         }
 143 |     |         return abi.decode(returnData, (string)); // All that remains is the revert string
 144 |     |     }
 145 |     | 
 146 |     |     function isRevertReasonEqual(bytes memory returnData, string memory reason)
 147 |     |         internal
 148 |     |         pure
 149 |     |         returns (bool)
 150 |     |     {
 151 |     |         return (keccak256(abi.encodePacked(getRevertMsg(returnData))) ==
 152 |     |             keccak256(abi.encodePacked(reason)));
 153 |     |     }
 154 |     | }
 155 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/Fuzzlib.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import {HelperBase} from "./helpers/HelperBase.sol";
  5 |     | import {HelperAssert} from "./helpers/HelperAssert.sol";
  6 |     | import {HelperClamp} from "./helpers/HelperClamp.sol";
  7 |     | import {HelperLog} from "./helpers/HelperLog.sol";
  8 |     | import {HelperMath} from "./helpers/HelperMath.sol";
  9 |     | import {HelperRandom} from "./helpers/HelperRandom.sol";
 10 |     | 
 11 | *   | contract Fuzzlib is
 12 |     |     HelperBase,
 13 |     |     HelperAssert,
 14 |     |     HelperClamp,
 15 |     |     HelperLog,
 16 |     |     HelperMath,
 17 |     |     HelperRandom
 18 |     | {}
 19 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/helpers/HelperAssert.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import "./HelperBase.sol";
   5 |     | 
   6 |     | import "../FuzzLibString.sol";
   7 |     | 
   8 |     | /// @author Based on Crytic PropertiesHelper (https://github.com/crytic/properties/blob/main/contracts/util/PropertiesHelper.sol)
   9 |     | abstract contract HelperAssert is HelperBase {
  10 |     |     event AssertFail(string);
  11 |     |     event AssertEqFail(string);
  12 |     |     event AssertNeqFail(string);
  13 |     |     event AssertGteFail(string);
  14 |     |     event AssertGtFail(string);
  15 |     |     event AssertLteFail(string);
  16 |     |     event AssertLtFail(string);
  17 |     | 
  18 |     |     function t(bool b, string memory reason) public {
  19 |     |         if (!b) {
  20 |     |             emit AssertFail(reason);
  21 |     |             platform.assertFail();
  22 |     |         }
  23 |     |     }
  24 |     | 
  25 |     |     /// @notice asserts that a is equal to b. Violations are logged using reason.
  26 | *   |     function eq(
  27 |     |         uint256 a,
  28 |     |         uint256 b,
  29 |     |         string memory reason
  30 |     |     ) public {
  31 | *   |         if (a != b) {
  32 |     |             string memory aStr = FuzzLibString.toString(a);
  33 |     |             string memory bStr = FuzzLibString.toString(b);
  34 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, "!=", reason);
  35 |     |             emit AssertEqFail(assertMsg);
  36 |     |             platform.assertFail();
  37 |     |         }
  38 |     |     }
  39 |     | 
  40 |     |     /// @notice int256 version of eq
  41 |     |     function eq(
  42 |     |         int256 a,
  43 |     |         int256 b,
  44 |     |         string memory reason
  45 |     |     ) public {
  46 |     |         if (a != b) {
  47 |     |             string memory aStr = FuzzLibString.toString(a);
  48 |     |             string memory bStr = FuzzLibString.toString(b);
  49 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, "!=", reason);
  50 |     |            emit AssertEqFail(assertMsg);
  51 |     |             platform.assertFail();
  52 |     |         }
  53 |     |     }
  54 |     | 
  55 |     |     /// @notice bool version of eq
  56 |     |     function eq(
  57 |     |         bool a,
  58 |     |         bool b,
  59 |     |         string memory reason
  60 |     |     ) public {
  61 |     |         if (a != b) {
  62 |     |             string memory aStr = a ? "true" : "false";
  63 |     |             string memory bStr = b ? "true" : "false";
  64 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, "!=", reason);
  65 |     |             emit AssertEqFail(assertMsg);
  66 |     |             platform.assertFail();
  67 |     |         }
  68 |     |     }
  69 |     | 
  70 |     |     /// @notice address version of eq
  71 |     |     function eq(
  72 |     |         address a,
  73 |     |         address b,
  74 |     |         string memory reason
  75 |     |     ) public {
  76 |     |         if (a != b) {
  77 |     |             string memory aStr = FuzzLibString.toString(a);
  78 |     |             string memory bStr = FuzzLibString.toString(b);
  79 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, "!=", reason);
  80 |     |             emit AssertEqFail(assertMsg);
  81 |     |             platform.assertFail();
  82 |     |         }
  83 |     |     }
  84 |     | 
  85 |     |     /// @notice bytes4 version of eq
  86 |     |     function eq(
  87 |     |         bytes4 a,
  88 |     |         bytes4 b,
  89 |     |         string memory reason
  90 |     |     ) public {
  91 |     |         if (a != b) {
  92 |     |             bytes memory aBytes = abi.encodePacked(a);
  93 |     |             bytes memory bBytes = abi.encodePacked(b);
  94 |     |             string memory aStr = FuzzLibString.toHexString(aBytes);
  95 |     |             string memory bStr = FuzzLibString.toHexString(bBytes);
  96 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, "!=", reason);
  97 |     |             emit AssertEqFail(assertMsg);
  98 |     |             platform.assertFail();
  99 |     |         }
 100 |     |     }
 101 |     | 
 102 |     |     /// @notice asserts that a is not equal to b. Violations are logged using reason.
 103 |     |     function neq(
 104 |     |         uint256 a,
 105 |     |         uint256 b,
 106 |     |         string memory reason
 107 |     |     ) public {
 108 |     |         if (a == b) {
 109 |     |             string memory aStr = FuzzLibString.toString(a);
 110 |     |             string memory bStr = FuzzLibString.toString(b);
 111 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, "==", reason);
 112 |     |             emit AssertNeqFail(assertMsg);
 113 |     |             platform.assertFail();
 114 |     |         }
 115 |     |     }
 116 |     | 
 117 |     |     /// @notice int256 version of neq
 118 |     |     function neq(
 119 |     |         int256 a,
 120 |     |         int256 b,
 121 |     |         string memory reason
 122 |     |     ) public {
 123 |     |         if (a == b) {
 124 |     |             string memory aStr = FuzzLibString.toString(a);
 125 |     |             string memory bStr = FuzzLibString.toString(b);
 126 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, "==", reason);
 127 |     |             emit AssertNeqFail(assertMsg);
 128 |     |             platform.assertFail();
 129 |     |         }
 130 |     |     }
 131 |     | 
 132 |     |     /// @notice asserts that a is greater than or equal to b. Violations are logged using reason.
 133 |     |     function gte(
 134 |     |         uint256 a,
 135 |     |         uint256 b,
 136 |     |         string memory reason
 137 |     |     ) public {
 138 |     |         if (!(a >= b)) {
 139 |     |             string memory aStr = FuzzLibString.toString(a);
 140 |     |             string memory bStr = FuzzLibString.toString(b);
 141 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, "<", reason);
 142 |     |             emit AssertGteFail(assertMsg);
 143 |     |             platform.assertFail();
 144 |     |         }
 145 |     |     }
 146 |     | 
 147 |     |     /// @notice int256 version of gte
 148 |     |     function gte(
 149 |     |         int256 a,
 150 |     |         int256 b,
 151 |     |         string memory reason
 152 |     |     ) public {
 153 |     |         if (!(a >= b)) {
 154 |     |             string memory aStr = FuzzLibString.toString(a);
 155 |     |             string memory bStr = FuzzLibString.toString(b);
 156 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, "<", reason);
 157 |     |             emit AssertGteFail(assertMsg);
 158 |     |             platform.assertFail();
 159 |     |         }
 160 |     |     }
 161 |     | 
 162 |     |     /// @notice asserts that a is greater than b. Violations are logged using reason.
 163 |     |     function gt(
 164 |     |         uint256 a,
 165 |     |         uint256 b,
 166 |     |         string memory reason
 167 |     |     ) public {
 168 |     |         if (!(a > b)) {
 169 |     |             string memory aStr = FuzzLibString.toString(a);
 170 |     |             string memory bStr = FuzzLibString.toString(b);
 171 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, "<=", reason);
 172 |     |             emit AssertGtFail(assertMsg);
 173 |     |             platform.assertFail();
 174 |     |         }
 175 |     |     }
 176 |     | 
 177 |     |     /// @notice int256 version of gt
 178 |     |     function gt(
 179 |     |         int256 a,
 180 |     |         int256 b,
 181 |     |         string memory reason
 182 |     |     ) public {
 183 |     |         if (!(a > b)) {
 184 |     |             string memory aStr = FuzzLibString.toString(a);
 185 |     |             string memory bStr = FuzzLibString.toString(b);
 186 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, "<=", reason);
 187 |     |             emit AssertGtFail(assertMsg);
 188 |     |             platform.assertFail();
 189 |     |         }
 190 |     |     }
 191 |     | 
 192 |     |     /// @notice asserts that a is less than or equal to b. Violations are logged using reason.
 193 |     |     function lte(
 194 |     |         uint256 a,
 195 |     |         uint256 b,
 196 |     |         string memory reason
 197 |     |     ) public {
 198 |     |         if (!(a <= b)) {
 199 |     |             string memory aStr = FuzzLibString.toString(a);
 200 |     |             string memory bStr = FuzzLibString.toString(b);
 201 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, ">", reason);
 202 |     |             emit AssertLteFail(assertMsg);
 203 |     |             platform.assertFail();
 204 |     |         }
 205 |     |     }
 206 |     | 
 207 |     |     /// @notice int256 version of lte
 208 |     |     function lte(
 209 |     |         int256 a,
 210 |     |         int256 b,
 211 |     |         string memory reason
 212 |     |     ) public {
 213 |     |         if (!(a <= b)) {
 214 |     |             string memory aStr = FuzzLibString.toString(a);
 215 |     |             string memory bStr = FuzzLibString.toString(b);
 216 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, ">", reason);
 217 |     |             emit AssertLteFail(assertMsg);
 218 |     |             platform.assertFail();
 219 |     |         }
 220 |     |     }
 221 |     | 
 222 |     |     /// @notice asserts that a is less than b. Violations are logged using reason.
 223 | *   |     function lt(
 224 |     |         uint256 a,
 225 |     |         uint256 b,
 226 |     |         string memory reason
 227 |     |     ) public {
 228 | *   |         if (!(a < b)) {
 229 |     |             string memory aStr = FuzzLibString.toString(a);
 230 |     |             string memory bStr = FuzzLibString.toString(b);
 231 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, ">=", reason);
 232 |     |             emit AssertLtFail(assertMsg);
 233 |     |             platform.assertFail();
 234 |     |         }
 235 |     |     }
 236 |     | 
 237 |     |     /// @notice int256 version of lt
 238 |     |     function lt(
 239 |     |         int256 a,
 240 |     |         int256 b,
 241 |     |         string memory reason
 242 |     |     ) public {
 243 |     |         if (!(a < b)) {
 244 |     |             string memory aStr = FuzzLibString.toString(a);
 245 |     |             string memory bStr = FuzzLibString.toString(b);
 246 |     |             string memory assertMsg = createAssertFailMessage(aStr, bStr, ">=", reason);
 247 |     |             emit AssertLtFail(assertMsg);
 248 |     |             platform.assertFail();
 249 |     |         }
 250 |     |     }
 251 |     | 
 252 |     |     function assertRevertReasonNotEqual(
 253 |     |         bytes memory returnData,
 254 |     |         string memory reason
 255 |     |     ) public {
 256 |     |         bool isEqual = FuzzLibString.isRevertReasonEqual(returnData, reason);
 257 |     |         t(!isEqual, reason);
 258 |     |     }
 259 |     | 
 260 |     |     function assertRevertReasonEqual(
 261 |     |         bytes memory returnData,
 262 |     |         string memory reason
 263 |     |     ) public {
 264 |     |         bool isEqual = FuzzLibString.isRevertReasonEqual(returnData, reason);
 265 |     |         t(isEqual, reason);
 266 |     |     }
 267 |     | 
 268 |     |     function assertRevertReasonEqual(
 269 |     |         bytes memory returnData,
 270 |     |         string memory reason1,
 271 |     |         string memory reason2
 272 |     |     ) public {
 273 |     |         bool isEqual = FuzzLibString.isRevertReasonEqual(returnData, reason1) ||
 274 |     |             FuzzLibString.isRevertReasonEqual(returnData, reason2);
 275 |     |         string memory assertMsg = string(
 276 |     |             abi.encodePacked(reason1, " OR ", reason2)
 277 |     |         );
 278 |     |         t(isEqual, assertMsg);
 279 |     |     }
 280 |     | 
 281 |     |     function assertRevertReasonEqual(
 282 |     |         bytes memory returnData,
 283 |     |         string memory reason1,
 284 |     |         string memory reason2,
 285 |     |         string memory reason3
 286 |     |     ) public {
 287 |     |         bool isEqual = FuzzLibString.isRevertReasonEqual(returnData, reason1) ||
 288 |     |             FuzzLibString.isRevertReasonEqual(returnData, reason2) ||
 289 |     |             FuzzLibString.isRevertReasonEqual(returnData, reason3);
 290 |     |         string memory assertMsg = string(
 291 |     |             abi.encodePacked(reason1, " OR ", reason2, " OR ", reason3)
 292 |     |         );
 293 |     |         t(isEqual, assertMsg);
 294 |     |     }
 295 |     | 
 296 |     |     function assertRevertReasonEqual(
 297 |     |         bytes memory returnData,
 298 |     |         string memory reason1,
 299 |     |         string memory reason2,
 300 |     |         string memory reason3,
 301 |     |         string memory reason4
 302 |     |     ) public {
 303 |     |         bool isEqual = FuzzLibString.isRevertReasonEqual(returnData, reason1) ||
 304 |     |             FuzzLibString.isRevertReasonEqual(returnData, reason2) ||
 305 |     |             FuzzLibString.isRevertReasonEqual(returnData, reason3) ||
 306 |     |             FuzzLibString.isRevertReasonEqual(returnData, reason4);
 307 |     |         string memory assertMsg = string(
 308 |     |             abi.encodePacked(
 309 |     |                 reason1,
 310 |     |                 " OR ",
 311 |     |                 reason2,
 312 |     |                 " OR ",
 313 |     |                 reason3,
 314 |     |                 " OR ",
 315 |     |                 reason4
 316 |     |             )
 317 |     |         );
 318 |     |         t(isEqual, assertMsg);
 319 |     |     }
 320 |     | 
 321 |     |     function errAllow(
 322 |     |         bytes4 errorSelector,
 323 |     |         bytes4[] memory allowedErrors,
 324 |     |         string memory message
 325 |     |     ) public {
 326 |     |         bool allowed = false;
 327 |     |         for (uint256 i = 0; i < allowedErrors.length; i++) {
 328 |     |             if (errorSelector == allowedErrors[i]) {
 329 |     |                 allowed = true;
 330 |     |                 break;
 331 |     |             }
 332 |     |         }
 333 |     |         t(allowed, message);
 334 |     |     }
 335 |     | 
 336 |     |     function errsAllow(
 337 |     |         bytes4 errorSelector,
 338 |     |         bytes4[] memory allowedErrors,
 339 |     |         string[] memory messages
 340 |     |     ) public {
 341 |     |         bool allowed = false;
 342 |     |         uint256 passIndex = 0;
 343 |     |         for (uint256 i = 0; i < allowedErrors.length; i++) {
 344 |     |             if (errorSelector == allowedErrors[i]) {
 345 |     |                 allowed = true;
 346 |     |                 passIndex = i;
 347 |     |                 break;
 348 |     |             }
 349 |     |         }
 350 |     |         t(allowed, messages[passIndex]);
 351 |     |     }
 352 |     | 
 353 |     |     function createAssertFailMessage(string memory aStr, string memory bStr, string memory operator, string memory reason)internal pure returns (string memory) {
 354 |     |         return string(abi.encodePacked("Invalid: ", aStr, operator, bStr, ", reason: ", reason));
 355 |     |     }
 356 |     | 
 357 |     | }
 358 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/helpers/HelperBase.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import {IPlatform} from "../platform/IPlatform.sol";
  5 |     | 
  6 |     | contract HelperBase {
  7 |     |     IPlatform public platform;
  8 |     | 
  9 |     |     function setPlatform(address _platform) public {
 10 |     |         platform = IPlatform(_platform);
 11 |     |     }
 12 |     | }
 13 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/helpers/HelperClamp.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import "../FuzzLibString.sol";
   5 |     | import "./HelperAssert.sol";
   6 |     | 
   7 |     | /// @author Based on Crytic PropertiesHelper (https://github.com/crytic/properties/blob/main/contracts/util/PropertiesHelper.sol)
   8 |     | abstract contract HelperClamp is HelperAssert {
   9 |     |     event Clamped(string);
  10 |     | 
  11 |     |     /*
  12 |     |      **************************************************************************
  13 |     |      * Clamp functions with logging enabled
  14 |     |      **************************************************************************
  15 |     |      */
  16 |     | 
  17 |     |     /// @notice Clamps value to be between low and high, both inclusive
  18 |     |     function clamp(
  19 |     |         uint256 value,
  20 |     |         uint256 low,
  21 |     |         uint256 high
  22 |     |     ) public returns (uint256) {
  23 |     |         return clamp(value, low, high, true);
  24 |     |     }
  25 |     | 
  26 |     |     /// @notice int256 version of clamp
  27 |     |     function clamp(
  28 |     |         int256 value,
  29 |     |         int256 low,
  30 |     |         int256 high
  31 |     |     ) public returns (int256) {
  32 |     |         return clamp(value, low, high, true);
  33 |     |     }
  34 |     | 
  35 |     |     /// @notice clamps a to be less than b
  36 |     |     function clampLt(uint256 a, uint256 b) public returns (uint256) {
  37 |     |         return clampLt(a, b);
  38 |     |     }
  39 |     | 
  40 |     |     /// @notice int256 version of clampLt
  41 |     |     function clampLt(int256 a, int256 b) public returns (int256) {
  42 |     |         return clampLt(a, b, true);
  43 |     |     }
  44 |     | 
  45 |     |     /// @notice clamps a to be less than or equal to b
  46 |     |     function clampLte(uint256 a, uint256 b) public returns (uint256) {
  47 |     |         return clampLte(a, b, true);
  48 |     |     }
  49 |     | 
  50 |     |     /// @notice int256 version of clampLte
  51 |     |     function clampLte(int256 a, int256 b) public returns (int256) {
  52 |     |         return clampLte(a, b, true);
  53 |     |     }
  54 |     | 
  55 |     |     /// @notice clamps a to be greater than b
  56 |     |     function clampGt(uint256 a, uint256 b) public returns (uint256) {
  57 |     |         return clampGt(a, b, true);
  58 |     |     }
  59 |     | 
  60 |     |     /// @notice int256 version of clampGt
  61 |     |     function clampGt(int256 a, int256 b) public returns (int256) {
  62 |     |         return clampGt(a, b, true);
  63 |     |     }
  64 |     | 
  65 |     |     /// @notice clamps a to be greater than or equal to b
  66 |     |     function clampGte(uint256 a, uint256 b) public returns (uint256) {
  67 |     |         return clampGte(a, b, true);
  68 |     |     }
  69 |     | 
  70 |     |     /// @notice int256 version of clampGte
  71 |     |     function clampGte(int256 a, int256 b) public returns (int256) {
  72 |     |         return clampGte(a, b, true);
  73 |     |     }
  74 |     | 
  75 |     |     /*
  76 |     |      **************************************************************************
  77 |     |      * Clamp functions with optional logging
  78 |     |      **************************************************************************
  79 |     |      */
  80 |     | 
  81 |     |     /// @notice Clamps value to be between low and high, both inclusive
  82 |     |     function clamp(
  83 |     |         uint256 value,
  84 |     |         uint256 low,
  85 |     |         uint256 high,
  86 |     |         bool enableLogs
  87 |     |     ) public returns (uint256) {
  88 |     |         if (value < low || value > high) {
  89 |     |             uint256 ans = low + (value % (high - low + 1));
  90 |     |             if (enableLogs) {
  91 |     |                 string memory valueStr = FuzzLibString.toString(value);
  92 |     |                 string memory ansStr = FuzzLibString.toString(ans);
  93 |     |                 bytes memory message = abi.encodePacked(
  94 |     |                     "Clamping value ",
  95 |     |                     valueStr,
  96 |     |                     " to ",
  97 |     |                     ansStr
  98 |     |                 );
  99 |     |                 emit Clamped(string(message));
 100 |     |             }
 101 |     |             return ans;
 102 |     |         }
 103 |     |         return value;
 104 |     |     }
 105 |     | 
 106 |     |     /// @notice int256 version of clamp
 107 |     |     function clamp(
 108 |     |         int256 value,
 109 |     |         int256 low,
 110 |     |         int256 high,
 111 |     |         bool enableLogs
 112 |     |     ) public returns (int256) {
 113 |     |         if (value < low || value > high) {
 114 |     |             int256 range = high - low + 1;
 115 |     |             int256 clamped = (value - low) % (range);
 116 |     |             if (clamped < 0) clamped += range;
 117 |     |             int256 ans = low + clamped;
 118 |     |             if (enableLogs) {
 119 |     |                 string memory valueStr = FuzzLibString.toString(value);
 120 |     |                 string memory ansStr = FuzzLibString.toString(ans);
 121 |     |                 bytes memory message = abi.encodePacked(
 122 |     |                     "Clamping value ",
 123 |     |                     valueStr,
 124 |     |                     " to ",
 125 |     |                     ansStr
 126 |     |                 );
 127 |     |                 emit Clamped(string(message));
 128 |     |             }
 129 |     |             return ans;
 130 |     |         }
 131 |     |         return value;
 132 |     |     }
 133 |     | 
 134 |     |     /// @notice clamps a to be less than b
 135 |     |     function clampLt(
 136 |     |         uint256 a,
 137 |     |         uint256 b,
 138 |     |         bool enableLogs
 139 |     |     ) public returns (uint256) {
 140 |     |         if (!(a < b)) {
 141 |     |             neq(
 142 |     |                 b,
 143 |     |                 0,
 144 |     |                 "clampLt cannot clamp value a to be less than zero. Check your inputs/assumptions."
 145 |     |             );
 146 |     |             uint256 value = a % b;
 147 |     |             if (enableLogs) {
 148 |     |                 string memory aStr = FuzzLibString.toString(a);
 149 |     |                 string memory valueStr = FuzzLibString.toString(value);
 150 |     |                 bytes memory message = abi.encodePacked(
 151 |     |                     "Clamping value ",
 152 |     |                     aStr,
 153 |     |                     " to ",
 154 |     |                     valueStr
 155 |     |                 );
 156 |     |                 emit Clamped(string(message));
 157 |     |             }
 158 |     |             return value;
 159 |     |         }
 160 |     |         return a;
 161 |     |     }
 162 |     | 
 163 |     |     /// @notice int256 version of clampLt
 164 |     |     function clampLt(
 165 |     |         int256 a,
 166 |     |         int256 b,
 167 |     |         bool enableLogs
 168 |     |     ) public returns (int256) {
 169 |     |         if (!(a < b)) {
 170 |     |             int256 value = b - 1;
 171 |     |             if (enableLogs) {
 172 |     |                 string memory aStr = FuzzLibString.toString(a);
 173 |     |                 string memory valueStr = FuzzLibString.toString(value);
 174 |     |                 bytes memory message = abi.encodePacked(
 175 |     |                     "Clamping value ",
 176 |     |                     aStr,
 177 |     |                     " to ",
 178 |     |                     valueStr
 179 |     |                 );
 180 |     |                 emit Clamped(string(message));
 181 |     |             }
 182 |     |             return value;
 183 |     |         }
 184 |     |         return a;
 185 |     |     }
 186 |     | 
 187 |     |     /// @notice clamps a to be less than or equal to b
 188 |     |     function clampLte(
 189 |     |         uint256 a,
 190 |     |         uint256 b,
 191 |     |         bool enableLogs
 192 |     |     ) public returns (uint256) {
 193 |     |         if (!(a <= b)) {
 194 |     |             uint256 value = a % (b + 1);
 195 |     |             if (enableLogs) {
 196 |     |                 string memory aStr = FuzzLibString.toString(a);
 197 |     |                 string memory valueStr = FuzzLibString.toString(value);
 198 |     |                 bytes memory message = abi.encodePacked(
 199 |     |                     "Clamping value ",
 200 |     |                     aStr,
 201 |     |                     " to ",
 202 |     |                     valueStr
 203 |     |                 );
 204 |     |                 emit Clamped(string(message));
 205 |     |             }
 206 |     |             return value;
 207 |     |         }
 208 |     |         return a;
 209 |     |     }
 210 |     | 
 211 |     |     /// @notice int256 version of clampLte
 212 |     |     function clampLte(
 213 |     |         int256 a,
 214 |     |         int256 b,
 215 |     |         bool enableLogs
 216 |     |     ) public returns (int256) {
 217 |     |         if (!(a <= b)) {
 218 |     |             int256 value = b;
 219 |     |             if (enableLogs) {
 220 |     |                 string memory aStr = FuzzLibString.toString(a);
 221 |     |                 string memory valueStr = FuzzLibString.toString(value);
 222 |     |                 bytes memory message = abi.encodePacked(
 223 |     |                     "Clamping value ",
 224 |     |                     aStr,
 225 |     |                     " to ",
 226 |     |                     valueStr
 227 |     |                 );
 228 |     |                 emit Clamped(string(message));
 229 |     |             }
 230 |     |             return value;
 231 |     |         }
 232 |     |         return a;
 233 |     |     }
 234 |     | 
 235 |     |     /// @notice clamps a to be greater than b
 236 |     |     function clampGt(
 237 |     |         uint256 a,
 238 |     |         uint256 b,
 239 |     |         bool enableLogs
 240 |     |     ) public returns (uint256) {
 241 |     |         if (!(a > b)) {
 242 |     |             neq(
 243 |     |                 b,
 244 |     |                 type(uint256).max,
 245 |     |                 "clampGt cannot clamp value a to be larger than uint256.max. Check your inputs/assumptions."
 246 |     |             );
 247 |     |             uint256 value = b + 1;
 248 |     |             if (enableLogs) {
 249 |     |                 string memory aStr = FuzzLibString.toString(a);
 250 |     |                 string memory valueStr = FuzzLibString.toString(value);
 251 |     |                 bytes memory message = abi.encodePacked(
 252 |     |                     "Clamping value ",
 253 |     |                     aStr,
 254 |     |                     " to ",
 255 |     |                     valueStr
 256 |     |                 );
 257 |     |                 emit Clamped(string(message));
 258 |     |             }
 259 |     |             return value;
 260 |     |         } else {
 261 |     |             return a;
 262 |     |         }
 263 |     |     }
 264 |     | 
 265 |     |     /// @notice int256 version of clampGt
 266 |     |     function clampGt(
 267 |     |         int256 a,
 268 |     |         int256 b,
 269 |     |         bool enableLogs
 270 |     |     ) public returns (int256) {
 271 |     |         if (!(a > b)) {
 272 |     |             int256 value = b + 1;
 273 |     |             if (enableLogs) {
 274 |     |                 string memory aStr = FuzzLibString.toString(a);
 275 |     |                 string memory valueStr = FuzzLibString.toString(value);
 276 |     |                 bytes memory message = abi.encodePacked(
 277 |     |                     "Clamping value ",
 278 |     |                     aStr,
 279 |     |                     " to ",
 280 |     |                     valueStr
 281 |     |                 );
 282 |     |                 emit Clamped(string(message));
 283 |     |             }
 284 |     |             return value;
 285 |     |         } else {
 286 |     |             return a;
 287 |     |         }
 288 |     |     }
 289 |     | 
 290 |     |     /// @notice clamps a to be greater than or equal to b
 291 |     |     function clampGte(
 292 |     |         uint256 a,
 293 |     |         uint256 b,
 294 |     |         bool enableLogs
 295 |     |     ) public returns (uint256) {
 296 |     |         if (!(a > b)) {
 297 |     |             uint256 value = b;
 298 |     |             if (enableLogs) {
 299 |     |                 string memory aStr = FuzzLibString.toString(a);
 300 |     |                 string memory valueStr = FuzzLibString.toString(value);
 301 |     |                 bytes memory message = abi.encodePacked(
 302 |     |                     "Clamping value ",
 303 |     |                     aStr,
 304 |     |                     " to ",
 305 |     |                     valueStr
 306 |     |                 );
 307 |     |                 emit Clamped(string(message));
 308 |     |             }
 309 |     |             return value;
 310 |     |         }
 311 |     |         return a;
 312 |     |     }
 313 |     | 
 314 |     |     /// @notice int256 version of clampGte
 315 |     |     function clampGte(
 316 |     |         int256 a,
 317 |     |         int256 b,
 318 |     |         bool enableLogs
 319 |     |     ) public returns (int256) {
 320 |     |         if (!(a > b)) {
 321 |     |             int256 value = b;
 322 |     |             if (enableLogs) {
 323 |     |                 string memory aStr = FuzzLibString.toString(a);
 324 |     |                 string memory valueStr = FuzzLibString.toString(value);
 325 |     |                 bytes memory message = abi.encodePacked(
 326 |     |                     "Clamping value ",
 327 |     |                     aStr,
 328 |     |                     " to ",
 329 |     |                     valueStr
 330 |     |                 );
 331 |     |                 emit Clamped(string(message));
 332 |     |             }
 333 |     |             return value;
 334 |     |         }
 335 |     |         return a;
 336 |     |     }
 337 |     | }
 338 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/helpers/HelperLog.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import {LibLog} from "../libraries/LibLog.sol";
  5 |     | 
  6 |     | abstract contract HelperLog {
  7 |     |     function log(string memory message) public {
  8 |     |         LibLog.log(message);
  9 |     |     }
 10 |     | 
 11 |     |     function log(string memory message, string memory data) public {
 12 |     |         LibLog.log(message, data);
 13 |     |     }
 14 |     | 
 15 |     |     function log(string memory message, bytes memory data) public {
 16 |     |         LibLog.log(message, data);
 17 |     |     }
 18 |     | 
 19 |     |     function log(string memory message, uint256 data) public {
 20 |     |         LibLog.log(message, data);
 21 |     |     }
 22 |     | 
 23 |     |     function log(string memory message, int256 data) public {
 24 |     |         LibLog.log(message, data);
 25 |     |     }
 26 |     | 
 27 |     |     function log(string memory message, address data) public {
 28 |     |         LibLog.log(message, data);
 29 |     |     }
 30 |     | 
 31 |     |     function log(string memory message, bool data) public {
 32 |     |         LibLog.log(message, data);
 33 |     |     }
 34 |     | 
 35 |     |     function log(string memory message, bytes32 data) public {
 36 |     |         LibLog.log(message, data);
 37 |     |     }
 38 |     | 
 39 |     |     function logFail() public {
 40 |     |         LibLog.logFail();
 41 |     |     }
 42 |     | 
 43 |     |     function logFail(string memory message) public {
 44 |     |         LibLog.logFail(message);
 45 |     |     }
 46 |     | 
 47 |     |     function logFail(string memory message, string memory data) public {
 48 |     |         LibLog.logFail(message, data);
 49 |     |     }
 50 |     | 
 51 |     |     function logFail(string memory message, bytes memory data) public {
 52 |     |         LibLog.logFail(message, data);
 53 |     |     }
 54 |     | 
 55 |     |     function logFail(string memory message, uint256 data) public {
 56 |     |         LibLog.logFail(message, data);
 57 |     |     }
 58 |     | 
 59 |     |     function logFail(string memory message, int256 data) public {
 60 |     |         LibLog.logFail(message, data);
 61 |     |     }
 62 |     | 
 63 |     |     function logFail(string memory message, address data) public {
 64 |     |         LibLog.logFail(message, data);
 65 |     |     }
 66 |     | 
 67 |     |     function logFail(string memory message, bool data) public {
 68 |     |         LibLog.logFail(message, data);
 69 |     |     }
 70 |     | 
 71 |     |     function logFail(string memory message, bytes32 data) public {
 72 |     |         LibLog.log(message, data);
 73 |     |     }
 74 |     | }
 75 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/helpers/HelperMath.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | abstract contract HelperMath {
  5 |     |     function min(uint256 a, uint256 b) public pure returns (uint256) {
  6 |     |         return a < b ? a : b;
  7 |     |     }
  8 |     | 
  9 |     |     function max(uint256 a, uint256 b) public pure returns (uint256) {
 10 |     |         return a > b ? a : b;
 11 |     |     }
 12 |     | 
 13 |     |     // Forked from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.0/contracts/utils/math/SignedMath.sol
 14 |     |     function max(int256 a, int256 b) public pure returns (int256) {
 15 |     |         return a > b ? a : b;
 16 |     |     }
 17 |     | 
 18 |     |     // Forked with modifications from https://ethereum.stackexchange.com/a/84391
 19 |     |     function abs(int128 n) public pure returns (int128) {
 20 |     |         return n >= 0 ? n : -n;
 21 |     |     }
 22 |     | 
 23 |     |     function abs(int256 n) public pure returns (uint256) {
 24 |     |         return n >= 0 ? uint256(n) : uint256(-n);
 25 |     |     }
 26 |     | 
 27 |     |     function diff(int256 a, int256 b) public pure returns (uint256) {
 28 |     |         return a >= b ? uint256(a - b) : uint256(b - a);
 29 |     |     }
 30 |     | 
 31 |     |     function diff(uint256 a, uint256 b) public pure returns (uint256) {
 32 |     |         return a >= b ? a - b : b - a;
 33 |     |     }
 34 |     | }
 35 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/helpers/HelperRandom.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | abstract contract HelperRandom {
  5 |     |     /// @notice Shuffle an array using Fisher-Yates algorithm
  6 |     |     /// @dev Based on https://gist.github.com/scammi/602387a22e04c77beb73c0ebc0f0bc18
  7 |     |     function shuffleArray(
  8 |     |         uint256[] memory shuffle,
  9 |     |         uint256 entropy
 10 |     |     ) public pure {
 11 |     |         for (uint256 i = shuffle.length - 1; i > 0; i--) {
 12 |     |             uint256 swapIndex = entropy % (shuffle.length - i);
 13 |     | 
 14 |     |             uint256 currentIndex = shuffle[i];
 15 |     |             uint256 indexToSwap = shuffle[swapIndex];
 16 |     | 
 17 |     |             shuffle[i] = indexToSwap;
 18 |     |             shuffle[swapIndex] = currentIndex;
 19 |     |         }
 20 |     |     }
 21 |     | }
 22 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/libraries/LibLog.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | library LibLog {
  5 |     |     event Log(string message);
  6 |     |     event LogString(string message, string data);
  7 |     |     event LogBytes(string message, bytes data);
  8 |     |     event LogUint(string message, uint256 data);
  9 |     |     event LogInt(string message, int256 data);
 10 |     |     event LogAddress(string message, address data);
 11 |     |     event LogBool(string message, bool data);
 12 |     |     event LogBytes32(string message, bytes32 data);
 13 |     | 
 14 |     |     event AssertionFailed();
 15 |     |     event AssertionFailed(string message);
 16 |     |     event AssertionFailed(string message, string data);
 17 |     |     event AssertionFailed(string message, bytes data);
 18 |     |     event AssertionFailed(string message, uint256 data);
 19 |     |     event AssertionFailed(string message, int256 data);
 20 |     |     event AssertionFailed(string message, address data);
 21 |     |     event AssertionFailed(string message, bool data);
 22 |     | 
 23 |     |     function log(string memory message) internal {
 24 |     |         emit Log(message);
 25 |     |     }
 26 |     | 
 27 |     |     function log(string memory message, string memory data) internal {
 28 |     |         emit LogString(message, data);
 29 |     |     }
 30 |     | 
 31 |     |     function log(string memory message, bytes memory data) internal {
 32 |     |         emit LogBytes(message, data);
 33 |     |     }
 34 |     | 
 35 |     |     function log(string memory message, uint256 data) internal {
 36 |     |         emit LogUint(message, data);
 37 |     |     }
 38 |     | 
 39 |     |     function log(string memory message, int256 data) internal {
 40 |     |         emit LogInt(message, data);
 41 |     |     }
 42 |     | 
 43 |     |     function log(string memory message, address data) internal {
 44 |     |         emit LogAddress(message, data);
 45 |     |     }
 46 |     | 
 47 |     |     function log(string memory message, bool data) internal {
 48 |     |         emit LogBool(message, data);
 49 |     |     }
 50 |     | 
 51 |     |     function log(string memory message, bytes32 data) internal {
 52 |     |         emit LogBytes32(message, data);
 53 |     |     }
 54 |     | 
 55 |     |     function logFail() internal {
 56 |     |         emit AssertionFailed();
 57 |     |     }
 58 |     | 
 59 |     |     function logFail(string memory message) internal {
 60 |     |         emit AssertionFailed(message);
 61 |     |     }
 62 |     | 
 63 |     |     function logFail(string memory message, string memory data) internal {
 64 |     |         emit AssertionFailed(message, data);
 65 |     |     }
 66 |     | 
 67 |     |     function logFail(string memory message, bytes memory data) internal {
 68 |     |         emit AssertionFailed(message, data);
 69 |     |     }
 70 |     | 
 71 |     |     function logFail(string memory message, uint256 data) internal {
 72 |     |         emit AssertionFailed(message, data);
 73 |     |     }
 74 |     | 
 75 |     |     function logFail(string memory message, int256 data) internal {
 76 |     |         emit AssertionFailed(message, data);
 77 |     |     }
 78 |     | 
 79 |     |     function logFail(string memory message, address data) internal {
 80 |     |         emit AssertionFailed(message, data);
 81 |     |     }
 82 |     | 
 83 |     |     function logFail(string memory message, bool data) internal {
 84 |     |         emit AssertionFailed(message, data);
 85 |     |     }
 86 |     | 
 87 |     |     function logFail(string memory message, bytes32 data) internal {
 88 |     |         emit LogBytes32(message, data);
 89 |     |     }
 90 |     | }
 91 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/platform/IPlatform.sol
 1 |     | // SPDX-License-Identifier: MIT
 2 |     | pragma solidity ^0.8.0;
 3 |     | 
 4 |     | interface IPlatform {
 5 |     |     function assertFail() pure external;
 6 |     | }
 7 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/lib/fuzzlib/src/platform/PlatformCrytic.sol
  1 |     | 
  2 |     | // SPDX-License-Identifier: MIT
  3 |     | pragma solidity ^0.8.0;
  4 |     | 
  5 |     | import {IPlatform} from "./IPlatform.sol";
  6 |     | 
  7 |     | contract PlatformCrytic is IPlatform {
  8 |     |     function assertFail() pure public override{
  9 |     |         assert(false);
 10 |     |     }
 11 |     | }
 12 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
   8 |     |  * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
   9 |     |  * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
  10 |     |  * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
  11 |     |  *
  12 |     |  * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
  13 |     |  * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
  14 |     |  * case an upgrade adds a module that needs to be initialized.
  15 |     |  *
  16 |     |  * For example:
  17 |     |  *
  18 |     |  * [.hljs-theme-light.nopadding]
  19 |     |  * ```solidity
  20 |     |  * contract MyToken is ERC20Upgradeable {
  21 |     |  *     function initialize() initializer public {
  22 |     |  *         __ERC20_init("MyToken", "MTK");
  23 |     |  *     }
  24 |     |  * }
  25 |     |  *
  26 |     |  * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
  27 |     |  *     function initializeV2() reinitializer(2) public {
  28 |     |  *         __ERC20Permit_init("MyToken");
  29 |     |  *     }
  30 |     |  * }
  31 |     |  * ```
  32 |     |  *
  33 |     |  * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
  34 |     |  * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
  35 |     |  *
  36 |     |  * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
  37 |     |  * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
  38 |     |  *
  39 |     |  * [CAUTION]
  40 |     |  * ====
  41 |     |  * Avoid leaving a contract uninitialized.
  42 |     |  *
  43 |     |  * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
  44 |     |  * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
  45 |     |  * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
  46 |     |  *
  47 |     |  * [.hljs-theme-light.nopadding]
  48 |     |  * ```
  49 |     |  * /// @custom:oz-upgrades-unsafe-allow constructor
  50 |     |  * constructor() {
  51 |     |  *     _disableInitializers();
  52 |     |  * }
  53 |     |  * ```
  54 |     |  * ====
  55 |     |  */
  56 |     | abstract contract Initializable {
  57 |     |     /**
  58 |     |      * @dev Storage of the initializable contract.
  59 |     |      *
  60 |     |      * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions
  61 |     |      * when using with upgradeable contracts.
  62 |     |      *
  63 |     |      * @custom:storage-location erc7201:openzeppelin.storage.Initializable
  64 |     |      */
  65 |     |     struct InitializableStorage {
  66 |     |         /**
  67 |     |          * @dev Indicates that the contract has been initialized.
  68 |     |          */
  69 |     |         uint64 _initialized;
  70 |     |         /**
  71 |     |          * @dev Indicates that the contract is in the process of being initialized.
  72 |     |          */
  73 |     |         bool _initializing;
  74 |     |     }
  75 |     | 
  76 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Initializable")) - 1)) & ~bytes32(uint256(0xff))
  77 |     |     bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;
  78 |     | 
  79 |     |     /**
  80 |     |      * @dev The contract is already initialized.
  81 |     |      */
  82 |     |     error InvalidInitialization();
  83 |     | 
  84 |     |     /**
  85 |     |      * @dev The contract is not initializing.
  86 |     |      */
  87 |     |     error NotInitializing();
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Triggered when the contract has been initialized or reinitialized.
  91 |     |      */
  92 |     |     event Initialized(uint64 version);
  93 |     | 
  94 |     |     /**
  95 |     |      * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
  96 |     |      * `onlyInitializing` functions can be used to initialize parent contracts.
  97 |     |      *
  98 |     |      * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any
  99 |     |      * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in
 100 |     |      * production.
 101 |     |      *
 102 |     |      * Emits an {Initialized} event.
 103 |     |      */
 104 |     |     modifier initializer() {
 105 |     |         // solhint-disable-next-line var-name-mixedcase
 106 |     |         InitializableStorage storage $ = _getInitializableStorage();
 107 |     | 
 108 |     |         // Cache values to avoid duplicated sloads
 109 |     |         bool isTopLevelCall = !$._initializing;
 110 |     |         uint64 initialized = $._initialized;
 111 |     | 
 112 |     |         // Allowed calls:
 113 |     |         // - initialSetup: the contract is not in the initializing state and no previous version was
 114 |     |         //                 initialized
 115 |     |         // - construction: the contract is initialized at version 1 (no reininitialization) and the
 116 |     |         //                 current contract is just being deployed
 117 |     |         bool initialSetup = initialized == 0 && isTopLevelCall;
 118 |     |         bool construction = initialized == 1 && address(this).code.length == 0;
 119 |     | 
 120 |     |         if (!initialSetup && !construction) {
 121 |     |             revert InvalidInitialization();
 122 |     |         }
 123 |     |         $._initialized = 1;
 124 |     |         if (isTopLevelCall) {
 125 |     |             $._initializing = true;
 126 |     |         }
 127 |     |         _;
 128 |     |         if (isTopLevelCall) {
 129 |     |             $._initializing = false;
 130 |     |             emit Initialized(1);
 131 |     |         }
 132 |     |     }
 133 |     | 
 134 |     |     /**
 135 |     |      * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
 136 |     |      * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
 137 |     |      * used to initialize parent contracts.
 138 |     |      *
 139 |     |      * A reinitializer may be used after the original initialization step. This is essential to configure modules that
 140 |     |      * are added through upgrades and that require initialization.
 141 |     |      *
 142 |     |      * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
 143 |     |      * cannot be nested. If one is invoked in the context of another, execution will revert.
 144 |     |      *
 145 |     |      * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
 146 |     |      * a contract, executing them in the right order is up to the developer or operator.
 147 |     |      *
 148 |     |      * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.
 149 |     |      *
 150 |     |      * Emits an {Initialized} event.
 151 |     |      */
 152 |     |     modifier reinitializer(uint64 version) {
 153 |     |         // solhint-disable-next-line var-name-mixedcase
 154 |     |         InitializableStorage storage $ = _getInitializableStorage();
 155 |     | 
 156 |     |         if ($._initializing || $._initialized >= version) {
 157 |     |             revert InvalidInitialization();
 158 |     |         }
 159 |     |         $._initialized = version;
 160 |     |         $._initializing = true;
 161 |     |         _;
 162 |     |         $._initializing = false;
 163 |     |         emit Initialized(version);
 164 |     |     }
 165 |     | 
 166 |     |     /**
 167 |     |      * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
 168 |     |      * {initializer} and {reinitializer} modifiers, directly or indirectly.
 169 |     |      */
 170 |     |     modifier onlyInitializing() {
 171 |     |         _checkInitializing();
 172 |     |         _;
 173 |     |     }
 174 |     | 
 175 |     |     /**
 176 |     |      * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.
 177 |     |      */
 178 |     |     function _checkInitializing() internal view virtual {
 179 |     |         if (!_isInitializing()) {
 180 |     |             revert NotInitializing();
 181 |     |         }
 182 |     |     }
 183 |     | 
 184 |     |     /**
 185 |     |      * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
 186 |     |      * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
 187 |     |      * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
 188 |     |      * through proxies.
 189 |     |      *
 190 |     |      * Emits an {Initialized} event the first time it is successfully executed.
 191 |     |      */
 192 |     |     function _disableInitializers() internal virtual {
 193 |     |         // solhint-disable-next-line var-name-mixedcase
 194 |     |         InitializableStorage storage $ = _getInitializableStorage();
 195 |     | 
 196 |     |         if ($._initializing) {
 197 |     |             revert InvalidInitialization();
 198 |     |         }
 199 |     |         if ($._initialized != type(uint64).max) {
 200 |     |             $._initialized = type(uint64).max;
 201 |     |             emit Initialized(type(uint64).max);
 202 |     |         }
 203 |     |     }
 204 |     | 
 205 |     |     /**
 206 |     |      * @dev Returns the highest version that has been initialized. See {reinitializer}.
 207 |     |      */
 208 |     |     function _getInitializedVersion() internal view returns (uint64) {
 209 |     |         return _getInitializableStorage()._initialized;
 210 |     |     }
 211 |     | 
 212 |     |     /**
 213 |     |      * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
 214 |     |      */
 215 |     |     function _isInitializing() internal view returns (bool) {
 216 |     |         return _getInitializableStorage()._initializing;
 217 |     |     }
 218 |     | 
 219 |     |     /**
 220 |     |      * @dev Returns a pointer to the storage namespace.
 221 |     |      */
 222 |     |     // solhint-disable-next-line var-name-mixedcase
 223 |     |     function _getInitializableStorage() private pure returns (InitializableStorage storage $) {
 224 |     |         assembly {
 225 |     |             $.slot := INITIALIZABLE_STORAGE
 226 |     |         }
 227 |     |     }
 228 |     | }
 229 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | import {Initializable} from "../proxy/utils/Initializable.sol";
   6 |     | 
   7 |     | /**
   8 |     |  * @dev Contract module that helps prevent reentrant calls to a function.
   9 |     |  *
  10 |     |  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
  11 |     |  * available, which can be applied to functions to make sure there are no nested
  12 |     |  * (reentrant) calls to them.
  13 |     |  *
  14 |     |  * Note that because there is a single `nonReentrant` guard, functions marked as
  15 |     |  * `nonReentrant` may not call one another. This can be worked around by making
  16 |     |  * those functions `private`, and then adding `external` `nonReentrant` entry
  17 |     |  * points to them.
  18 |     |  *
  19 |     |  * TIP: If you would like to learn more about reentrancy and alternative ways
  20 |     |  * to protect against it, check out our blog post
  21 |     |  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
  22 |     |  */
  23 |     | abstract contract ReentrancyGuardUpgradeable is Initializable {
  24 |     |     // Booleans are more expensive than uint256 or any type that takes up a full
  25 |     |     // word because each write operation emits an extra SLOAD to first read the
  26 |     |     // slot's contents, replace the bits taken up by the boolean, and then write
  27 |     |     // back. This is the compiler's defense against contract upgrades and
  28 |     |     // pointer aliasing, and it cannot be disabled.
  29 |     | 
  30 |     |     // The values being non-zero value makes deployment a bit more expensive,
  31 |     |     // but in exchange the refund on every call to nonReentrant will be lower in
  32 |     |     // amount. Since refunds are capped to a percentage of the total
  33 |     |     // transaction's gas, it is best to keep them low in cases like this one, to
  34 |     |     // increase the likelihood of the full refund coming into effect.
  35 | *   |     uint256 private constant NOT_ENTERED = 1;
  36 | *   |     uint256 private constant ENTERED = 2;
  37 |     | 
  38 |     |     /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard
  39 |     |     struct ReentrancyGuardStorage {
  40 |     |         uint256 _status;
  41 |     |     }
  42 |     | 
  43 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ReentrancyGuard")) - 1)) & ~bytes32(uint256(0xff))
  44 |     |     bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;
  45 |     | 
  46 | *   |     function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {
  47 |     |         assembly {
  48 | *   |             $.slot := ReentrancyGuardStorageLocation
  49 |     |         }
  50 |     |     }
  51 |     | 
  52 |     |     /**
  53 |     |      * @dev Unauthorized reentrant call.
  54 |     |      */
  55 |     |     error ReentrancyGuardReentrantCall();
  56 |     | 
  57 |     |     function __ReentrancyGuard_init() internal onlyInitializing {
  58 |     |         __ReentrancyGuard_init_unchained();
  59 |     |     }
  60 |     | 
  61 |     |     function __ReentrancyGuard_init_unchained() internal onlyInitializing {
  62 |     |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
  63 |     |         $._status = NOT_ENTERED;
  64 |     |     }
  65 |     | 
  66 |     |     /**
  67 |     |      * @dev Prevents a contract from calling itself, directly or indirectly.
  68 |     |      * Calling a `nonReentrant` function from another `nonReentrant`
  69 |     |      * function is not supported. It is possible to prevent this from happening
  70 |     |      * by making the `nonReentrant` function external, and making it call a
  71 |     |      * `private` function that does the actual work.
  72 |     |      */
  73 |     |     modifier nonReentrant() {
  74 | *   |         _nonReentrantBefore();
  75 |     |         _;
  76 | *   |         _nonReentrantAfter();
  77 |     |     }
  78 |     | 
  79 | *   |     function _nonReentrantBefore() private {
  80 | *   |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
  81 |     |         // On the first call to nonReentrant, _status will be NOT_ENTERED
  82 | *   |         if ($._status == ENTERED) {
  83 |     |             revert ReentrancyGuardReentrantCall();
  84 |     |         }
  85 |     | 
  86 |     |         // Any calls to nonReentrant after this point will fail
  87 | *   |         $._status = ENTERED;
  88 |     |     }
  89 |     | 
  90 | *   |     function _nonReentrantAfter() private {
  91 | *   |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
  92 |     |         // By storing the original value once again, a refund is triggered (see
  93 |     |         // https://eips.ethereum.org/EIPS/eip-2200)
  94 | *   |         $._status = NOT_ENTERED;
  95 |     |     }
  96 |     | 
  97 |     |     /**
  98 |     |      * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
  99 |     |      * `nonReentrant` function in the call stack.
 100 |     |      */
 101 |     |     function _reentrancyGuardEntered() internal view returns (bool) {
 102 |     |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
 103 |     |         return $._status == ENTERED;
 104 |     |     }
 105 |     | }
 106 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/token/ERC20/IERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC20 standard as defined in the EIP.
  8 |     |  */
  9 |     | interface IERC20 {
 10 |     |     /**
 11 |     |      * @dev Emitted when `value` tokens are moved from one account (`from`) to
 12 |     |      * another (`to`).
 13 |     |      *
 14 |     |      * Note that `value` may be zero.
 15 |     |      */
 16 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Emitted when the allowance of a `spender` for an `owner` is set by
 20 |     |      * a call to {approve}. `value` is the new allowance.
 21 |     |      */
 22 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the amount of tokens in existence.
 26 |     |      */
 27 |     |     function totalSupply() external view returns (uint256);
 28 |     | 
 29 |     |     /**
 30 |     |      * @dev Returns the amount of tokens owned by `account`.
 31 |     |      */
 32 |     |     function balanceOf(address account) external view returns (uint256);
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Moves `amount` tokens from the caller's account to `to`.
 36 |     |      *
 37 |     |      * Returns a boolean value indicating whether the operation succeeded.
 38 |     |      *
 39 |     |      * Emits a {Transfer} event.
 40 |     |      */
 41 |     |     function transfer(address to, uint256 amount) external returns (bool);
 42 |     | 
 43 |     |     /**
 44 |     |      * @dev Returns the remaining number of tokens that `spender` will be
 45 |     |      * allowed to spend on behalf of `owner` through {transferFrom}. This is
 46 |     |      * zero by default.
 47 |     |      *
 48 |     |      * This value changes when {approve} or {transferFrom} are called.
 49 |     |      */
 50 |     |     function allowance(address owner, address spender) external view returns (uint256);
 51 |     | 
 52 |     |     /**
 53 |     |      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
 54 |     |      *
 55 |     |      * Returns a boolean value indicating whether the operation succeeded.
 56 |     |      *
 57 |     |      * IMPORTANT: Beware that changing an allowance with this method brings the risk
 58 |     |      * that someone may use both the old and the new allowance by unfortunate
 59 |     |      * transaction ordering. One possible solution to mitigate this race
 60 |     |      * condition is to first reduce the spender's allowance to 0 and set the
 61 |     |      * desired value afterwards:
 62 |     |      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 63 |     |      *
 64 |     |      * Emits an {Approval} event.
 65 |     |      */
 66 |     |     function approve(address spender, uint256 amount) external returns (bool);
 67 |     | 
 68 |     |     /**
 69 |     |      * @dev Moves `amount` tokens from `from` to `to` using the
 70 |     |      * allowance mechanism. `amount` is then deducted from the caller's
 71 |     |      * allowance.
 72 |     |      *
 73 |     |      * Returns a boolean value indicating whether the operation succeeded.
 74 |     |      *
 75 |     |      * Emits a {Transfer} event.
 76 |     |      */
 77 |     |     function transferFrom(address from, address to, uint256 amount) external returns (bool);
 78 |     | }
 79 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/token/ERC20/extensions/IERC20Permit.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
  8 |     |  * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
  9 |     |  *
 10 |     |  * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 11 |     |  * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 12 |     |  * need to send a transaction, and thus is not required to hold Ether at all.
 13 |     |  *
 14 |     |  * ==== Security Considerations
 15 |     |  *
 16 |     |  * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 17 |     |  * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 18 |     |  * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 19 |     |  * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 20 |     |  * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 21 |     |  * generally recommended is:
 22 |     |  *
 23 |     |  * ```solidity
 24 |     |  * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 25 |     |  *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 26 |     |  *     doThing(..., value);
 27 |     |  * }
 28 |     |  *
 29 |     |  * function doThing(..., uint256 value) public {
 30 |     |  *     token.safeTransferFrom(msg.sender, address(this), value);
 31 |     |  *     ...
 32 |     |  * }
 33 |     |  * ```
 34 |     |  *
 35 |     |  * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 36 |     |  * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 37 |     |  * {SafeERC20-safeTransferFrom}).
 38 |     |  *
 39 |     |  * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 40 |     |  * contracts should have entry points that don't rely on permit.
 41 |     |  */
 42 |     | interface IERC20Permit {
 43 |     |     /**
 44 |     |      * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
 45 |     |      * given ``owner``'s signed approval.
 46 |     |      *
 47 |     |      * IMPORTANT: The same issues {IERC20-approve} has related to transaction
 48 |     |      * ordering also apply here.
 49 |     |      *
 50 |     |      * Emits an {Approval} event.
 51 |     |      *
 52 |     |      * Requirements:
 53 |     |      *
 54 |     |      * - `spender` cannot be the zero address.
 55 |     |      * - `deadline` must be a timestamp in the future.
 56 |     |      * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
 57 |     |      * over the EIP712-formatted function arguments.
 58 |     |      * - the signature must use ``owner``'s current nonce (see {nonces}).
 59 |     |      *
 60 |     |      * For more information on the signature format, see the
 61 |     |      * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
 62 |     |      * section].
 63 |     |      *
 64 |     |      * CAUTION: See Security Considerations above.
 65 |     |      */
 66 |     |     function permit(
 67 |     |         address owner,
 68 |     |         address spender,
 69 |     |         uint256 value,
 70 |     |         uint256 deadline,
 71 |     |         uint8 v,
 72 |     |         bytes32 r,
 73 |     |         bytes32 s
 74 |     |     ) external;
 75 |     | 
 76 |     |     /**
 77 |     |      * @dev Returns the current nonce for `owner`. This value must be
 78 |     |      * included whenever a signature is generated for {permit}.
 79 |     |      *
 80 |     |      * Every successful call to {permit} increases ``owner``'s nonce by one. This
 81 |     |      * prevents a signature from being used multiple times.
 82 |     |      */
 83 |     |     function nonces(address owner) external view returns (uint256);
 84 |     | 
 85 |     |     /**
 86 |     |      * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
 87 |     |      */
 88 |     |     // solhint-disable-next-line func-name-mixedcase
 89 |     |     function DOMAIN_SEPARATOR() external view returns (bytes32);
 90 |     | }
 91 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/token/ERC721/ERC721.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.0;
   5 |     | 
   6 |     | import "./IERC721.sol";
   7 |     | import "./IERC721Receiver.sol";
   8 |     | import "./extensions/IERC721Metadata.sol";
   9 |     | import "../../utils/Address.sol";
  10 |     | import "../../utils/Context.sol";
  11 |     | import "../../utils/Strings.sol";
  12 |     | import "../../utils/introspection/ERC165.sol";
  13 |     | 
  14 |     | /**
  15 |     |  * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
  16 |     |  * the Metadata extension, but not including the Enumerable extension, which is available separately as
  17 |     |  * {ERC721Enumerable}.
  18 |     |  */
  19 |     | contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
  20 |     |     using Address for address;
  21 |     |     using Strings for uint256;
  22 |     | 
  23 |     |     // Token name
  24 |     |     string private _name;
  25 |     | 
  26 |     |     // Token symbol
  27 |     |     string private _symbol;
  28 |     | 
  29 |     |     // Mapping from token ID to owner address
  30 |     |     mapping(uint256 => address) private _owners;
  31 |     | 
  32 |     |     // Mapping owner address to token count
  33 |     |     mapping(address => uint256) private _balances;
  34 |     | 
  35 |     |     // Mapping from token ID to approved address
  36 |     |     mapping(uint256 => address) private _tokenApprovals;
  37 |     | 
  38 |     |     // Mapping from owner to operator approvals
  39 |     |     mapping(address => mapping(address => bool)) private _operatorApprovals;
  40 |     | 
  41 |     |     /**
  42 |     |      * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
  43 |     |      */
  44 |     |     constructor(string memory name_, string memory symbol_) {
  45 |     |         _name = name_;
  46 |     |         _symbol = symbol_;
  47 |     |     }
  48 |     | 
  49 |     |     /**
  50 |     |      * @dev See {IERC165-supportsInterface}.
  51 |     |      */
  52 |     |     function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
  53 |     |         return
  54 |     |             interfaceId == type(IERC721).interfaceId ||
  55 |     |             interfaceId == type(IERC721Metadata).interfaceId ||
  56 |     |             super.supportsInterface(interfaceId);
  57 |     |     }
  58 |     | 
  59 |     |     /**
  60 |     |      * @dev See {IERC721-balanceOf}.
  61 |     |      */
  62 |     |     function balanceOf(address owner) public view virtual override returns (uint256) {
  63 |     |         require(owner != address(0), "ERC721: address zero is not a valid owner");
  64 |     |         return _balances[owner];
  65 |     |     }
  66 |     | 
  67 |     |     /**
  68 |     |      * @dev See {IERC721-ownerOf}.
  69 |     |      */
  70 |     |     function ownerOf(uint256 tokenId) public view virtual override returns (address) {
  71 |     |         address owner = _ownerOf(tokenId);
  72 |     |         require(owner != address(0), "ERC721: invalid token ID");
  73 |     |         return owner;
  74 |     |     }
  75 |     | 
  76 |     |     /**
  77 |     |      * @dev See {IERC721Metadata-name}.
  78 |     |      */
  79 |     |     function name() public view virtual override returns (string memory) {
  80 |     |         return _name;
  81 |     |     }
  82 |     | 
  83 |     |     /**
  84 |     |      * @dev See {IERC721Metadata-symbol}.
  85 |     |      */
  86 |     |     function symbol() public view virtual override returns (string memory) {
  87 |     |         return _symbol;
  88 |     |     }
  89 |     | 
  90 |     |     /**
  91 |     |      * @dev See {IERC721Metadata-tokenURI}.
  92 |     |      */
  93 |     |     function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
  94 |     |         _requireMinted(tokenId);
  95 |     | 
  96 |     |         string memory baseURI = _baseURI();
  97 |     |         return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
  98 |     |     }
  99 |     | 
 100 |     |     /**
 101 |     |      * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
 102 |     |      * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
 103 |     |      * by default, can be overridden in child contracts.
 104 |     |      */
 105 |     |     function _baseURI() internal view virtual returns (string memory) {
 106 |     |         return "";
 107 |     |     }
 108 |     | 
 109 |     |     /**
 110 |     |      * @dev See {IERC721-approve}.
 111 |     |      */
 112 |     |     function approve(address to, uint256 tokenId) public virtual override {
 113 |     |         address owner = ERC721.ownerOf(tokenId);
 114 |     |         require(to != owner, "ERC721: approval to current owner");
 115 |     | 
 116 |     |         require(
 117 |     |             _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
 118 |     |             "ERC721: approve caller is not token owner or approved for all"
 119 |     |         );
 120 |     | 
 121 |     |         _approve(to, tokenId);
 122 |     |     }
 123 |     | 
 124 |     |     /**
 125 |     |      * @dev See {IERC721-getApproved}.
 126 |     |      */
 127 |     |     function getApproved(uint256 tokenId) public view virtual override returns (address) {
 128 |     |         _requireMinted(tokenId);
 129 |     | 
 130 |     |         return _tokenApprovals[tokenId];
 131 |     |     }
 132 |     | 
 133 |     |     /**
 134 |     |      * @dev See {IERC721-setApprovalForAll}.
 135 |     |      */
 136 |     |     function setApprovalForAll(address operator, bool approved) public virtual override {
 137 |     |         _setApprovalForAll(_msgSender(), operator, approved);
 138 |     |     }
 139 |     | 
 140 |     |     /**
 141 |     |      * @dev See {IERC721-isApprovedForAll}.
 142 |     |      */
 143 |     |     function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
 144 |     |         return _operatorApprovals[owner][operator];
 145 |     |     }
 146 |     | 
 147 |     |     /**
 148 |     |      * @dev See {IERC721-transferFrom}.
 149 |     |      */
 150 |     |     function transferFrom(address from, address to, uint256 tokenId) public virtual override {
 151 |     |         //solhint-disable-next-line max-line-length
 152 |     |         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner or approved");
 153 |     | 
 154 |     |         _transfer(from, to, tokenId);
 155 |     |     }
 156 |     | 
 157 |     |     /**
 158 |     |      * @dev See {IERC721-safeTransferFrom}.
 159 |     |      */
 160 |     |     function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
 161 |     |         safeTransferFrom(from, to, tokenId, "");
 162 |     |     }
 163 |     | 
 164 |     |     /**
 165 |     |      * @dev See {IERC721-safeTransferFrom}.
 166 |     |      */
 167 |     |     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {
 168 |     |         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner or approved");
 169 |     |         _safeTransfer(from, to, tokenId, data);
 170 |     |     }
 171 |     | 
 172 |     |     /**
 173 |     |      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
 174 |     |      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
 175 |     |      *
 176 |     |      * `data` is additional data, it has no specified format and it is sent in call to `to`.
 177 |     |      *
 178 |     |      * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
 179 |     |      * implement alternative mechanisms to perform token transfer, such as signature-based.
 180 |     |      *
 181 |     |      * Requirements:
 182 |     |      *
 183 |     |      * - `from` cannot be the zero address.
 184 |     |      * - `to` cannot be the zero address.
 185 |     |      * - `tokenId` token must exist and be owned by `from`.
 186 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
 187 |     |      *
 188 |     |      * Emits a {Transfer} event.
 189 |     |      */
 190 |     |     function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {
 191 |     |         _transfer(from, to, tokenId);
 192 |     |         require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
 193 |     |     }
 194 |     | 
 195 |     |     /**
 196 |     |      * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist
 197 |     |      */
 198 |     |     function _ownerOf(uint256 tokenId) internal view virtual returns (address) {
 199 |     |         return _owners[tokenId];
 200 |     |     }
 201 |     | 
 202 |     |     /**
 203 |     |      * @dev Returns whether `tokenId` exists.
 204 |     |      *
 205 |     |      * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
 206 |     |      *
 207 |     |      * Tokens start existing when they are minted (`_mint`),
 208 |     |      * and stop existing when they are burned (`_burn`).
 209 |     |      */
 210 |     |     function _exists(uint256 tokenId) internal view virtual returns (bool) {
 211 |     |         return _ownerOf(tokenId) != address(0);
 212 |     |     }
 213 |     | 
 214 |     |     /**
 215 |     |      * @dev Returns whether `spender` is allowed to manage `tokenId`.
 216 |     |      *
 217 |     |      * Requirements:
 218 |     |      *
 219 |     |      * - `tokenId` must exist.
 220 |     |      */
 221 |     |     function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
 222 |     |         address owner = ERC721.ownerOf(tokenId);
 223 |     |         return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
 224 |     |     }
 225 |     | 
 226 |     |     /**
 227 |     |      * @dev Safely mints `tokenId` and transfers it to `to`.
 228 |     |      *
 229 |     |      * Requirements:
 230 |     |      *
 231 |     |      * - `tokenId` must not exist.
 232 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
 233 |     |      *
 234 |     |      * Emits a {Transfer} event.
 235 |     |      */
 236 |     |     function _safeMint(address to, uint256 tokenId) internal virtual {
 237 |     |         _safeMint(to, tokenId, "");
 238 |     |     }
 239 |     | 
 240 |     |     /**
 241 |     |      * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
 242 |     |      * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
 243 |     |      */
 244 |     |     function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {
 245 |     |         _mint(to, tokenId);
 246 |     |         require(
 247 |     |             _checkOnERC721Received(address(0), to, tokenId, data),
 248 |     |             "ERC721: transfer to non ERC721Receiver implementer"
 249 |     |         );
 250 |     |     }
 251 |     | 
 252 |     |     /**
 253 |     |      * @dev Mints `tokenId` and transfers it to `to`.
 254 |     |      *
 255 |     |      * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
 256 |     |      *
 257 |     |      * Requirements:
 258 |     |      *
 259 |     |      * - `tokenId` must not exist.
 260 |     |      * - `to` cannot be the zero address.
 261 |     |      *
 262 |     |      * Emits a {Transfer} event.
 263 |     |      */
 264 |     |     function _mint(address to, uint256 tokenId) internal virtual {
 265 |     |         require(to != address(0), "ERC721: mint to the zero address");
 266 |     |         require(!_exists(tokenId), "ERC721: token already minted");
 267 |     | 
 268 |     |         _beforeTokenTransfer(address(0), to, tokenId, 1);
 269 |     | 
 270 |     |         // Check that tokenId was not minted by `_beforeTokenTransfer` hook
 271 |     |         require(!_exists(tokenId), "ERC721: token already minted");
 272 |     | 
 273 |     |         unchecked {
 274 |     |             // Will not overflow unless all 2**256 token ids are minted to the same owner.
 275 |     |             // Given that tokens are minted one by one, it is impossible in practice that
 276 |     |             // this ever happens. Might change if we allow batch minting.
 277 |     |             // The ERC fails to describe this case.
 278 |     |             _balances[to] += 1;
 279 |     |         }
 280 |     | 
 281 |     |         _owners[tokenId] = to;
 282 |     | 
 283 |     |         emit Transfer(address(0), to, tokenId);
 284 |     | 
 285 |     |         _afterTokenTransfer(address(0), to, tokenId, 1);
 286 |     |     }
 287 |     | 
 288 |     |     /**
 289 |     |      * @dev Destroys `tokenId`.
 290 |     |      * The approval is cleared when the token is burned.
 291 |     |      * This is an internal function that does not check if the sender is authorized to operate on the token.
 292 |     |      *
 293 |     |      * Requirements:
 294 |     |      *
 295 |     |      * - `tokenId` must exist.
 296 |     |      *
 297 |     |      * Emits a {Transfer} event.
 298 |     |      */
 299 |     |     function _burn(uint256 tokenId) internal virtual {
 300 |     |         address owner = ERC721.ownerOf(tokenId);
 301 |     | 
 302 |     |         _beforeTokenTransfer(owner, address(0), tokenId, 1);
 303 |     | 
 304 |     |         // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook
 305 |     |         owner = ERC721.ownerOf(tokenId);
 306 |     | 
 307 |     |         // Clear approvals
 308 |     |         delete _tokenApprovals[tokenId];
 309 |     | 
 310 |     |         unchecked {
 311 |     |             // Cannot overflow, as that would require more tokens to be burned/transferred
 312 |     |             // out than the owner initially received through minting and transferring in.
 313 |     |             _balances[owner] -= 1;
 314 |     |         }
 315 |     |         delete _owners[tokenId];
 316 |     | 
 317 |     |         emit Transfer(owner, address(0), tokenId);
 318 |     | 
 319 |     |         _afterTokenTransfer(owner, address(0), tokenId, 1);
 320 |     |     }
 321 |     | 
 322 |     |     /**
 323 |     |      * @dev Transfers `tokenId` from `from` to `to`.
 324 |     |      *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
 325 |     |      *
 326 |     |      * Requirements:
 327 |     |      *
 328 |     |      * - `to` cannot be the zero address.
 329 |     |      * - `tokenId` token must be owned by `from`.
 330 |     |      *
 331 |     |      * Emits a {Transfer} event.
 332 |     |      */
 333 |     |     function _transfer(address from, address to, uint256 tokenId) internal virtual {
 334 |     |         require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
 335 |     |         require(to != address(0), "ERC721: transfer to the zero address");
 336 |     | 
 337 |     |         _beforeTokenTransfer(from, to, tokenId, 1);
 338 |     | 
 339 |     |         // Check that tokenId was not transferred by `_beforeTokenTransfer` hook
 340 |     |         require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
 341 |     | 
 342 |     |         // Clear approvals from the previous owner
 343 |     |         delete _tokenApprovals[tokenId];
 344 |     | 
 345 |     |         unchecked {
 346 |     |             // `_balances[from]` cannot overflow for the same reason as described in `_burn`:
 347 |     |             // `from`'s balance is the number of token held, which is at least one before the current
 348 |     |             // transfer.
 349 |     |             // `_balances[to]` could overflow in the conditions described in `_mint`. That would require
 350 |     |             // all 2**256 token ids to be minted, which in practice is impossible.
 351 |     |             _balances[from] -= 1;
 352 |     |             _balances[to] += 1;
 353 |     |         }
 354 |     |         _owners[tokenId] = to;
 355 |     | 
 356 |     |         emit Transfer(from, to, tokenId);
 357 |     | 
 358 |     |         _afterTokenTransfer(from, to, tokenId, 1);
 359 |     |     }
 360 |     | 
 361 |     |     /**
 362 |     |      * @dev Approve `to` to operate on `tokenId`
 363 |     |      *
 364 |     |      * Emits an {Approval} event.
 365 |     |      */
 366 |     |     function _approve(address to, uint256 tokenId) internal virtual {
 367 |     |         _tokenApprovals[tokenId] = to;
 368 |     |         emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
 369 |     |     }
 370 |     | 
 371 |     |     /**
 372 |     |      * @dev Approve `operator` to operate on all of `owner` tokens
 373 |     |      *
 374 |     |      * Emits an {ApprovalForAll} event.
 375 |     |      */
 376 |     |     function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {
 377 |     |         require(owner != operator, "ERC721: approve to caller");
 378 |     |         _operatorApprovals[owner][operator] = approved;
 379 |     |         emit ApprovalForAll(owner, operator, approved);
 380 |     |     }
 381 |     | 
 382 |     |     /**
 383 |     |      * @dev Reverts if the `tokenId` has not been minted yet.
 384 |     |      */
 385 |     |     function _requireMinted(uint256 tokenId) internal view virtual {
 386 |     |         require(_exists(tokenId), "ERC721: invalid token ID");
 387 |     |     }
 388 |     | 
 389 |     |     /**
 390 |     |      * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
 391 |     |      * The call is not executed if the target address is not a contract.
 392 |     |      *
 393 |     |      * @param from address representing the previous owner of the given token ID
 394 |     |      * @param to target address that will receive the tokens
 395 |     |      * @param tokenId uint256 ID of the token to be transferred
 396 |     |      * @param data bytes optional data to send along with the call
 397 |     |      * @return bool whether the call correctly returned the expected magic value
 398 |     |      */
 399 |     |     function _checkOnERC721Received(
 400 |     |         address from,
 401 |     |         address to,
 402 |     |         uint256 tokenId,
 403 |     |         bytes memory data
 404 |     |     ) private returns (bool) {
 405 |     |         if (to.isContract()) {
 406 |     |             try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
 407 |     |                 return retval == IERC721Receiver.onERC721Received.selector;
 408 |     |             } catch (bytes memory reason) {
 409 |     |                 if (reason.length == 0) {
 410 |     |                     revert("ERC721: transfer to non ERC721Receiver implementer");
 411 |     |                 } else {
 412 |     |                     /// @solidity memory-safe-assembly
 413 |     |                     assembly {
 414 |     |                         revert(add(32, reason), mload(reason))
 415 |     |                     }
 416 |     |                 }
 417 |     |             }
 418 |     |         } else {
 419 |     |             return true;
 420 |     |         }
 421 |     |     }
 422 |     | 
 423 |     |     /**
 424 |     |      * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is
 425 |     |      * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.
 426 |     |      *
 427 |     |      * Calling conditions:
 428 |     |      *
 429 |     |      * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.
 430 |     |      * - When `from` is zero, the tokens will be minted for `to`.
 431 |     |      * - When `to` is zero, ``from``'s tokens will be burned.
 432 |     |      * - `from` and `to` are never both zero.
 433 |     |      * - `batchSize` is non-zero.
 434 |     |      *
 435 |     |      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
 436 |     |      */
 437 |     |     function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}
 438 |     | 
 439 |     |     /**
 440 |     |      * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is
 441 |     |      * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.
 442 |     |      *
 443 |     |      * Calling conditions:
 444 |     |      *
 445 |     |      * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.
 446 |     |      * - When `from` is zero, the tokens were minted for `to`.
 447 |     |      * - When `to` is zero, ``from``'s tokens were burned.
 448 |     |      * - `from` and `to` are never both zero.
 449 |     |      * - `batchSize` is non-zero.
 450 |     |      *
 451 |     |      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
 452 |     |      */
 453 |     |     function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}
 454 |     | 
 455 |     |     /**
 456 |     |      * @dev Unsafe write access to the balances, used by extensions that "mint" tokens using an {ownerOf} override.
 457 |     |      *
 458 |     |      * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant
 459 |     |      * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such
 460 |     |      * that `ownerOf(tokenId)` is `a`.
 461 |     |      */
 462 |     |     // solhint-disable-next-line func-name-mixedcase
 463 |     |     function __unsafe_increaseBalance(address account, uint256 amount) internal {
 464 |     |         _balances[account] += amount;
 465 |     |     }
 466 |     | }
 467 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/token/ERC721/IERC721.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.0;
   5 |     | 
   6 |     | import "../../utils/introspection/IERC165.sol";
   7 |     | 
   8 |     | /**
   9 |     |  * @dev Required interface of an ERC721 compliant contract.
  10 |     |  */
  11 |     | interface IERC721 is IERC165 {
  12 |     |     /**
  13 |     |      * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
  14 |     |      */
  15 |     |     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
  16 |     | 
  17 |     |     /**
  18 |     |      * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
  19 |     |      */
  20 |     |     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
  21 |     | 
  22 |     |     /**
  23 |     |      * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
  24 |     |      */
  25 |     |     event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
  26 |     | 
  27 |     |     /**
  28 |     |      * @dev Returns the number of tokens in ``owner``'s account.
  29 |     |      */
  30 |     |     function balanceOf(address owner) external view returns (uint256 balance);
  31 |     | 
  32 |     |     /**
  33 |     |      * @dev Returns the owner of the `tokenId` token.
  34 |     |      *
  35 |     |      * Requirements:
  36 |     |      *
  37 |     |      * - `tokenId` must exist.
  38 |     |      */
  39 |     |     function ownerOf(uint256 tokenId) external view returns (address owner);
  40 |     | 
  41 |     |     /**
  42 |     |      * @dev Safely transfers `tokenId` token from `from` to `to`.
  43 |     |      *
  44 |     |      * Requirements:
  45 |     |      *
  46 |     |      * - `from` cannot be the zero address.
  47 |     |      * - `to` cannot be the zero address.
  48 |     |      * - `tokenId` token must exist and be owned by `from`.
  49 |     |      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
  50 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
  51 |     |      *
  52 |     |      * Emits a {Transfer} event.
  53 |     |      */
  54 |     |     function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
  55 |     | 
  56 |     |     /**
  57 |     |      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
  58 |     |      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
  59 |     |      *
  60 |     |      * Requirements:
  61 |     |      *
  62 |     |      * - `from` cannot be the zero address.
  63 |     |      * - `to` cannot be the zero address.
  64 |     |      * - `tokenId` token must exist and be owned by `from`.
  65 |     |      * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
  66 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
  67 |     |      *
  68 |     |      * Emits a {Transfer} event.
  69 |     |      */
  70 |     |     function safeTransferFrom(address from, address to, uint256 tokenId) external;
  71 |     | 
  72 |     |     /**
  73 |     |      * @dev Transfers `tokenId` token from `from` to `to`.
  74 |     |      *
  75 |     |      * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
  76 |     |      * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
  77 |     |      * understand this adds an external call which potentially creates a reentrancy vulnerability.
  78 |     |      *
  79 |     |      * Requirements:
  80 |     |      *
  81 |     |      * - `from` cannot be the zero address.
  82 |     |      * - `to` cannot be the zero address.
  83 |     |      * - `tokenId` token must be owned by `from`.
  84 |     |      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
  85 |     |      *
  86 |     |      * Emits a {Transfer} event.
  87 |     |      */
  88 |     |     function transferFrom(address from, address to, uint256 tokenId) external;
  89 |     | 
  90 |     |     /**
  91 |     |      * @dev Gives permission to `to` to transfer `tokenId` token to another account.
  92 |     |      * The approval is cleared when the token is transferred.
  93 |     |      *
  94 |     |      * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
  95 |     |      *
  96 |     |      * Requirements:
  97 |     |      *
  98 |     |      * - The caller must own the token or be an approved operator.
  99 |     |      * - `tokenId` must exist.
 100 |     |      *
 101 |     |      * Emits an {Approval} event.
 102 |     |      */
 103 |     |     function approve(address to, uint256 tokenId) external;
 104 |     | 
 105 |     |     /**
 106 |     |      * @dev Approve or remove `operator` as an operator for the caller.
 107 |     |      * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
 108 |     |      *
 109 |     |      * Requirements:
 110 |     |      *
 111 |     |      * - The `operator` cannot be the caller.
 112 |     |      *
 113 |     |      * Emits an {ApprovalForAll} event.
 114 |     |      */
 115 |     |     function setApprovalForAll(address operator, bool approved) external;
 116 |     | 
 117 |     |     /**
 118 |     |      * @dev Returns the account approved for `tokenId` token.
 119 |     |      *
 120 |     |      * Requirements:
 121 |     |      *
 122 |     |      * - `tokenId` must exist.
 123 |     |      */
 124 |     |     function getApproved(uint256 tokenId) external view returns (address operator);
 125 |     | 
 126 |     |     /**
 127 |     |      * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
 128 |     |      *
 129 |     |      * See {setApprovalForAll}
 130 |     |      */
 131 |     |     function isApprovedForAll(address owner, address operator) external view returns (bool);
 132 |     | }
 133 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/token/ERC721/IERC721Receiver.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @title ERC721 token receiver interface
  8 |     |  * @dev Interface for any contract that wants to support safeTransfers
  9 |     |  * from ERC721 asset contracts.
 10 |     |  */
 11 |     | interface IERC721Receiver {
 12 |     |     /**
 13 |     |      * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
 14 |     |      * by `operator` from `from`, this function is called.
 15 |     |      *
 16 |     |      * It must return its Solidity selector to confirm the token transfer.
 17 |     |      * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
 18 |     |      *
 19 |     |      * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
 20 |     |      */
 21 |     |     function onERC721Received(
 22 |     |         address operator,
 23 |     |         address from,
 24 |     |         uint256 tokenId,
 25 |     |         bytes calldata data
 26 |     |     ) external returns (bytes4);
 27 |     | }
 28 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/token/ERC721/extensions/ERC721Enumerable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.0;
   5 |     | 
   6 |     | import "../ERC721.sol";
   7 |     | import "./IERC721Enumerable.sol";
   8 |     | 
   9 |     | /**
  10 |     |  * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
  11 |     |  * enumerability of all the token ids in the contract as well as all token ids owned by each
  12 |     |  * account.
  13 |     |  */
  14 |     | abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
  15 |     |     // Mapping from owner to list of owned token IDs
  16 |     |     mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
  17 |     | 
  18 |     |     // Mapping from token ID to index of the owner tokens list
  19 |     |     mapping(uint256 => uint256) private _ownedTokensIndex;
  20 |     | 
  21 |     |     // Array with all token ids, used for enumeration
  22 |     |     uint256[] private _allTokens;
  23 |     | 
  24 |     |     // Mapping from token id to position in the allTokens array
  25 |     |     mapping(uint256 => uint256) private _allTokensIndex;
  26 |     | 
  27 |     |     /**
  28 |     |      * @dev See {IERC165-supportsInterface}.
  29 |     |      */
  30 | *   |     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
  31 |     |         return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
  32 |     |     }
  33 |     | 
  34 |     |     /**
  35 |     |      * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
  36 |     |      */
  37 |     |     function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
  38 |     |         require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
  39 |     |         return _ownedTokens[owner][index];
  40 |     |     }
  41 |     | 
  42 |     |     /**
  43 |     |      * @dev See {IERC721Enumerable-totalSupply}.
  44 |     |      */
  45 |     |     function totalSupply() public view virtual override returns (uint256) {
  46 |     |         return _allTokens.length;
  47 |     |     }
  48 |     | 
  49 |     |     /**
  50 |     |      * @dev See {IERC721Enumerable-tokenByIndex}.
  51 |     |      */
  52 |     |     function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
  53 |     |         require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
  54 |     |         return _allTokens[index];
  55 |     |     }
  56 |     | 
  57 |     |     /**
  58 |     |      * @dev See {ERC721-_beforeTokenTransfer}.
  59 |     |      */
  60 |     |     function _beforeTokenTransfer(
  61 |     |         address from,
  62 |     |         address to,
  63 |     |         uint256 firstTokenId,
  64 |     |         uint256 batchSize
  65 |     |     ) internal virtual override {
  66 |     |         super._beforeTokenTransfer(from, to, firstTokenId, batchSize);
  67 |     | 
  68 |     |         if (batchSize > 1) {
  69 |     |             // Will only trigger during construction. Batch transferring (minting) is not available afterwards.
  70 |     |             revert("ERC721Enumerable: consecutive transfers not supported");
  71 |     |         }
  72 |     | 
  73 |     |         uint256 tokenId = firstTokenId;
  74 |     | 
  75 |     |         if (from == address(0)) {
  76 |     |             _addTokenToAllTokensEnumeration(tokenId);
  77 |     |         } else if (from != to) {
  78 |     |             _removeTokenFromOwnerEnumeration(from, tokenId);
  79 |     |         }
  80 |     |         if (to == address(0)) {
  81 |     |             _removeTokenFromAllTokensEnumeration(tokenId);
  82 |     |         } else if (to != from) {
  83 |     |             _addTokenToOwnerEnumeration(to, tokenId);
  84 |     |         }
  85 |     |     }
  86 |     | 
  87 |     |     /**
  88 |     |      * @dev Private function to add a token to this extension's ownership-tracking data structures.
  89 |     |      * @param to address representing the new owner of the given token ID
  90 |     |      * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
  91 |     |      */
  92 |     |     function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
  93 |     |         uint256 length = ERC721.balanceOf(to);
  94 |     |         _ownedTokens[to][length] = tokenId;
  95 |     |         _ownedTokensIndex[tokenId] = length;
  96 |     |     }
  97 |     | 
  98 |     |     /**
  99 |     |      * @dev Private function to add a token to this extension's token tracking data structures.
 100 |     |      * @param tokenId uint256 ID of the token to be added to the tokens list
 101 |     |      */
 102 |     |     function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
 103 |     |         _allTokensIndex[tokenId] = _allTokens.length;
 104 |     |         _allTokens.push(tokenId);
 105 |     |     }
 106 |     | 
 107 |     |     /**
 108 |     |      * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
 109 |     |      * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
 110 |     |      * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
 111 |     |      * This has O(1) time complexity, but alters the order of the _ownedTokens array.
 112 |     |      * @param from address representing the previous owner of the given token ID
 113 |     |      * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
 114 |     |      */
 115 |     |     function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
 116 |     |         // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
 117 |     |         // then delete the last slot (swap and pop).
 118 |     | 
 119 |     |         uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
 120 |     |         uint256 tokenIndex = _ownedTokensIndex[tokenId];
 121 |     | 
 122 |     |         // When the token to delete is the last token, the swap operation is unnecessary
 123 |     |         if (tokenIndex != lastTokenIndex) {
 124 |     |             uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
 125 |     | 
 126 |     |             _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
 127 |     |             _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
 128 |     |         }
 129 |     | 
 130 |     |         // This also deletes the contents at the last position of the array
 131 |     |         delete _ownedTokensIndex[tokenId];
 132 |     |         delete _ownedTokens[from][lastTokenIndex];
 133 |     |     }
 134 |     | 
 135 |     |     /**
 136 |     |      * @dev Private function to remove a token from this extension's token tracking data structures.
 137 |     |      * This has O(1) time complexity, but alters the order of the _allTokens array.
 138 |     |      * @param tokenId uint256 ID of the token to be removed from the tokens list
 139 |     |      */
 140 |     |     function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
 141 |     |         // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
 142 |     |         // then delete the last slot (swap and pop).
 143 |     | 
 144 |     |         uint256 lastTokenIndex = _allTokens.length - 1;
 145 |     |         uint256 tokenIndex = _allTokensIndex[tokenId];
 146 |     | 
 147 |     |         // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
 148 |     |         // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
 149 |     |         // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
 150 |     |         uint256 lastTokenId = _allTokens[lastTokenIndex];
 151 |     | 
 152 |     |         _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
 153 |     |         _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
 154 |     | 
 155 |     |         // This also deletes the contents at the last position of the array
 156 |     |         delete _allTokensIndex[tokenId];
 157 |     |         _allTokens.pop();
 158 |     |     }
 159 |     | }
 160 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/token/ERC721/extensions/IERC721Enumerable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | import "../IERC721.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 10 |     |  * @dev See https://eips.ethereum.org/EIPS/eip-721
 11 |     |  */
 12 |     | interface IERC721Enumerable is IERC721 {
 13 |     |     /**
 14 |     |      * @dev Returns the total amount of tokens stored by the contract.
 15 |     |      */
 16 |     |     function totalSupply() external view returns (uint256);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
 20 |     |      * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
 21 |     |      */
 22 |     |     function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
 26 |     |      * Use along with {totalSupply} to enumerate all tokens.
 27 |     |      */
 28 |     |     function tokenByIndex(uint256 index) external view returns (uint256);
 29 |     | }
 30 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/token/ERC721/extensions/IERC721Metadata.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | import "../IERC721.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 10 |     |  * @dev See https://eips.ethereum.org/EIPS/eip-721
 11 |     |  */
 12 |     | interface IERC721Metadata is IERC721 {
 13 |     |     /**
 14 |     |      * @dev Returns the token collection name.
 15 |     |      */
 16 |     |     function name() external view returns (string memory);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Returns the token collection symbol.
 20 |     |      */
 21 |     |     function symbol() external view returns (string memory);
 22 |     | 
 23 |     |     /**
 24 |     |      * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
 25 |     |      */
 26 |     |     function tokenURI(uint256 tokenId) external view returns (string memory);
 27 |     | }
 28 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/utils/Address.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.1;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev Collection of functions related to the address type
   8 |     |  */
   9 |     | library Address {
  10 |     |     /**
  11 |     |      * @dev Returns true if `account` is a contract.
  12 |     |      *
  13 |     |      * [IMPORTANT]
  14 |     |      * ====
  15 |     |      * It is unsafe to assume that an address for which this function returns
  16 |     |      * false is an externally-owned account (EOA) and not a contract.
  17 |     |      *
  18 |     |      * Among others, `isContract` will return false for the following
  19 |     |      * types of addresses:
  20 |     |      *
  21 |     |      *  - an externally-owned account
  22 |     |      *  - a contract in construction
  23 |     |      *  - an address where a contract will be created
  24 |     |      *  - an address where a contract lived, but was destroyed
  25 |     |      *
  26 |     |      * Furthermore, `isContract` will also return true if the target contract within
  27 |     |      * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
  28 |     |      * which only has an effect at the end of a transaction.
  29 |     |      * ====
  30 |     |      *
  31 |     |      * [IMPORTANT]
  32 |     |      * ====
  33 |     |      * You shouldn't rely on `isContract` to protect against flash loan attacks!
  34 |     |      *
  35 |     |      * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
  36 |     |      * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
  37 |     |      * constructor.
  38 |     |      * ====
  39 |     |      */
  40 |     |     function isContract(address account) internal view returns (bool) {
  41 |     |         // This method relies on extcodesize/address.code.length, which returns 0
  42 |     |         // for contracts in construction, since the code is only stored at the end
  43 |     |         // of the constructor execution.
  44 |     | 
  45 |     |         return account.code.length > 0;
  46 |     |     }
  47 |     | 
  48 |     |     /**
  49 |     |      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
  50 |     |      * `recipient`, forwarding all available gas and reverting on errors.
  51 |     |      *
  52 |     |      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
  53 |     |      * of certain opcodes, possibly making contracts go over the 2300 gas limit
  54 |     |      * imposed by `transfer`, making them unable to receive funds via
  55 |     |      * `transfer`. {sendValue} removes this limitation.
  56 |     |      *
  57 |     |      * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
  58 |     |      *
  59 |     |      * IMPORTANT: because control is transferred to `recipient`, care must be
  60 |     |      * taken to not create reentrancy vulnerabilities. Consider using
  61 |     |      * {ReentrancyGuard} or the
  62 |     |      * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
  63 |     |      */
  64 |     |     function sendValue(address payable recipient, uint256 amount) internal {
  65 |     |         require(address(this).balance >= amount, "Address: insufficient balance");
  66 |     | 
  67 |     |         (bool success, ) = recipient.call{value: amount}("");
  68 |     |         require(success, "Address: unable to send value, recipient may have reverted");
  69 |     |     }
  70 |     | 
  71 |     |     /**
  72 |     |      * @dev Performs a Solidity function call using a low level `call`. A
  73 |     |      * plain `call` is an unsafe replacement for a function call: use this
  74 |     |      * function instead.
  75 |     |      *
  76 |     |      * If `target` reverts with a revert reason, it is bubbled up by this
  77 |     |      * function (like regular Solidity function calls).
  78 |     |      *
  79 |     |      * Returns the raw returned data. To convert to the expected return value,
  80 |     |      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
  81 |     |      *
  82 |     |      * Requirements:
  83 |     |      *
  84 |     |      * - `target` must be a contract.
  85 |     |      * - calling `target` with `data` must not revert.
  86 |     |      *
  87 |     |      * _Available since v3.1._
  88 |     |      */
  89 |     |     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
  90 |     |         return functionCallWithValue(target, data, 0, "Address: low-level call failed");
  91 |     |     }
  92 |     | 
  93 |     |     /**
  94 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
  95 |     |      * `errorMessage` as a fallback revert reason when `target` reverts.
  96 |     |      *
  97 |     |      * _Available since v3.1._
  98 |     |      */
  99 |     |     function functionCall(
 100 |     |         address target,
 101 |     |         bytes memory data,
 102 |     |         string memory errorMessage
 103 |     |     ) internal returns (bytes memory) {
 104 |     |         return functionCallWithValue(target, data, 0, errorMessage);
 105 |     |     }
 106 |     | 
 107 |     |     /**
 108 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
 109 |     |      * but also transferring `value` wei to `target`.
 110 |     |      *
 111 |     |      * Requirements:
 112 |     |      *
 113 |     |      * - the calling contract must have an ETH balance of at least `value`.
 114 |     |      * - the called Solidity function must be `payable`.
 115 |     |      *
 116 |     |      * _Available since v3.1._
 117 |     |      */
 118 |     |     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
 119 |     |         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
 120 |     |     }
 121 |     | 
 122 |     |     /**
 123 |     |      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
 124 |     |      * with `errorMessage` as a fallback revert reason when `target` reverts.
 125 |     |      *
 126 |     |      * _Available since v3.1._
 127 |     |      */
 128 |     |     function functionCallWithValue(
 129 |     |         address target,
 130 |     |         bytes memory data,
 131 |     |         uint256 value,
 132 |     |         string memory errorMessage
 133 |     |     ) internal returns (bytes memory) {
 134 |     |         require(address(this).balance >= value, "Address: insufficient balance for call");
 135 |     |         (bool success, bytes memory returndata) = target.call{value: value}(data);
 136 |     |         return verifyCallResultFromTarget(target, success, returndata, errorMessage);
 137 |     |     }
 138 |     | 
 139 |     |     /**
 140 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
 141 |     |      * but performing a static call.
 142 |     |      *
 143 |     |      * _Available since v3.3._
 144 |     |      */
 145 |     |     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
 146 |     |         return functionStaticCall(target, data, "Address: low-level static call failed");
 147 |     |     }
 148 |     | 
 149 |     |     /**
 150 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
 151 |     |      * but performing a static call.
 152 |     |      *
 153 |     |      * _Available since v3.3._
 154 |     |      */
 155 |     |     function functionStaticCall(
 156 |     |         address target,
 157 |     |         bytes memory data,
 158 |     |         string memory errorMessage
 159 |     |     ) internal view returns (bytes memory) {
 160 |     |         (bool success, bytes memory returndata) = target.staticcall(data);
 161 |     |         return verifyCallResultFromTarget(target, success, returndata, errorMessage);
 162 |     |     }
 163 |     | 
 164 |     |     /**
 165 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
 166 |     |      * but performing a delegate call.
 167 |     |      *
 168 |     |      * _Available since v3.4._
 169 |     |      */
 170 |     |     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
 171 |     |         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
 172 |     |     }
 173 |     | 
 174 |     |     /**
 175 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
 176 |     |      * but performing a delegate call.
 177 |     |      *
 178 |     |      * _Available since v3.4._
 179 |     |      */
 180 |     |     function functionDelegateCall(
 181 |     |         address target,
 182 |     |         bytes memory data,
 183 |     |         string memory errorMessage
 184 |     |     ) internal returns (bytes memory) {
 185 |     |         (bool success, bytes memory returndata) = target.delegatecall(data);
 186 |     |         return verifyCallResultFromTarget(target, success, returndata, errorMessage);
 187 |     |     }
 188 |     | 
 189 |     |     /**
 190 |     |      * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
 191 |     |      * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
 192 |     |      *
 193 |     |      * _Available since v4.8._
 194 |     |      */
 195 |     |     function verifyCallResultFromTarget(
 196 |     |         address target,
 197 |     |         bool success,
 198 |     |         bytes memory returndata,
 199 |     |         string memory errorMessage
 200 |     |     ) internal view returns (bytes memory) {
 201 |     |         if (success) {
 202 |     |             if (returndata.length == 0) {
 203 |     |                 // only check isContract if the call was successful and the return data is empty
 204 |     |                 // otherwise we already know that it was a contract
 205 |     |                 require(isContract(target), "Address: call to non-contract");
 206 |     |             }
 207 |     |             return returndata;
 208 |     |         } else {
 209 |     |             _revert(returndata, errorMessage);
 210 |     |         }
 211 |     |     }
 212 |     | 
 213 |     |     /**
 214 |     |      * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
 215 |     |      * revert reason or using the provided one.
 216 |     |      *
 217 |     |      * _Available since v4.3._
 218 |     |      */
 219 |     |     function verifyCallResult(
 220 |     |         bool success,
 221 |     |         bytes memory returndata,
 222 |     |         string memory errorMessage
 223 |     |     ) internal pure returns (bytes memory) {
 224 |     |         if (success) {
 225 |     |             return returndata;
 226 |     |         } else {
 227 |     |             _revert(returndata, errorMessage);
 228 |     |         }
 229 |     |     }
 230 |     | 
 231 |     |     function _revert(bytes memory returndata, string memory errorMessage) private pure {
 232 |     |         // Look for revert reason and bubble it up if present
 233 |     |         if (returndata.length > 0) {
 234 |     |             // The easiest way to bubble the revert reason is using memory via assembly
 235 |     |             /// @solidity memory-safe-assembly
 236 |     |             assembly {
 237 |     |                 let returndata_size := mload(returndata)
 238 |     |                 revert(add(32, returndata), returndata_size)
 239 |     |             }
 240 |     |         } else {
 241 |     |             revert(errorMessage);
 242 |     |         }
 243 |     |     }
 244 |     | }
 245 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/utils/Context.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Provides information about the current execution context, including the
  8 |     |  * sender of the transaction and its data. While these are generally available
  9 |     |  * via msg.sender and msg.data, they should not be accessed in such a direct
 10 |     |  * manner, since when dealing with meta-transactions the account sending and
 11 |     |  * paying for execution may not be the actual sender (as far as an application
 12 |     |  * is concerned).
 13 |     |  *
 14 |     |  * This contract is only required for intermediate, library-like contracts.
 15 |     |  */
 16 |     | abstract contract Context {
 17 |     |     function _msgSender() internal view virtual returns (address) {
 18 |     |         return msg.sender;
 19 |     |     }
 20 |     | 
 21 |     |     function _msgData() internal view virtual returns (bytes calldata) {
 22 |     |         return msg.data;
 23 |     |     }
 24 |     | 
 25 |     |     function _contextSuffixLength() internal view virtual returns (uint256) {
 26 |     |         return 0;
 27 |     |     }
 28 |     | }
 29 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/utils/Strings.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | import "./math/Math.sol";
  7 |     | import "./math/SignedMath.sol";
  8 |     | 
  9 |     | /**
 10 |     |  * @dev String operations.
 11 |     |  */
 12 |     | library Strings {
 13 |     |     bytes16 private constant _SYMBOLS = "0123456789abcdef";
 14 |     |     uint8 private constant _ADDRESS_LENGTH = 20;
 15 |     | 
 16 |     |     /**
 17 |     |      * @dev Converts a `uint256` to its ASCII `string` decimal representation.
 18 |     |      */
 19 |     |     function toString(uint256 value) internal pure returns (string memory) {
 20 |     |         unchecked {
 21 |     |             uint256 length = Math.log10(value) + 1;
 22 |     |             string memory buffer = new string(length);
 23 |     |             uint256 ptr;
 24 |     |             /// @solidity memory-safe-assembly
 25 |     |             assembly {
 26 |     |                 ptr := add(buffer, add(32, length))
 27 |     |             }
 28 |     |             while (true) {
 29 |     |                 ptr--;
 30 |     |                 /// @solidity memory-safe-assembly
 31 |     |                 assembly {
 32 |     |                     mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
 33 |     |                 }
 34 |     |                 value /= 10;
 35 |     |                 if (value == 0) break;
 36 |     |             }
 37 |     |             return buffer;
 38 |     |         }
 39 |     |     }
 40 |     | 
 41 |     |     /**
 42 |     |      * @dev Converts a `int256` to its ASCII `string` decimal representation.
 43 |     |      */
 44 |     |     function toString(int256 value) internal pure returns (string memory) {
 45 |     |         return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));
 46 |     |     }
 47 |     | 
 48 |     |     /**
 49 |     |      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
 50 |     |      */
 51 |     |     function toHexString(uint256 value) internal pure returns (string memory) {
 52 |     |         unchecked {
 53 |     |             return toHexString(value, Math.log256(value) + 1);
 54 |     |         }
 55 |     |     }
 56 |     | 
 57 |     |     /**
 58 |     |      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
 59 |     |      */
 60 |     |     function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
 61 |     |         bytes memory buffer = new bytes(2 * length + 2);
 62 |     |         buffer[0] = "0";
 63 |     |         buffer[1] = "x";
 64 |     |         for (uint256 i = 2 * length + 1; i > 1; --i) {
 65 |     |             buffer[i] = _SYMBOLS[value & 0xf];
 66 |     |             value >>= 4;
 67 |     |         }
 68 |     |         require(value == 0, "Strings: hex length insufficient");
 69 |     |         return string(buffer);
 70 |     |     }
 71 |     | 
 72 |     |     /**
 73 |     |      * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
 74 |     |      */
 75 |     |     function toHexString(address addr) internal pure returns (string memory) {
 76 |     |         return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
 77 |     |     }
 78 |     | 
 79 |     |     /**
 80 |     |      * @dev Returns true if the two strings are equal.
 81 |     |      */
 82 |     |     function equal(string memory a, string memory b) internal pure returns (bool) {
 83 |     |         return keccak256(bytes(a)) == keccak256(bytes(b));
 84 |     |     }
 85 |     | }
 86 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/utils/introspection/ERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | import "./IERC165.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Implementation of the {IERC165} interface.
 10 |     |  *
 11 |     |  * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 12 |     |  * for the additional interface id that will be supported. For example:
 13 |     |  *
 14 |     |  * ```solidity
 15 |     |  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 16 |     |  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 17 |     |  * }
 18 |     |  * ```
 19 |     |  *
 20 |     |  * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 21 |     |  */
 22 |     | abstract contract ERC165 is IERC165 {
 23 |     |     /**
 24 |     |      * @dev See {IERC165-supportsInterface}.
 25 |     |      */
 26 |     |     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 27 |     |         return interfaceId == type(IERC165).interfaceId;
 28 |     |     }
 29 |     | }
 30 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/utils/introspection/IERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC165 standard, as defined in the
  8 |     |  * https://eips.ethereum.org/EIPS/eip-165[EIP].
  9 |     |  *
 10 |     |  * Implementers can declare support of contract interfaces, which can then be
 11 |     |  * queried by others ({ERC165Checker}).
 12 |     |  *
 13 |     |  * For an implementation, see {ERC165}.
 14 |     |  */
 15 |     | interface IERC165 {
 16 |     |     /**
 17 |     |      * @dev Returns true if this contract implements the interface defined by
 18 |     |      * `interfaceId`. See the corresponding
 19 |     |      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
 20 |     |      * to learn more about how these ids are created.
 21 |     |      *
 22 |     |      * This function call must use less than 30 000 gas.
 23 |     |      */
 24 |     |     function supportsInterface(bytes4 interfaceId) external view returns (bool);
 25 |     | }
 26 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/utils/math/Math.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.0;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev Standard math utilities missing in the Solidity language.
   8 |     |  */
   9 |     | library Math {
  10 |     |     enum Rounding {
  11 |     |         Down, // Toward negative infinity
  12 |     |         Up, // Toward infinity
  13 |     |         Zero // Toward zero
  14 |     |     }
  15 |     | 
  16 |     |     /**
  17 |     |      * @dev Returns the largest of two numbers.
  18 |     |      */
  19 |     |     function max(uint256 a, uint256 b) internal pure returns (uint256) {
  20 |     |         return a > b ? a : b;
  21 |     |     }
  22 |     | 
  23 |     |     /**
  24 |     |      * @dev Returns the smallest of two numbers.
  25 |     |      */
  26 |     |     function min(uint256 a, uint256 b) internal pure returns (uint256) {
  27 |     |         return a < b ? a : b;
  28 |     |     }
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev Returns the average of two numbers. The result is rounded towards
  32 |     |      * zero.
  33 |     |      */
  34 |     |     function average(uint256 a, uint256 b) internal pure returns (uint256) {
  35 |     |         // (a + b) / 2 can overflow.
  36 |     |         return (a & b) + (a ^ b) / 2;
  37 |     |     }
  38 |     | 
  39 |     |     /**
  40 |     |      * @dev Returns the ceiling of the division of two numbers.
  41 |     |      *
  42 |     |      * This differs from standard division with `/` in that it rounds up instead
  43 |     |      * of rounding down.
  44 |     |      */
  45 |     |     function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
  46 |     |         // (a + b - 1) / b can overflow on addition, so we distribute.
  47 |     |         return a == 0 ? 0 : (a - 1) / b + 1;
  48 |     |     }
  49 |     | 
  50 |     |     /**
  51 |     |      * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
  52 |     |      * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
  53 |     |      * with further edits by Uniswap Labs also under MIT license.
  54 |     |      */
  55 |     |     function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
  56 |     |         unchecked {
  57 |     |             // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
  58 |     |             // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
  59 |     |             // variables such that product = prod1 * 2^256 + prod0.
  60 |     |             uint256 prod0; // Least significant 256 bits of the product
  61 |     |             uint256 prod1; // Most significant 256 bits of the product
  62 |     |             assembly {
  63 |     |                 let mm := mulmod(x, y, not(0))
  64 |     |                 prod0 := mul(x, y)
  65 |     |                 prod1 := sub(sub(mm, prod0), lt(mm, prod0))
  66 |     |             }
  67 |     | 
  68 |     |             // Handle non-overflow cases, 256 by 256 division.
  69 |     |             if (prod1 == 0) {
  70 |     |                 // Solidity will revert if denominator == 0, unlike the div opcode on its own.
  71 |     |                 // The surrounding unchecked block does not change this fact.
  72 |     |                 // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
  73 |     |                 return prod0 / denominator;
  74 |     |             }
  75 |     | 
  76 |     |             // Make sure the result is less than 2^256. Also prevents denominator == 0.
  77 |     |             require(denominator > prod1, "Math: mulDiv overflow");
  78 |     | 
  79 |     |             ///////////////////////////////////////////////
  80 |     |             // 512 by 256 division.
  81 |     |             ///////////////////////////////////////////////
  82 |     | 
  83 |     |             // Make division exact by subtracting the remainder from [prod1 prod0].
  84 |     |             uint256 remainder;
  85 |     |             assembly {
  86 |     |                 // Compute remainder using mulmod.
  87 |     |                 remainder := mulmod(x, y, denominator)
  88 |     | 
  89 |     |                 // Subtract 256 bit number from 512 bit number.
  90 |     |                 prod1 := sub(prod1, gt(remainder, prod0))
  91 |     |                 prod0 := sub(prod0, remainder)
  92 |     |             }
  93 |     | 
  94 |     |             // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
  95 |     |             // See https://cs.stackexchange.com/q/138556/92363.
  96 |     | 
  97 |     |             // Does not overflow because the denominator cannot be zero at this stage in the function.
  98 |     |             uint256 twos = denominator & (~denominator + 1);
  99 |     |             assembly {
 100 |     |                 // Divide denominator by twos.
 101 |     |                 denominator := div(denominator, twos)
 102 |     | 
 103 |     |                 // Divide [prod1 prod0] by twos.
 104 |     |                 prod0 := div(prod0, twos)
 105 |     | 
 106 |     |                 // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
 107 |     |                 twos := add(div(sub(0, twos), twos), 1)
 108 |     |             }
 109 |     | 
 110 |     |             // Shift in bits from prod1 into prod0.
 111 |     |             prod0 |= prod1 * twos;
 112 |     | 
 113 |     |             // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
 114 |     |             // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
 115 |     |             // four bits. That is, denominator * inv = 1 mod 2^4.
 116 |     |             uint256 inverse = (3 * denominator) ^ 2;
 117 |     | 
 118 |     |             // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
 119 |     |             // in modular arithmetic, doubling the correct bits in each step.
 120 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^8
 121 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^16
 122 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^32
 123 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^64
 124 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^128
 125 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^256
 126 |     | 
 127 |     |             // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
 128 |     |             // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
 129 |     |             // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
 130 |     |             // is no longer required.
 131 |     |             result = prod0 * inverse;
 132 |     |             return result;
 133 |     |         }
 134 |     |     }
 135 |     | 
 136 |     |     /**
 137 |     |      * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
 138 |     |      */
 139 |     |     function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
 140 |     |         uint256 result = mulDiv(x, y, denominator);
 141 |     |         if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
 142 |     |             result += 1;
 143 |     |         }
 144 |     |         return result;
 145 |     |     }
 146 |     | 
 147 |     |     /**
 148 |     |      * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
 149 |     |      *
 150 |     |      * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
 151 |     |      */
 152 |     |     function sqrt(uint256 a) internal pure returns (uint256) {
 153 |     |         if (a == 0) {
 154 |     |             return 0;
 155 |     |         }
 156 |     | 
 157 |     |         // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
 158 |     |         //
 159 |     |         // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
 160 |     |         // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
 161 |     |         //
 162 |     |         // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
 163 |     |         // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
 164 |     |         // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
 165 |     |         //
 166 |     |         // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
 167 |     |         uint256 result = 1 << (log2(a) >> 1);
 168 |     | 
 169 |     |         // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
 170 |     |         // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
 171 |     |         // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
 172 |     |         // into the expected uint128 result.
 173 |     |         unchecked {
 174 |     |             result = (result + a / result) >> 1;
 175 |     |             result = (result + a / result) >> 1;
 176 |     |             result = (result + a / result) >> 1;
 177 |     |             result = (result + a / result) >> 1;
 178 |     |             result = (result + a / result) >> 1;
 179 |     |             result = (result + a / result) >> 1;
 180 |     |             result = (result + a / result) >> 1;
 181 |     |             return min(result, a / result);
 182 |     |         }
 183 |     |     }
 184 |     | 
 185 |     |     /**
 186 |     |      * @notice Calculates sqrt(a), following the selected rounding direction.
 187 |     |      */
 188 |     |     function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
 189 |     |         unchecked {
 190 |     |             uint256 result = sqrt(a);
 191 |     |             return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
 192 |     |         }
 193 |     |     }
 194 |     | 
 195 |     |     /**
 196 |     |      * @dev Return the log in base 2, rounded down, of a positive value.
 197 |     |      * Returns 0 if given 0.
 198 |     |      */
 199 |     |     function log2(uint256 value) internal pure returns (uint256) {
 200 |     |         uint256 result = 0;
 201 |     |         unchecked {
 202 |     |             if (value >> 128 > 0) {
 203 |     |                 value >>= 128;
 204 |     |                 result += 128;
 205 |     |             }
 206 |     |             if (value >> 64 > 0) {
 207 |     |                 value >>= 64;
 208 |     |                 result += 64;
 209 |     |             }
 210 |     |             if (value >> 32 > 0) {
 211 |     |                 value >>= 32;
 212 |     |                 result += 32;
 213 |     |             }
 214 |     |             if (value >> 16 > 0) {
 215 |     |                 value >>= 16;
 216 |     |                 result += 16;
 217 |     |             }
 218 |     |             if (value >> 8 > 0) {
 219 |     |                 value >>= 8;
 220 |     |                 result += 8;
 221 |     |             }
 222 |     |             if (value >> 4 > 0) {
 223 |     |                 value >>= 4;
 224 |     |                 result += 4;
 225 |     |             }
 226 |     |             if (value >> 2 > 0) {
 227 |     |                 value >>= 2;
 228 |     |                 result += 2;
 229 |     |             }
 230 |     |             if (value >> 1 > 0) {
 231 |     |                 result += 1;
 232 |     |             }
 233 |     |         }
 234 |     |         return result;
 235 |     |     }
 236 |     | 
 237 |     |     /**
 238 |     |      * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
 239 |     |      * Returns 0 if given 0.
 240 |     |      */
 241 |     |     function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
 242 |     |         unchecked {
 243 |     |             uint256 result = log2(value);
 244 |     |             return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
 245 |     |         }
 246 |     |     }
 247 |     | 
 248 |     |     /**
 249 |     |      * @dev Return the log in base 10, rounded down, of a positive value.
 250 |     |      * Returns 0 if given 0.
 251 |     |      */
 252 |     |     function log10(uint256 value) internal pure returns (uint256) {
 253 |     |         uint256 result = 0;
 254 |     |         unchecked {
 255 |     |             if (value >= 10 ** 64) {
 256 |     |                 value /= 10 ** 64;
 257 |     |                 result += 64;
 258 |     |             }
 259 |     |             if (value >= 10 ** 32) {
 260 |     |                 value /= 10 ** 32;
 261 |     |                 result += 32;
 262 |     |             }
 263 |     |             if (value >= 10 ** 16) {
 264 |     |                 value /= 10 ** 16;
 265 |     |                 result += 16;
 266 |     |             }
 267 |     |             if (value >= 10 ** 8) {
 268 |     |                 value /= 10 ** 8;
 269 |     |                 result += 8;
 270 |     |             }
 271 |     |             if (value >= 10 ** 4) {
 272 |     |                 value /= 10 ** 4;
 273 |     |                 result += 4;
 274 |     |             }
 275 |     |             if (value >= 10 ** 2) {
 276 |     |                 value /= 10 ** 2;
 277 |     |                 result += 2;
 278 |     |             }
 279 |     |             if (value >= 10 ** 1) {
 280 |     |                 result += 1;
 281 |     |             }
 282 |     |         }
 283 |     |         return result;
 284 |     |     }
 285 |     | 
 286 |     |     /**
 287 |     |      * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
 288 |     |      * Returns 0 if given 0.
 289 |     |      */
 290 |     |     function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
 291 |     |         unchecked {
 292 |     |             uint256 result = log10(value);
 293 |     |             return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);
 294 |     |         }
 295 |     |     }
 296 |     | 
 297 |     |     /**
 298 |     |      * @dev Return the log in base 256, rounded down, of a positive value.
 299 |     |      * Returns 0 if given 0.
 300 |     |      *
 301 |     |      * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
 302 |     |      */
 303 |     |     function log256(uint256 value) internal pure returns (uint256) {
 304 |     |         uint256 result = 0;
 305 |     |         unchecked {
 306 |     |             if (value >> 128 > 0) {
 307 |     |                 value >>= 128;
 308 |     |                 result += 16;
 309 |     |             }
 310 |     |             if (value >> 64 > 0) {
 311 |     |                 value >>= 64;
 312 |     |                 result += 8;
 313 |     |             }
 314 |     |             if (value >> 32 > 0) {
 315 |     |                 value >>= 32;
 316 |     |                 result += 4;
 317 |     |             }
 318 |     |             if (value >> 16 > 0) {
 319 |     |                 value >>= 16;
 320 |     |                 result += 2;
 321 |     |             }
 322 |     |             if (value >> 8 > 0) {
 323 |     |                 result += 1;
 324 |     |             }
 325 |     |         }
 326 |     |         return result;
 327 |     |     }
 328 |     | 
 329 |     |     /**
 330 |     |      * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
 331 |     |      * Returns 0 if given 0.
 332 |     |      */
 333 |     |     function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
 334 |     |         unchecked {
 335 |     |             uint256 result = log256(value);
 336 |     |             return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);
 337 |     |         }
 338 |     |     }
 339 |     | }
 340 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts-v4/utils/math/SignedMath.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Standard signed math utilities missing in the Solidity language.
  8 |     |  */
  9 |     | library SignedMath {
 10 |     |     /**
 11 |     |      * @dev Returns the largest of two signed numbers.
 12 |     |      */
 13 |     |     function max(int256 a, int256 b) internal pure returns (int256) {
 14 |     |         return a > b ? a : b;
 15 |     |     }
 16 |     | 
 17 |     |     /**
 18 |     |      * @dev Returns the smallest of two signed numbers.
 19 |     |      */
 20 |     |     function min(int256 a, int256 b) internal pure returns (int256) {
 21 |     |         return a < b ? a : b;
 22 |     |     }
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the average of two signed numbers without overflow.
 26 |     |      * The result is rounded towards zero.
 27 |     |      */
 28 |     |     function average(int256 a, int256 b) internal pure returns (int256) {
 29 |     |         // Formula from the book "Hacker's Delight"
 30 |     |         int256 x = (a & b) + ((a ^ b) >> 1);
 31 |     |         return x + (int256(uint256(x) >> 255) & (a ^ b));
 32 |     |     }
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Returns the absolute unsigned value of a signed value.
 36 |     |      */
 37 |     |     function abs(int256 n) internal pure returns (uint256) {
 38 |     |         unchecked {
 39 |     |             // must be unchecked in order to support `n = type(int256).min`
 40 |     |             return uint256(n >= 0 ? n : -n);
 41 |     |         }
 42 |     |     }
 43 |     | }
 44 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/access/Ownable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {Context} from "../utils/Context.sol";
   7 |     | 
   8 |     | /**
   9 |     |  * @dev Contract module which provides a basic access control mechanism, where
  10 |     |  * there is an account (an owner) that can be granted exclusive access to
  11 |     |  * specific functions.
  12 |     |  *
  13 |     |  * The initial owner is set to the address provided by the deployer. This can
  14 |     |  * later be changed with {transferOwnership}.
  15 |     |  *
  16 |     |  * This module is used through inheritance. It will make available the modifier
  17 |     |  * `onlyOwner`, which can be applied to your functions to restrict their use to
  18 |     |  * the owner.
  19 |     |  */
  20 |     | abstract contract Ownable is Context {
  21 |     |     address private _owner;
  22 |     | 
  23 |     |     /**
  24 |     |      * @dev The caller account is not authorized to perform an operation.
  25 |     |      */
  26 |     |     error OwnableUnauthorizedAccount(address account);
  27 |     | 
  28 |     |     /**
  29 |     |      * @dev The owner is not a valid owner account. (eg. `address(0)`)
  30 |     |      */
  31 |     |     error OwnableInvalidOwner(address owner);
  32 |     | 
  33 |     |     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  34 |     | 
  35 |     |     /**
  36 |     |      * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
  37 |     |      */
  38 |     |     constructor(address initialOwner) {
  39 |     |         if (initialOwner == address(0)) {
  40 |     |             revert OwnableInvalidOwner(address(0));
  41 |     |         }
  42 |     |         _transferOwnership(initialOwner);
  43 |     |     }
  44 |     | 
  45 |     |     /**
  46 |     |      * @dev Throws if called by any account other than the owner.
  47 |     |      */
  48 |     |     modifier onlyOwner() {
  49 |     |         _checkOwner();
  50 |     |         _;
  51 |     |     }
  52 |     | 
  53 |     |     /**
  54 |     |      * @dev Returns the address of the current owner.
  55 |     |      */
  56 |     |     function owner() public view virtual returns (address) {
  57 |     |         return _owner;
  58 |     |     }
  59 |     | 
  60 |     |     /**
  61 |     |      * @dev Throws if the sender is not the owner.
  62 |     |      */
  63 |     |     function _checkOwner() internal view virtual {
  64 |     |         if (owner() != _msgSender()) {
  65 |     |             revert OwnableUnauthorizedAccount(_msgSender());
  66 |     |         }
  67 |     |     }
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Leaves the contract without owner. It will not be possible to call
  71 |     |      * `onlyOwner` functions. Can only be called by the current owner.
  72 |     |      *
  73 |     |      * NOTE: Renouncing ownership will leave the contract without an owner,
  74 |     |      * thereby disabling any functionality that is only available to the owner.
  75 |     |      */
  76 |     |     function renounceOwnership() public virtual onlyOwner {
  77 |     |         _transferOwnership(address(0));
  78 |     |     }
  79 |     | 
  80 |     |     /**
  81 |     |      * @dev Transfers ownership of the contract to a new account (`newOwner`).
  82 |     |      * Can only be called by the current owner.
  83 |     |      */
  84 |     |     function transferOwnership(address newOwner) public virtual onlyOwner {
  85 |     |         if (newOwner == address(0)) {
  86 |     |             revert OwnableInvalidOwner(address(0));
  87 |     |         }
  88 |     |         _transferOwnership(newOwner);
  89 |     |     }
  90 |     | 
  91 |     |     /**
  92 |     |      * @dev Transfers ownership of the contract to a new account (`newOwner`).
  93 |     |      * Internal function without access restriction.
  94 |     |      */
  95 |     |     function _transferOwnership(address newOwner) internal virtual {
  96 |     |         address oldOwner = _owner;
  97 |     |         _owner = newOwner;
  98 |     |         emit OwnershipTransferred(oldOwner, newOwner);
  99 |     |     }
 100 |     | }
 101 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)
   3 |     | pragma solidity ^0.8.20;
   4 |     | 
   5 |     | /**
   6 |     |  * @dev Standard ERC20 Errors
   7 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.
   8 |     |  */
   9 |     | interface IERC20Errors {
  10 |     |     /**
  11 |     |      * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
  12 |     |      * @param sender Address whose tokens are being transferred.
  13 |     |      * @param balance Current balance for the interacting account.
  14 |     |      * @param needed Minimum amount required to perform a transfer.
  15 |     |      */
  16 |     |     error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
  17 |     | 
  18 |     |     /**
  19 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
  20 |     |      * @param sender Address whose tokens are being transferred.
  21 |     |      */
  22 |     |     error ERC20InvalidSender(address sender);
  23 |     | 
  24 |     |     /**
  25 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
  26 |     |      * @param receiver Address to which tokens are being transferred.
  27 |     |      */
  28 |     |     error ERC20InvalidReceiver(address receiver);
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.
  32 |     |      * @param spender Address that may be allowed to operate on tokens without being their owner.
  33 |     |      * @param allowance Amount of tokens a `spender` is allowed to operate with.
  34 |     |      * @param needed Minimum amount required to perform a transfer.
  35 |     |      */
  36 |     |     error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
  37 |     | 
  38 |     |     /**
  39 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
  40 |     |      * @param approver Address initiating an approval operation.
  41 |     |      */
  42 |     |     error ERC20InvalidApprover(address approver);
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
  46 |     |      * @param spender Address that may be allowed to operate on tokens without being their owner.
  47 |     |      */
  48 |     |     error ERC20InvalidSpender(address spender);
  49 |     | }
  50 |     | 
  51 |     | /**
  52 |     |  * @dev Standard ERC721 Errors
  53 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.
  54 |     |  */
  55 |     | interface IERC721Errors {
  56 |     |     /**
  57 |     |      * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.
  58 |     |      * Used in balance queries.
  59 |     |      * @param owner Address of the current owner of a token.
  60 |     |      */
  61 |     |     error ERC721InvalidOwner(address owner);
  62 |     | 
  63 |     |     /**
  64 |     |      * @dev Indicates a `tokenId` whose `owner` is the zero address.
  65 |     |      * @param tokenId Identifier number of a token.
  66 |     |      */
  67 |     |     error ERC721NonexistentToken(uint256 tokenId);
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Indicates an error related to the ownership over a particular token. Used in transfers.
  71 |     |      * @param sender Address whose tokens are being transferred.
  72 |     |      * @param tokenId Identifier number of a token.
  73 |     |      * @param owner Address of the current owner of a token.
  74 |     |      */
  75 |     |     error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
  79 |     |      * @param sender Address whose tokens are being transferred.
  80 |     |      */
  81 |     |     error ERC721InvalidSender(address sender);
  82 |     | 
  83 |     |     /**
  84 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
  85 |     |      * @param receiver Address to which tokens are being transferred.
  86 |     |      */
  87 |     |     error ERC721InvalidReceiver(address receiver);
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
  91 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
  92 |     |      * @param tokenId Identifier number of a token.
  93 |     |      */
  94 |     |     error ERC721InsufficientApproval(address operator, uint256 tokenId);
  95 |     | 
  96 |     |     /**
  97 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
  98 |     |      * @param approver Address initiating an approval operation.
  99 |     |      */
 100 |     |     error ERC721InvalidApprover(address approver);
 101 |     | 
 102 |     |     /**
 103 |     |      * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
 104 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 105 |     |      */
 106 |     |     error ERC721InvalidOperator(address operator);
 107 |     | }
 108 |     | 
 109 |     | /**
 110 |     |  * @dev Standard ERC1155 Errors
 111 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.
 112 |     |  */
 113 |     | interface IERC1155Errors {
 114 |     |     /**
 115 |     |      * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
 116 |     |      * @param sender Address whose tokens are being transferred.
 117 |     |      * @param balance Current balance for the interacting account.
 118 |     |      * @param needed Minimum amount required to perform a transfer.
 119 |     |      * @param tokenId Identifier number of a token.
 120 |     |      */
 121 |     |     error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);
 122 |     | 
 123 |     |     /**
 124 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
 125 |     |      * @param sender Address whose tokens are being transferred.
 126 |     |      */
 127 |     |     error ERC1155InvalidSender(address sender);
 128 |     | 
 129 |     |     /**
 130 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
 131 |     |      * @param receiver Address to which tokens are being transferred.
 132 |     |      */
 133 |     |     error ERC1155InvalidReceiver(address receiver);
 134 |     | 
 135 |     |     /**
 136 |     |      * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
 137 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 138 |     |      * @param owner Address of the current owner of a token.
 139 |     |      */
 140 |     |     error ERC1155MissingApprovalForAll(address operator, address owner);
 141 |     | 
 142 |     |     /**
 143 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
 144 |     |      * @param approver Address initiating an approval operation.
 145 |     |      */
 146 |     |     error ERC1155InvalidApprover(address approver);
 147 |     | 
 148 |     |     /**
 149 |     |      * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
 150 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 151 |     |      */
 152 |     |     error ERC1155InvalidOperator(address operator);
 153 |     | 
 154 |     |     /**
 155 |     |      * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.
 156 |     |      * Used in batch transfers.
 157 |     |      * @param idsLength Length of the array of token identifiers
 158 |     |      * @param valuesLength Length of the array of token amounts
 159 |     |      */
 160 |     |     error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
 161 |     | }
 162 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC20} from "./IERC20.sol";
   7 |     | import {IERC20Metadata} from "./extensions/IERC20Metadata.sol";
   8 |     | import {Context} from "../../utils/Context.sol";
   9 |     | import {IERC20Errors} from "../../interfaces/draft-IERC6093.sol";
  10 |     | 
  11 |     | /**
  12 |     |  * @dev Implementation of the {IERC20} interface.
  13 |     |  *
  14 |     |  * This implementation is agnostic to the way tokens are created. This means
  15 |     |  * that a supply mechanism has to be added in a derived contract using {_mint}.
  16 |     |  *
  17 |     |  * TIP: For a detailed writeup see our guide
  18 |     |  * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
  19 |     |  * to implement supply mechanisms].
  20 |     |  *
  21 |     |  * The default value of {decimals} is 18. To change this, you should override
  22 |     |  * this function so it returns a different value.
  23 |     |  *
  24 |     |  * We have followed general OpenZeppelin Contracts guidelines: functions revert
  25 |     |  * instead returning `false` on failure. This behavior is nonetheless
  26 |     |  * conventional and does not conflict with the expectations of ERC20
  27 |     |  * applications.
  28 |     |  *
  29 |     |  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
  30 |     |  * This allows applications to reconstruct the allowance for all accounts just
  31 |     |  * by listening to said events. Other implementations of the EIP may not emit
  32 |     |  * these events, as it isn't required by the specification.
  33 |     |  */
  34 |     | abstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {
  35 |     |     mapping(address account => uint256) private _balances;
  36 |     | 
  37 |     |     mapping(address account => mapping(address spender => uint256)) private _allowances;
  38 |     | 
  39 |     |     uint256 private _totalSupply;
  40 |     | 
  41 |     |     string private _name;
  42 |     |     string private _symbol;
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Sets the values for {name} and {symbol}.
  46 |     |      *
  47 |     |      * All two of these values are immutable: they can only be set once during
  48 |     |      * construction.
  49 |     |      */
  50 |     |     constructor(string memory name_, string memory symbol_) {
  51 |     |         _name = name_;
  52 |     |         _symbol = symbol_;
  53 |     |     }
  54 |     | 
  55 |     |     /**
  56 |     |      * @dev Returns the name of the token.
  57 |     |      */
  58 | *   |     function name() public view virtual returns (string memory) {
  59 |     |         return _name;
  60 |     |     }
  61 |     | 
  62 |     |     /**
  63 |     |      * @dev Returns the symbol of the token, usually a shorter version of the
  64 |     |      * name.
  65 |     |      */
  66 |     |     function symbol() public view virtual returns (string memory) {
  67 |     |         return _symbol;
  68 |     |     }
  69 |     | 
  70 |     |     /**
  71 |     |      * @dev Returns the number of decimals used to get its user representation.
  72 |     |      * For example, if `decimals` equals `2`, a balance of `505` tokens should
  73 |     |      * be displayed to a user as `5.05` (`505 / 10 ** 2`).
  74 |     |      *
  75 |     |      * Tokens usually opt for a value of 18, imitating the relationship between
  76 |     |      * Ether and Wei. This is the default value returned by this function, unless
  77 |     |      * it's overridden.
  78 |     |      *
  79 |     |      * NOTE: This information is only used for _display_ purposes: it in
  80 |     |      * no way affects any of the arithmetic of the contract, including
  81 |     |      * {IERC20-balanceOf} and {IERC20-transfer}.
  82 |     |      */
  83 |     |     function decimals() public view virtual returns (uint8) {
  84 |     |         return 18;
  85 |     |     }
  86 |     | 
  87 |     |     /**
  88 |     |      * @dev See {IERC20-totalSupply}.
  89 |     |      */
  90 |     |     function totalSupply() public view virtual returns (uint256) {
  91 |     |         return _totalSupply;
  92 |     |     }
  93 |     | 
  94 |     |     /**
  95 |     |      * @dev See {IERC20-balanceOf}.
  96 |     |      */
  97 |     |     function balanceOf(address account) public view virtual returns (uint256) {
  98 |     |         return _balances[account];
  99 |     |     }
 100 |     | 
 101 |     |     /**
 102 |     |      * @dev See {IERC20-transfer}.
 103 |     |      *
 104 |     |      * Requirements:
 105 |     |      *
 106 |     |      * - `to` cannot be the zero address.
 107 |     |      * - the caller must have a balance of at least `value`.
 108 |     |      */
 109 |     |     function transfer(address to, uint256 value) public virtual returns (bool) {
 110 |     |         address owner = _msgSender();
 111 |     |         _transfer(owner, to, value);
 112 |     |         return true;
 113 |     |     }
 114 |     | 
 115 |     |     /**
 116 |     |      * @dev See {IERC20-allowance}.
 117 |     |      */
 118 |     |     function allowance(address owner, address spender) public view virtual returns (uint256) {
 119 |     |         return _allowances[owner][spender];
 120 |     |     }
 121 |     | 
 122 |     |     /**
 123 |     |      * @dev See {IERC20-approve}.
 124 |     |      *
 125 |     |      * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on
 126 |     |      * `transferFrom`. This is semantically equivalent to an infinite approval.
 127 |     |      *
 128 |     |      * Requirements:
 129 |     |      *
 130 |     |      * - `spender` cannot be the zero address.
 131 |     |      */
 132 |     |     function approve(address spender, uint256 value) public virtual returns (bool) {
 133 |     |         address owner = _msgSender();
 134 |     |         _approve(owner, spender, value);
 135 |     |         return true;
 136 |     |     }
 137 |     | 
 138 |     |     /**
 139 |     |      * @dev See {IERC20-transferFrom}.
 140 |     |      *
 141 |     |      * Emits an {Approval} event indicating the updated allowance. This is not
 142 |     |      * required by the EIP. See the note at the beginning of {ERC20}.
 143 |     |      *
 144 |     |      * NOTE: Does not update the allowance if the current allowance
 145 |     |      * is the maximum `uint256`.
 146 |     |      *
 147 |     |      * Requirements:
 148 |     |      *
 149 |     |      * - `from` and `to` cannot be the zero address.
 150 |     |      * - `from` must have a balance of at least `value`.
 151 |     |      * - the caller must have allowance for ``from``'s tokens of at least
 152 |     |      * `value`.
 153 |     |      */
 154 |     |     function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
 155 |     |         address spender = _msgSender();
 156 |     |         _spendAllowance(from, spender, value);
 157 |     |         _transfer(from, to, value);
 158 |     |         return true;
 159 |     |     }
 160 |     | 
 161 |     |     /**
 162 |     |      * @dev Moves a `value` amount of tokens from `from` to `to`.
 163 |     |      *
 164 |     |      * This internal function is equivalent to {transfer}, and can be used to
 165 |     |      * e.g. implement automatic token fees, slashing mechanisms, etc.
 166 |     |      *
 167 |     |      * Emits a {Transfer} event.
 168 |     |      *
 169 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 170 |     |      */
 171 |     |     function _transfer(address from, address to, uint256 value) internal {
 172 |     |         if (from == address(0)) {
 173 |     |             revert ERC20InvalidSender(address(0));
 174 |     |         }
 175 |     |         if (to == address(0)) {
 176 |     |             revert ERC20InvalidReceiver(address(0));
 177 |     |         }
 178 |     |         _update(from, to, value);
 179 |     |     }
 180 |     | 
 181 |     |     /**
 182 |     |      * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`
 183 |     |      * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding
 184 |     |      * this function.
 185 |     |      *
 186 |     |      * Emits a {Transfer} event.
 187 |     |      */
 188 |     |     function _update(address from, address to, uint256 value) internal virtual {
 189 |     |         if (from == address(0)) {
 190 |     |             // Overflow check required: The rest of the code assumes that totalSupply never overflows
 191 |     |             _totalSupply += value;
 192 |     |         } else {
 193 |     |             uint256 fromBalance = _balances[from];
 194 |     |             if (fromBalance < value) {
 195 |     |                 revert ERC20InsufficientBalance(from, fromBalance, value);
 196 |     |             }
 197 |     |             unchecked {
 198 |     |                 // Overflow not possible: value <= fromBalance <= totalSupply.
 199 |     |                 _balances[from] = fromBalance - value;
 200 |     |             }
 201 |     |         }
 202 |     | 
 203 |     |         if (to == address(0)) {
 204 |     |             unchecked {
 205 |     |                 // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
 206 |     |                 _totalSupply -= value;
 207 |     |             }
 208 |     |         } else {
 209 |     |             unchecked {
 210 |     |                 // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
 211 |     |                 _balances[to] += value;
 212 |     |             }
 213 |     |         }
 214 |     | 
 215 |     |         emit Transfer(from, to, value);
 216 |     |     }
 217 |     | 
 218 |     |     /**
 219 |     |      * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).
 220 |     |      * Relies on the `_update` mechanism
 221 |     |      *
 222 |     |      * Emits a {Transfer} event with `from` set to the zero address.
 223 |     |      *
 224 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 225 |     |      */
 226 |     |     function _mint(address account, uint256 value) internal {
 227 |     |         if (account == address(0)) {
 228 |     |             revert ERC20InvalidReceiver(address(0));
 229 |     |         }
 230 |     |         _update(address(0), account, value);
 231 |     |     }
 232 |     | 
 233 |     |     /**
 234 |     |      * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.
 235 |     |      * Relies on the `_update` mechanism.
 236 |     |      *
 237 |     |      * Emits a {Transfer} event with `to` set to the zero address.
 238 |     |      *
 239 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead
 240 |     |      */
 241 |     |     function _burn(address account, uint256 value) internal {
 242 |     |         if (account == address(0)) {
 243 |     |             revert ERC20InvalidSender(address(0));
 244 |     |         }
 245 |     |         _update(account, address(0), value);
 246 |     |     }
 247 |     | 
 248 |     |     /**
 249 |     |      * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.
 250 |     |      *
 251 |     |      * This internal function is equivalent to `approve`, and can be used to
 252 |     |      * e.g. set automatic allowances for certain subsystems, etc.
 253 |     |      *
 254 |     |      * Emits an {Approval} event.
 255 |     |      *
 256 |     |      * Requirements:
 257 |     |      *
 258 |     |      * - `owner` cannot be the zero address.
 259 |     |      * - `spender` cannot be the zero address.
 260 |     |      *
 261 |     |      * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
 262 |     |      */
 263 |     |     function _approve(address owner, address spender, uint256 value) internal {
 264 |     |         _approve(owner, spender, value, true);
 265 |     |     }
 266 |     | 
 267 |     |     /**
 268 |     |      * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.
 269 |     |      *
 270 |     |      * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
 271 |     |      * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
 272 |     |      * `Approval` event during `transferFrom` operations.
 273 |     |      *
 274 |     |      * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to
 275 |     |      * true using the following override:
 276 |     |      * ```
 277 |     |      * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {
 278 |     |      *     super._approve(owner, spender, value, true);
 279 |     |      * }
 280 |     |      * ```
 281 |     |      *
 282 |     |      * Requirements are the same as {_approve}.
 283 |     |      */
 284 |     |     function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {
 285 |     |         if (owner == address(0)) {
 286 |     |             revert ERC20InvalidApprover(address(0));
 287 |     |         }
 288 |     |         if (spender == address(0)) {
 289 |     |             revert ERC20InvalidSpender(address(0));
 290 |     |         }
 291 |     |         _allowances[owner][spender] = value;
 292 |     |         if (emitEvent) {
 293 |     |             emit Approval(owner, spender, value);
 294 |     |         }
 295 |     |     }
 296 |     | 
 297 |     |     /**
 298 |     |      * @dev Updates `owner` s allowance for `spender` based on spent `value`.
 299 |     |      *
 300 |     |      * Does not update the allowance value in case of infinite allowance.
 301 |     |      * Revert if not enough allowance is available.
 302 |     |      *
 303 |     |      * Does not emit an {Approval} event.
 304 |     |      */
 305 |     |     function _spendAllowance(address owner, address spender, uint256 value) internal virtual {
 306 |     |         uint256 currentAllowance = allowance(owner, spender);
 307 |     |         if (currentAllowance != type(uint256).max) {
 308 |     |             if (currentAllowance < value) {
 309 |     |                 revert ERC20InsufficientAllowance(spender, currentAllowance, value);
 310 |     |             }
 311 |     |             unchecked {
 312 |     |                 _approve(owner, spender, currentAllowance - value, false);
 313 |     |             }
 314 |     |         }
 315 |     |     }
 316 |     | }
 317 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC20 standard as defined in the EIP.
  8 |     |  */
  9 |     | interface IERC20 {
 10 |     |     /**
 11 |     |      * @dev Emitted when `value` tokens are moved from one account (`from`) to
 12 |     |      * another (`to`).
 13 |     |      *
 14 |     |      * Note that `value` may be zero.
 15 |     |      */
 16 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Emitted when the allowance of a `spender` for an `owner` is set by
 20 |     |      * a call to {approve}. `value` is the new allowance.
 21 |     |      */
 22 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the value of tokens in existence.
 26 |     |      */
 27 |     |     function totalSupply() external view returns (uint256);
 28 |     | 
 29 |     |     /**
 30 |     |      * @dev Returns the value of tokens owned by `account`.
 31 |     |      */
 32 |     |     function balanceOf(address account) external view returns (uint256);
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Moves a `value` amount of tokens from the caller's account to `to`.
 36 |     |      *
 37 |     |      * Returns a boolean value indicating whether the operation succeeded.
 38 |     |      *
 39 |     |      * Emits a {Transfer} event.
 40 |     |      */
 41 |     |     function transfer(address to, uint256 value) external returns (bool);
 42 |     | 
 43 |     |     /**
 44 |     |      * @dev Returns the remaining number of tokens that `spender` will be
 45 |     |      * allowed to spend on behalf of `owner` through {transferFrom}. This is
 46 |     |      * zero by default.
 47 |     |      *
 48 |     |      * This value changes when {approve} or {transferFrom} are called.
 49 |     |      */
 50 |     |     function allowance(address owner, address spender) external view returns (uint256);
 51 |     | 
 52 |     |     /**
 53 |     |      * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
 54 |     |      * caller's tokens.
 55 |     |      *
 56 |     |      * Returns a boolean value indicating whether the operation succeeded.
 57 |     |      *
 58 |     |      * IMPORTANT: Beware that changing an allowance with this method brings the risk
 59 |     |      * that someone may use both the old and the new allowance by unfortunate
 60 |     |      * transaction ordering. One possible solution to mitigate this race
 61 |     |      * condition is to first reduce the spender's allowance to 0 and set the
 62 |     |      * desired value afterwards:
 63 |     |      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 64 |     |      *
 65 |     |      * Emits an {Approval} event.
 66 |     |      */
 67 |     |     function approve(address spender, uint256 value) external returns (bool);
 68 |     | 
 69 |     |     /**
 70 |     |      * @dev Moves a `value` amount of tokens from `from` to `to` using the
 71 |     |      * allowance mechanism. `value` is then deducted from the caller's
 72 |     |      * allowance.
 73 |     |      *
 74 |     |      * Returns a boolean value indicating whether the operation succeeded.
 75 |     |      *
 76 |     |      * Emits a {Transfer} event.
 77 |     |      */
 78 |     |     function transferFrom(address from, address to, uint256 value) external returns (bool);
 79 |     | }
 80 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC20} from "../IERC20.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Interface for the optional metadata functions from the ERC20 standard.
 10 |     |  */
 11 |     | interface IERC20Metadata is IERC20 {
 12 |     |     /**
 13 |     |      * @dev Returns the name of the token.
 14 |     |      */
 15 |     |     function name() external view returns (string memory);
 16 |     | 
 17 |     |     /**
 18 |     |      * @dev Returns the symbol of the token.
 19 |     |      */
 20 |     |     function symbol() external view returns (string memory);
 21 |     | 
 22 |     |     /**
 23 |     |      * @dev Returns the decimals places of the token.
 24 |     |      */
 25 |     |     function decimals() external view returns (uint8);
 26 |     | }
 27 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
  8 |     |  * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
  9 |     |  *
 10 |     |  * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 11 |     |  * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 12 |     |  * need to send a transaction, and thus is not required to hold Ether at all.
 13 |     |  *
 14 |     |  * ==== Security Considerations
 15 |     |  *
 16 |     |  * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 17 |     |  * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 18 |     |  * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 19 |     |  * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 20 |     |  * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 21 |     |  * generally recommended is:
 22 |     |  *
 23 |     |  * ```solidity
 24 |     |  * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 25 |     |  *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 26 |     |  *     doThing(..., value);
 27 |     |  * }
 28 |     |  *
 29 |     |  * function doThing(..., uint256 value) public {
 30 |     |  *     token.safeTransferFrom(msg.sender, address(this), value);
 31 |     |  *     ...
 32 |     |  * }
 33 |     |  * ```
 34 |     |  *
 35 |     |  * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 36 |     |  * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 37 |     |  * {SafeERC20-safeTransferFrom}).
 38 |     |  *
 39 |     |  * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 40 |     |  * contracts should have entry points that don't rely on permit.
 41 |     |  */
 42 |     | interface IERC20Permit {
 43 |     |     /**
 44 |     |      * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
 45 |     |      * given ``owner``'s signed approval.
 46 |     |      *
 47 |     |      * IMPORTANT: The same issues {IERC20-approve} has related to transaction
 48 |     |      * ordering also apply here.
 49 |     |      *
 50 |     |      * Emits an {Approval} event.
 51 |     |      *
 52 |     |      * Requirements:
 53 |     |      *
 54 |     |      * - `spender` cannot be the zero address.
 55 |     |      * - `deadline` must be a timestamp in the future.
 56 |     |      * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
 57 |     |      * over the EIP712-formatted function arguments.
 58 |     |      * - the signature must use ``owner``'s current nonce (see {nonces}).
 59 |     |      *
 60 |     |      * For more information on the signature format, see the
 61 |     |      * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
 62 |     |      * section].
 63 |     |      *
 64 |     |      * CAUTION: See Security Considerations above.
 65 |     |      */
 66 |     |     function permit(
 67 |     |         address owner,
 68 |     |         address spender,
 69 |     |         uint256 value,
 70 |     |         uint256 deadline,
 71 |     |         uint8 v,
 72 |     |         bytes32 r,
 73 |     |         bytes32 s
 74 |     |     ) external;
 75 |     | 
 76 |     |     /**
 77 |     |      * @dev Returns the current nonce for `owner`. This value must be
 78 |     |      * included whenever a signature is generated for {permit}.
 79 |     |      *
 80 |     |      * Every successful call to {permit} increases ``owner``'s nonce by one. This
 81 |     |      * prevents a signature from being used multiple times.
 82 |     |      */
 83 |     |     function nonces(address owner) external view returns (uint256);
 84 |     | 
 85 |     |     /**
 86 |     |      * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
 87 |     |      */
 88 |     |     // solhint-disable-next-line func-name-mixedcase
 89 |     |     function DOMAIN_SEPARATOR() external view returns (bytes32);
 90 |     | }
 91 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC20} from "../IERC20.sol";
   7 |     | import {IERC20Permit} from "../extensions/IERC20Permit.sol";
   8 |     | import {Address} from "../../../utils/Address.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @title SafeERC20
  12 |     |  * @dev Wrappers around ERC20 operations that throw on failure (when the token
  13 |     |  * contract returns false). Tokens that return no value (and instead revert or
  14 |     |  * throw on failure) are also supported, non-reverting calls are assumed to be
  15 |     |  * successful.
  16 |     |  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
  17 |     |  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
  18 |     |  */
  19 |     | library SafeERC20 {
  20 |     |     using Address for address;
  21 |     | 
  22 |     |     /**
  23 |     |      * @dev An operation with an ERC20 token failed.
  24 |     |      */
  25 |     |     error SafeERC20FailedOperation(address token);
  26 |     | 
  27 |     |     /**
  28 |     |      * @dev Indicates a failed `decreaseAllowance` request.
  29 |     |      */
  30 |     |     error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);
  31 |     | 
  32 |     |     /**
  33 |     |      * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
  34 |     |      * non-reverting calls are assumed to be successful.
  35 |     |      */
  36 |     |     function safeTransfer(IERC20 token, address to, uint256 value) internal {
  37 |     |         _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
  38 |     |     }
  39 |     | 
  40 |     |     /**
  41 |     |      * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
  42 |     |      * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
  43 |     |      */
  44 |     |     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
  45 |     |         _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
  46 |     |     }
  47 |     | 
  48 |     |     /**
  49 |     |      * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
  50 |     |      * non-reverting calls are assumed to be successful.
  51 |     |      */
  52 |     |     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
  53 |     |         uint256 oldAllowance = token.allowance(address(this), spender);
  54 |     |         forceApprove(token, spender, oldAllowance + value);
  55 |     |     }
  56 |     | 
  57 |     |     /**
  58 |     |      * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
  59 |     |      * value, non-reverting calls are assumed to be successful.
  60 |     |      */
  61 |     |     function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
  62 |     |         unchecked {
  63 |     |             uint256 currentAllowance = token.allowance(address(this), spender);
  64 |     |             if (currentAllowance < requestedDecrease) {
  65 |     |                 revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
  66 |     |             }
  67 |     |             forceApprove(token, spender, currentAllowance - requestedDecrease);
  68 |     |         }
  69 |     |     }
  70 |     | 
  71 |     |     /**
  72 |     |      * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
  73 |     |      * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
  74 |     |      * to be set to zero before setting it to a non-zero value, such as USDT.
  75 |     |      */
  76 |     |     function forceApprove(IERC20 token, address spender, uint256 value) internal {
  77 |     |         bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));
  78 |     | 
  79 |     |         if (!_callOptionalReturnBool(token, approvalCall)) {
  80 |     |             _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
  81 |     |             _callOptionalReturn(token, approvalCall);
  82 |     |         }
  83 |     |     }
  84 |     | 
  85 |     |     /**
  86 |     |      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
  87 |     |      * on the return value: the return value is optional (but if data is returned, it must not be false).
  88 |     |      * @param token The token targeted by the call.
  89 |     |      * @param data The call data (encoded using abi.encode or one of its variants).
  90 |     |      */
  91 |     |     function _callOptionalReturn(IERC20 token, bytes memory data) private {
  92 |     |         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
  93 |     |         // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
  94 |     |         // the target address contains contract code and also asserts for success in the low-level call.
  95 |     | 
  96 |     |         bytes memory returndata = address(token).functionCall(data);
  97 |     |         if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
  98 |     |             revert SafeERC20FailedOperation(address(token));
  99 |     |         }
 100 |     |     }
 101 |     | 
 102 |     |     /**
 103 |     |      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
 104 |     |      * on the return value: the return value is optional (but if data is returned, it must not be false).
 105 |     |      * @param token The token targeted by the call.
 106 |     |      * @param data The call data (encoded using abi.encode or one of its variants).
 107 |     |      *
 108 |     |      * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
 109 |     |      */
 110 |     |     function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
 111 |     |         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
 112 |     |         // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
 113 |     |         // and not revert is the subcall reverts.
 114 |     | 
 115 |     |         (bool success, bytes memory returndata) = address(token).call(data);
 116 |     |         return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
 117 |     |     }
 118 |     | }
 119 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC165} from "../../utils/introspection/IERC165.sol";
   7 |     | 
   8 |     | /**
   9 |     |  * @dev Required interface of an ERC721 compliant contract.
  10 |     |  */
  11 |     | interface IERC721 is IERC165 {
  12 |     |     /**
  13 |     |      * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
  14 |     |      */
  15 |     |     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
  16 |     | 
  17 |     |     /**
  18 |     |      * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
  19 |     |      */
  20 |     |     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
  21 |     | 
  22 |     |     /**
  23 |     |      * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
  24 |     |      */
  25 |     |     event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
  26 |     | 
  27 |     |     /**
  28 |     |      * @dev Returns the number of tokens in ``owner``'s account.
  29 |     |      */
  30 |     |     function balanceOf(address owner) external view returns (uint256 balance);
  31 |     | 
  32 |     |     /**
  33 |     |      * @dev Returns the owner of the `tokenId` token.
  34 |     |      *
  35 |     |      * Requirements:
  36 |     |      *
  37 |     |      * - `tokenId` must exist.
  38 |     |      */
  39 |     |     function ownerOf(uint256 tokenId) external view returns (address owner);
  40 |     | 
  41 |     |     /**
  42 |     |      * @dev Safely transfers `tokenId` token from `from` to `to`.
  43 |     |      *
  44 |     |      * Requirements:
  45 |     |      *
  46 |     |      * - `from` cannot be the zero address.
  47 |     |      * - `to` cannot be the zero address.
  48 |     |      * - `tokenId` token must exist and be owned by `from`.
  49 |     |      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
  50 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
  51 |     |      *   a safe transfer.
  52 |     |      *
  53 |     |      * Emits a {Transfer} event.
  54 |     |      */
  55 |     |     function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
  56 |     | 
  57 |     |     /**
  58 |     |      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
  59 |     |      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
  60 |     |      *
  61 |     |      * Requirements:
  62 |     |      *
  63 |     |      * - `from` cannot be the zero address.
  64 |     |      * - `to` cannot be the zero address.
  65 |     |      * - `tokenId` token must exist and be owned by `from`.
  66 |     |      * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or
  67 |     |      *   {setApprovalForAll}.
  68 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
  69 |     |      *   a safe transfer.
  70 |     |      *
  71 |     |      * Emits a {Transfer} event.
  72 |     |      */
  73 |     |     function safeTransferFrom(address from, address to, uint256 tokenId) external;
  74 |     | 
  75 |     |     /**
  76 |     |      * @dev Transfers `tokenId` token from `from` to `to`.
  77 |     |      *
  78 |     |      * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
  79 |     |      * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
  80 |     |      * understand this adds an external call which potentially creates a reentrancy vulnerability.
  81 |     |      *
  82 |     |      * Requirements:
  83 |     |      *
  84 |     |      * - `from` cannot be the zero address.
  85 |     |      * - `to` cannot be the zero address.
  86 |     |      * - `tokenId` token must be owned by `from`.
  87 |     |      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
  88 |     |      *
  89 |     |      * Emits a {Transfer} event.
  90 |     |      */
  91 |     |     function transferFrom(address from, address to, uint256 tokenId) external;
  92 |     | 
  93 |     |     /**
  94 |     |      * @dev Gives permission to `to` to transfer `tokenId` token to another account.
  95 |     |      * The approval is cleared when the token is transferred.
  96 |     |      *
  97 |     |      * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
  98 |     |      *
  99 |     |      * Requirements:
 100 |     |      *
 101 |     |      * - The caller must own the token or be an approved operator.
 102 |     |      * - `tokenId` must exist.
 103 |     |      *
 104 |     |      * Emits an {Approval} event.
 105 |     |      */
 106 |     |     function approve(address to, uint256 tokenId) external;
 107 |     | 
 108 |     |     /**
 109 |     |      * @dev Approve or remove `operator` as an operator for the caller.
 110 |     |      * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
 111 |     |      *
 112 |     |      * Requirements:
 113 |     |      *
 114 |     |      * - The `operator` cannot be the address zero.
 115 |     |      *
 116 |     |      * Emits an {ApprovalForAll} event.
 117 |     |      */
 118 |     |     function setApprovalForAll(address operator, bool approved) external;
 119 |     | 
 120 |     |     /**
 121 |     |      * @dev Returns the account approved for `tokenId` token.
 122 |     |      *
 123 |     |      * Requirements:
 124 |     |      *
 125 |     |      * - `tokenId` must exist.
 126 |     |      */
 127 |     |     function getApproved(uint256 tokenId) external view returns (address operator);
 128 |     | 
 129 |     |     /**
 130 |     |      * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
 131 |     |      *
 132 |     |      * See {setApprovalForAll}
 133 |     |      */
 134 |     |     function isApprovedForAll(address owner, address operator) external view returns (bool);
 135 |     | }
 136 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC721} from "../IERC721.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 10 |     |  * @dev See https://eips.ethereum.org/EIPS/eip-721
 11 |     |  */
 12 |     | interface IERC721Enumerable is IERC721 {
 13 |     |     /**
 14 |     |      * @dev Returns the total amount of tokens stored by the contract.
 15 |     |      */
 16 |     |     function totalSupply() external view returns (uint256);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
 20 |     |      * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
 21 |     |      */
 22 |     |     function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
 26 |     |      * Use along with {totalSupply} to enumerate all tokens.
 27 |     |      */
 28 |     |     function tokenByIndex(uint256 index) external view returns (uint256);
 29 |     | }
 30 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC721} from "../IERC721.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 10 |     |  * @dev See https://eips.ethereum.org/EIPS/eip-721
 11 |     |  */
 12 |     | interface IERC721Metadata is IERC721 {
 13 |     |     /**
 14 |     |      * @dev Returns the token collection name.
 15 |     |      */
 16 |     |     function name() external view returns (string memory);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Returns the token collection symbol.
 20 |     |      */
 21 |     |     function symbol() external view returns (string memory);
 22 |     | 
 23 |     |     /**
 24 |     |      * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
 25 |     |      */
 26 |     |     function tokenURI(uint256 tokenId) external view returns (string memory);
 27 |     | }
 28 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/utils/Address.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev Collection of functions related to the address type
   8 |     |  */
   9 |     | library Address {
  10 |     |     /**
  11 |     |      * @dev The ETH balance of the account is not enough to perform the operation.
  12 |     |      */
  13 |     |     error AddressInsufficientBalance(address account);
  14 |     | 
  15 |     |     /**
  16 |     |      * @dev There's no code at `target` (it is not a contract).
  17 |     |      */
  18 |     |     error AddressEmptyCode(address target);
  19 |     | 
  20 |     |     /**
  21 |     |      * @dev A call to an address target failed. The target may have reverted.
  22 |     |      */
  23 |     |     error FailedInnerCall();
  24 |     | 
  25 |     |     /**
  26 |     |      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
  27 |     |      * `recipient`, forwarding all available gas and reverting on errors.
  28 |     |      *
  29 |     |      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
  30 |     |      * of certain opcodes, possibly making contracts go over the 2300 gas limit
  31 |     |      * imposed by `transfer`, making them unable to receive funds via
  32 |     |      * `transfer`. {sendValue} removes this limitation.
  33 |     |      *
  34 |     |      * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
  35 |     |      *
  36 |     |      * IMPORTANT: because control is transferred to `recipient`, care must be
  37 |     |      * taken to not create reentrancy vulnerabilities. Consider using
  38 |     |      * {ReentrancyGuard} or the
  39 |     |      * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
  40 |     |      */
  41 |     |     function sendValue(address payable recipient, uint256 amount) internal {
  42 |     |         if (address(this).balance < amount) {
  43 |     |             revert AddressInsufficientBalance(address(this));
  44 |     |         }
  45 |     | 
  46 |     |         (bool success, ) = recipient.call{value: amount}("");
  47 |     |         if (!success) {
  48 |     |             revert FailedInnerCall();
  49 |     |         }
  50 |     |     }
  51 |     | 
  52 |     |     /**
  53 |     |      * @dev Performs a Solidity function call using a low level `call`. A
  54 |     |      * plain `call` is an unsafe replacement for a function call: use this
  55 |     |      * function instead.
  56 |     |      *
  57 |     |      * If `target` reverts with a revert reason or custom error, it is bubbled
  58 |     |      * up by this function (like regular Solidity function calls). However, if
  59 |     |      * the call reverted with no returned reason, this function reverts with a
  60 |     |      * {FailedInnerCall} error.
  61 |     |      *
  62 |     |      * Returns the raw returned data. To convert to the expected return value,
  63 |     |      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
  64 |     |      *
  65 |     |      * Requirements:
  66 |     |      *
  67 |     |      * - `target` must be a contract.
  68 |     |      * - calling `target` with `data` must not revert.
  69 |     |      */
  70 |     |     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
  71 |     |         return functionCallWithValue(target, data, 0);
  72 |     |     }
  73 |     | 
  74 |     |     /**
  75 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
  76 |     |      * but also transferring `value` wei to `target`.
  77 |     |      *
  78 |     |      * Requirements:
  79 |     |      *
  80 |     |      * - the calling contract must have an ETH balance of at least `value`.
  81 |     |      * - the called Solidity function must be `payable`.
  82 |     |      */
  83 |     |     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
  84 |     |         if (address(this).balance < value) {
  85 |     |             revert AddressInsufficientBalance(address(this));
  86 |     |         }
  87 |     |         (bool success, bytes memory returndata) = target.call{value: value}(data);
  88 |     |         return verifyCallResultFromTarget(target, success, returndata);
  89 |     |     }
  90 |     | 
  91 |     |     /**
  92 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
  93 |     |      * but performing a static call.
  94 |     |      */
  95 |     |     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
  96 |     |         (bool success, bytes memory returndata) = target.staticcall(data);
  97 |     |         return verifyCallResultFromTarget(target, success, returndata);
  98 |     |     }
  99 |     | 
 100 |     |     /**
 101 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
 102 |     |      * but performing a delegate call.
 103 |     |      */
 104 |     |     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
 105 |     |         (bool success, bytes memory returndata) = target.delegatecall(data);
 106 |     |         return verifyCallResultFromTarget(target, success, returndata);
 107 |     |     }
 108 |     | 
 109 |     |     /**
 110 |     |      * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
 111 |     |      * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
 112 |     |      * unsuccessful call.
 113 |     |      */
 114 |     |     function verifyCallResultFromTarget(
 115 |     |         address target,
 116 |     |         bool success,
 117 |     |         bytes memory returndata
 118 |     |     ) internal view returns (bytes memory) {
 119 |     |         if (!success) {
 120 |     |             _revert(returndata);
 121 |     |         } else {
 122 |     |             // only check if target is a contract if the call was successful and the return data is empty
 123 |     |             // otherwise we already know that it was a contract
 124 |     |             if (returndata.length == 0 && target.code.length == 0) {
 125 |     |                 revert AddressEmptyCode(target);
 126 |     |             }
 127 |     |             return returndata;
 128 |     |         }
 129 |     |     }
 130 |     | 
 131 |     |     /**
 132 |     |      * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
 133 |     |      * revert reason or with a default {FailedInnerCall} error.
 134 |     |      */
 135 |     |     function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
 136 |     |         if (!success) {
 137 |     |             _revert(returndata);
 138 |     |         } else {
 139 |     |             return returndata;
 140 |     |         }
 141 |     |     }
 142 |     | 
 143 |     |     /**
 144 |     |      * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
 145 |     |      */
 146 |     |     function _revert(bytes memory returndata) private pure {
 147 |     |         // Look for revert reason and bubble it up if present
 148 |     |         if (returndata.length > 0) {
 149 |     |             // The easiest way to bubble the revert reason is using memory via assembly
 150 |     |             /// @solidity memory-safe-assembly
 151 |     |             assembly {
 152 |     |                 let returndata_size := mload(returndata)
 153 |     |                 revert(add(32, returndata), returndata_size)
 154 |     |             }
 155 |     |         } else {
 156 |     |             revert FailedInnerCall();
 157 |     |         }
 158 |     |     }
 159 |     | }
 160 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/utils/Context.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Provides information about the current execution context, including the
  8 |     |  * sender of the transaction and its data. While these are generally available
  9 |     |  * via msg.sender and msg.data, they should not be accessed in such a direct
 10 |     |  * manner, since when dealing with meta-transactions the account sending and
 11 |     |  * paying for execution may not be the actual sender (as far as an application
 12 |     |  * is concerned).
 13 |     |  *
 14 |     |  * This contract is only required for intermediate, library-like contracts.
 15 |     |  */
 16 |     | abstract contract Context {
 17 |     |     function _msgSender() internal view virtual returns (address) {
 18 |     |         return msg.sender;
 19 |     |     }
 20 |     | 
 21 |     |     function _msgData() internal view virtual returns (bytes calldata) {
 22 |     |         return msg.data;
 23 |     |     }
 24 |     | 
 25 |     |     function _contextSuffixLength() internal view virtual returns (uint256) {
 26 |     |         return 0;
 27 |     |     }
 28 |     | }
 29 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC165 standard, as defined in the
  8 |     |  * https://eips.ethereum.org/EIPS/eip-165[EIP].
  9 |     |  *
 10 |     |  * Implementers can declare support of contract interfaces, which can then be
 11 |     |  * queried by others ({ERC165Checker}).
 12 |     |  *
 13 |     |  * For an implementation, see {ERC165}.
 14 |     |  */
 15 |     | interface IERC165 {
 16 |     |     /**
 17 |     |      * @dev Returns true if this contract implements the interface defined by
 18 |     |      * `interfaceId`. See the corresponding
 19 |     |      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
 20 |     |      * to learn more about how these ids are created.
 21 |     |      *
 22 |     |      * This function call must use less than 30 000 gas.
 23 |     |      */
 24 |     |     function supportsInterface(bytes4 interfaceId) external view returns (bool);
 25 |     | }
 26 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/errors/AccessError.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title Library for access related errors.
  6 |     |  */
  7 |     | library AccessError {
  8 |     |     /**
  9 |     |      * @dev Thrown when an address tries to perform an unauthorized action.
 10 |     |      * @param addr The address that attempts the action.
 11 |     |      */
 12 |     |     error Unauthorized(address addr);
 13 |     | }
 14 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/errors/AddressError.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title Library for address related errors.
  6 |     |  */
  7 |     | library AddressError {
  8 |     |     /**
  9 |     |      * @dev Thrown when a zero address was passed as a function parameter (0x0000000000000000000000000000000000000000).
 10 |     |      */
 11 |     |     error ZeroAddress();
 12 |     | 
 13 |     |     /**
 14 |     |      * @dev Thrown when an address representing a contract is expected, but no code is found at the address.
 15 |     |      * @param contr The address that was expected to be a contract.
 16 |     |      */
 17 |     |     error NotAContract(address contr);
 18 |     | }
 19 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/errors/InitError.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title Library for initialization related errors.
  6 |     |  */
  7 |     | library InitError {
  8 |     |     /**
  9 |     |      * @dev Thrown when attempting to initialize a contract that is already initialized.
 10 |     |      */
 11 |     |     error AlreadyInitialized();
 12 |     | 
 13 |     |     /**
 14 |     |      * @dev Thrown when attempting to interact with a contract that has not been initialized yet.
 15 |     |      */
 16 |     |     error NotInitialized();
 17 |     | }
 18 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/errors/ParameterError.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title Library for errors related with expected function parameters.
  6 |     |  */
  7 |     | library ParameterError {
  8 |     |     /**
  9 |     |      * @dev Thrown when an invalid parameter is used in a function.
 10 |     |      * @param parameter The name of the parameter.
 11 |     |      * @param reason The reason why the received parameter is invalid.
 12 |     |      */
 13 |     |     error InvalidParameter(string parameter, string reason);
 14 |     | }
 15 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/interfaces/IERC721Receiver.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title ERC721 extension that allows contracts to receive tokens with `safeTransferFrom`.
  6 |     |  */
  7 |     | interface IERC721Receiver {
  8 |     |     /**
  9 |     |      * @notice Function that will be called by ERC721 tokens implementing the `safeTransferFrom` function.
 10 |     |      * @dev The contract transferring the token will revert if the receiving contract does not implement this function.
 11 |     |      * @param operator The address that is executing the transfer.
 12 |     |      * @param from The address whose token is being transferred.
 13 |     |      * @param tokenId The numeric id of the token being transferred.
 14 |     |      * @param data Optional additional data that may be passed by the operator, and could be used by the implementing contract.
 15 |     |      * @return The selector of this function (IERC721Receiver.onERC721Received.selector). Caller will revert if not returned.
 16 |     |      */
 17 |     |     function onERC721Received(
 18 |     |         address operator,
 19 |     |         address from,
 20 |     |         uint256 tokenId,
 21 |     |         bytes memory data
 22 |     |     ) external returns (bytes4);
 23 |     | }
 24 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/ownership/OwnableStorage.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | import "../errors/AccessError.sol";
  5 |     | 
  6 |     | library OwnableStorage {
  7 |     |     bytes32 private constant _SLOT_OWNABLE_STORAGE =
  8 |     |         keccak256(abi.encode("io.synthetix.core-contracts.Ownable"));
  9 |     | 
 10 |     |     struct Data {
 11 |     |         address owner;
 12 |     |         address nominatedOwner;
 13 |     |     }
 14 |     | 
 15 |     |     function load() internal pure returns (Data storage store) {
 16 |     |         bytes32 s = _SLOT_OWNABLE_STORAGE;
 17 |     |         assembly {
 18 |     |             store.slot := s
 19 |     |         }
 20 |     |     }
 21 |     | 
 22 |     |     function onlyOwner() internal view {
 23 |     |         if (msg.sender != getOwner()) {
 24 |     |             revert AccessError.Unauthorized(msg.sender);
 25 |     |         }
 26 |     |     }
 27 |     | 
 28 |     |     function getOwner() internal view returns (address) {
 29 |     |         return OwnableStorage.load().owner;
 30 |     |     }
 31 |     | }
 32 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/proxy/AbstractProxy.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | abstract contract AbstractProxy {
  5 |     |     fallback() external payable {
  6 | *   |         _forward();
  7 |     |     }
  8 |     | 
  9 |     |     receive() external payable {
 10 |     |         _forward();
 11 |     |     }
 12 |     | 
 13 | *   |     function _forward() internal {
 14 | *   |         address implementation = _getImplementation();
 15 |     | 
 16 |     |         // solhint-disable-next-line no-inline-assembly
 17 |     |         assembly {
 18 | *   |             calldatacopy(0, 0, calldatasize())
 19 |     | 
 20 | *   |             let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)
 21 |     | 
 22 | *   |             returndatacopy(0, 0, returndatasize())
 23 |     | 
 24 | *   |             switch result
 25 | *   |             case 0 {
 26 | *   |                 revert(0, returndatasize())
 27 |     |             }
 28 |     |             default {
 29 | *   |                 return(0, returndatasize())
 30 |     |             }
 31 |     |         }
 32 |     |     }
 33 |     | 
 34 |     |     function _getImplementation() internal view virtual returns (address);
 35 |     | }
 36 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/proxy/ProxyStorage.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | contract ProxyStorage {
  5 |     |     bytes32 private constant _SLOT_PROXY_STORAGE =
  6 | *   |         keccak256(abi.encode("io.synthetix.core-contracts.Proxy"));
  7 |     | 
  8 |     |     struct ProxyStore {
  9 |     |         address implementation;
 10 |     |         bool simulatingUpgrade;
 11 |     |     }
 12 |     | 
 13 | *   |     function _proxyStore() internal pure returns (ProxyStore storage store) {
 14 | *   |         bytes32 s = _SLOT_PROXY_STORAGE;
 15 |     |         assembly {
 16 |     |             store.slot := s
 17 |     |         }
 18 |     |     }
 19 |     | }
 20 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/proxy/UUPSProxy.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | import "./AbstractProxy.sol";
  5 |     | import "./ProxyStorage.sol";
  6 |     | import "../errors/AddressError.sol";
  7 |     | import "../utils/AddressUtil.sol";
  8 |     | 
  9 | *   | contract UUPSProxy is AbstractProxy, ProxyStorage {
 10 |     |     constructor(address firstImplementation) {
 11 |     |         if (firstImplementation == address(0)) {
 12 |     |             revert AddressError.ZeroAddress();
 13 |     |         }
 14 |     | 
 15 |     |         if (!AddressUtil.isContract(firstImplementation)) {
 16 |     |             revert AddressError.NotAContract(firstImplementation);
 17 |     |         }
 18 |     | 
 19 |     |         _proxyStore().implementation = firstImplementation;
 20 |     |     }
 21 |     | 
 22 | *   |     function _getImplementation() internal view virtual override returns (address) {
 23 | *   |         return _proxyStore().implementation;
 24 |     |     }
 25 |     | }
 26 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | import {UUPSProxy} from "./UUPSProxy.sol";
  5 |     | import {OwnableStorage} from "../ownership/OwnableStorage.sol";
  6 |     | 
  7 | *   | contract UUPSProxyWithOwner is UUPSProxy {
  8 |     |     // solhint-disable-next-line no-empty-blocks
  9 |     |     constructor(address firstImplementation, address initialOwner) UUPSProxy(firstImplementation) {
 10 |     |         OwnableStorage.load().owner = initialOwner;
 11 |     |     }
 12 |     | }
 13 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/AddressUtil.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | library AddressUtil {
  5 |     |     function isContract(address account) internal view returns (bool) {
  6 |     |         uint256 size;
  7 |     | 
  8 |     |         assembly {
  9 |     |             size := extcodesize(account)
 10 |     |         }
 11 |     | 
 12 |     |         return size > 0;
 13 |     |     }
 14 |     | }
 15 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/DecimalMath.sol
   1 |     | //SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.11 <0.9.0;
   3 |     | 
   4 |     | import "./SafeCast.sol";
   5 |     | 
   6 |     | /**
   7 |     |  * @title Utility library used to represent "decimals" (fixed point numbers) with integers, with two different levels of precision.
   8 |     |  *
   9 |     |  * They are represented by N * UNIT, where UNIT is the number of decimals of precision in the representation.
  10 |     |  *
  11 |     |  * Examples:
  12 |     |  * 1) Given UNIT = 100
  13 |     |  * then if A = 50, A represents the decimal 0.50
  14 |     |  * 2) Given UNIT = 1000000000000000000
  15 |     |  * then if A = 500000000000000000, A represents the decimal 0.500000000000000000
  16 |     |  *
  17 |     |  * Note: An accompanying naming convention of the postfix "D<Precision>" is helpful with this utility. I.e. if a variable "myValue" represents a low resolution decimal, it should be named "myValueD18", and if it was a high resolution decimal "myValueD27". While scaling, intermediate precision decimals like "myValue45" could arise. Non-decimals should have no postfix, i.e. just "myValue".
  18 |     |  *
  19 |     |  * Important: Multiplication and division operations are currently not supported for high precision decimals. Using these operations on them will yield incorrect results and fail silently.
  20 |     |  */
  21 |     | library DecimalMath {
  22 |     |     using SafeCastU256 for uint256;
  23 |     |     using SafeCastI256 for int256;
  24 |     | 
  25 |     |     // solhint-disable numcast/safe-cast
  26 |     | 
  27 |     |     // Numbers representing 1.0 (low precision).
  28 |     |     uint256 public constant UNIT = 1e18;
  29 |     |     int256 public constant UNIT_INT = int256(UNIT);
  30 |     |     uint128 public constant UNIT_UINT128 = uint128(UNIT);
  31 |     |     int128 public constant UNIT_INT128 = int128(UNIT_INT);
  32 |     | 
  33 |     |     // Numbers representing 1.0 (high precision).
  34 |     |     uint256 public constant UNIT_PRECISE = 1e27;
  35 |     |     int256 public constant UNIT_PRECISE_INT = int256(UNIT_PRECISE);
  36 |     |     int128 public constant UNIT_PRECISE_INT128 = int128(UNIT_PRECISE_INT);
  37 |     | 
  38 |     |     // Precision scaling, (used to scale down/up from one precision to the other).
  39 |     |     uint256 public constant PRECISION_FACTOR = 9; // 27 - 18 = 9 :)
  40 |     | 
  41 |     |     // solhint-enable numcast/safe-cast
  42 |     | 
  43 |     |     // -----------------
  44 |     |     // uint256
  45 |     |     // -----------------
  46 |     | 
  47 |     |     /**
  48 |     |      * @dev Multiplies two low precision decimals.
  49 |     |      *
  50 |     |      * Since the two numbers are assumed to be fixed point numbers,
  51 |     |      * (x * UNIT) * (y * UNIT) = x * y * UNIT ^ 2,
  52 |     |      * the result is divided by UNIT to remove double scaling.
  53 |     |      */
  54 |     |     function mulDecimal(uint256 x, uint256 y) internal pure returns (uint256 z) {
  55 |     |         return (x * y) / UNIT;
  56 |     |     }
  57 |     | 
  58 |     |     /**
  59 |     |      * @dev Divides two low precision decimals.
  60 |     |      *
  61 |     |      * Since the two numbers are assumed to be fixed point numbers,
  62 |     |      * (x * UNIT) / (y * UNIT) = x / y (Decimal representation is lost),
  63 |     |      * x is first scaled up to end up with a decimal representation.
  64 |     |      */
  65 |     |     function divDecimal(uint256 x, uint256 y) internal pure returns (uint256 z) {
  66 |     |         return (x * UNIT) / y;
  67 |     |     }
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Scales up a value.
  71 |     |      *
  72 |     |      * E.g. if value is not a decimal, a scale up by 18 makes it a low precision decimal.
  73 |     |      * If value is a low precision decimal, a scale up by 9 makes it a high precision decimal.
  74 |     |      */
  75 |     |     function upscale(uint256 x, uint256 factor) internal pure returns (uint256) {
  76 |     |         return x * 10 ** factor;
  77 |     |     }
  78 |     | 
  79 |     |     /**
  80 |     |      * @dev Scales down a value.
  81 |     |      *
  82 |     |      * E.g. if value is a high precision decimal, a scale down by 9 makes it a low precision decimal.
  83 |     |      * If value is a low precision decimal, a scale down by 9 makes it a regular integer.
  84 |     |      *
  85 |     |      * Scaling down a regular integer would not make sense.
  86 |     |      */
  87 |     |     function downscale(uint256 x, uint256 factor) internal pure returns (uint256) {
  88 |     |         return x / 10 ** factor;
  89 |     |     }
  90 |     | 
  91 |     |     // -----------------
  92 |     |     // uint128
  93 |     |     // -----------------
  94 |     | 
  95 |     |     // Note: Overloading doesn't seem to work for similar types, i.e. int256 and int128, uint256 and uint128, etc, so explicitly naming the functions differently here.
  96 |     | 
  97 |     |     /**
  98 |     |      * @dev See mulDecimal for uint256.
  99 |     |      */
 100 |     |     function mulDecimalUint128(uint128 x, uint128 y) internal pure returns (uint128) {
 101 |     |         return (x * y) / UNIT_UINT128;
 102 |     |     }
 103 |     | 
 104 |     |     /**
 105 |     |      * @dev See divDecimal for uint256.
 106 |     |      */
 107 |     |     function divDecimalUint128(uint128 x, uint128 y) internal pure returns (uint128) {
 108 |     |         return (x * UNIT_UINT128) / y;
 109 |     |     }
 110 |     | 
 111 |     |     /**
 112 |     |      * @dev See upscale for uint256.
 113 |     |      */
 114 |     |     function upscaleUint128(uint128 x, uint256 factor) internal pure returns (uint128) {
 115 |     |         return x * (10 ** factor).to128();
 116 |     |     }
 117 |     | 
 118 |     |     /**
 119 |     |      * @dev See downscale for uint256.
 120 |     |      */
 121 |     |     function downscaleUint128(uint128 x, uint256 factor) internal pure returns (uint128) {
 122 |     |         return x / (10 ** factor).to128();
 123 |     |     }
 124 |     | 
 125 |     |     // -----------------
 126 |     |     // int256
 127 |     |     // -----------------
 128 |     | 
 129 |     |     /**
 130 |     |      * @dev See mulDecimal for uint256.
 131 |     |      */
 132 |     |     function mulDecimal(int256 x, int256 y) internal pure returns (int256) {
 133 |     |         return (x * y) / UNIT_INT;
 134 |     |     }
 135 |     | 
 136 |     |     /**
 137 |     |      * @dev See divDecimal for uint256.
 138 |     |      */
 139 |     |     function divDecimal(int256 x, int256 y) internal pure returns (int256) {
 140 |     |         return (x * UNIT_INT) / y;
 141 |     |     }
 142 |     | 
 143 |     |     /**
 144 |     |      * @dev See upscale for uint256.
 145 |     |      */
 146 |     |     function upscale(int256 x, uint256 factor) internal pure returns (int256) {
 147 |     |         return x * (10 ** factor).toInt();
 148 |     |     }
 149 |     | 
 150 |     |     /**
 151 |     |      * @dev See downscale for uint256.
 152 |     |      */
 153 |     |     function downscale(int256 x, uint256 factor) internal pure returns (int256) {
 154 |     |         return x / (10 ** factor).toInt();
 155 |     |     }
 156 |     | 
 157 |     |     // -----------------
 158 |     |     // int128
 159 |     |     // -----------------
 160 |     | 
 161 |     |     /**
 162 |     |      * @dev See mulDecimal for uint256.
 163 |     |      */
 164 |     |     function mulDecimalInt128(int128 x, int128 y) internal pure returns (int128) {
 165 |     |         return (x * y) / UNIT_INT128;
 166 |     |     }
 167 |     | 
 168 |     |     /**
 169 |     |      * @dev See divDecimal for uint256.
 170 |     |      */
 171 |     |     function divDecimalInt128(int128 x, int128 y) internal pure returns (int128) {
 172 |     |         return (x * UNIT_INT128) / y;
 173 |     |     }
 174 |     | 
 175 |     |     /**
 176 |     |      * @dev See upscale for uint256.
 177 |     |      */
 178 |     |     function upscaleInt128(int128 x, uint256 factor) internal pure returns (int128) {
 179 |     |         return x * ((10 ** factor).toInt()).to128();
 180 |     |     }
 181 |     | 
 182 |     |     /**
 183 |     |      * @dev See downscale for uint256.
 184 |     |      */
 185 |     |     function downscaleInt128(int128 x, uint256 factor) internal pure returns (int128) {
 186 |     |         return x / ((10 ** factor).toInt().to128());
 187 |     |     }
 188 |     | }
 189 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/ERC2771Context.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.4;
  3 |     | 
  4 |     | /* solhint-disable meta-transactions/no-msg-sender */
  5 |     | /* solhint-disable meta-transactions/no-msg-data */
  6 |     | 
  7 |     | library ERC2771Context {
  8 |     |     // This is the trusted-multicall-forwarder. The address is constant due to CREATE2.
  9 |     |     address private constant TRUSTED_FORWARDER = 0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e;
 10 |     | 
 11 |     |     function _msgSender() internal view returns (address sender) {
 12 |     |         if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {
 13 |     |             // The assembly code is more direct than the Solidity version using `abi.decode`.
 14 |     |             /// @solidity memory-safe-assembly
 15 |     |             assembly {
 16 |     |                 sender := shr(96, calldataload(sub(calldatasize(), 20)))
 17 |     |             }
 18 |     |         } else {
 19 |     |             return msg.sender;
 20 |     |         }
 21 |     |     }
 22 |     | 
 23 |     |     function _msgData() internal view returns (bytes calldata) {
 24 |     |         if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {
 25 |     |             return msg.data[:msg.data.length - 20];
 26 |     |         } else {
 27 |     |             return msg.data;
 28 |     |         }
 29 |     |     }
 30 |     | 
 31 |     |     function isTrustedForwarder(address forwarder) internal pure returns (bool) {
 32 |     |         return forwarder == TRUSTED_FORWARDER;
 33 |     |     }
 34 |     | 
 35 |     |     function trustedForwarder() internal pure returns (address) {
 36 |     |         return TRUSTED_FORWARDER;
 37 |     |     }
 38 |     | }
 39 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * Utilities that convert numeric types avoiding silent overflows.
  6 |     |  */
  7 |     | import "./SafeCast/SafeCastU32.sol";
  8 |     | import "./SafeCast/SafeCastI32.sol";
  9 |     | import "./SafeCast/SafeCastI24.sol";
 10 |     | import "./SafeCast/SafeCastU56.sol";
 11 |     | import "./SafeCast/SafeCastI56.sol";
 12 |     | import "./SafeCast/SafeCastU64.sol";
 13 |     | import "./SafeCast/SafeCastI64.sol";
 14 |     | import "./SafeCast/SafeCastI128.sol";
 15 |     | import "./SafeCast/SafeCastI256.sol";
 16 |     | import "./SafeCast/SafeCastU128.sol";
 17 |     | import "./SafeCast/SafeCastU160.sol";
 18 |     | import "./SafeCast/SafeCastU256.sol";
 19 |     | import "./SafeCast/SafeCastAddress.sol";
 20 |     | import "./SafeCast/SafeCastBytes32.sol";
 21 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastAddress.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastAddress {
  8 |     |     function to256(address x) internal pure returns (uint256) {
  9 |     |         return uint256(uint160(x));
 10 |     |     }
 11 |     | 
 12 |     |     function toBytes32(address x) internal pure returns (bytes32) {
 13 |     |         return bytes32(uint256(uint160(x)));
 14 |     |     }
 15 |     | }
 16 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastBytes32.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastBytes32 {
  8 |     |     function toAddress(bytes32 x) internal pure returns (address) {
  9 |     |         return address(uint160(uint256(x)));
 10 |     |     }
 11 |     | 
 12 |     |     function toUint(bytes32 x) internal pure returns (uint) {
 13 |     |         return uint(x);
 14 |     |     }
 15 |     | }
 16 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastI128.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastI128 {
  8 |     |     error OverflowInt128ToUint128();
  9 |     |     error OverflowInt128ToInt32();
 10 |     | 
 11 |     |     function toUint(int128 x) internal pure returns (uint128) {
 12 |     |         // ----------------<==============o==============>-----------------
 13 |     |         // ----------------xxxxxxxxxxxxxxxo===============>----------------
 14 |     |         if (x < 0) {
 15 |     |             revert OverflowInt128ToUint128();
 16 |     |         }
 17 |     | 
 18 |     |         return uint128(x);
 19 |     |     }
 20 |     | 
 21 |     |     function to256(int128 x) internal pure returns (int256) {
 22 |     |         return int256(x);
 23 |     |     }
 24 |     | 
 25 |     |     function to32(int128 x) internal pure returns (int32) {
 26 |     |         // ----------------<==============o==============>-----------------
 27 |     |         // ----------------xxxxxxxxxxxx<==o==>xxxxxxxxxxxx-----------------
 28 |     |         if (x < int256(type(int32).min) || x > int256(type(int32).max)) {
 29 |     |             revert OverflowInt128ToInt32();
 30 |     |         }
 31 |     | 
 32 |     |         return int32(x);
 33 |     |     }
 34 |     | 
 35 |     |     function zero() internal pure returns (int128) {
 36 |     |         return int128(0);
 37 |     |     }
 38 |     | }
 39 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastI24.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastI24 {
  8 |     |     function to256(int24 x) internal pure returns (int256) {
  9 |     |         return int256(x);
 10 |     |     }
 11 |     | }
 12 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastI256.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastI256 {
  8 |     |     error OverflowInt256ToUint256();
  9 |     |     error OverflowInt256ToInt128();
 10 |     |     error OverflowInt256ToInt24();
 11 |     | 
 12 |     |     function to128(int256 x) internal pure returns (int128) {
 13 |     |         // ----<==========================o===========================>----
 14 |     |         // ----xxxxxxxxxxxx<==============o==============>xxxxxxxxxxxxx----
 15 |     |         if (x < int256(type(int128).min) || x > int256(type(int128).max)) {
 16 |     |             revert OverflowInt256ToInt128();
 17 |     |         }
 18 |     | 
 19 |     |         return int128(x);
 20 |     |     }
 21 |     | 
 22 |     |     function to24(int256 x) internal pure returns (int24) {
 23 |     |         // ----<==========================o===========================>----
 24 |     |         // ----xxxxxxxxxxxxxxxxxxxx<======o=======>xxxxxxxxxxxxxxxxxxxx----
 25 |     |         if (x < int256(type(int24).min) || x > int256(type(int24).max)) {
 26 |     |             revert OverflowInt256ToInt24();
 27 |     |         }
 28 |     | 
 29 |     |         return int24(x);
 30 |     |     }
 31 |     | 
 32 |     |     function toUint(int256 x) internal pure returns (uint256) {
 33 |     |         // ----<==========================o===========================>----
 34 |     |         // ----xxxxxxxxxxxxxxxxxxxxxxxxxxxo===============================>
 35 |     |         if (x < 0) {
 36 |     |             revert OverflowInt256ToUint256();
 37 |     |         }
 38 |     | 
 39 |     |         return uint256(x);
 40 |     |     }
 41 |     | 
 42 |     |     function zero() internal pure returns (int256) {
 43 |     |         return int256(0);
 44 |     |     }
 45 |     | }
 46 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastI32.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastI32 {
  8 |     |     error OverflowInt32ToUint32();
  9 |     | 
 10 |     |     function toUint(int32 x) internal pure returns (uint32) {
 11 |     |         // ----------------------<========o========>----------------------
 12 |     |         // ----------------------xxxxxxxxxo=========>----------------------
 13 |     |         if (x < 0) {
 14 |     |             revert OverflowInt32ToUint32();
 15 |     |         }
 16 |     | 
 17 |     |         return uint32(x);
 18 |     |     }
 19 |     | }
 20 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastI56.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastI56 {
  8 |     |     error OverflowInt56ToInt24();
  9 |     | 
 10 |     |     function to24(int56 x) internal pure returns (int24) {
 11 |     |         // ----------------------<========o========>-----------------------
 12 |     |         // ----------------------xxx<=====o=====>xxx-----------------------
 13 |     |         if (x < int256(type(int24).min) || x > int256(type(int24).max)) {
 14 |     |             revert OverflowInt56ToInt24();
 15 |     |         }
 16 |     | 
 17 |     |         return int24(x);
 18 |     |     }
 19 |     | }
 20 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastI64.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastI64 {
  8 |     |     error OverflowInt64ToUint64();
  9 |     | 
 10 |     |     function toUint(int64 x) internal pure returns (uint64) {
 11 |     |         // ----------------------<========o========>----------------------
 12 |     |         // ----------------------xxxxxxxxxo=========>----------------------
 13 |     |         if (x < 0) {
 14 |     |             revert OverflowInt64ToUint64();
 15 |     |         }
 16 |     | 
 17 |     |         return uint64(x);
 18 |     |     }
 19 |     | }
 20 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastU128.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastU128 {
  8 |     |     error OverflowUint128ToInt128();
  9 |     | 
 10 |     |     function to256(uint128 x) internal pure returns (uint256) {
 11 |     |         return uint256(x);
 12 |     |     }
 13 |     | 
 14 |     |     function toInt(uint128 x) internal pure returns (int128) {
 15 |     |         // -------------------------------o===============>----------------
 16 |     |         // ----------------<==============o==============>x----------------
 17 |     |         if (x > uint128(type(int128).max)) {
 18 |     |             revert OverflowUint128ToInt128();
 19 |     |         }
 20 |     | 
 21 |     |         return int128(x);
 22 |     |     }
 23 |     | 
 24 |     |     function toBytes32(uint128 x) internal pure returns (bytes32) {
 25 |     |         return bytes32(uint256(x));
 26 |     |     }
 27 |     | }
 28 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastU160.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastU160 {
  8 |     |     function to256(uint160 x) internal pure returns (uint256) {
  9 |     |         return uint256(x);
 10 |     |     }
 11 |     | }
 12 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastU256.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastU256 {
  8 |     |     error OverflowUint256ToUint128();
  9 |     |     error OverflowUint256ToInt256();
 10 |     |     error OverflowUint256ToUint64();
 11 |     |     error OverflowUint256ToUint32();
 12 |     |     error OverflowUint256ToUint16();
 13 |     |     error OverflowUint256ToUint160();
 14 |     | 
 15 |     |     function to128(uint256 x) internal pure returns (uint128) {
 16 |     |         // -------------------------------o===============================>
 17 |     |         // -------------------------------o===============>xxxxxxxxxxxxxxxx
 18 |     |         if (x > type(uint128).max) {
 19 |     |             revert OverflowUint256ToUint128();
 20 |     |         }
 21 |     | 
 22 |     |         return uint128(x);
 23 |     |     }
 24 |     | 
 25 |     |     function to64(uint256 x) internal pure returns (uint64) {
 26 |     |         // -------------------------------o===============================>
 27 |     |         // -------------------------------o======>xxxxxxxxxxxxxxxxxxxxxxxxx
 28 |     |         if (x > type(uint64).max) {
 29 |     |             revert OverflowUint256ToUint64();
 30 |     |         }
 31 |     | 
 32 |     |         return uint64(x);
 33 |     |     }
 34 |     | 
 35 |     |     function to32(uint256 x) internal pure returns (uint32) {
 36 |     |         // -------------------------------o===============================>
 37 |     |         // -------------------------------o===>xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 38 |     |         if (x > type(uint32).max) {
 39 |     |             revert OverflowUint256ToUint32();
 40 |     |         }
 41 |     | 
 42 |     |         return uint32(x);
 43 |     |     }
 44 |     | 
 45 |     |     function to16(uint256 x) internal pure returns (uint16) {
 46 |     |         // -------------------------------o===============================>
 47 |     |         // -------------------------------o==>xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 48 |     |         if (x > type(uint16).max) {
 49 |     |             revert OverflowUint256ToUint16();
 50 |     |         }
 51 |     | 
 52 |     |         return uint16(x);
 53 |     |     }
 54 |     | 
 55 |     |     function to160(uint256 x) internal pure returns (uint160) {
 56 |     |         // -------------------------------o===============================>
 57 |     |         // -------------------------------o==================>xxxxxxxxxxxxx
 58 |     |         if (x > type(uint160).max) {
 59 |     |             revert OverflowUint256ToUint160();
 60 |     |         }
 61 |     | 
 62 |     |         return uint160(x);
 63 |     |     }
 64 |     | 
 65 |     |     function toBytes32(uint256 x) internal pure returns (bytes32) {
 66 |     |         return bytes32(x);
 67 |     |     }
 68 |     | 
 69 |     |     function toInt(uint256 x) internal pure returns (int256) {
 70 |     |         // -------------------------------o===============================>
 71 |     |         // ----<==========================o===========================>xxxx
 72 |     |         if (x > uint256(type(int256).max)) {
 73 |     |             revert OverflowUint256ToInt256();
 74 |     |         }
 75 |     | 
 76 |     |         return int256(x);
 77 |     |     }
 78 |     | }
 79 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastU32.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastU32 {
  8 |     |     error OverflowUint32ToInt32();
  9 |     | 
 10 |     |     function toInt(uint32 x) internal pure returns (int32) {
 11 |     |         // -------------------------------o=========>----------------------
 12 |     |         // ----------------------<========o========>x----------------------
 13 |     |         if (x > uint32(type(int32).max)) {
 14 |     |             revert OverflowUint32ToInt32();
 15 |     |         }
 16 |     | 
 17 |     |         return int32(x);
 18 |     |     }
 19 |     | 
 20 |     |     function to256(uint32 x) internal pure returns (uint256) {
 21 |     |         return uint256(x);
 22 |     |     }
 23 |     | 
 24 |     |     function to56(uint32 x) internal pure returns (uint56) {
 25 |     |         return uint56(x);
 26 |     |     }
 27 |     | }
 28 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastU56.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastU56 {
  8 |     |     error OverflowUint56ToInt56();
  9 |     | 
 10 |     |     function toInt(uint56 x) internal pure returns (int56) {
 11 |     |         // -------------------------------o=========>----------------------
 12 |     |         // ----------------------<========o========>x----------------------
 13 |     |         if (x > uint56(type(int56).max)) {
 14 |     |             revert OverflowUint56ToInt56();
 15 |     |         }
 16 |     | 
 17 |     |         return int56(x);
 18 |     |     }
 19 |     | }
 20 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/SafeCast/SafeCastU64.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /**
  5 |     |  * @title See SafeCast.sol.
  6 |     |  */
  7 |     | library SafeCastU64 {
  8 |     |     error OverflowUint64ToInt64();
  9 |     | 
 10 |     |     function toInt(uint64 x) internal pure returns (int64) {
 11 |     |         // -------------------------------o=========>----------------------
 12 |     |         // ----------------------<========o========>x----------------------
 13 |     |         if (x > uint64(type(int64).max)) {
 14 |     |             revert OverflowUint64ToInt64();
 15 |     |         }
 16 |     | 
 17 |     |         return int64(x);
 18 |     |     }
 19 |     | 
 20 |     |     function to256(uint64 x) internal pure returns (uint256) {
 21 |     |         return uint256(x);
 22 |     |     }
 23 |     | }
 24 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@synthetixio/core-contracts/contracts/utils/StringUtil.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | /*
  5 |     |     Reference implementations:
  6 |     |     * OpenZeppelin - https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol
  7 |     | */
  8 |     | 
  9 |     | library StringUtil {
 10 |     |     function uintToString(uint256 value) internal pure returns (string memory) {
 11 |     |         if (value == 0) {
 12 |     |             return "0";
 13 |     |         }
 14 |     | 
 15 |     |         uint256 temp = value;
 16 |     |         uint256 digits;
 17 |     |         while (temp != 0) {
 18 |     |             digits++;
 19 |     |             temp /= 10;
 20 |     |         }
 21 |     | 
 22 |     |         bytes memory buffer = new bytes(digits);
 23 |     |         while (value != 0) {
 24 |     |             digits -= 1;
 25 |     |             // solhint-disable-next-line numcast/safe-cast
 26 |     |             buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
 27 |     |             value /= 10;
 28 |     |         }
 29 |     | 
 30 |     |         return string(buffer);
 31 |     |     }
 32 |     | }
 33 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol
   1 |     | // SPDX-License-Identifier: AGPL-3.0-only
   2 |     | pragma solidity ^0.8.16;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
   5 |     | 
   6 |     | /**
   7 |     |  * @title Optimistic Oracle V3 Interface that callers must use to assert truths about the world.
   8 |     |  */
   9 |     | interface OptimisticOracleV3Interface {
  10 |     |     // Struct grouping together the settings related to the escalation manager stored in the assertion.
  11 |     |     struct EscalationManagerSettings {
  12 |     |         bool arbitrateViaEscalationManager; // False if the DVM is used as an oracle (EscalationManager on True).
  13 |     |         bool discardOracle; // False if Oracle result is used for resolving assertion after dispute.
  14 |     |         bool validateDisputers; // True if the EM isDisputeAllowed should be checked on disputes.
  15 |     |         address assertingCaller; // Stores msg.sender when assertion was made.
  16 |     |         address escalationManager; // Address of the escalation manager (zero address if not configured).
  17 |     |     }
  18 |     | 
  19 |     |     // Struct for storing properties and lifecycle of an assertion.
  20 |     |     struct Assertion {
  21 |     |         EscalationManagerSettings escalationManagerSettings; // Settings related to the escalation manager.
  22 |     |         address asserter; // Address of the asserter.
  23 |     |         uint64 assertionTime; // Time of the assertion.
  24 |     |         bool settled; // True if the request is settled.
  25 |     |         IERC20 currency; // ERC20 token used to pay rewards and fees.
  26 |     |         uint64 expirationTime; // Unix timestamp marking threshold when the assertion can no longer be disputed.
  27 |     |         bool settlementResolution; // Resolution of the assertion (false till resolved).
  28 |     |         bytes32 domainId; // Optional domain that can be used to relate the assertion to others in the escalationManager.
  29 |     |         bytes32 identifier; // UMA DVM identifier to use for price requests in the event of a dispute.
  30 |     |         uint256 bond; // Amount of currency that the asserter has bonded.
  31 |     |         address callbackRecipient; // Address that receives the callback.
  32 |     |         address disputer; // Address of the disputer.
  33 |     |     }
  34 |     | 
  35 |     |     // Struct for storing cached currency whitelist.
  36 |     |     struct WhitelistedCurrency {
  37 |     |         bool isWhitelisted; // True if the currency is whitelisted.
  38 |     |         uint256 finalFee; // Final fee of the currency.
  39 |     |     }
  40 |     | 
  41 |     |     /**
  42 |     |      * @notice Disputes an assertion. Depending on how the assertion was configured, this may either escalate to the UMA
  43 |     |      * DVM or the configured escalation manager for arbitration.
  44 |     |      * @dev The caller must approve this contract to spend at least bond amount of currency for the associated assertion.
  45 |     |      * @param assertionId unique identifier for the assertion to dispute.
  46 |     |      * @param disputer receives bonds back at settlement.
  47 |     |      */
  48 |     |     function disputeAssertion(bytes32 assertionId, address disputer) external;
  49 |     | 
  50 |     |     /**
  51 |     |      * @notice Returns the default identifier used by the Optimistic Oracle V3.
  52 |     |      * @return The default identifier.
  53 |     |      */
  54 |     |     function defaultIdentifier() external view returns (bytes32);
  55 |     | 
  56 |     |     /**
  57 |     |      * @notice Fetches information about a specific assertion and returns it.
  58 |     |      * @param assertionId unique identifier for the assertion to fetch information for.
  59 |     |      * @return assertion information about the assertion.
  60 |     |      */
  61 |     |     function getAssertion(bytes32 assertionId) external view returns (Assertion memory);
  62 |     | 
  63 |     |     /**
  64 |     |      * @notice Asserts a truth about the world, using the default currency and liveness. No callback recipient or
  65 |     |      * escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage
  66 |     |      * (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency.
  67 |     |      * @dev The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).
  68 |     |      * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.
  69 |     |      * @param asserter receives bonds back at settlement. This could be msg.sender or
  70 |     |      * any other account that the caller wants to receive the bond at settlement time.
  71 |     |      * @return assertionId unique identifier for this assertion.
  72 |     |      */
  73 |     |     function assertTruthWithDefaults(bytes memory claim, address asserter) external returns (bytes32);
  74 |     | 
  75 |     |     /**
  76 |     |      * @notice Asserts a truth about the world, using a fully custom configuration.
  77 |     |      * @dev The caller must approve this contract to spend at least bond amount of currency.
  78 |     |      * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.
  79 |     |      * @param asserter receives bonds back at settlement. This could be msg.sender or
  80 |     |      * any other account that the caller wants to receive the bond at settlement time.
  81 |     |      * @param callbackRecipient if configured, this address will receive a function call assertionResolvedCallback and
  82 |     |      * assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The
  83 |     |      * recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.
  84 |     |      * @param escalationManager if configured, this address will control escalation properties of the assertion. This
  85 |     |      * means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to
  86 |     |      * validate disputes. Combining these, the asserter can define their own security properties for the assertion.
  87 |     |      * escalationManager also _must_ implement the same callbacks as callbackRecipient.
  88 |     |      * @param liveness time to wait before the assertion can be resolved. Assertion can be disputed in this time.
  89 |     |      * @param currency bond currency pulled from the caller and held in escrow until the assertion is resolved.
  90 |     |      * @param bond amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This
  91 |     |      * must be >= getMinimumBond(address(currency)).
  92 |     |      * @param identifier UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.
  93 |     |      * @param domainId optional domain that can be used to relate this assertion to others in the escalationManager and
  94 |     |      * can be used by the configured escalationManager to define custom behavior for groups of assertions. This is
  95 |     |      * typically used for "escalation games" by changing bonds or other assertion properties based on the other
  96 |     |      * assertions that have come before. If not needed this value should be 0 to save gas.
  97 |     |      * @return assertionId unique identifier for this assertion.
  98 |     |      */
  99 |     |     function assertTruth(
 100 |     |         bytes memory claim,
 101 |     |         address asserter,
 102 |     |         address callbackRecipient,
 103 |     |         address escalationManager,
 104 |     |         uint64 liveness,
 105 |     |         IERC20 currency,
 106 |     |         uint256 bond,
 107 |     |         bytes32 identifier,
 108 |     |         bytes32 domainId
 109 |     |     ) external returns (bytes32);
 110 |     | 
 111 |     |     /**
 112 |     |      * @notice Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy
 113 |     |      * of the information within this contract. This is used to save gas when making assertions as we can avoid an
 114 |     |      * external call to the UMA contracts to fetch this.
 115 |     |      * @param identifier identifier to fetch information for and store locally.
 116 |     |      * @param currency currency to fetch information for and store locally.
 117 |     |      */
 118 |     |     function syncUmaParams(bytes32 identifier, address currency) external;
 119 |     | 
 120 |     |     /**
 121 |     |      * @notice Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the
 122 |     |      * asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle
 123 |     |      * result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an
 124 |     |      * amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of
 125 |     |      * the bond is returned to the asserter or disputer.
 126 |     |      * @param assertionId unique identifier for the assertion to resolve.
 127 |     |      */
 128 |     |     function settleAssertion(bytes32 assertionId) external;
 129 |     | 
 130 |     |     /**
 131 |     |      * @notice Settles an assertion and returns the resolution.
 132 |     |      * @param assertionId unique identifier for the assertion to resolve and return the resolution for.
 133 |     |      * @return resolution of the assertion.
 134 |     |      */
 135 |     |     function settleAndGetAssertionResult(bytes32 assertionId) external returns (bool);
 136 |     | 
 137 |     |     /**
 138 |     |      * @notice Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then
 139 |     |      * this will revert. If the assertion was disputed and configured to discard the oracle resolution return false.
 140 |     |      * @param assertionId unique identifier for the assertion to fetch the resolution for.
 141 |     |      * @return resolution of the assertion.
 142 |     |      */
 143 |     |     function getAssertionResult(bytes32 assertionId) external view returns (bool);
 144 |     | 
 145 |     |     /**
 146 |     |      * @notice Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the
 147 |     |      * currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee.
 148 |     |      * @param currency currency to calculate the minimum bond for.
 149 |     |      * @return minimum bond amount.
 150 |     |      */
 151 |     |     function getMinimumBond(address currency) external view returns (uint256);
 152 |     | 
 153 |     |     event AssertionMade(
 154 |     |         bytes32 indexed assertionId,
 155 |     |         bytes32 domainId,
 156 |     |         bytes claim,
 157 |     |         address indexed asserter,
 158 |     |         address callbackRecipient,
 159 |     |         address escalationManager,
 160 |     |         address caller,
 161 |     |         uint64 expirationTime,
 162 |     |         IERC20 currency,
 163 |     |         uint256 bond,
 164 |     |         bytes32 indexed identifier
 165 |     |     );
 166 |     | 
 167 |     |     event AssertionDisputed(bytes32 indexed assertionId, address indexed caller, address indexed disputer);
 168 |     | 
 169 |     |     event AssertionSettled(
 170 |     |         bytes32 indexed assertionId,
 171 |     |         address indexed bondRecipient,
 172 |     |         bool disputed,
 173 |     |         bool settlementResolution,
 174 |     |         address settleCaller
 175 |     |     );
 176 |     | 
 177 |     |     event AdminPropertiesSet(IERC20 defaultCurrency, uint64 defaultLiveness, uint256 burnedBondPercentage);
 178 |     | }
 179 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.5.0;
  3 |     | 
  4 |     | /// @title The interface for the Uniswap V3 Factory
  5 |     | /// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees
  6 |     | interface IUniswapV3Factory {
  7 |     |     /// @notice Emitted when the owner of the factory is changed
  8 |     |     /// @param oldOwner The owner before the owner was changed
  9 |     |     /// @param newOwner The owner after the owner was changed
 10 |     |     event OwnerChanged(address indexed oldOwner, address indexed newOwner);
 11 |     | 
 12 |     |     /// @notice Emitted when a pool is created
 13 |     |     /// @param token0 The first token of the pool by address sort order
 14 |     |     /// @param token1 The second token of the pool by address sort order
 15 |     |     /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip
 16 |     |     /// @param tickSpacing The minimum number of ticks between initialized ticks
 17 |     |     /// @param pool The address of the created pool
 18 |     |     event PoolCreated(
 19 |     |         address indexed token0,
 20 |     |         address indexed token1,
 21 |     |         uint24 indexed fee,
 22 |     |         int24 tickSpacing,
 23 |     |         address pool
 24 |     |     );
 25 |     | 
 26 |     |     /// @notice Emitted when a new fee amount is enabled for pool creation via the factory
 27 |     |     /// @param fee The enabled fee, denominated in hundredths of a bip
 28 |     |     /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee
 29 |     |     event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);
 30 |     | 
 31 |     |     /// @notice Returns the current owner of the factory
 32 |     |     /// @dev Can be changed by the current owner via setOwner
 33 |     |     /// @return The address of the factory owner
 34 |     |     function owner() external view returns (address);
 35 |     | 
 36 |     |     /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled
 37 |     |     /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context
 38 |     |     /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee
 39 |     |     /// @return The tick spacing
 40 |     |     function feeAmountTickSpacing(uint24 fee) external view returns (int24);
 41 |     | 
 42 |     |     /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist
 43 |     |     /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order
 44 |     |     /// @param tokenA The contract address of either token0 or token1
 45 |     |     /// @param tokenB The contract address of the other token
 46 |     |     /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip
 47 |     |     /// @return pool The pool address
 48 |     |     function getPool(
 49 |     |         address tokenA,
 50 |     |         address tokenB,
 51 |     |         uint24 fee
 52 |     |     ) external view returns (address pool);
 53 |     | 
 54 |     |     /// @notice Creates a pool for the given two tokens and fee
 55 |     |     /// @param tokenA One of the two tokens in the desired pool
 56 |     |     /// @param tokenB The other of the two tokens in the desired pool
 57 |     |     /// @param fee The desired fee for the pool
 58 |     |     /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved
 59 |     |     /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments
 60 |     |     /// are invalid.
 61 |     |     /// @return pool The address of the newly created pool
 62 |     |     function createPool(
 63 |     |         address tokenA,
 64 |     |         address tokenB,
 65 |     |         uint24 fee
 66 |     |     ) external returns (address pool);
 67 |     | 
 68 |     |     /// @notice Updates the owner of the factory
 69 |     |     /// @dev Must be called by the current owner
 70 |     |     /// @param _owner The new owner of the factory
 71 |     |     function setOwner(address _owner) external;
 72 |     | 
 73 |     |     /// @notice Enables a fee amount with the given tickSpacing
 74 |     |     /// @dev Fee amounts may never be removed once enabled
 75 |     |     /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)
 76 |     |     /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount
 77 |     |     function enableFeeAmount(uint24 fee, int24 tickSpacing) external;
 78 |     | }
 79 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.5.0;
  3 |     | 
  4 |     | import './pool/IUniswapV3PoolImmutables.sol';
  5 |     | import './pool/IUniswapV3PoolState.sol';
  6 |     | import './pool/IUniswapV3PoolDerivedState.sol';
  7 |     | import './pool/IUniswapV3PoolActions.sol';
  8 |     | import './pool/IUniswapV3PoolOwnerActions.sol';
  9 |     | import './pool/IUniswapV3PoolEvents.sol';
 10 |     | 
 11 |     | /// @title The interface for a Uniswap V3 Pool
 12 |     | /// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform
 13 |     | /// to the ERC20 specification
 14 |     | /// @dev The pool interface is broken up into many smaller pieces
 15 |     | interface IUniswapV3Pool is
 16 |     |     IUniswapV3PoolImmutables,
 17 |     |     IUniswapV3PoolState,
 18 |     |     IUniswapV3PoolDerivedState,
 19 |     |     IUniswapV3PoolActions,
 20 |     |     IUniswapV3PoolOwnerActions,
 21 |     |     IUniswapV3PoolEvents
 22 |     | {
 23 |     | 
 24 |     | }
 25 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.5.0;
  3 |     | 
  4 |     | /// @title Callback for IUniswapV3PoolActions#swap
  5 |     | /// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface
  6 |     | interface IUniswapV3SwapCallback {
  7 |     |     /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.
  8 |     |     /// @dev In the implementation you must pay the pool tokens owed for the swap.
  9 |     |     /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.
 10 |     |     /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.
 11 |     |     /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by
 12 |     |     /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.
 13 |     |     /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by
 14 |     |     /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.
 15 |     |     /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call
 16 |     |     function uniswapV3SwapCallback(
 17 |     |         int256 amount0Delta,
 18 |     |         int256 amount1Delta,
 19 |     |         bytes calldata data
 20 |     |     ) external;
 21 |     | }
 22 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.5.0;
   3 |     | 
   4 |     | /// @title Permissionless pool actions
   5 |     | /// @notice Contains pool methods that can be called by anyone
   6 |     | interface IUniswapV3PoolActions {
   7 |     |     /// @notice Sets the initial price for the pool
   8 |     |     /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value
   9 |     |     /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96
  10 |     |     function initialize(uint160 sqrtPriceX96) external;
  11 |     | 
  12 |     |     /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position
  13 |     |     /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback
  14 |     |     /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends
  15 |     |     /// on tickLower, tickUpper, the amount of liquidity, and the current price.
  16 |     |     /// @param recipient The address for which the liquidity will be created
  17 |     |     /// @param tickLower The lower tick of the position in which to add liquidity
  18 |     |     /// @param tickUpper The upper tick of the position in which to add liquidity
  19 |     |     /// @param amount The amount of liquidity to mint
  20 |     |     /// @param data Any data that should be passed through to the callback
  21 |     |     /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback
  22 |     |     /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback
  23 |     |     function mint(
  24 |     |         address recipient,
  25 |     |         int24 tickLower,
  26 |     |         int24 tickUpper,
  27 |     |         uint128 amount,
  28 |     |         bytes calldata data
  29 |     |     ) external returns (uint256 amount0, uint256 amount1);
  30 |     | 
  31 |     |     /// @notice Collects tokens owed to a position
  32 |     |     /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.
  33 |     |     /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or
  34 |     |     /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the
  35 |     |     /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.
  36 |     |     /// @param recipient The address which should receive the fees collected
  37 |     |     /// @param tickLower The lower tick of the position for which to collect fees
  38 |     |     /// @param tickUpper The upper tick of the position for which to collect fees
  39 |     |     /// @param amount0Requested How much token0 should be withdrawn from the fees owed
  40 |     |     /// @param amount1Requested How much token1 should be withdrawn from the fees owed
  41 |     |     /// @return amount0 The amount of fees collected in token0
  42 |     |     /// @return amount1 The amount of fees collected in token1
  43 |     |     function collect(
  44 |     |         address recipient,
  45 |     |         int24 tickLower,
  46 |     |         int24 tickUpper,
  47 |     |         uint128 amount0Requested,
  48 |     |         uint128 amount1Requested
  49 |     |     ) external returns (uint128 amount0, uint128 amount1);
  50 |     | 
  51 |     |     /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position
  52 |     |     /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0
  53 |     |     /// @dev Fees must be collected separately via a call to #collect
  54 |     |     /// @param tickLower The lower tick of the position for which to burn liquidity
  55 |     |     /// @param tickUpper The upper tick of the position for which to burn liquidity
  56 |     |     /// @param amount How much liquidity to burn
  57 |     |     /// @return amount0 The amount of token0 sent to the recipient
  58 |     |     /// @return amount1 The amount of token1 sent to the recipient
  59 |     |     function burn(
  60 |     |         int24 tickLower,
  61 |     |         int24 tickUpper,
  62 |     |         uint128 amount
  63 |     |     ) external returns (uint256 amount0, uint256 amount1);
  64 |     | 
  65 |     |     /// @notice Swap token0 for token1, or token1 for token0
  66 |     |     /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback
  67 |     |     /// @param recipient The address to receive the output of the swap
  68 |     |     /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0
  69 |     |     /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)
  70 |     |     /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this
  71 |     |     /// value after the swap. If one for zero, the price cannot be greater than this value after the swap
  72 |     |     /// @param data Any data to be passed through to the callback
  73 |     |     /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive
  74 |     |     /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive
  75 |     |     function swap(
  76 |     |         address recipient,
  77 |     |         bool zeroForOne,
  78 |     |         int256 amountSpecified,
  79 |     |         uint160 sqrtPriceLimitX96,
  80 |     |         bytes calldata data
  81 |     |     ) external returns (int256 amount0, int256 amount1);
  82 |     | 
  83 |     |     /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback
  84 |     |     /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback
  85 |     |     /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling
  86 |     |     /// with 0 amount{0,1} and sending the donation amount(s) from the callback
  87 |     |     /// @param recipient The address which will receive the token0 and token1 amounts
  88 |     |     /// @param amount0 The amount of token0 to send
  89 |     |     /// @param amount1 The amount of token1 to send
  90 |     |     /// @param data Any data to be passed through to the callback
  91 |     |     function flash(
  92 |     |         address recipient,
  93 |     |         uint256 amount0,
  94 |     |         uint256 amount1,
  95 |     |         bytes calldata data
  96 |     |     ) external;
  97 |     | 
  98 |     |     /// @notice Increase the maximum number of price and liquidity observations that this pool will store
  99 |     |     /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to
 100 |     |     /// the input observationCardinalityNext.
 101 |     |     /// @param observationCardinalityNext The desired minimum number of observations for the pool to store
 102 |     |     function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;
 103 |     | }
 104 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.5.0;
  3 |     | 
  4 |     | /// @title Pool state that is not stored
  5 |     | /// @notice Contains view functions to provide information about the pool that is computed rather than stored on the
  6 |     | /// blockchain. The functions here may have variable gas costs.
  7 |     | interface IUniswapV3PoolDerivedState {
  8 |     |     /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp
  9 |     |     /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing
 10 |     |     /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,
 11 |     |     /// you must call it with secondsAgos = [3600, 0].
 12 |     |     /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in
 13 |     |     /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.
 14 |     |     /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned
 15 |     |     /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp
 16 |     |     /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block
 17 |     |     /// timestamp
 18 |     |     function observe(uint32[] calldata secondsAgos)
 19 |     |         external
 20 |     |         view
 21 |     |         returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);
 22 |     | 
 23 |     |     /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range
 24 |     |     /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.
 25 |     |     /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first
 26 |     |     /// snapshot is taken and the second snapshot is taken.
 27 |     |     /// @param tickLower The lower tick of the range
 28 |     |     /// @param tickUpper The upper tick of the range
 29 |     |     /// @return tickCumulativeInside The snapshot of the tick accumulator for the range
 30 |     |     /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range
 31 |     |     /// @return secondsInside The snapshot of seconds per liquidity for the range
 32 |     |     function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)
 33 |     |         external
 34 |     |         view
 35 |     |         returns (
 36 |     |             int56 tickCumulativeInside,
 37 |     |             uint160 secondsPerLiquidityInsideX128,
 38 |     |             uint32 secondsInside
 39 |     |         );
 40 |     | }
 41 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.5.0;
   3 |     | 
   4 |     | /// @title Events emitted by a pool
   5 |     | /// @notice Contains all events emitted by the pool
   6 |     | interface IUniswapV3PoolEvents {
   7 |     |     /// @notice Emitted exactly once by a pool when #initialize is first called on the pool
   8 |     |     /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize
   9 |     |     /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96
  10 |     |     /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool
  11 |     |     event Initialize(uint160 sqrtPriceX96, int24 tick);
  12 |     | 
  13 |     |     /// @notice Emitted when liquidity is minted for a given position
  14 |     |     /// @param sender The address that minted the liquidity
  15 |     |     /// @param owner The owner of the position and recipient of any minted liquidity
  16 |     |     /// @param tickLower The lower tick of the position
  17 |     |     /// @param tickUpper The upper tick of the position
  18 |     |     /// @param amount The amount of liquidity minted to the position range
  19 |     |     /// @param amount0 How much token0 was required for the minted liquidity
  20 |     |     /// @param amount1 How much token1 was required for the minted liquidity
  21 |     |     event Mint(
  22 |     |         address sender,
  23 |     |         address indexed owner,
  24 |     |         int24 indexed tickLower,
  25 |     |         int24 indexed tickUpper,
  26 |     |         uint128 amount,
  27 |     |         uint256 amount0,
  28 |     |         uint256 amount1
  29 |     |     );
  30 |     | 
  31 |     |     /// @notice Emitted when fees are collected by the owner of a position
  32 |     |     /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees
  33 |     |     /// @param owner The owner of the position for which fees are collected
  34 |     |     /// @param tickLower The lower tick of the position
  35 |     |     /// @param tickUpper The upper tick of the position
  36 |     |     /// @param amount0 The amount of token0 fees collected
  37 |     |     /// @param amount1 The amount of token1 fees collected
  38 |     |     event Collect(
  39 |     |         address indexed owner,
  40 |     |         address recipient,
  41 |     |         int24 indexed tickLower,
  42 |     |         int24 indexed tickUpper,
  43 |     |         uint128 amount0,
  44 |     |         uint128 amount1
  45 |     |     );
  46 |     | 
  47 |     |     /// @notice Emitted when a position's liquidity is removed
  48 |     |     /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect
  49 |     |     /// @param owner The owner of the position for which liquidity is removed
  50 |     |     /// @param tickLower The lower tick of the position
  51 |     |     /// @param tickUpper The upper tick of the position
  52 |     |     /// @param amount The amount of liquidity to remove
  53 |     |     /// @param amount0 The amount of token0 withdrawn
  54 |     |     /// @param amount1 The amount of token1 withdrawn
  55 |     |     event Burn(
  56 |     |         address indexed owner,
  57 |     |         int24 indexed tickLower,
  58 |     |         int24 indexed tickUpper,
  59 |     |         uint128 amount,
  60 |     |         uint256 amount0,
  61 |     |         uint256 amount1
  62 |     |     );
  63 |     | 
  64 |     |     /// @notice Emitted by the pool for any swaps between token0 and token1
  65 |     |     /// @param sender The address that initiated the swap call, and that received the callback
  66 |     |     /// @param recipient The address that received the output of the swap
  67 |     |     /// @param amount0 The delta of the token0 balance of the pool
  68 |     |     /// @param amount1 The delta of the token1 balance of the pool
  69 |     |     /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96
  70 |     |     /// @param liquidity The liquidity of the pool after the swap
  71 |     |     /// @param tick The log base 1.0001 of price of the pool after the swap
  72 |     |     event Swap(
  73 |     |         address indexed sender,
  74 |     |         address indexed recipient,
  75 |     |         int256 amount0,
  76 |     |         int256 amount1,
  77 |     |         uint160 sqrtPriceX96,
  78 |     |         uint128 liquidity,
  79 |     |         int24 tick
  80 |     |     );
  81 |     | 
  82 |     |     /// @notice Emitted by the pool for any flashes of token0/token1
  83 |     |     /// @param sender The address that initiated the swap call, and that received the callback
  84 |     |     /// @param recipient The address that received the tokens from flash
  85 |     |     /// @param amount0 The amount of token0 that was flashed
  86 |     |     /// @param amount1 The amount of token1 that was flashed
  87 |     |     /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee
  88 |     |     /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee
  89 |     |     event Flash(
  90 |     |         address indexed sender,
  91 |     |         address indexed recipient,
  92 |     |         uint256 amount0,
  93 |     |         uint256 amount1,
  94 |     |         uint256 paid0,
  95 |     |         uint256 paid1
  96 |     |     );
  97 |     | 
  98 |     |     /// @notice Emitted by the pool for increases to the number of observations that can be stored
  99 |     |     /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index
 100 |     |     /// just before a mint/swap/burn.
 101 |     |     /// @param observationCardinalityNextOld The previous value of the next observation cardinality
 102 |     |     /// @param observationCardinalityNextNew The updated value of the next observation cardinality
 103 |     |     event IncreaseObservationCardinalityNext(
 104 |     |         uint16 observationCardinalityNextOld,
 105 |     |         uint16 observationCardinalityNextNew
 106 |     |     );
 107 |     | 
 108 |     |     /// @notice Emitted when the protocol fee is changed by the pool
 109 |     |     /// @param feeProtocol0Old The previous value of the token0 protocol fee
 110 |     |     /// @param feeProtocol1Old The previous value of the token1 protocol fee
 111 |     |     /// @param feeProtocol0New The updated value of the token0 protocol fee
 112 |     |     /// @param feeProtocol1New The updated value of the token1 protocol fee
 113 |     |     event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);
 114 |     | 
 115 |     |     /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner
 116 |     |     /// @param sender The address that collects the protocol fees
 117 |     |     /// @param recipient The address that receives the collected protocol fees
 118 |     |     /// @param amount0 The amount of token0 protocol fees that is withdrawn
 119 |     |     /// @param amount0 The amount of token1 protocol fees that is withdrawn
 120 |     |     event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);
 121 |     | }
 122 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.5.0;
  3 |     | 
  4 |     | /// @title Pool state that never changes
  5 |     | /// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values
  6 |     | interface IUniswapV3PoolImmutables {
  7 |     |     /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface
  8 |     |     /// @return The contract address
  9 |     |     function factory() external view returns (address);
 10 |     | 
 11 |     |     /// @notice The first of the two tokens of the pool, sorted by address
 12 |     |     /// @return The token contract address
 13 |     |     function token0() external view returns (address);
 14 |     | 
 15 |     |     /// @notice The second of the two tokens of the pool, sorted by address
 16 |     |     /// @return The token contract address
 17 |     |     function token1() external view returns (address);
 18 |     | 
 19 |     |     /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6
 20 |     |     /// @return The fee
 21 |     |     function fee() external view returns (uint24);
 22 |     | 
 23 |     |     /// @notice The pool tick spacing
 24 |     |     /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive
 25 |     |     /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...
 26 |     |     /// This value is an int24 to avoid casting even though it is always positive.
 27 |     |     /// @return The tick spacing
 28 |     |     function tickSpacing() external view returns (int24);
 29 |     | 
 30 |     |     /// @notice The maximum amount of position liquidity that can use any tick in the range
 31 |     |     /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and
 32 |     |     /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool
 33 |     |     /// @return The max amount of liquidity per tick
 34 |     |     function maxLiquidityPerTick() external view returns (uint128);
 35 |     | }
 36 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.5.0;
  3 |     | 
  4 |     | /// @title Permissioned pool actions
  5 |     | /// @notice Contains pool methods that may only be called by the factory owner
  6 |     | interface IUniswapV3PoolOwnerActions {
  7 |     |     /// @notice Set the denominator of the protocol's % share of the fees
  8 |     |     /// @param feeProtocol0 new protocol fee for token0 of the pool
  9 |     |     /// @param feeProtocol1 new protocol fee for token1 of the pool
 10 |     |     function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;
 11 |     | 
 12 |     |     /// @notice Collect the protocol fee accrued to the pool
 13 |     |     /// @param recipient The address to which collected protocol fees should be sent
 14 |     |     /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1
 15 |     |     /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0
 16 |     |     /// @return amount0 The protocol fee collected in token0
 17 |     |     /// @return amount1 The protocol fee collected in token1
 18 |     |     function collectProtocol(
 19 |     |         address recipient,
 20 |     |         uint128 amount0Requested,
 21 |     |         uint128 amount1Requested
 22 |     |     ) external returns (uint128 amount0, uint128 amount1);
 23 |     | }
 24 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.5.0;
   3 |     | 
   4 |     | /// @title Pool state that can change
   5 |     | /// @notice These methods compose the pool's state, and can change with any frequency including multiple times
   6 |     | /// per transaction
   7 |     | interface IUniswapV3PoolState {
   8 |     |     /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas
   9 |     |     /// when accessed externally.
  10 |     |     /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value
  11 |     |     /// tick The current tick of the pool, i.e. according to the last tick transition that was run.
  12 |     |     /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick
  13 |     |     /// boundary.
  14 |     |     /// observationIndex The index of the last oracle observation that was written,
  15 |     |     /// observationCardinality The current maximum number of observations stored in the pool,
  16 |     |     /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.
  17 |     |     /// feeProtocol The protocol fee for both tokens of the pool.
  18 |     |     /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0
  19 |     |     /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.
  20 |     |     /// unlocked Whether the pool is currently locked to reentrancy
  21 |     |     function slot0()
  22 |     |         external
  23 |     |         view
  24 |     |         returns (
  25 |     |             uint160 sqrtPriceX96,
  26 |     |             int24 tick,
  27 |     |             uint16 observationIndex,
  28 |     |             uint16 observationCardinality,
  29 |     |             uint16 observationCardinalityNext,
  30 |     |             uint8 feeProtocol,
  31 |     |             bool unlocked
  32 |     |         );
  33 |     | 
  34 |     |     /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool
  35 |     |     /// @dev This value can overflow the uint256
  36 |     |     function feeGrowthGlobal0X128() external view returns (uint256);
  37 |     | 
  38 |     |     /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool
  39 |     |     /// @dev This value can overflow the uint256
  40 |     |     function feeGrowthGlobal1X128() external view returns (uint256);
  41 |     | 
  42 |     |     /// @notice The amounts of token0 and token1 that are owed to the protocol
  43 |     |     /// @dev Protocol fees will never exceed uint128 max in either token
  44 |     |     function protocolFees() external view returns (uint128 token0, uint128 token1);
  45 |     | 
  46 |     |     /// @notice The currently in range liquidity available to the pool
  47 |     |     /// @dev This value has no relationship to the total liquidity across all ticks
  48 |     |     function liquidity() external view returns (uint128);
  49 |     | 
  50 |     |     /// @notice Look up information about a specific tick in the pool
  51 |     |     /// @param tick The tick to look up
  52 |     |     /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or
  53 |     |     /// tick upper,
  54 |     |     /// liquidityNet how much liquidity changes when the pool price crosses the tick,
  55 |     |     /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,
  56 |     |     /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,
  57 |     |     /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick
  58 |     |     /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,
  59 |     |     /// secondsOutside the seconds spent on the other side of the tick from the current tick,
  60 |     |     /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.
  61 |     |     /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.
  62 |     |     /// In addition, these values are only relative and must be used only in comparison to previous snapshots for
  63 |     |     /// a specific position.
  64 |     |     function ticks(int24 tick)
  65 |     |         external
  66 |     |         view
  67 |     |         returns (
  68 |     |             uint128 liquidityGross,
  69 |     |             int128 liquidityNet,
  70 |     |             uint256 feeGrowthOutside0X128,
  71 |     |             uint256 feeGrowthOutside1X128,
  72 |     |             int56 tickCumulativeOutside,
  73 |     |             uint160 secondsPerLiquidityOutsideX128,
  74 |     |             uint32 secondsOutside,
  75 |     |             bool initialized
  76 |     |         );
  77 |     | 
  78 |     |     /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information
  79 |     |     function tickBitmap(int16 wordPosition) external view returns (uint256);
  80 |     | 
  81 |     |     /// @notice Returns the information about a position by the position's key
  82 |     |     /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper
  83 |     |     /// @return _liquidity The amount of liquidity in the position,
  84 |     |     /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,
  85 |     |     /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,
  86 |     |     /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,
  87 |     |     /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke
  88 |     |     function positions(bytes32 key)
  89 |     |         external
  90 |     |         view
  91 |     |         returns (
  92 |     |             uint128 _liquidity,
  93 |     |             uint256 feeGrowthInside0LastX128,
  94 |     |             uint256 feeGrowthInside1LastX128,
  95 |     |             uint128 tokensOwed0,
  96 |     |             uint128 tokensOwed1
  97 |     |         );
  98 |     | 
  99 |     |     /// @notice Returns data about a specific observation index
 100 |     |     /// @param index The element of the observations array to fetch
 101 |     |     /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time
 102 |     |     /// ago, rather than at a specific index in the array.
 103 |     |     /// @return blockTimestamp The timestamp of the observation,
 104 |     |     /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,
 105 |     |     /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,
 106 |     |     /// Returns initialized whether the observation has been initialized and the values are safe to use
 107 |     |     function observations(uint256 index)
 108 |     |         external
 109 |     |         view
 110 |     |         returns (
 111 |     |             uint32 blockTimestamp,
 112 |     |             int56 tickCumulative,
 113 |     |             uint160 secondsPerLiquidityCumulativeX128,
 114 |     |             bool initialized
 115 |     |         );
 116 |     | }
 117 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/Base.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2 <0.9.0;
  3 |     | 
  4 |     | import {StdStorage} from "./StdStorage.sol";
  5 |     | import {Vm, VmSafe} from "./Vm.sol";
  6 |     | 
  7 |     | abstract contract CommonBase {
  8 |     |     // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.
  9 |     |     address internal constant VM_ADDRESS = address(uint160(uint256(keccak256("hevm cheat code"))));
 10 |     |     // console.sol and console2.sol work by executing a staticcall to this address.
 11 |     |     address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;
 12 |     |     // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.
 13 |     |     address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
 14 |     |     // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.
 15 |     |     address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256("foundry default caller"))));
 16 |     |     // Address of the test contract, deployed by the DEFAULT_SENDER.
 17 |     |     address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;
 18 |     |     // Deterministic deployment address of the Multicall3 contract.
 19 |     |     address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;
 20 |     |     // The order of the secp256k1 curve.
 21 |     |     uint256 internal constant SECP256K1_ORDER =
 22 |     |         115792089237316195423570985008687907852837564279074904382605163141518161494337;
 23 |     | 
 24 |     |     uint256 internal constant UINT256_MAX =
 25 |     |         115792089237316195423570985008687907853269984665640564039457584007913129639935;
 26 |     | 
 27 |     |     Vm internal constant vm = Vm(VM_ADDRESS);
 28 |     |     StdStorage internal stdstore;
 29 |     | }
 30 |     | 
 31 |     | abstract contract TestBase is CommonBase {}
 32 |     | 
 33 |     | abstract contract ScriptBase is CommonBase {
 34 |     |     VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);
 35 |     | }
 36 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/StdAssertions.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | pragma experimental ABIEncoderV2;
   4 |     | 
   5 |     | import {Vm} from "./Vm.sol";
   6 |     | 
   7 |     | abstract contract StdAssertions {
   8 | *   |     Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
   9 |     | 
  10 |     |     event log(string);
  11 |     |     event logs(bytes);
  12 |     | 
  13 |     |     event log_address(address);
  14 |     |     event log_bytes32(bytes32);
  15 |     |     event log_int(int256);
  16 |     |     event log_uint(uint256);
  17 |     |     event log_bytes(bytes);
  18 |     |     event log_string(string);
  19 |     | 
  20 |     |     event log_named_address(string key, address val);
  21 |     |     event log_named_bytes32(string key, bytes32 val);
  22 |     |     event log_named_decimal_int(string key, int256 val, uint256 decimals);
  23 |     |     event log_named_decimal_uint(string key, uint256 val, uint256 decimals);
  24 |     |     event log_named_int(string key, int256 val);
  25 |     |     event log_named_uint(string key, uint256 val);
  26 |     |     event log_named_bytes(string key, bytes val);
  27 |     |     event log_named_string(string key, string val);
  28 |     | 
  29 |     |     event log_array(uint256[] val);
  30 |     |     event log_array(int256[] val);
  31 |     |     event log_array(address[] val);
  32 |     |     event log_named_array(string key, uint256[] val);
  33 |     |     event log_named_array(string key, int256[] val);
  34 |     |     event log_named_array(string key, address[] val);
  35 |     | 
  36 |     |     bool private _failed;
  37 |     | 
  38 | *   |     function failed() public view returns (bool) {
  39 | *   |         if (_failed) {
  40 |     |             return _failed;
  41 |     |         } else {
  42 | *   |             return vm.load(address(vm), bytes32("failed")) != bytes32(0);
  43 |     |         }
  44 |     |     }
  45 |     | 
  46 |     |     function fail() internal virtual {
  47 |     |         vm.store(address(vm), bytes32("failed"), bytes32(uint256(1)));
  48 |     |         _failed = true;
  49 |     |     }
  50 |     | 
  51 |     |     function assertTrue(bool data) internal pure virtual {
  52 |     |         vm.assertTrue(data);
  53 |     |     }
  54 |     | 
  55 |     |     function assertTrue(bool data, string memory err) internal pure virtual {
  56 |     |         vm.assertTrue(data, err);
  57 |     |     }
  58 |     | 
  59 |     |     function assertFalse(bool data) internal pure virtual {
  60 |     |         vm.assertFalse(data);
  61 |     |     }
  62 |     | 
  63 |     |     function assertFalse(bool data, string memory err) internal pure virtual {
  64 |     |         vm.assertFalse(data, err);
  65 |     |     }
  66 |     | 
  67 |     |     function assertEq(bool left, bool right) internal pure virtual {
  68 |     |         vm.assertEq(left, right);
  69 |     |     }
  70 |     | 
  71 |     |     function assertEq(bool left, bool right, string memory err) internal pure virtual {
  72 |     |         vm.assertEq(left, right, err);
  73 |     |     }
  74 |     | 
  75 |     |     function assertEq(uint256 left, uint256 right) internal pure virtual {
  76 |     |         vm.assertEq(left, right);
  77 |     |     }
  78 |     | 
  79 |     |     function assertEq(uint256 left, uint256 right, string memory err) internal pure virtual {
  80 |     |         vm.assertEq(left, right, err);
  81 |     |     }
  82 |     | 
  83 |     |     function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
  84 |     |         vm.assertEqDecimal(left, right, decimals);
  85 |     |     }
  86 |     | 
  87 |     |     function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
  88 |     |         vm.assertEqDecimal(left, right, decimals, err);
  89 |     |     }
  90 |     | 
  91 |     |     function assertEq(int256 left, int256 right) internal pure virtual {
  92 |     |         vm.assertEq(left, right);
  93 |     |     }
  94 |     | 
  95 |     |     function assertEq(int256 left, int256 right, string memory err) internal pure virtual {
  96 |     |         vm.assertEq(left, right, err);
  97 |     |     }
  98 |     | 
  99 |     |     function assertEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 100 |     |         vm.assertEqDecimal(left, right, decimals);
 101 |     |     }
 102 |     | 
 103 |     |     function assertEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 104 |     |         vm.assertEqDecimal(left, right, decimals, err);
 105 |     |     }
 106 |     | 
 107 |     |     function assertEq(address left, address right) internal pure virtual {
 108 |     |         vm.assertEq(left, right);
 109 |     |     }
 110 |     | 
 111 |     |     function assertEq(address left, address right, string memory err) internal pure virtual {
 112 |     |         vm.assertEq(left, right, err);
 113 |     |     }
 114 |     | 
 115 |     |     function assertEq(bytes32 left, bytes32 right) internal pure virtual {
 116 |     |         vm.assertEq(left, right);
 117 |     |     }
 118 |     | 
 119 |     |     function assertEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {
 120 |     |         vm.assertEq(left, right, err);
 121 |     |     }
 122 |     | 
 123 |     |     function assertEq32(bytes32 left, bytes32 right) internal pure virtual {
 124 |     |         assertEq(left, right);
 125 |     |     }
 126 |     | 
 127 |     |     function assertEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {
 128 |     |         assertEq(left, right, err);
 129 |     |     }
 130 |     | 
 131 |     |     function assertEq(string memory left, string memory right) internal pure virtual {
 132 |     |         vm.assertEq(left, right);
 133 |     |     }
 134 |     | 
 135 |     |     function assertEq(string memory left, string memory right, string memory err) internal pure virtual {
 136 |     |         vm.assertEq(left, right, err);
 137 |     |     }
 138 |     | 
 139 |     |     function assertEq(bytes memory left, bytes memory right) internal pure virtual {
 140 |     |         vm.assertEq(left, right);
 141 |     |     }
 142 |     | 
 143 |     |     function assertEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {
 144 |     |         vm.assertEq(left, right, err);
 145 |     |     }
 146 |     | 
 147 |     |     function assertEq(bool[] memory left, bool[] memory right) internal pure virtual {
 148 |     |         vm.assertEq(left, right);
 149 |     |     }
 150 |     | 
 151 |     |     function assertEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {
 152 |     |         vm.assertEq(left, right, err);
 153 |     |     }
 154 |     | 
 155 |     |     function assertEq(uint256[] memory left, uint256[] memory right) internal pure virtual {
 156 |     |         vm.assertEq(left, right);
 157 |     |     }
 158 |     | 
 159 |     |     function assertEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {
 160 |     |         vm.assertEq(left, right, err);
 161 |     |     }
 162 |     | 
 163 |     |     function assertEq(int256[] memory left, int256[] memory right) internal pure virtual {
 164 |     |         vm.assertEq(left, right);
 165 |     |     }
 166 |     | 
 167 |     |     function assertEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {
 168 |     |         vm.assertEq(left, right, err);
 169 |     |     }
 170 |     | 
 171 |     |     function assertEq(address[] memory left, address[] memory right) internal pure virtual {
 172 |     |         vm.assertEq(left, right);
 173 |     |     }
 174 |     | 
 175 |     |     function assertEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {
 176 |     |         vm.assertEq(left, right, err);
 177 |     |     }
 178 |     | 
 179 |     |     function assertEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {
 180 |     |         vm.assertEq(left, right);
 181 |     |     }
 182 |     | 
 183 |     |     function assertEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {
 184 |     |         vm.assertEq(left, right, err);
 185 |     |     }
 186 |     | 
 187 |     |     function assertEq(string[] memory left, string[] memory right) internal pure virtual {
 188 |     |         vm.assertEq(left, right);
 189 |     |     }
 190 |     | 
 191 |     |     function assertEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {
 192 |     |         vm.assertEq(left, right, err);
 193 |     |     }
 194 |     | 
 195 |     |     function assertEq(bytes[] memory left, bytes[] memory right) internal pure virtual {
 196 |     |         vm.assertEq(left, right);
 197 |     |     }
 198 |     | 
 199 |     |     function assertEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {
 200 |     |         vm.assertEq(left, right, err);
 201 |     |     }
 202 |     | 
 203 |     |     // Legacy helper
 204 |     |     function assertEqUint(uint256 left, uint256 right) internal pure virtual {
 205 |     |         assertEq(left, right);
 206 |     |     }
 207 |     | 
 208 |     |     function assertNotEq(bool left, bool right) internal pure virtual {
 209 |     |         vm.assertNotEq(left, right);
 210 |     |     }
 211 |     | 
 212 |     |     function assertNotEq(bool left, bool right, string memory err) internal pure virtual {
 213 |     |         vm.assertNotEq(left, right, err);
 214 |     |     }
 215 |     | 
 216 |     |     function assertNotEq(uint256 left, uint256 right) internal pure virtual {
 217 |     |         vm.assertNotEq(left, right);
 218 |     |     }
 219 |     | 
 220 |     |     function assertNotEq(uint256 left, uint256 right, string memory err) internal pure virtual {
 221 |     |         vm.assertNotEq(left, right, err);
 222 |     |     }
 223 |     | 
 224 |     |     function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
 225 |     |         vm.assertNotEqDecimal(left, right, decimals);
 226 |     |     }
 227 |     | 
 228 |     |     function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err)
 229 |     |         internal
 230 |     |         pure
 231 |     |         virtual
 232 |     |     {
 233 |     |         vm.assertNotEqDecimal(left, right, decimals, err);
 234 |     |     }
 235 |     | 
 236 |     |     function assertNotEq(int256 left, int256 right) internal pure virtual {
 237 |     |         vm.assertNotEq(left, right);
 238 |     |     }
 239 |     | 
 240 |     |     function assertNotEq(int256 left, int256 right, string memory err) internal pure virtual {
 241 |     |         vm.assertNotEq(left, right, err);
 242 |     |     }
 243 |     | 
 244 |     |     function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 245 |     |         vm.assertNotEqDecimal(left, right, decimals);
 246 |     |     }
 247 |     | 
 248 |     |     function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 249 |     |         vm.assertNotEqDecimal(left, right, decimals, err);
 250 |     |     }
 251 |     | 
 252 |     |     function assertNotEq(address left, address right) internal pure virtual {
 253 |     |         vm.assertNotEq(left, right);
 254 |     |     }
 255 |     | 
 256 |     |     function assertNotEq(address left, address right, string memory err) internal pure virtual {
 257 |     |         vm.assertNotEq(left, right, err);
 258 |     |     }
 259 |     | 
 260 |     |     function assertNotEq(bytes32 left, bytes32 right) internal pure virtual {
 261 |     |         vm.assertNotEq(left, right);
 262 |     |     }
 263 |     | 
 264 |     |     function assertNotEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {
 265 |     |         vm.assertNotEq(left, right, err);
 266 |     |     }
 267 |     | 
 268 |     |     function assertNotEq32(bytes32 left, bytes32 right) internal pure virtual {
 269 |     |         assertNotEq(left, right);
 270 |     |     }
 271 |     | 
 272 |     |     function assertNotEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {
 273 |     |         assertNotEq(left, right, err);
 274 |     |     }
 275 |     | 
 276 |     |     function assertNotEq(string memory left, string memory right) internal pure virtual {
 277 |     |         vm.assertNotEq(left, right);
 278 |     |     }
 279 |     | 
 280 |     |     function assertNotEq(string memory left, string memory right, string memory err) internal pure virtual {
 281 |     |         vm.assertNotEq(left, right, err);
 282 |     |     }
 283 |     | 
 284 |     |     function assertNotEq(bytes memory left, bytes memory right) internal pure virtual {
 285 |     |         vm.assertNotEq(left, right);
 286 |     |     }
 287 |     | 
 288 |     |     function assertNotEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {
 289 |     |         vm.assertNotEq(left, right, err);
 290 |     |     }
 291 |     | 
 292 |     |     function assertNotEq(bool[] memory left, bool[] memory right) internal pure virtual {
 293 |     |         vm.assertNotEq(left, right);
 294 |     |     }
 295 |     | 
 296 |     |     function assertNotEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {
 297 |     |         vm.assertNotEq(left, right, err);
 298 |     |     }
 299 |     | 
 300 |     |     function assertNotEq(uint256[] memory left, uint256[] memory right) internal pure virtual {
 301 |     |         vm.assertNotEq(left, right);
 302 |     |     }
 303 |     | 
 304 |     |     function assertNotEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {
 305 |     |         vm.assertNotEq(left, right, err);
 306 |     |     }
 307 |     | 
 308 |     |     function assertNotEq(int256[] memory left, int256[] memory right) internal pure virtual {
 309 |     |         vm.assertNotEq(left, right);
 310 |     |     }
 311 |     | 
 312 |     |     function assertNotEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {
 313 |     |         vm.assertNotEq(left, right, err);
 314 |     |     }
 315 |     | 
 316 |     |     function assertNotEq(address[] memory left, address[] memory right) internal pure virtual {
 317 |     |         vm.assertNotEq(left, right);
 318 |     |     }
 319 |     | 
 320 |     |     function assertNotEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {
 321 |     |         vm.assertNotEq(left, right, err);
 322 |     |     }
 323 |     | 
 324 |     |     function assertNotEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {
 325 |     |         vm.assertNotEq(left, right);
 326 |     |     }
 327 |     | 
 328 |     |     function assertNotEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {
 329 |     |         vm.assertNotEq(left, right, err);
 330 |     |     }
 331 |     | 
 332 |     |     function assertNotEq(string[] memory left, string[] memory right) internal pure virtual {
 333 |     |         vm.assertNotEq(left, right);
 334 |     |     }
 335 |     | 
 336 |     |     function assertNotEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {
 337 |     |         vm.assertNotEq(left, right, err);
 338 |     |     }
 339 |     | 
 340 |     |     function assertNotEq(bytes[] memory left, bytes[] memory right) internal pure virtual {
 341 |     |         vm.assertNotEq(left, right);
 342 |     |     }
 343 |     | 
 344 |     |     function assertNotEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {
 345 |     |         vm.assertNotEq(left, right, err);
 346 |     |     }
 347 |     | 
 348 |     |     function assertLt(uint256 left, uint256 right) internal pure virtual {
 349 |     |         vm.assertLt(left, right);
 350 |     |     }
 351 |     | 
 352 |     |     function assertLt(uint256 left, uint256 right, string memory err) internal pure virtual {
 353 |     |         vm.assertLt(left, right, err);
 354 |     |     }
 355 |     | 
 356 |     |     function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
 357 |     |         vm.assertLtDecimal(left, right, decimals);
 358 |     |     }
 359 |     | 
 360 |     |     function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
 361 |     |         vm.assertLtDecimal(left, right, decimals, err);
 362 |     |     }
 363 |     | 
 364 |     |     function assertLt(int256 left, int256 right) internal pure virtual {
 365 |     |         vm.assertLt(left, right);
 366 |     |     }
 367 |     | 
 368 |     |     function assertLt(int256 left, int256 right, string memory err) internal pure virtual {
 369 |     |         vm.assertLt(left, right, err);
 370 |     |     }
 371 |     | 
 372 |     |     function assertLtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 373 |     |         vm.assertLtDecimal(left, right, decimals);
 374 |     |     }
 375 |     | 
 376 |     |     function assertLtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 377 |     |         vm.assertLtDecimal(left, right, decimals, err);
 378 |     |     }
 379 |     | 
 380 |     |     function assertGt(uint256 left, uint256 right) internal pure virtual {
 381 |     |         vm.assertGt(left, right);
 382 |     |     }
 383 |     | 
 384 |     |     function assertGt(uint256 left, uint256 right, string memory err) internal pure virtual {
 385 |     |         vm.assertGt(left, right, err);
 386 |     |     }
 387 |     | 
 388 |     |     function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
 389 |     |         vm.assertGtDecimal(left, right, decimals);
 390 |     |     }
 391 |     | 
 392 |     |     function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
 393 |     |         vm.assertGtDecimal(left, right, decimals, err);
 394 |     |     }
 395 |     | 
 396 |     |     function assertGt(int256 left, int256 right) internal pure virtual {
 397 |     |         vm.assertGt(left, right);
 398 |     |     }
 399 |     | 
 400 |     |     function assertGt(int256 left, int256 right, string memory err) internal pure virtual {
 401 |     |         vm.assertGt(left, right, err);
 402 |     |     }
 403 |     | 
 404 |     |     function assertGtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 405 |     |         vm.assertGtDecimal(left, right, decimals);
 406 |     |     }
 407 |     | 
 408 |     |     function assertGtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 409 |     |         vm.assertGtDecimal(left, right, decimals, err);
 410 |     |     }
 411 |     | 
 412 |     |     function assertLe(uint256 left, uint256 right) internal pure virtual {
 413 |     |         vm.assertLe(left, right);
 414 |     |     }
 415 |     | 
 416 |     |     function assertLe(uint256 left, uint256 right, string memory err) internal pure virtual {
 417 |     |         vm.assertLe(left, right, err);
 418 |     |     }
 419 |     | 
 420 |     |     function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
 421 |     |         vm.assertLeDecimal(left, right, decimals);
 422 |     |     }
 423 |     | 
 424 |     |     function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
 425 |     |         vm.assertLeDecimal(left, right, decimals, err);
 426 |     |     }
 427 |     | 
 428 |     |     function assertLe(int256 left, int256 right) internal pure virtual {
 429 |     |         vm.assertLe(left, right);
 430 |     |     }
 431 |     | 
 432 |     |     function assertLe(int256 left, int256 right, string memory err) internal pure virtual {
 433 |     |         vm.assertLe(left, right, err);
 434 |     |     }
 435 |     | 
 436 |     |     function assertLeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 437 |     |         vm.assertLeDecimal(left, right, decimals);
 438 |     |     }
 439 |     | 
 440 |     |     function assertLeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 441 |     |         vm.assertLeDecimal(left, right, decimals, err);
 442 |     |     }
 443 |     | 
 444 |     |     function assertGe(uint256 left, uint256 right) internal pure virtual {
 445 |     |         vm.assertGe(left, right);
 446 |     |     }
 447 |     | 
 448 |     |     function assertGe(uint256 left, uint256 right, string memory err) internal pure virtual {
 449 |     |         vm.assertGe(left, right, err);
 450 |     |     }
 451 |     | 
 452 |     |     function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
 453 |     |         vm.assertGeDecimal(left, right, decimals);
 454 |     |     }
 455 |     | 
 456 |     |     function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
 457 |     |         vm.assertGeDecimal(left, right, decimals, err);
 458 |     |     }
 459 |     | 
 460 |     |     function assertGe(int256 left, int256 right) internal pure virtual {
 461 |     |         vm.assertGe(left, right);
 462 |     |     }
 463 |     | 
 464 |     |     function assertGe(int256 left, int256 right, string memory err) internal pure virtual {
 465 |     |         vm.assertGe(left, right, err);
 466 |     |     }
 467 |     | 
 468 |     |     function assertGeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 469 |     |         vm.assertGeDecimal(left, right, decimals);
 470 |     |     }
 471 |     | 
 472 |     |     function assertGeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 473 |     |         vm.assertGeDecimal(left, right, decimals, err);
 474 |     |     }
 475 |     | 
 476 |     |     function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) internal pure virtual {
 477 |     |         vm.assertApproxEqAbs(left, right, maxDelta);
 478 |     |     }
 479 |     | 
 480 |     |     function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string memory err)
 481 |     |         internal
 482 |     |         pure
 483 |     |         virtual
 484 |     |     {
 485 |     |         vm.assertApproxEqAbs(left, right, maxDelta, err);
 486 |     |     }
 487 |     | 
 488 |     |     function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals)
 489 |     |         internal
 490 |     |         pure
 491 |     |         virtual
 492 |     |     {
 493 |     |         vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);
 494 |     |     }
 495 |     | 
 496 |     |     function assertApproxEqAbsDecimal(
 497 |     |         uint256 left,
 498 |     |         uint256 right,
 499 |     |         uint256 maxDelta,
 500 |     |         uint256 decimals,
 501 |     |         string memory err
 502 |     |     ) internal pure virtual {
 503 |     |         vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);
 504 |     |     }
 505 |     | 
 506 |     |     function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) internal pure virtual {
 507 |     |         vm.assertApproxEqAbs(left, right, maxDelta);
 508 |     |     }
 509 |     | 
 510 |     |     function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string memory err) internal pure virtual {
 511 |     |         vm.assertApproxEqAbs(left, right, maxDelta, err);
 512 |     |     }
 513 |     | 
 514 |     |     function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals)
 515 |     |         internal
 516 |     |         pure
 517 |     |         virtual
 518 |     |     {
 519 |     |         vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);
 520 |     |     }
 521 |     | 
 522 |     |     function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string memory err)
 523 |     |         internal
 524 |     |         pure
 525 |     |         virtual
 526 |     |     {
 527 |     |         vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);
 528 |     |     }
 529 |     | 
 530 |     |     function assertApproxEqRel(
 531 |     |         uint256 left,
 532 |     |         uint256 right,
 533 |     |         uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%
 534 |     |     ) internal pure virtual {
 535 |     |         vm.assertApproxEqRel(left, right, maxPercentDelta);
 536 |     |     }
 537 |     | 
 538 |     |     function assertApproxEqRel(
 539 |     |         uint256 left,
 540 |     |         uint256 right,
 541 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 542 |     |         string memory err
 543 |     |     ) internal pure virtual {
 544 |     |         vm.assertApproxEqRel(left, right, maxPercentDelta, err);
 545 |     |     }
 546 |     | 
 547 |     |     function assertApproxEqRelDecimal(
 548 |     |         uint256 left,
 549 |     |         uint256 right,
 550 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 551 |     |         uint256 decimals
 552 |     |     ) internal pure virtual {
 553 |     |         vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);
 554 |     |     }
 555 |     | 
 556 |     |     function assertApproxEqRelDecimal(
 557 |     |         uint256 left,
 558 |     |         uint256 right,
 559 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 560 |     |         uint256 decimals,
 561 |     |         string memory err
 562 |     |     ) internal pure virtual {
 563 |     |         vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);
 564 |     |     }
 565 |     | 
 566 |     |     function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) internal pure virtual {
 567 |     |         vm.assertApproxEqRel(left, right, maxPercentDelta);
 568 |     |     }
 569 |     | 
 570 |     |     function assertApproxEqRel(
 571 |     |         int256 left,
 572 |     |         int256 right,
 573 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 574 |     |         string memory err
 575 |     |     ) internal pure virtual {
 576 |     |         vm.assertApproxEqRel(left, right, maxPercentDelta, err);
 577 |     |     }
 578 |     | 
 579 |     |     function assertApproxEqRelDecimal(
 580 |     |         int256 left,
 581 |     |         int256 right,
 582 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 583 |     |         uint256 decimals
 584 |     |     ) internal pure virtual {
 585 |     |         vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);
 586 |     |     }
 587 |     | 
 588 |     |     function assertApproxEqRelDecimal(
 589 |     |         int256 left,
 590 |     |         int256 right,
 591 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 592 |     |         uint256 decimals,
 593 |     |         string memory err
 594 |     |     ) internal pure virtual {
 595 |     |         vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);
 596 |     |     }
 597 |     | 
 598 |     |     // Inherited from DSTest, not used but kept for backwards-compatibility
 599 |     |     function checkEq0(bytes memory left, bytes memory right) internal pure returns (bool) {
 600 |     |         return keccak256(left) == keccak256(right);
 601 |     |     }
 602 |     | 
 603 |     |     function assertEq0(bytes memory left, bytes memory right) internal pure virtual {
 604 |     |         assertEq(left, right);
 605 |     |     }
 606 |     | 
 607 |     |     function assertEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {
 608 |     |         assertEq(left, right, err);
 609 |     |     }
 610 |     | 
 611 |     |     function assertNotEq0(bytes memory left, bytes memory right) internal pure virtual {
 612 |     |         assertNotEq(left, right);
 613 |     |     }
 614 |     | 
 615 |     |     function assertNotEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {
 616 |     |         assertNotEq(left, right, err);
 617 |     |     }
 618 |     | 
 619 |     |     function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB) internal virtual {
 620 |     |         assertEqCall(target, callDataA, target, callDataB, true);
 621 |     |     }
 622 |     | 
 623 |     |     function assertEqCall(address targetA, bytes memory callDataA, address targetB, bytes memory callDataB)
 624 |     |         internal
 625 |     |         virtual
 626 |     |     {
 627 |     |         assertEqCall(targetA, callDataA, targetB, callDataB, true);
 628 |     |     }
 629 |     | 
 630 |     |     function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB, bool strictRevertData)
 631 |     |         internal
 632 |     |         virtual
 633 |     |     {
 634 |     |         assertEqCall(target, callDataA, target, callDataB, strictRevertData);
 635 |     |     }
 636 |     | 
 637 |     |     function assertEqCall(
 638 |     |         address targetA,
 639 |     |         bytes memory callDataA,
 640 |     |         address targetB,
 641 |     |         bytes memory callDataB,
 642 |     |         bool strictRevertData
 643 |     |     ) internal virtual {
 644 |     |         (bool successA, bytes memory returnDataA) = address(targetA).call(callDataA);
 645 |     |         (bool successB, bytes memory returnDataB) = address(targetB).call(callDataB);
 646 |     | 
 647 |     |         if (successA && successB) {
 648 |     |             assertEq(returnDataA, returnDataB, "Call return data does not match");
 649 |     |         }
 650 |     | 
 651 |     |         if (!successA && !successB && strictRevertData) {
 652 |     |             assertEq(returnDataA, returnDataB, "Call revert data does not match");
 653 |     |         }
 654 |     | 
 655 |     |         if (!successA && successB) {
 656 |     |             emit log("Error: Calls were not equal");
 657 |     |             emit log_named_bytes("  Left call revert data", returnDataA);
 658 |     |             emit log_named_bytes(" Right call return data", returnDataB);
 659 |     |             revert("assertion failed");
 660 |     |         }
 661 |     | 
 662 |     |         if (successA && !successB) {
 663 |     |             emit log("Error: Calls were not equal");
 664 |     |             emit log_named_bytes("  Left call return data", returnDataA);
 665 |     |             emit log_named_bytes(" Right call revert data", returnDataB);
 666 |     |             revert("assertion failed");
 667 |     |         }
 668 |     |     }
 669 |     | }
 670 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/StdChains.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | import {VmSafe} from "./Vm.sol";
   5 |     | 
   6 |     | /**
   7 |     |  * StdChains provides information about EVM compatible chains that can be used in scripts/tests.
   8 |     |  * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are
   9 |     |  * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of
  10 |     |  * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the
  11 |     |  * alias used in this contract, which can be found as the first argument to the
  12 |     |  * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.
  13 |     |  *
  14 |     |  * There are two main ways to use this contract:
  15 |     |  *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or
  16 |     |  *      `setChain(string memory chainAlias, Chain memory chain)`
  17 |     |  *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.
  18 |     |  *
  19 |     |  * The first time either of those are used, chains are initialized with the default set of RPC URLs.
  20 |     |  * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in
  21 |     |  * `defaultRpcUrls`.
  22 |     |  *
  23 |     |  * The `setChain` function is straightforward, and it simply saves off the given chain data.
  24 |     |  *
  25 |     |  * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say
  26 |     |  * we want to retrieve the RPC URL for `mainnet`:
  27 |     |  *   - If you have specified data with `setChain`, it will return that.
  28 |     |  *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it
  29 |     |  *     is valid (e.g. a URL is specified, or an environment variable is given and exists).
  30 |     |  *   - If neither of the above conditions is met, the default data is returned.
  31 |     |  *
  32 |     |  * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.
  33 |     |  */
  34 |     | abstract contract StdChains {
  35 |     |     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
  36 |     | 
  37 |     |     bool private stdChainsInitialized;
  38 |     | 
  39 |     |     struct ChainData {
  40 |     |         string name;
  41 |     |         uint256 chainId;
  42 |     |         string rpcUrl;
  43 |     |     }
  44 |     | 
  45 |     |     struct Chain {
  46 |     |         // The chain name.
  47 |     |         string name;
  48 |     |         // The chain's Chain ID.
  49 |     |         uint256 chainId;
  50 |     |         // The chain's alias. (i.e. what gets specified in `foundry.toml`).
  51 |     |         string chainAlias;
  52 |     |         // A default RPC endpoint for this chain.
  53 |     |         // NOTE: This default RPC URL is included for convenience to facilitate quick tests and
  54 |     |         // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy
  55 |     |         // usage as you will be throttled and this is a disservice to others who need this endpoint.
  56 |     |         string rpcUrl;
  57 |     |     }
  58 |     | 
  59 |     |     // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.
  60 |     |     mapping(string => Chain) private chains;
  61 |     |     // Maps from the chain's alias to it's default RPC URL.
  62 |     |     mapping(string => string) private defaultRpcUrls;
  63 |     |     // Maps from a chain ID to it's alias.
  64 |     |     mapping(uint256 => string) private idToAlias;
  65 |     | 
  66 |     |     bool private fallbackToDefaultRpcUrls = true;
  67 |     | 
  68 |     |     // The RPC URL will be fetched from config or defaultRpcUrls if possible.
  69 |     |     function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {
  70 |     |         require(bytes(chainAlias).length != 0, "StdChains getChain(string): Chain alias cannot be the empty string.");
  71 |     | 
  72 |     |         initializeStdChains();
  73 |     |         chain = chains[chainAlias];
  74 |     |         require(
  75 |     |             chain.chainId != 0,
  76 |     |             string(abi.encodePacked("StdChains getChain(string): Chain with alias \"", chainAlias, "\" not found."))
  77 |     |         );
  78 |     | 
  79 |     |         chain = getChainWithUpdatedRpcUrl(chainAlias, chain);
  80 |     |     }
  81 |     | 
  82 |     |     function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {
  83 |     |         require(chainId != 0, "StdChains getChain(uint256): Chain ID cannot be 0.");
  84 |     |         initializeStdChains();
  85 |     |         string memory chainAlias = idToAlias[chainId];
  86 |     | 
  87 |     |         chain = chains[chainAlias];
  88 |     | 
  89 |     |         require(
  90 |     |             chain.chainId != 0,
  91 |     |             string(abi.encodePacked("StdChains getChain(uint256): Chain with ID ", vm.toString(chainId), " not found."))
  92 |     |         );
  93 |     | 
  94 |     |         chain = getChainWithUpdatedRpcUrl(chainAlias, chain);
  95 |     |     }
  96 |     | 
  97 |     |     // set chain info, with priority to argument's rpcUrl field.
  98 |     |     function setChain(string memory chainAlias, ChainData memory chain) internal virtual {
  99 |     |         require(
 100 |     |             bytes(chainAlias).length != 0,
 101 |     |             "StdChains setChain(string,ChainData): Chain alias cannot be the empty string."
 102 |     |         );
 103 |     | 
 104 |     |         require(chain.chainId != 0, "StdChains setChain(string,ChainData): Chain ID cannot be 0.");
 105 |     | 
 106 |     |         initializeStdChains();
 107 |     |         string memory foundAlias = idToAlias[chain.chainId];
 108 |     | 
 109 |     |         require(
 110 |     |             bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),
 111 |     |             string(
 112 |     |                 abi.encodePacked(
 113 |     |                     "StdChains setChain(string,ChainData): Chain ID ",
 114 |     |                     vm.toString(chain.chainId),
 115 |     |                     " already used by \"",
 116 |     |                     foundAlias,
 117 |     |                     "\"."
 118 |     |                 )
 119 |     |             )
 120 |     |         );
 121 |     | 
 122 |     |         uint256 oldChainId = chains[chainAlias].chainId;
 123 |     |         delete idToAlias[oldChainId];
 124 |     | 
 125 |     |         chains[chainAlias] =
 126 |     |             Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});
 127 |     |         idToAlias[chain.chainId] = chainAlias;
 128 |     |     }
 129 |     | 
 130 |     |     // set chain info, with priority to argument's rpcUrl field.
 131 |     |     function setChain(string memory chainAlias, Chain memory chain) internal virtual {
 132 |     |         setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));
 133 |     |     }
 134 |     | 
 135 |     |     function _toUpper(string memory str) private pure returns (string memory) {
 136 |     |         bytes memory strb = bytes(str);
 137 |     |         bytes memory copy = new bytes(strb.length);
 138 |     |         for (uint256 i = 0; i < strb.length; i++) {
 139 |     |             bytes1 b = strb[i];
 140 |     |             if (b >= 0x61 && b <= 0x7A) {
 141 |     |                 copy[i] = bytes1(uint8(b) - 32);
 142 |     |             } else {
 143 |     |                 copy[i] = b;
 144 |     |             }
 145 |     |         }
 146 |     |         return string(copy);
 147 |     |     }
 148 |     | 
 149 |     |     // lookup rpcUrl, in descending order of priority:
 150 |     |     // current -> config (foundry.toml) -> environment variable -> default
 151 |     |     function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain)
 152 |     |         private
 153 |     |         view
 154 |     |         returns (Chain memory)
 155 |     |     {
 156 |     |         if (bytes(chain.rpcUrl).length == 0) {
 157 |     |             try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {
 158 |     |                 chain.rpcUrl = configRpcUrl;
 159 |     |             } catch (bytes memory err) {
 160 |     |                 string memory envName = string(abi.encodePacked(_toUpper(chainAlias), "_RPC_URL"));
 161 |     |                 if (fallbackToDefaultRpcUrls) {
 162 |     |                     chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);
 163 |     |                 } else {
 164 |     |                     chain.rpcUrl = vm.envString(envName);
 165 |     |                 }
 166 |     |                 // Distinguish 'not found' from 'cannot read'
 167 |     |                 // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions
 168 |     |                 bytes memory oldNotFoundError =
 169 |     |                     abi.encodeWithSignature("CheatCodeError", string(abi.encodePacked("invalid rpc url ", chainAlias)));
 170 |     |                 bytes memory newNotFoundError = abi.encodeWithSignature(
 171 |     |                     "CheatcodeError(string)", string(abi.encodePacked("invalid rpc url: ", chainAlias))
 172 |     |                 );
 173 |     |                 bytes32 errHash = keccak256(err);
 174 |     |                 if (
 175 |     |                     (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))
 176 |     |                         || bytes(chain.rpcUrl).length == 0
 177 |     |                 ) {
 178 |     |                     /// @solidity memory-safe-assembly
 179 |     |                     assembly {
 180 |     |                         revert(add(32, err), mload(err))
 181 |     |                     }
 182 |     |                 }
 183 |     |             }
 184 |     |         }
 185 |     |         return chain;
 186 |     |     }
 187 |     | 
 188 |     |     function setFallbackToDefaultRpcUrls(bool useDefault) internal {
 189 |     |         fallbackToDefaultRpcUrls = useDefault;
 190 |     |     }
 191 |     | 
 192 |     |     function initializeStdChains() private {
 193 |     |         if (stdChainsInitialized) return;
 194 |     | 
 195 |     |         stdChainsInitialized = true;
 196 |     | 
 197 |     |         // If adding an RPC here, make sure to test the default RPC URL in `test_Rpcs` in `StdChains.t.sol`
 198 |     |         setChainWithDefaultRpcUrl("anvil", ChainData("Anvil", 31337, "http://127.0.0.1:8545"));
 199 |     |         setChainWithDefaultRpcUrl(
 200 |     |             "mainnet", ChainData("Mainnet", 1, "https://eth-mainnet.alchemyapi.io/v2/pwc5rmJhrdoaSEfimoKEmsvOjKSmPDrP")
 201 |     |         );
 202 |     |         setChainWithDefaultRpcUrl(
 203 |     |             "sepolia", ChainData("Sepolia", 11155111, "https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001")
 204 |     |         );
 205 |     |         setChainWithDefaultRpcUrl("holesky", ChainData("Holesky", 17000, "https://rpc.holesky.ethpandaops.io"));
 206 |     |         setChainWithDefaultRpcUrl("optimism", ChainData("Optimism", 10, "https://mainnet.optimism.io"));
 207 |     |         setChainWithDefaultRpcUrl(
 208 |     |             "optimism_sepolia", ChainData("Optimism Sepolia", 11155420, "https://sepolia.optimism.io")
 209 |     |         );
 210 |     |         setChainWithDefaultRpcUrl("arbitrum_one", ChainData("Arbitrum One", 42161, "https://arb1.arbitrum.io/rpc"));
 211 |     |         setChainWithDefaultRpcUrl(
 212 |     |             "arbitrum_one_sepolia", ChainData("Arbitrum One Sepolia", 421614, "https://sepolia-rollup.arbitrum.io/rpc")
 213 |     |         );
 214 |     |         setChainWithDefaultRpcUrl("arbitrum_nova", ChainData("Arbitrum Nova", 42170, "https://nova.arbitrum.io/rpc"));
 215 |     |         setChainWithDefaultRpcUrl("polygon", ChainData("Polygon", 137, "https://polygon-rpc.com"));
 216 |     |         setChainWithDefaultRpcUrl(
 217 |     |             "polygon_amoy", ChainData("Polygon Amoy", 80002, "https://rpc-amoy.polygon.technology")
 218 |     |         );
 219 |     |         setChainWithDefaultRpcUrl("avalanche", ChainData("Avalanche", 43114, "https://api.avax.network/ext/bc/C/rpc"));
 220 |     |         setChainWithDefaultRpcUrl(
 221 |     |             "avalanche_fuji", ChainData("Avalanche Fuji", 43113, "https://api.avax-test.network/ext/bc/C/rpc")
 222 |     |         );
 223 |     |         setChainWithDefaultRpcUrl(
 224 |     |             "bnb_smart_chain", ChainData("BNB Smart Chain", 56, "https://bsc-dataseed1.binance.org")
 225 |     |         );
 226 |     |         setChainWithDefaultRpcUrl(
 227 |     |             "bnb_smart_chain_testnet",
 228 |     |             ChainData("BNB Smart Chain Testnet", 97, "https://rpc.ankr.com/bsc_testnet_chapel")
 229 |     |         );
 230 |     |         setChainWithDefaultRpcUrl("gnosis_chain", ChainData("Gnosis Chain", 100, "https://rpc.gnosischain.com"));
 231 |     |         setChainWithDefaultRpcUrl("moonbeam", ChainData("Moonbeam", 1284, "https://rpc.api.moonbeam.network"));
 232 |     |         setChainWithDefaultRpcUrl(
 233 |     |             "moonriver", ChainData("Moonriver", 1285, "https://rpc.api.moonriver.moonbeam.network")
 234 |     |         );
 235 |     |         setChainWithDefaultRpcUrl("moonbase", ChainData("Moonbase", 1287, "https://rpc.testnet.moonbeam.network"));
 236 |     |         setChainWithDefaultRpcUrl("base_sepolia", ChainData("Base Sepolia", 84532, "https://sepolia.base.org"));
 237 |     |         setChainWithDefaultRpcUrl("base", ChainData("Base", 8453, "https://mainnet.base.org"));
 238 |     |         setChainWithDefaultRpcUrl("blast_sepolia", ChainData("Blast Sepolia", 168587773, "https://sepolia.blast.io"));
 239 |     |         setChainWithDefaultRpcUrl("blast", ChainData("Blast", 81457, "https://rpc.blast.io"));
 240 |     |         setChainWithDefaultRpcUrl("fantom_opera", ChainData("Fantom Opera", 250, "https://rpc.ankr.com/fantom/"));
 241 |     |         setChainWithDefaultRpcUrl(
 242 |     |             "fantom_opera_testnet", ChainData("Fantom Opera Testnet", 4002, "https://rpc.ankr.com/fantom_testnet/")
 243 |     |         );
 244 |     |         setChainWithDefaultRpcUrl("fraxtal", ChainData("Fraxtal", 252, "https://rpc.frax.com"));
 245 |     |         setChainWithDefaultRpcUrl("fraxtal_testnet", ChainData("Fraxtal Testnet", 2522, "https://rpc.testnet.frax.com"));
 246 |     |         setChainWithDefaultRpcUrl(
 247 |     |             "berachain_bartio_testnet", ChainData("Berachain bArtio Testnet", 80084, "https://bartio.rpc.berachain.com")
 248 |     |         );
 249 |     |         setChainWithDefaultRpcUrl("flare", ChainData("Flare", 14, "https://flare-api.flare.network/ext/C/rpc"));
 250 |     |         setChainWithDefaultRpcUrl(
 251 |     |             "flare_coston2", ChainData("Flare Coston2", 114, "https://coston2-api.flare.network/ext/C/rpc")
 252 |     |         );
 253 |     |     }
 254 |     | 
 255 |     |     // set chain info, with priority to chainAlias' rpc url in foundry.toml
 256 |     |     function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {
 257 |     |         string memory rpcUrl = chain.rpcUrl;
 258 |     |         defaultRpcUrls[chainAlias] = rpcUrl;
 259 |     |         chain.rpcUrl = "";
 260 |     |         setChain(chainAlias, chain);
 261 |     |         chain.rpcUrl = rpcUrl; // restore argument
 262 |     |     }
 263 |     | }
 264 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/StdCheats.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | pragma experimental ABIEncoderV2;
   5 |     | 
   6 |     | import {StdStorage, stdStorage} from "./StdStorage.sol";
   7 |     | import {console2} from "./console2.sol";
   8 |     | import {Vm} from "./Vm.sol";
   9 |     | 
  10 |     | abstract contract StdCheatsSafe {
  11 |     |     Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
  12 |     | 
  13 |     |     uint256 private constant UINT256_MAX =
  14 |     |         115792089237316195423570985008687907853269984665640564039457584007913129639935;
  15 |     | 
  16 |     |     bool private gasMeteringOff;
  17 |     | 
  18 |     |     // Data structures to parse Transaction objects from the broadcast artifact
  19 |     |     // that conform to EIP1559. The Raw structs is what is parsed from the JSON
  20 |     |     // and then converted to the one that is used by the user for better UX.
  21 |     | 
  22 |     |     struct RawTx1559 {
  23 |     |         string[] arguments;
  24 |     |         address contractAddress;
  25 |     |         string contractName;
  26 |     |         // json value name = function
  27 |     |         string functionSig;
  28 |     |         bytes32 hash;
  29 |     |         // json value name = tx
  30 |     |         RawTx1559Detail txDetail;
  31 |     |         // json value name = type
  32 |     |         string opcode;
  33 |     |     }
  34 |     | 
  35 |     |     struct RawTx1559Detail {
  36 |     |         AccessList[] accessList;
  37 |     |         bytes data;
  38 |     |         address from;
  39 |     |         bytes gas;
  40 |     |         bytes nonce;
  41 |     |         address to;
  42 |     |         bytes txType;
  43 |     |         bytes value;
  44 |     |     }
  45 |     | 
  46 |     |     struct Tx1559 {
  47 |     |         string[] arguments;
  48 |     |         address contractAddress;
  49 |     |         string contractName;
  50 |     |         string functionSig;
  51 |     |         bytes32 hash;
  52 |     |         Tx1559Detail txDetail;
  53 |     |         string opcode;
  54 |     |     }
  55 |     | 
  56 |     |     struct Tx1559Detail {
  57 |     |         AccessList[] accessList;
  58 |     |         bytes data;
  59 |     |         address from;
  60 |     |         uint256 gas;
  61 |     |         uint256 nonce;
  62 |     |         address to;
  63 |     |         uint256 txType;
  64 |     |         uint256 value;
  65 |     |     }
  66 |     | 
  67 |     |     // Data structures to parse Transaction objects from the broadcast artifact
  68 |     |     // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON
  69 |     |     // and then converted to the one that is used by the user for better UX.
  70 |     | 
  71 |     |     struct TxLegacy {
  72 |     |         string[] arguments;
  73 |     |         address contractAddress;
  74 |     |         string contractName;
  75 |     |         string functionSig;
  76 |     |         string hash;
  77 |     |         string opcode;
  78 |     |         TxDetailLegacy transaction;
  79 |     |     }
  80 |     | 
  81 |     |     struct TxDetailLegacy {
  82 |     |         AccessList[] accessList;
  83 |     |         uint256 chainId;
  84 |     |         bytes data;
  85 |     |         address from;
  86 |     |         uint256 gas;
  87 |     |         uint256 gasPrice;
  88 |     |         bytes32 hash;
  89 |     |         uint256 nonce;
  90 |     |         bytes1 opcode;
  91 |     |         bytes32 r;
  92 |     |         bytes32 s;
  93 |     |         uint256 txType;
  94 |     |         address to;
  95 |     |         uint8 v;
  96 |     |         uint256 value;
  97 |     |     }
  98 |     | 
  99 |     |     struct AccessList {
 100 |     |         address accessAddress;
 101 |     |         bytes32[] storageKeys;
 102 |     |     }
 103 |     | 
 104 |     |     // Data structures to parse Receipt objects from the broadcast artifact.
 105 |     |     // The Raw structs is what is parsed from the JSON
 106 |     |     // and then converted to the one that is used by the user for better UX.
 107 |     | 
 108 |     |     struct RawReceipt {
 109 |     |         bytes32 blockHash;
 110 |     |         bytes blockNumber;
 111 |     |         address contractAddress;
 112 |     |         bytes cumulativeGasUsed;
 113 |     |         bytes effectiveGasPrice;
 114 |     |         address from;
 115 |     |         bytes gasUsed;
 116 |     |         RawReceiptLog[] logs;
 117 |     |         bytes logsBloom;
 118 |     |         bytes status;
 119 |     |         address to;
 120 |     |         bytes32 transactionHash;
 121 |     |         bytes transactionIndex;
 122 |     |     }
 123 |     | 
 124 |     |     struct Receipt {
 125 |     |         bytes32 blockHash;
 126 |     |         uint256 blockNumber;
 127 |     |         address contractAddress;
 128 |     |         uint256 cumulativeGasUsed;
 129 |     |         uint256 effectiveGasPrice;
 130 |     |         address from;
 131 |     |         uint256 gasUsed;
 132 |     |         ReceiptLog[] logs;
 133 |     |         bytes logsBloom;
 134 |     |         uint256 status;
 135 |     |         address to;
 136 |     |         bytes32 transactionHash;
 137 |     |         uint256 transactionIndex;
 138 |     |     }
 139 |     | 
 140 |     |     // Data structures to parse the entire broadcast artifact, assuming the
 141 |     |     // transactions conform to EIP1559.
 142 |     | 
 143 |     |     struct EIP1559ScriptArtifact {
 144 |     |         string[] libraries;
 145 |     |         string path;
 146 |     |         string[] pending;
 147 |     |         Receipt[] receipts;
 148 |     |         uint256 timestamp;
 149 |     |         Tx1559[] transactions;
 150 |     |         TxReturn[] txReturns;
 151 |     |     }
 152 |     | 
 153 |     |     struct RawEIP1559ScriptArtifact {
 154 |     |         string[] libraries;
 155 |     |         string path;
 156 |     |         string[] pending;
 157 |     |         RawReceipt[] receipts;
 158 |     |         TxReturn[] txReturns;
 159 |     |         uint256 timestamp;
 160 |     |         RawTx1559[] transactions;
 161 |     |     }
 162 |     | 
 163 |     |     struct RawReceiptLog {
 164 |     |         // json value = address
 165 |     |         address logAddress;
 166 |     |         bytes32 blockHash;
 167 |     |         bytes blockNumber;
 168 |     |         bytes data;
 169 |     |         bytes logIndex;
 170 |     |         bool removed;
 171 |     |         bytes32[] topics;
 172 |     |         bytes32 transactionHash;
 173 |     |         bytes transactionIndex;
 174 |     |         bytes transactionLogIndex;
 175 |     |     }
 176 |     | 
 177 |     |     struct ReceiptLog {
 178 |     |         // json value = address
 179 |     |         address logAddress;
 180 |     |         bytes32 blockHash;
 181 |     |         uint256 blockNumber;
 182 |     |         bytes data;
 183 |     |         uint256 logIndex;
 184 |     |         bytes32[] topics;
 185 |     |         uint256 transactionIndex;
 186 |     |         uint256 transactionLogIndex;
 187 |     |         bool removed;
 188 |     |     }
 189 |     | 
 190 |     |     struct TxReturn {
 191 |     |         string internalType;
 192 |     |         string value;
 193 |     |     }
 194 |     | 
 195 |     |     struct Account {
 196 |     |         address addr;
 197 |     |         uint256 key;
 198 |     |     }
 199 |     | 
 200 |     |     enum AddressType {
 201 |     |         Payable,
 202 |     |         NonPayable,
 203 |     |         ZeroAddress,
 204 |     |         Precompile,
 205 |     |         ForgeAddress
 206 |     |     }
 207 |     | 
 208 |     |     // Checks that `addr` is not blacklisted by token contracts that have a blacklist.
 209 |     |     function assumeNotBlacklisted(address token, address addr) internal view virtual {
 210 |     |         // Nothing to check if `token` is not a contract.
 211 |     |         uint256 tokenCodeSize;
 212 |     |         assembly {
 213 |     |             tokenCodeSize := extcodesize(token)
 214 |     |         }
 215 |     |         require(tokenCodeSize > 0, "StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.");
 216 |     | 
 217 |     |         bool success;
 218 |     |         bytes memory returnData;
 219 |     | 
 220 |     |         // 4-byte selector for `isBlacklisted(address)`, used by USDC.
 221 |     |         (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));
 222 |     |         vm.assume(!success || abi.decode(returnData, (bool)) == false);
 223 |     | 
 224 |     |         // 4-byte selector for `isBlackListed(address)`, used by USDT.
 225 |     |         (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));
 226 |     |         vm.assume(!success || abi.decode(returnData, (bool)) == false);
 227 |     |     }
 228 |     | 
 229 |     |     // Checks that `addr` is not blacklisted by token contracts that have a blacklist.
 230 |     |     // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for
 231 |     |     // backwards compatibility, since this name was used in the original PR which already has
 232 |     |     // a release. This function can be removed in a future release once we want a breaking change.
 233 |     |     function assumeNoBlacklisted(address token, address addr) internal view virtual {
 234 |     |         assumeNotBlacklisted(token, addr);
 235 |     |     }
 236 |     | 
 237 |     |     function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {
 238 |     |         if (addressType == AddressType.Payable) {
 239 |     |             assumeNotPayable(addr);
 240 |     |         } else if (addressType == AddressType.NonPayable) {
 241 |     |             assumePayable(addr);
 242 |     |         } else if (addressType == AddressType.ZeroAddress) {
 243 |     |             assumeNotZeroAddress(addr);
 244 |     |         } else if (addressType == AddressType.Precompile) {
 245 |     |             assumeNotPrecompile(addr);
 246 |     |         } else if (addressType == AddressType.ForgeAddress) {
 247 |     |             assumeNotForgeAddress(addr);
 248 |     |         }
 249 |     |     }
 250 |     | 
 251 |     |     function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {
 252 |     |         assumeAddressIsNot(addr, addressType1);
 253 |     |         assumeAddressIsNot(addr, addressType2);
 254 |     |     }
 255 |     | 
 256 |     |     function assumeAddressIsNot(
 257 |     |         address addr,
 258 |     |         AddressType addressType1,
 259 |     |         AddressType addressType2,
 260 |     |         AddressType addressType3
 261 |     |     ) internal virtual {
 262 |     |         assumeAddressIsNot(addr, addressType1);
 263 |     |         assumeAddressIsNot(addr, addressType2);
 264 |     |         assumeAddressIsNot(addr, addressType3);
 265 |     |     }
 266 |     | 
 267 |     |     function assumeAddressIsNot(
 268 |     |         address addr,
 269 |     |         AddressType addressType1,
 270 |     |         AddressType addressType2,
 271 |     |         AddressType addressType3,
 272 |     |         AddressType addressType4
 273 |     |     ) internal virtual {
 274 |     |         assumeAddressIsNot(addr, addressType1);
 275 |     |         assumeAddressIsNot(addr, addressType2);
 276 |     |         assumeAddressIsNot(addr, addressType3);
 277 |     |         assumeAddressIsNot(addr, addressType4);
 278 |     |     }
 279 |     | 
 280 |     |     // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to
 281 |     |     // `addr` and checking the `success` return value.
 282 |     |     // NOTE: This function may result in state changes depending on the fallback/receive logic
 283 |     |     // implemented by `addr`, which should be taken into account when this function is used.
 284 |     |     function _isPayable(address addr) private returns (bool) {
 285 |     |         require(
 286 |     |             addr.balance < UINT256_MAX,
 287 |     |             "StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds"
 288 |     |         );
 289 |     |         uint256 origBalanceTest = address(this).balance;
 290 |     |         uint256 origBalanceAddr = address(addr).balance;
 291 |     | 
 292 |     |         vm.deal(address(this), 1);
 293 |     |         (bool success,) = payable(addr).call{value: 1}("");
 294 |     | 
 295 |     |         // reset balances
 296 |     |         vm.deal(address(this), origBalanceTest);
 297 |     |         vm.deal(addr, origBalanceAddr);
 298 |     | 
 299 |     |         return success;
 300 |     |     }
 301 |     | 
 302 |     |     // NOTE: This function may result in state changes depending on the fallback/receive logic
 303 |     |     // implemented by `addr`, which should be taken into account when this function is used. See the
 304 |     |     // `_isPayable` method for more information.
 305 |     |     function assumePayable(address addr) internal virtual {
 306 |     |         vm.assume(_isPayable(addr));
 307 |     |     }
 308 |     | 
 309 |     |     function assumeNotPayable(address addr) internal virtual {
 310 |     |         vm.assume(!_isPayable(addr));
 311 |     |     }
 312 |     | 
 313 |     |     function assumeNotZeroAddress(address addr) internal pure virtual {
 314 |     |         vm.assume(addr != address(0));
 315 |     |     }
 316 |     | 
 317 |     |     function assumeNotPrecompile(address addr) internal pure virtual {
 318 |     |         assumeNotPrecompile(addr, _pureChainId());
 319 |     |     }
 320 |     | 
 321 |     |     function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {
 322 |     |         // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific
 323 |     |         // address), but the same rationale for excluding them applies so we include those too.
 324 |     | 
 325 |     |         // These are reserved by Ethereum and may be on all EVM-compatible chains.
 326 |     |         vm.assume(addr < address(0x1) || addr > address(0xff));
 327 |     | 
 328 |     |         // forgefmt: disable-start
 329 |     |         if (chainId == 10 || chainId == 420) {
 330 |     |             // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21
 331 |     |             vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));
 332 |     |         } else if (chainId == 42161 || chainId == 421613) {
 333 |     |             // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains
 334 |     |             vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));
 335 |     |         } else if (chainId == 43114 || chainId == 43113) {
 336 |     |             // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59
 337 |     |             vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));
 338 |     |             vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));
 339 |     |             vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));
 340 |     |         }
 341 |     |         // forgefmt: disable-end
 342 |     |     }
 343 |     | 
 344 |     |     function assumeNotForgeAddress(address addr) internal pure virtual {
 345 |     |         // vm, console, and Create2Deployer addresses
 346 |     |         vm.assume(
 347 |     |             addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67
 348 |     |                 && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C
 349 |     |         );
 350 |     |     }
 351 |     | 
 352 |     |     function readEIP1559ScriptArtifact(string memory path)
 353 |     |         internal
 354 |     |         view
 355 |     |         virtual
 356 |     |         returns (EIP1559ScriptArtifact memory)
 357 |     |     {
 358 |     |         string memory data = vm.readFile(path);
 359 |     |         bytes memory parsedData = vm.parseJson(data);
 360 |     |         RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));
 361 |     |         EIP1559ScriptArtifact memory artifact;
 362 |     |         artifact.libraries = rawArtifact.libraries;
 363 |     |         artifact.path = rawArtifact.path;
 364 |     |         artifact.timestamp = rawArtifact.timestamp;
 365 |     |         artifact.pending = rawArtifact.pending;
 366 |     |         artifact.txReturns = rawArtifact.txReturns;
 367 |     |         artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);
 368 |     |         artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);
 369 |     |         return artifact;
 370 |     |     }
 371 |     | 
 372 |     |     function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {
 373 |     |         Tx1559[] memory txs = new Tx1559[](rawTxs.length);
 374 |     |         for (uint256 i; i < rawTxs.length; i++) {
 375 |     |             txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);
 376 |     |         }
 377 |     |         return txs;
 378 |     |     }
 379 |     | 
 380 |     |     function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {
 381 |     |         Tx1559 memory transaction;
 382 |     |         transaction.arguments = rawTx.arguments;
 383 |     |         transaction.contractName = rawTx.contractName;
 384 |     |         transaction.functionSig = rawTx.functionSig;
 385 |     |         transaction.hash = rawTx.hash;
 386 |     |         transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);
 387 |     |         transaction.opcode = rawTx.opcode;
 388 |     |         return transaction;
 389 |     |     }
 390 |     | 
 391 |     |     function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)
 392 |     |         internal
 393 |     |         pure
 394 |     |         virtual
 395 |     |         returns (Tx1559Detail memory)
 396 |     |     {
 397 |     |         Tx1559Detail memory txDetail;
 398 |     |         txDetail.data = rawDetail.data;
 399 |     |         txDetail.from = rawDetail.from;
 400 |     |         txDetail.to = rawDetail.to;
 401 |     |         txDetail.nonce = _bytesToUint(rawDetail.nonce);
 402 |     |         txDetail.txType = _bytesToUint(rawDetail.txType);
 403 |     |         txDetail.value = _bytesToUint(rawDetail.value);
 404 |     |         txDetail.gas = _bytesToUint(rawDetail.gas);
 405 |     |         txDetail.accessList = rawDetail.accessList;
 406 |     |         return txDetail;
 407 |     |     }
 408 |     | 
 409 |     |     function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {
 410 |     |         string memory deployData = vm.readFile(path);
 411 |     |         bytes memory parsedDeployData = vm.parseJson(deployData, ".transactions");
 412 |     |         RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));
 413 |     |         return rawToConvertedEIPTx1559s(rawTxs);
 414 |     |     }
 415 |     | 
 416 |     |     function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {
 417 |     |         string memory deployData = vm.readFile(path);
 418 |     |         string memory key = string(abi.encodePacked(".transactions[", vm.toString(index), "]"));
 419 |     |         bytes memory parsedDeployData = vm.parseJson(deployData, key);
 420 |     |         RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));
 421 |     |         return rawToConvertedEIPTx1559(rawTx);
 422 |     |     }
 423 |     | 
 424 |     |     // Analogous to readTransactions, but for receipts.
 425 |     |     function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {
 426 |     |         string memory deployData = vm.readFile(path);
 427 |     |         bytes memory parsedDeployData = vm.parseJson(deployData, ".receipts");
 428 |     |         RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));
 429 |     |         return rawToConvertedReceipts(rawReceipts);
 430 |     |     }
 431 |     | 
 432 |     |     function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {
 433 |     |         string memory deployData = vm.readFile(path);
 434 |     |         string memory key = string(abi.encodePacked(".receipts[", vm.toString(index), "]"));
 435 |     |         bytes memory parsedDeployData = vm.parseJson(deployData, key);
 436 |     |         RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));
 437 |     |         return rawToConvertedReceipt(rawReceipt);
 438 |     |     }
 439 |     | 
 440 |     |     function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {
 441 |     |         Receipt[] memory receipts = new Receipt[](rawReceipts.length);
 442 |     |         for (uint256 i; i < rawReceipts.length; i++) {
 443 |     |             receipts[i] = rawToConvertedReceipt(rawReceipts[i]);
 444 |     |         }
 445 |     |         return receipts;
 446 |     |     }
 447 |     | 
 448 |     |     function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {
 449 |     |         Receipt memory receipt;
 450 |     |         receipt.blockHash = rawReceipt.blockHash;
 451 |     |         receipt.to = rawReceipt.to;
 452 |     |         receipt.from = rawReceipt.from;
 453 |     |         receipt.contractAddress = rawReceipt.contractAddress;
 454 |     |         receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);
 455 |     |         receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);
 456 |     |         receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);
 457 |     |         receipt.status = _bytesToUint(rawReceipt.status);
 458 |     |         receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);
 459 |     |         receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);
 460 |     |         receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);
 461 |     |         receipt.logsBloom = rawReceipt.logsBloom;
 462 |     |         receipt.transactionHash = rawReceipt.transactionHash;
 463 |     |         return receipt;
 464 |     |     }
 465 |     | 
 466 |     |     function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)
 467 |     |         internal
 468 |     |         pure
 469 |     |         virtual
 470 |     |         returns (ReceiptLog[] memory)
 471 |     |     {
 472 |     |         ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);
 473 |     |         for (uint256 i; i < rawLogs.length; i++) {
 474 |     |             logs[i].logAddress = rawLogs[i].logAddress;
 475 |     |             logs[i].blockHash = rawLogs[i].blockHash;
 476 |     |             logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);
 477 |     |             logs[i].data = rawLogs[i].data;
 478 |     |             logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);
 479 |     |             logs[i].topics = rawLogs[i].topics;
 480 |     |             logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);
 481 |     |             logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);
 482 |     |             logs[i].removed = rawLogs[i].removed;
 483 |     |         }
 484 |     |         return logs;
 485 |     |     }
 486 |     | 
 487 |     |     // Deploy a contract by fetching the contract bytecode from
 488 |     |     // the artifacts directory
 489 |     |     // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`
 490 |     |     function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {
 491 |     |         bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);
 492 |     |         /// @solidity memory-safe-assembly
 493 |     |         assembly {
 494 |     |             addr := create(0, add(bytecode, 0x20), mload(bytecode))
 495 |     |         }
 496 |     | 
 497 |     |         require(addr != address(0), "StdCheats deployCode(string,bytes): Deployment failed.");
 498 |     |     }
 499 |     | 
 500 |     |     function deployCode(string memory what) internal virtual returns (address addr) {
 501 |     |         bytes memory bytecode = vm.getCode(what);
 502 |     |         /// @solidity memory-safe-assembly
 503 |     |         assembly {
 504 |     |             addr := create(0, add(bytecode, 0x20), mload(bytecode))
 505 |     |         }
 506 |     | 
 507 |     |         require(addr != address(0), "StdCheats deployCode(string): Deployment failed.");
 508 |     |     }
 509 |     | 
 510 |     |     /// @dev deploy contract with value on construction
 511 |     |     function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {
 512 |     |         bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);
 513 |     |         /// @solidity memory-safe-assembly
 514 |     |         assembly {
 515 |     |             addr := create(val, add(bytecode, 0x20), mload(bytecode))
 516 |     |         }
 517 |     | 
 518 |     |         require(addr != address(0), "StdCheats deployCode(string,bytes,uint256): Deployment failed.");
 519 |     |     }
 520 |     | 
 521 |     |     function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {
 522 |     |         bytes memory bytecode = vm.getCode(what);
 523 |     |         /// @solidity memory-safe-assembly
 524 |     |         assembly {
 525 |     |             addr := create(val, add(bytecode, 0x20), mload(bytecode))
 526 |     |         }
 527 |     | 
 528 |     |         require(addr != address(0), "StdCheats deployCode(string,uint256): Deployment failed.");
 529 |     |     }
 530 |     | 
 531 |     |     // creates a labeled address and the corresponding private key
 532 |     |     function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {
 533 |     |         privateKey = uint256(keccak256(abi.encodePacked(name)));
 534 |     |         addr = vm.addr(privateKey);
 535 |     |         vm.label(addr, name);
 536 |     |     }
 537 |     | 
 538 |     |     // creates a labeled address
 539 |     |     function makeAddr(string memory name) internal virtual returns (address addr) {
 540 |     |         (addr,) = makeAddrAndKey(name);
 541 |     |     }
 542 |     | 
 543 |     |     // Destroys an account immediately, sending the balance to beneficiary.
 544 |     |     // Destroying means: balance will be zero, code will be empty, and nonce will be 0
 545 |     |     // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce
 546 |     |     // only after tx ends, this will run immediately.
 547 |     |     function destroyAccount(address who, address beneficiary) internal virtual {
 548 |     |         uint256 currBalance = who.balance;
 549 |     |         vm.etch(who, abi.encode());
 550 |     |         vm.deal(who, 0);
 551 |     |         vm.resetNonce(who);
 552 |     | 
 553 |     |         uint256 beneficiaryBalance = beneficiary.balance;
 554 |     |         vm.deal(beneficiary, currBalance + beneficiaryBalance);
 555 |     |     }
 556 |     | 
 557 |     |     // creates a struct containing both a labeled address and the corresponding private key
 558 |     |     function makeAccount(string memory name) internal virtual returns (Account memory account) {
 559 |     |         (account.addr, account.key) = makeAddrAndKey(name);
 560 |     |     }
 561 |     | 
 562 |     |     function deriveRememberKey(string memory mnemonic, uint32 index)
 563 |     |         internal
 564 |     |         virtual
 565 |     |         returns (address who, uint256 privateKey)
 566 |     |     {
 567 |     |         privateKey = vm.deriveKey(mnemonic, index);
 568 |     |         who = vm.rememberKey(privateKey);
 569 |     |     }
 570 |     | 
 571 |     |     function _bytesToUint(bytes memory b) private pure returns (uint256) {
 572 |     |         require(b.length <= 32, "StdCheats _bytesToUint(bytes): Bytes length exceeds 32.");
 573 |     |         return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));
 574 |     |     }
 575 |     | 
 576 |     |     function isFork() internal view virtual returns (bool status) {
 577 |     |         try vm.activeFork() {
 578 |     |             status = true;
 579 |     |         } catch (bytes memory) {}
 580 |     |     }
 581 |     | 
 582 |     |     modifier skipWhenForking() {
 583 |     |         if (!isFork()) {
 584 |     |             _;
 585 |     |         }
 586 |     |     }
 587 |     | 
 588 |     |     modifier skipWhenNotForking() {
 589 |     |         if (isFork()) {
 590 |     |             _;
 591 |     |         }
 592 |     |     }
 593 |     | 
 594 |     |     modifier noGasMetering() {
 595 |     |         vm.pauseGasMetering();
 596 |     |         // To prevent turning gas monitoring back on with nested functions that use this modifier,
 597 |     |         // we check if gasMetering started in the off position. If it did, we don't want to turn
 598 |     |         // it back on until we exit the top level function that used the modifier
 599 |     |         //
 600 |     |         // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.
 601 |     |         // funcA will have `gasStartedOff` as false, funcB will have it as true,
 602 |     |         // so we only turn metering back on at the end of the funcA
 603 |     |         bool gasStartedOff = gasMeteringOff;
 604 |     |         gasMeteringOff = true;
 605 |     | 
 606 |     |         _;
 607 |     | 
 608 |     |         // if gas metering was on when this modifier was called, turn it back on at the end
 609 |     |         if (!gasStartedOff) {
 610 |     |             gasMeteringOff = false;
 611 |     |             vm.resumeGasMetering();
 612 |     |         }
 613 |     |     }
 614 |     | 
 615 |     |     // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no
 616 |     |     // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We
 617 |     |     // can't simply access the chain ID in a normal view or pure function because the solc View Pure
 618 |     |     // Checker changed `chainid` from pure to view in 0.8.0.
 619 |     |     function _viewChainId() private view returns (uint256 chainId) {
 620 |     |         // Assembly required since `block.chainid` was introduced in 0.8.0.
 621 |     |         assembly {
 622 |     |             chainId := chainid()
 623 |     |         }
 624 |     | 
 625 |     |         address(this); // Silence warnings in older Solc versions.
 626 |     |     }
 627 |     | 
 628 |     |     function _pureChainId() private pure returns (uint256 chainId) {
 629 |     |         function() internal view returns (uint256) fnIn = _viewChainId;
 630 |     |         function() internal pure returns (uint256) pureChainId;
 631 |     |         assembly {
 632 |     |             pureChainId := fnIn
 633 |     |         }
 634 |     |         chainId = pureChainId();
 635 |     |     }
 636 |     | }
 637 |     | 
 638 |     | // Wrappers around cheatcodes to avoid footguns
 639 |     | abstract contract StdCheats is StdCheatsSafe {
 640 |     |     using stdStorage for StdStorage;
 641 |     | 
 642 |     |     StdStorage private stdstore;
 643 |     |     Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
 644 |     |     address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;
 645 |     | 
 646 |     |     // Skip forward or rewind time by the specified number of seconds
 647 |     |     function skip(uint256 time) internal virtual {
 648 |     |         vm.warp(block.timestamp + time);
 649 |     |     }
 650 |     | 
 651 |     |     function rewind(uint256 time) internal virtual {
 652 |     |         vm.warp(block.timestamp - time);
 653 |     |     }
 654 |     | 
 655 |     |     // Setup a prank from an address that has some ether
 656 |     |     function hoax(address msgSender) internal virtual {
 657 |     |         vm.deal(msgSender, 1 << 128);
 658 |     |         vm.prank(msgSender);
 659 |     |     }
 660 |     | 
 661 |     |     function hoax(address msgSender, uint256 give) internal virtual {
 662 |     |         vm.deal(msgSender, give);
 663 |     |         vm.prank(msgSender);
 664 |     |     }
 665 |     | 
 666 |     |     function hoax(address msgSender, address origin) internal virtual {
 667 |     |         vm.deal(msgSender, 1 << 128);
 668 |     |         vm.prank(msgSender, origin);
 669 |     |     }
 670 |     | 
 671 |     |     function hoax(address msgSender, address origin, uint256 give) internal virtual {
 672 |     |         vm.deal(msgSender, give);
 673 |     |         vm.prank(msgSender, origin);
 674 |     |     }
 675 |     | 
 676 |     |     // Start perpetual prank from an address that has some ether
 677 |     |     function startHoax(address msgSender) internal virtual {
 678 |     |         vm.deal(msgSender, 1 << 128);
 679 |     |         vm.startPrank(msgSender);
 680 |     |     }
 681 |     | 
 682 |     |     function startHoax(address msgSender, uint256 give) internal virtual {
 683 |     |         vm.deal(msgSender, give);
 684 |     |         vm.startPrank(msgSender);
 685 |     |     }
 686 |     | 
 687 |     |     // Start perpetual prank from an address that has some ether
 688 |     |     // tx.origin is set to the origin parameter
 689 |     |     function startHoax(address msgSender, address origin) internal virtual {
 690 |     |         vm.deal(msgSender, 1 << 128);
 691 |     |         vm.startPrank(msgSender, origin);
 692 |     |     }
 693 |     | 
 694 |     |     function startHoax(address msgSender, address origin, uint256 give) internal virtual {
 695 |     |         vm.deal(msgSender, give);
 696 |     |         vm.startPrank(msgSender, origin);
 697 |     |     }
 698 |     | 
 699 |     |     function changePrank(address msgSender) internal virtual {
 700 |     |         console2_log_StdCheats("changePrank is deprecated. Please use vm.startPrank instead.");
 701 |     |         vm.stopPrank();
 702 |     |         vm.startPrank(msgSender);
 703 |     |     }
 704 |     | 
 705 |     |     function changePrank(address msgSender, address txOrigin) internal virtual {
 706 |     |         vm.stopPrank();
 707 |     |         vm.startPrank(msgSender, txOrigin);
 708 |     |     }
 709 |     | 
 710 |     |     // The same as Vm's `deal`
 711 |     |     // Use the alternative signature for ERC20 tokens
 712 |     |     function deal(address to, uint256 give) internal virtual {
 713 |     |         vm.deal(to, give);
 714 |     |     }
 715 |     | 
 716 |     |     // Set the balance of an account for any ERC20 token
 717 |     |     // Use the alternative signature to update `totalSupply`
 718 |     |     function deal(address token, address to, uint256 give) internal virtual {
 719 |     |         deal(token, to, give, false);
 720 |     |     }
 721 |     | 
 722 |     |     // Set the balance of an account for any ERC1155 token
 723 |     |     // Use the alternative signature to update `totalSupply`
 724 |     |     function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {
 725 |     |         dealERC1155(token, to, id, give, false);
 726 |     |     }
 727 |     | 
 728 |     |     function deal(address token, address to, uint256 give, bool adjust) internal virtual {
 729 |     |         // get current balance
 730 |     |         (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));
 731 |     |         uint256 prevBal = abi.decode(balData, (uint256));
 732 |     | 
 733 |     |         // update balance
 734 |     |         stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);
 735 |     | 
 736 |     |         // update total supply
 737 |     |         if (adjust) {
 738 |     |             (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));
 739 |     |             uint256 totSup = abi.decode(totSupData, (uint256));
 740 |     |             if (give < prevBal) {
 741 |     |                 totSup -= (prevBal - give);
 742 |     |             } else {
 743 |     |                 totSup += (give - prevBal);
 744 |     |             }
 745 |     |             stdstore.target(token).sig(0x18160ddd).checked_write(totSup);
 746 |     |         }
 747 |     |     }
 748 |     | 
 749 |     |     function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {
 750 |     |         // get current balance
 751 |     |         (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));
 752 |     |         uint256 prevBal = abi.decode(balData, (uint256));
 753 |     | 
 754 |     |         // update balance
 755 |     |         stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);
 756 |     | 
 757 |     |         // update total supply
 758 |     |         if (adjust) {
 759 |     |             (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));
 760 |     |             require(
 761 |     |                 totSupData.length != 0,
 762 |     |                 "StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply."
 763 |     |             );
 764 |     |             uint256 totSup = abi.decode(totSupData, (uint256));
 765 |     |             if (give < prevBal) {
 766 |     |                 totSup -= (prevBal - give);
 767 |     |             } else {
 768 |     |                 totSup += (give - prevBal);
 769 |     |             }
 770 |     |             stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);
 771 |     |         }
 772 |     |     }
 773 |     | 
 774 |     |     function dealERC721(address token, address to, uint256 id) internal virtual {
 775 |     |         // check if token id is already minted and the actual owner.
 776 |     |         (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));
 777 |     |         require(successMinted, "StdCheats deal(address,address,uint,bool): id not minted.");
 778 |     | 
 779 |     |         // get owner current balance
 780 |     |         (, bytes memory fromBalData) =
 781 |     |             token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));
 782 |     |         uint256 fromPrevBal = abi.decode(fromBalData, (uint256));
 783 |     | 
 784 |     |         // get new user current balance
 785 |     |         (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));
 786 |     |         uint256 toPrevBal = abi.decode(toBalData, (uint256));
 787 |     | 
 788 |     |         // update balances
 789 |     |         stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);
 790 |     |         stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);
 791 |     | 
 792 |     |         // update owner
 793 |     |         stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);
 794 |     |     }
 795 |     | 
 796 |     |     function deployCodeTo(string memory what, address where) internal virtual {
 797 |     |         deployCodeTo(what, "", 0, where);
 798 |     |     }
 799 |     | 
 800 |     |     function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {
 801 |     |         deployCodeTo(what, args, 0, where);
 802 |     |     }
 803 |     | 
 804 |     |     function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {
 805 |     |         bytes memory creationCode = vm.getCode(what);
 806 |     |         vm.etch(where, abi.encodePacked(creationCode, args));
 807 |     |         (bool success, bytes memory runtimeBytecode) = where.call{value: value}("");
 808 |     |         require(success, "StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.");
 809 |     |         vm.etch(where, runtimeBytecode);
 810 |     |     }
 811 |     | 
 812 |     |     // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.
 813 |     |     function console2_log_StdCheats(string memory p0) private view {
 814 |     |         (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature("log(string)", p0));
 815 |     |         status;
 816 |     |     }
 817 |     | }
 818 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/StdError.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // Panics work for versions >=0.8.0, but we lowered the pragma to make this compatible with Test
  3 |     | pragma solidity >=0.6.2 <0.9.0;
  4 |     | 
  5 |     | library stdError {
  6 |     |     bytes public constant assertionError = abi.encodeWithSignature("Panic(uint256)", 0x01);
  7 |     |     bytes public constant arithmeticError = abi.encodeWithSignature("Panic(uint256)", 0x11);
  8 |     |     bytes public constant divisionError = abi.encodeWithSignature("Panic(uint256)", 0x12);
  9 |     |     bytes public constant enumConversionError = abi.encodeWithSignature("Panic(uint256)", 0x21);
 10 |     |     bytes public constant encodeStorageError = abi.encodeWithSignature("Panic(uint256)", 0x22);
 11 |     |     bytes public constant popError = abi.encodeWithSignature("Panic(uint256)", 0x31);
 12 |     |     bytes public constant indexOOBError = abi.encodeWithSignature("Panic(uint256)", 0x32);
 13 |     |     bytes public constant memOverflowError = abi.encodeWithSignature("Panic(uint256)", 0x41);
 14 |     |     bytes public constant zeroVarError = abi.encodeWithSignature("Panic(uint256)", 0x51);
 15 |     | }
 16 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/StdInvariant.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | pragma experimental ABIEncoderV2;
   5 |     | 
   6 |     | abstract contract StdInvariant {
   7 |     |     struct FuzzSelector {
   8 |     |         address addr;
   9 |     |         bytes4[] selectors;
  10 |     |     }
  11 |     | 
  12 |     |     struct FuzzArtifactSelector {
  13 |     |         string artifact;
  14 |     |         bytes4[] selectors;
  15 |     |     }
  16 |     | 
  17 |     |     struct FuzzInterface {
  18 |     |         address addr;
  19 |     |         string[] artifacts;
  20 |     |     }
  21 |     | 
  22 |     |     address[] private _excludedContracts;
  23 |     |     address[] private _excludedSenders;
  24 |     |     address[] private _targetedContracts;
  25 |     |     address[] private _targetedSenders;
  26 |     | 
  27 |     |     string[] private _excludedArtifacts;
  28 |     |     string[] private _targetedArtifacts;
  29 |     | 
  30 |     |     FuzzArtifactSelector[] private _targetedArtifactSelectors;
  31 |     | 
  32 |     |     FuzzSelector[] private _excludedSelectors;
  33 |     |     FuzzSelector[] private _targetedSelectors;
  34 |     | 
  35 |     |     FuzzInterface[] private _targetedInterfaces;
  36 |     | 
  37 |     |     // Functions for users:
  38 |     |     // These are intended to be called in tests.
  39 |     | 
  40 |     |     function excludeContract(address newExcludedContract_) internal {
  41 |     |         _excludedContracts.push(newExcludedContract_);
  42 |     |     }
  43 |     | 
  44 |     |     function excludeSelector(FuzzSelector memory newExcludedSelector_) internal {
  45 |     |         _excludedSelectors.push(newExcludedSelector_);
  46 |     |     }
  47 |     | 
  48 |     |     function excludeSender(address newExcludedSender_) internal {
  49 |     |         _excludedSenders.push(newExcludedSender_);
  50 |     |     }
  51 |     | 
  52 |     |     function excludeArtifact(string memory newExcludedArtifact_) internal {
  53 |     |         _excludedArtifacts.push(newExcludedArtifact_);
  54 |     |     }
  55 |     | 
  56 |     |     function targetArtifact(string memory newTargetedArtifact_) internal {
  57 |     |         _targetedArtifacts.push(newTargetedArtifact_);
  58 |     |     }
  59 |     | 
  60 |     |     function targetArtifactSelector(FuzzArtifactSelector memory newTargetedArtifactSelector_) internal {
  61 |     |         _targetedArtifactSelectors.push(newTargetedArtifactSelector_);
  62 |     |     }
  63 |     | 
  64 |     |     function targetContract(address newTargetedContract_) internal {
  65 |     |         _targetedContracts.push(newTargetedContract_);
  66 |     |     }
  67 |     | 
  68 |     |     function targetSelector(FuzzSelector memory newTargetedSelector_) internal {
  69 |     |         _targetedSelectors.push(newTargetedSelector_);
  70 |     |     }
  71 |     | 
  72 |     |     function targetSender(address newTargetedSender_) internal {
  73 |     |         _targetedSenders.push(newTargetedSender_);
  74 |     |     }
  75 |     | 
  76 |     |     function targetInterface(FuzzInterface memory newTargetedInterface_) internal {
  77 |     |         _targetedInterfaces.push(newTargetedInterface_);
  78 |     |     }
  79 |     | 
  80 |     |     // Functions for forge:
  81 |     |     // These are called by forge to run invariant tests and don't need to be called in tests.
  82 |     | 
  83 | *   |     function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {
  84 | *   |         excludedArtifacts_ = _excludedArtifacts;
  85 |     |     }
  86 |     | 
  87 | *   |     function excludeContracts() public view returns (address[] memory excludedContracts_) {
  88 | *   |         excludedContracts_ = _excludedContracts;
  89 |     |     }
  90 |     | 
  91 | *   |     function excludeSelectors() public view returns (FuzzSelector[] memory excludedSelectors_) {
  92 | *   |         excludedSelectors_ = _excludedSelectors;
  93 |     |     }
  94 |     | 
  95 | *   |     function excludeSenders() public view returns (address[] memory excludedSenders_) {
  96 | *   |         excludedSenders_ = _excludedSenders;
  97 |     |     }
  98 |     | 
  99 | *   |     function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {
 100 | *   |         targetedArtifacts_ = _targetedArtifacts;
 101 |     |     }
 102 |     | 
 103 | *   |     function targetArtifactSelectors() public view returns (FuzzArtifactSelector[] memory targetedArtifactSelectors_) {
 104 | *   |         targetedArtifactSelectors_ = _targetedArtifactSelectors;
 105 |     |     }
 106 |     | 
 107 | *   |     function targetContracts() public view returns (address[] memory targetedContracts_) {
 108 | *   |         targetedContracts_ = _targetedContracts;
 109 |     |     }
 110 |     | 
 111 | *   |     function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {
 112 | *   |         targetedSelectors_ = _targetedSelectors;
 113 |     |     }
 114 |     | 
 115 | *   |     function targetSenders() public view returns (address[] memory targetedSenders_) {
 116 | *   |         targetedSenders_ = _targetedSenders;
 117 |     |     }
 118 |     | 
 119 | *   |     function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {
 120 | *   |         targetedInterfaces_ = _targetedInterfaces;
 121 |     |     }
 122 |     | }
 123 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/StdJson.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.0 <0.9.0;
   3 |     | 
   4 |     | pragma experimental ABIEncoderV2;
   5 |     | 
   6 |     | import {VmSafe} from "./Vm.sol";
   7 |     | 
   8 |     | // Helpers for parsing and writing JSON files
   9 |     | // To parse:
  10 |     | // ```
  11 |     | // using stdJson for string;
  12 |     | // string memory json = vm.readFile("<some_path>");
  13 |     | // json.readUint("<json_path>");
  14 |     | // ```
  15 |     | // To write:
  16 |     | // ```
  17 |     | // using stdJson for string;
  18 |     | // string memory json = "json";
  19 |     | // json.serialize("a", uint256(123));
  20 |     | // string memory semiFinal = json.serialize("b", string("test"));
  21 |     | // string memory finalJson = json.serialize("c", semiFinal);
  22 |     | // finalJson.write("<some_path>");
  23 |     | // ```
  24 |     | 
  25 |     | library stdJson {
  26 |     |     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
  27 |     | 
  28 |     |     function keyExists(string memory json, string memory key) internal view returns (bool) {
  29 |     |         return vm.keyExistsJson(json, key);
  30 |     |     }
  31 |     | 
  32 |     |     function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {
  33 |     |         return vm.parseJson(json, key);
  34 |     |     }
  35 |     | 
  36 |     |     function readUint(string memory json, string memory key) internal pure returns (uint256) {
  37 |     |         return vm.parseJsonUint(json, key);
  38 |     |     }
  39 |     | 
  40 |     |     function readUintArray(string memory json, string memory key) internal pure returns (uint256[] memory) {
  41 |     |         return vm.parseJsonUintArray(json, key);
  42 |     |     }
  43 |     | 
  44 |     |     function readInt(string memory json, string memory key) internal pure returns (int256) {
  45 |     |         return vm.parseJsonInt(json, key);
  46 |     |     }
  47 |     | 
  48 |     |     function readIntArray(string memory json, string memory key) internal pure returns (int256[] memory) {
  49 |     |         return vm.parseJsonIntArray(json, key);
  50 |     |     }
  51 |     | 
  52 |     |     function readBytes32(string memory json, string memory key) internal pure returns (bytes32) {
  53 |     |         return vm.parseJsonBytes32(json, key);
  54 |     |     }
  55 |     | 
  56 |     |     function readBytes32Array(string memory json, string memory key) internal pure returns (bytes32[] memory) {
  57 |     |         return vm.parseJsonBytes32Array(json, key);
  58 |     |     }
  59 |     | 
  60 |     |     function readString(string memory json, string memory key) internal pure returns (string memory) {
  61 |     |         return vm.parseJsonString(json, key);
  62 |     |     }
  63 |     | 
  64 |     |     function readStringArray(string memory json, string memory key) internal pure returns (string[] memory) {
  65 |     |         return vm.parseJsonStringArray(json, key);
  66 |     |     }
  67 |     | 
  68 |     |     function readAddress(string memory json, string memory key) internal pure returns (address) {
  69 |     |         return vm.parseJsonAddress(json, key);
  70 |     |     }
  71 |     | 
  72 |     |     function readAddressArray(string memory json, string memory key) internal pure returns (address[] memory) {
  73 |     |         return vm.parseJsonAddressArray(json, key);
  74 |     |     }
  75 |     | 
  76 |     |     function readBool(string memory json, string memory key) internal pure returns (bool) {
  77 |     |         return vm.parseJsonBool(json, key);
  78 |     |     }
  79 |     | 
  80 |     |     function readBoolArray(string memory json, string memory key) internal pure returns (bool[] memory) {
  81 |     |         return vm.parseJsonBoolArray(json, key);
  82 |     |     }
  83 |     | 
  84 |     |     function readBytes(string memory json, string memory key) internal pure returns (bytes memory) {
  85 |     |         return vm.parseJsonBytes(json, key);
  86 |     |     }
  87 |     | 
  88 |     |     function readBytesArray(string memory json, string memory key) internal pure returns (bytes[] memory) {
  89 |     |         return vm.parseJsonBytesArray(json, key);
  90 |     |     }
  91 |     | 
  92 |     |     function readUintOr(string memory json, string memory key, uint256 defaultValue) internal view returns (uint256) {
  93 |     |         return keyExists(json, key) ? readUint(json, key) : defaultValue;
  94 |     |     }
  95 |     | 
  96 |     |     function readUintArrayOr(string memory json, string memory key, uint256[] memory defaultValue)
  97 |     |         internal
  98 |     |         view
  99 |     |         returns (uint256[] memory)
 100 |     |     {
 101 |     |         return keyExists(json, key) ? readUintArray(json, key) : defaultValue;
 102 |     |     }
 103 |     | 
 104 |     |     function readIntOr(string memory json, string memory key, int256 defaultValue) internal view returns (int256) {
 105 |     |         return keyExists(json, key) ? readInt(json, key) : defaultValue;
 106 |     |     }
 107 |     | 
 108 |     |     function readIntArrayOr(string memory json, string memory key, int256[] memory defaultValue)
 109 |     |         internal
 110 |     |         view
 111 |     |         returns (int256[] memory)
 112 |     |     {
 113 |     |         return keyExists(json, key) ? readIntArray(json, key) : defaultValue;
 114 |     |     }
 115 |     | 
 116 |     |     function readBytes32Or(string memory json, string memory key, bytes32 defaultValue)
 117 |     |         internal
 118 |     |         view
 119 |     |         returns (bytes32)
 120 |     |     {
 121 |     |         return keyExists(json, key) ? readBytes32(json, key) : defaultValue;
 122 |     |     }
 123 |     | 
 124 |     |     function readBytes32ArrayOr(string memory json, string memory key, bytes32[] memory defaultValue)
 125 |     |         internal
 126 |     |         view
 127 |     |         returns (bytes32[] memory)
 128 |     |     {
 129 |     |         return keyExists(json, key) ? readBytes32Array(json, key) : defaultValue;
 130 |     |     }
 131 |     | 
 132 |     |     function readStringOr(string memory json, string memory key, string memory defaultValue)
 133 |     |         internal
 134 |     |         view
 135 |     |         returns (string memory)
 136 |     |     {
 137 |     |         return keyExists(json, key) ? readString(json, key) : defaultValue;
 138 |     |     }
 139 |     | 
 140 |     |     function readStringArrayOr(string memory json, string memory key, string[] memory defaultValue)
 141 |     |         internal
 142 |     |         view
 143 |     |         returns (string[] memory)
 144 |     |     {
 145 |     |         return keyExists(json, key) ? readStringArray(json, key) : defaultValue;
 146 |     |     }
 147 |     | 
 148 |     |     function readAddressOr(string memory json, string memory key, address defaultValue)
 149 |     |         internal
 150 |     |         view
 151 |     |         returns (address)
 152 |     |     {
 153 |     |         return keyExists(json, key) ? readAddress(json, key) : defaultValue;
 154 |     |     }
 155 |     | 
 156 |     |     function readAddressArrayOr(string memory json, string memory key, address[] memory defaultValue)
 157 |     |         internal
 158 |     |         view
 159 |     |         returns (address[] memory)
 160 |     |     {
 161 |     |         return keyExists(json, key) ? readAddressArray(json, key) : defaultValue;
 162 |     |     }
 163 |     | 
 164 |     |     function readBoolOr(string memory json, string memory key, bool defaultValue) internal view returns (bool) {
 165 |     |         return keyExists(json, key) ? readBool(json, key) : defaultValue;
 166 |     |     }
 167 |     | 
 168 |     |     function readBoolArrayOr(string memory json, string memory key, bool[] memory defaultValue)
 169 |     |         internal
 170 |     |         view
 171 |     |         returns (bool[] memory)
 172 |     |     {
 173 |     |         return keyExists(json, key) ? readBoolArray(json, key) : defaultValue;
 174 |     |     }
 175 |     | 
 176 |     |     function readBytesOr(string memory json, string memory key, bytes memory defaultValue)
 177 |     |         internal
 178 |     |         view
 179 |     |         returns (bytes memory)
 180 |     |     {
 181 |     |         return keyExists(json, key) ? readBytes(json, key) : defaultValue;
 182 |     |     }
 183 |     | 
 184 |     |     function readBytesArrayOr(string memory json, string memory key, bytes[] memory defaultValue)
 185 |     |         internal
 186 |     |         view
 187 |     |         returns (bytes[] memory)
 188 |     |     {
 189 |     |         return keyExists(json, key) ? readBytesArray(json, key) : defaultValue;
 190 |     |     }
 191 |     | 
 192 |     |     function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {
 193 |     |         return vm.serializeJson(jsonKey, rootObject);
 194 |     |     }
 195 |     | 
 196 |     |     function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {
 197 |     |         return vm.serializeBool(jsonKey, key, value);
 198 |     |     }
 199 |     | 
 200 |     |     function serialize(string memory jsonKey, string memory key, bool[] memory value)
 201 |     |         internal
 202 |     |         returns (string memory)
 203 |     |     {
 204 |     |         return vm.serializeBool(jsonKey, key, value);
 205 |     |     }
 206 |     | 
 207 |     |     function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {
 208 |     |         return vm.serializeUint(jsonKey, key, value);
 209 |     |     }
 210 |     | 
 211 |     |     function serialize(string memory jsonKey, string memory key, uint256[] memory value)
 212 |     |         internal
 213 |     |         returns (string memory)
 214 |     |     {
 215 |     |         return vm.serializeUint(jsonKey, key, value);
 216 |     |     }
 217 |     | 
 218 |     |     function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {
 219 |     |         return vm.serializeInt(jsonKey, key, value);
 220 |     |     }
 221 |     | 
 222 |     |     function serialize(string memory jsonKey, string memory key, int256[] memory value)
 223 |     |         internal
 224 |     |         returns (string memory)
 225 |     |     {
 226 |     |         return vm.serializeInt(jsonKey, key, value);
 227 |     |     }
 228 |     | 
 229 |     |     function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {
 230 |     |         return vm.serializeAddress(jsonKey, key, value);
 231 |     |     }
 232 |     | 
 233 |     |     function serialize(string memory jsonKey, string memory key, address[] memory value)
 234 |     |         internal
 235 |     |         returns (string memory)
 236 |     |     {
 237 |     |         return vm.serializeAddress(jsonKey, key, value);
 238 |     |     }
 239 |     | 
 240 |     |     function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {
 241 |     |         return vm.serializeBytes32(jsonKey, key, value);
 242 |     |     }
 243 |     | 
 244 |     |     function serialize(string memory jsonKey, string memory key, bytes32[] memory value)
 245 |     |         internal
 246 |     |         returns (string memory)
 247 |     |     {
 248 |     |         return vm.serializeBytes32(jsonKey, key, value);
 249 |     |     }
 250 |     | 
 251 |     |     function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {
 252 |     |         return vm.serializeBytes(jsonKey, key, value);
 253 |     |     }
 254 |     | 
 255 |     |     function serialize(string memory jsonKey, string memory key, bytes[] memory value)
 256 |     |         internal
 257 |     |         returns (string memory)
 258 |     |     {
 259 |     |         return vm.serializeBytes(jsonKey, key, value);
 260 |     |     }
 261 |     | 
 262 |     |     function serialize(string memory jsonKey, string memory key, string memory value)
 263 |     |         internal
 264 |     |         returns (string memory)
 265 |     |     {
 266 |     |         return vm.serializeString(jsonKey, key, value);
 267 |     |     }
 268 |     | 
 269 |     |     function serialize(string memory jsonKey, string memory key, string[] memory value)
 270 |     |         internal
 271 |     |         returns (string memory)
 272 |     |     {
 273 |     |         return vm.serializeString(jsonKey, key, value);
 274 |     |     }
 275 |     | 
 276 |     |     function write(string memory jsonKey, string memory path) internal {
 277 |     |         vm.writeJson(jsonKey, path);
 278 |     |     }
 279 |     | 
 280 |     |     function write(string memory jsonKey, string memory path, string memory valueKey) internal {
 281 |     |         vm.writeJson(jsonKey, path, valueKey);
 282 |     |     }
 283 |     | }
 284 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/StdMath.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2 <0.9.0;
  3 |     | 
  4 |     | library stdMath {
  5 |     |     int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
  6 |     | 
  7 |     |     function abs(int256 a) internal pure returns (uint256) {
  8 |     |         // Required or it will fail when `a = type(int256).min`
  9 |     |         if (a == INT256_MIN) {
 10 |     |             return 57896044618658097711785492504343953926634992332820282019728792003956564819968;
 11 |     |         }
 12 |     | 
 13 |     |         return uint256(a > 0 ? a : -a);
 14 |     |     }
 15 |     | 
 16 |     |     function delta(uint256 a, uint256 b) internal pure returns (uint256) {
 17 |     |         return a > b ? a - b : b - a;
 18 |     |     }
 19 |     | 
 20 |     |     function delta(int256 a, int256 b) internal pure returns (uint256) {
 21 |     |         // a and b are of the same sign
 22 |     |         // this works thanks to two's complement, the left-most bit is the sign bit
 23 |     |         if ((a ^ b) > -1) {
 24 |     |             return delta(abs(a), abs(b));
 25 |     |         }
 26 |     | 
 27 |     |         // a and b are of opposite signs
 28 |     |         return abs(a) + abs(b);
 29 |     |     }
 30 |     | 
 31 |     |     function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {
 32 |     |         uint256 absDelta = delta(a, b);
 33 |     | 
 34 |     |         return absDelta * 1e18 / b;
 35 |     |     }
 36 |     | 
 37 |     |     function percentDelta(int256 a, int256 b) internal pure returns (uint256) {
 38 |     |         uint256 absDelta = delta(a, b);
 39 |     |         uint256 absB = abs(b);
 40 |     | 
 41 |     |         return absDelta * 1e18 / absB;
 42 |     |     }
 43 |     | }
 44 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/StdStorage.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | import {Vm} from "./Vm.sol";
   5 |     | 
   6 |     | struct FindData {
   7 |     |     uint256 slot;
   8 |     |     uint256 offsetLeft;
   9 |     |     uint256 offsetRight;
  10 |     |     bool found;
  11 |     | }
  12 |     | 
  13 |     | struct StdStorage {
  14 |     |     mapping(address => mapping(bytes4 => mapping(bytes32 => FindData))) finds;
  15 |     |     bytes32[] _keys;
  16 |     |     bytes4 _sig;
  17 |     |     uint256 _depth;
  18 |     |     address _target;
  19 |     |     bytes32 _set;
  20 |     |     bool _enable_packed_slots;
  21 |     |     bytes _calldata;
  22 |     | }
  23 |     | 
  24 |     | library stdStorageSafe {
  25 |     |     event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);
  26 |     |     event WARNING_UninitedSlot(address who, uint256 slot);
  27 |     | 
  28 |     |     Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
  29 |     |     uint256 constant UINT256_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
  30 |     | 
  31 |     |     function sigs(string memory sigStr) internal pure returns (bytes4) {
  32 |     |         return bytes4(keccak256(bytes(sigStr)));
  33 |     |     }
  34 |     | 
  35 |     |     function getCallParams(StdStorage storage self) internal view returns (bytes memory) {
  36 |     |         if (self._calldata.length == 0) {
  37 |     |             return flatten(self._keys);
  38 |     |         } else {
  39 |     |             return self._calldata;
  40 |     |         }
  41 |     |     }
  42 |     | 
  43 |     |     // Calls target contract with configured parameters
  44 |     |     function callTarget(StdStorage storage self) internal view returns (bool, bytes32) {
  45 |     |         bytes memory cald = abi.encodePacked(self._sig, getCallParams(self));
  46 |     |         (bool success, bytes memory rdat) = self._target.staticcall(cald);
  47 |     |         bytes32 result = bytesToBytes32(rdat, 32 * self._depth);
  48 |     | 
  49 |     |         return (success, result);
  50 |     |     }
  51 |     | 
  52 |     |     // Tries mutating slot value to determine if the targeted value is stored in it.
  53 |     |     // If current value is 0, then we are setting slot value to type(uint256).max
  54 |     |     // Otherwise, we set it to 0. That way, return value should always be affected.
  55 |     |     function checkSlotMutatesCall(StdStorage storage self, bytes32 slot) internal returns (bool) {
  56 |     |         bytes32 prevSlotValue = vm.load(self._target, slot);
  57 |     |         (bool success, bytes32 prevReturnValue) = callTarget(self);
  58 |     | 
  59 |     |         bytes32 testVal = prevReturnValue == bytes32(0) ? bytes32(UINT256_MAX) : bytes32(0);
  60 |     |         vm.store(self._target, slot, testVal);
  61 |     | 
  62 |     |         (, bytes32 newReturnValue) = callTarget(self);
  63 |     | 
  64 |     |         vm.store(self._target, slot, prevSlotValue);
  65 |     | 
  66 |     |         return (success && (prevReturnValue != newReturnValue));
  67 |     |     }
  68 |     | 
  69 |     |     // Tries setting one of the bits in slot to 1 until return value changes.
  70 |     |     // Index of resulted bit is an offset packed slot has from left/right side
  71 |     |     function findOffset(StdStorage storage self, bytes32 slot, bool left) internal returns (bool, uint256) {
  72 |     |         for (uint256 offset = 0; offset < 256; offset++) {
  73 |     |             uint256 valueToPut = left ? (1 << (255 - offset)) : (1 << offset);
  74 |     |             vm.store(self._target, slot, bytes32(valueToPut));
  75 |     | 
  76 |     |             (bool success, bytes32 data) = callTarget(self);
  77 |     | 
  78 |     |             if (success && (uint256(data) > 0)) {
  79 |     |                 return (true, offset);
  80 |     |             }
  81 |     |         }
  82 |     |         return (false, 0);
  83 |     |     }
  84 |     | 
  85 |     |     function findOffsets(StdStorage storage self, bytes32 slot) internal returns (bool, uint256, uint256) {
  86 |     |         bytes32 prevSlotValue = vm.load(self._target, slot);
  87 |     | 
  88 |     |         (bool foundLeft, uint256 offsetLeft) = findOffset(self, slot, true);
  89 |     |         (bool foundRight, uint256 offsetRight) = findOffset(self, slot, false);
  90 |     | 
  91 |     |         // `findOffset` may mutate slot value, so we are setting it to initial value
  92 |     |         vm.store(self._target, slot, prevSlotValue);
  93 |     |         return (foundLeft && foundRight, offsetLeft, offsetRight);
  94 |     |     }
  95 |     | 
  96 |     |     function find(StdStorage storage self) internal returns (FindData storage) {
  97 |     |         return find(self, true);
  98 |     |     }
  99 |     | 
 100 |     |     /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against
 101 |     |     // slot complexity:
 102 |     |     //  if flat, will be bytes32(uint256(uint));
 103 |     |     //  if map, will be keccak256(abi.encode(key, uint(slot)));
 104 |     |     //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));
 105 |     |     //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);
 106 |     |     function find(StdStorage storage self, bool _clear) internal returns (FindData storage) {
 107 |     |         address who = self._target;
 108 |     |         bytes4 fsig = self._sig;
 109 |     |         uint256 field_depth = self._depth;
 110 |     |         bytes memory params = getCallParams(self);
 111 |     | 
 112 |     |         // calldata to test against
 113 |     |         if (self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {
 114 |     |             if (_clear) {
 115 |     |                 clear(self);
 116 |     |             }
 117 |     |             return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];
 118 |     |         }
 119 |     |         vm.record();
 120 |     |         (, bytes32 callResult) = callTarget(self);
 121 |     |         (bytes32[] memory reads,) = vm.accesses(address(who));
 122 |     | 
 123 |     |         if (reads.length == 0) {
 124 |     |             revert("stdStorage find(StdStorage): No storage use detected for target.");
 125 |     |         } else {
 126 |     |             for (uint256 i = reads.length; --i >= 0;) {
 127 |     |                 bytes32 prev = vm.load(who, reads[i]);
 128 |     |                 if (prev == bytes32(0)) {
 129 |     |                     emit WARNING_UninitedSlot(who, uint256(reads[i]));
 130 |     |                 }
 131 |     | 
 132 |     |                 if (!checkSlotMutatesCall(self, reads[i])) {
 133 |     |                     continue;
 134 |     |                 }
 135 |     | 
 136 |     |                 (uint256 offsetLeft, uint256 offsetRight) = (0, 0);
 137 |     | 
 138 |     |                 if (self._enable_packed_slots) {
 139 |     |                     bool found;
 140 |     |                     (found, offsetLeft, offsetRight) = findOffsets(self, reads[i]);
 141 |     |                     if (!found) {
 142 |     |                         continue;
 143 |     |                     }
 144 |     |                 }
 145 |     | 
 146 |     |                 // Check that value between found offsets is equal to the current call result
 147 |     |                 uint256 curVal = (uint256(prev) & getMaskByOffsets(offsetLeft, offsetRight)) >> offsetRight;
 148 |     | 
 149 |     |                 if (uint256(callResult) != curVal) {
 150 |     |                     continue;
 151 |     |                 }
 152 |     | 
 153 |     |                 emit SlotFound(who, fsig, keccak256(abi.encodePacked(params, field_depth)), uint256(reads[i]));
 154 |     |                 self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))] =
 155 |     |                     FindData(uint256(reads[i]), offsetLeft, offsetRight, true);
 156 |     |                 break;
 157 |     |             }
 158 |     |         }
 159 |     | 
 160 |     |         require(
 161 |     |             self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found,
 162 |     |             "stdStorage find(StdStorage): Slot(s) not found."
 163 |     |         );
 164 |     | 
 165 |     |         if (_clear) {
 166 |     |             clear(self);
 167 |     |         }
 168 |     |         return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];
 169 |     |     }
 170 |     | 
 171 |     |     function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {
 172 |     |         self._target = _target;
 173 |     |         return self;
 174 |     |     }
 175 |     | 
 176 |     |     function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {
 177 |     |         self._sig = _sig;
 178 |     |         return self;
 179 |     |     }
 180 |     | 
 181 |     |     function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {
 182 |     |         self._sig = sigs(_sig);
 183 |     |         return self;
 184 |     |     }
 185 |     | 
 186 |     |     function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {
 187 |     |         self._calldata = _calldata;
 188 |     |         return self;
 189 |     |     }
 190 |     | 
 191 |     |     function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {
 192 |     |         self._keys.push(bytes32(uint256(uint160(who))));
 193 |     |         return self;
 194 |     |     }
 195 |     | 
 196 |     |     function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {
 197 |     |         self._keys.push(bytes32(amt));
 198 |     |         return self;
 199 |     |     }
 200 |     | 
 201 |     |     function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {
 202 |     |         self._keys.push(key);
 203 |     |         return self;
 204 |     |     }
 205 |     | 
 206 |     |     function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {
 207 |     |         self._enable_packed_slots = true;
 208 |     |         return self;
 209 |     |     }
 210 |     | 
 211 |     |     function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {
 212 |     |         self._depth = _depth;
 213 |     |         return self;
 214 |     |     }
 215 |     | 
 216 |     |     function read(StdStorage storage self) private returns (bytes memory) {
 217 |     |         FindData storage data = find(self, false);
 218 |     |         uint256 mask = getMaskByOffsets(data.offsetLeft, data.offsetRight);
 219 |     |         uint256 value = (uint256(vm.load(self._target, bytes32(data.slot))) & mask) >> data.offsetRight;
 220 |     |         clear(self);
 221 |     |         return abi.encode(value);
 222 |     |     }
 223 |     | 
 224 |     |     function read_bytes32(StdStorage storage self) internal returns (bytes32) {
 225 |     |         return abi.decode(read(self), (bytes32));
 226 |     |     }
 227 |     | 
 228 |     |     function read_bool(StdStorage storage self) internal returns (bool) {
 229 |     |         int256 v = read_int(self);
 230 |     |         if (v == 0) return false;
 231 |     |         if (v == 1) return true;
 232 |     |         revert("stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.");
 233 |     |     }
 234 |     | 
 235 |     |     function read_address(StdStorage storage self) internal returns (address) {
 236 |     |         return abi.decode(read(self), (address));
 237 |     |     }
 238 |     | 
 239 |     |     function read_uint(StdStorage storage self) internal returns (uint256) {
 240 |     |         return abi.decode(read(self), (uint256));
 241 |     |     }
 242 |     | 
 243 |     |     function read_int(StdStorage storage self) internal returns (int256) {
 244 |     |         return abi.decode(read(self), (int256));
 245 |     |     }
 246 |     | 
 247 |     |     function parent(StdStorage storage self) internal returns (uint256, bytes32) {
 248 |     |         address who = self._target;
 249 |     |         uint256 field_depth = self._depth;
 250 |     |         vm.startMappingRecording();
 251 |     |         uint256 child = find(self, true).slot - field_depth;
 252 |     |         (bool found, bytes32 key, bytes32 parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));
 253 |     |         if (!found) {
 254 |     |             revert(
 255 |     |                 "stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called."
 256 |     |             );
 257 |     |         }
 258 |     |         return (uint256(parent_slot), key);
 259 |     |     }
 260 |     | 
 261 |     |     function root(StdStorage storage self) internal returns (uint256) {
 262 |     |         address who = self._target;
 263 |     |         uint256 field_depth = self._depth;
 264 |     |         vm.startMappingRecording();
 265 |     |         uint256 child = find(self, true).slot - field_depth;
 266 |     |         bool found;
 267 |     |         bytes32 root_slot;
 268 |     |         bytes32 parent_slot;
 269 |     |         (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));
 270 |     |         if (!found) {
 271 |     |             revert(
 272 |     |                 "stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called."
 273 |     |             );
 274 |     |         }
 275 |     |         while (found) {
 276 |     |             root_slot = parent_slot;
 277 |     |             (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(root_slot));
 278 |     |         }
 279 |     |         return uint256(root_slot);
 280 |     |     }
 281 |     | 
 282 |     |     function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {
 283 |     |         bytes32 out;
 284 |     | 
 285 |     |         uint256 max = b.length > 32 ? 32 : b.length;
 286 |     |         for (uint256 i = 0; i < max; i++) {
 287 |     |             out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);
 288 |     |         }
 289 |     |         return out;
 290 |     |     }
 291 |     | 
 292 |     |     function flatten(bytes32[] memory b) private pure returns (bytes memory) {
 293 |     |         bytes memory result = new bytes(b.length * 32);
 294 |     |         for (uint256 i = 0; i < b.length; i++) {
 295 |     |             bytes32 k = b[i];
 296 |     |             /// @solidity memory-safe-assembly
 297 |     |             assembly {
 298 |     |                 mstore(add(result, add(32, mul(32, i))), k)
 299 |     |             }
 300 |     |         }
 301 |     | 
 302 |     |         return result;
 303 |     |     }
 304 |     | 
 305 |     |     function clear(StdStorage storage self) internal {
 306 |     |         delete self._target;
 307 |     |         delete self._sig;
 308 |     |         delete self._keys;
 309 |     |         delete self._depth;
 310 |     |         delete self._enable_packed_slots;
 311 |     |         delete self._calldata;
 312 |     |     }
 313 |     | 
 314 |     |     // Returns mask which contains non-zero bits for values between `offsetLeft` and `offsetRight`
 315 |     |     // (slotValue & mask) >> offsetRight will be the value of the given packed variable
 316 |     |     function getMaskByOffsets(uint256 offsetLeft, uint256 offsetRight) internal pure returns (uint256 mask) {
 317 |     |         // mask = ((1 << (256 - (offsetRight + offsetLeft))) - 1) << offsetRight;
 318 |     |         // using assembly because (1 << 256) causes overflow
 319 |     |         assembly {
 320 |     |             mask := shl(offsetRight, sub(shl(sub(256, add(offsetRight, offsetLeft)), 1), 1))
 321 |     |         }
 322 |     |     }
 323 |     | 
 324 |     |     // Returns slot value with updated packed variable.
 325 |     |     function getUpdatedSlotValue(bytes32 curValue, uint256 varValue, uint256 offsetLeft, uint256 offsetRight)
 326 |     |         internal
 327 |     |         pure
 328 |     |         returns (bytes32 newValue)
 329 |     |     {
 330 |     |         return bytes32((uint256(curValue) & ~getMaskByOffsets(offsetLeft, offsetRight)) | (varValue << offsetRight));
 331 |     |     }
 332 |     | }
 333 |     | 
 334 |     | library stdStorage {
 335 |     |     Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
 336 |     | 
 337 |     |     function sigs(string memory sigStr) internal pure returns (bytes4) {
 338 |     |         return stdStorageSafe.sigs(sigStr);
 339 |     |     }
 340 |     | 
 341 |     |     function find(StdStorage storage self) internal returns (uint256) {
 342 |     |         return find(self, true);
 343 |     |     }
 344 |     | 
 345 |     |     function find(StdStorage storage self, bool _clear) internal returns (uint256) {
 346 |     |         return stdStorageSafe.find(self, _clear).slot;
 347 |     |     }
 348 |     | 
 349 |     |     function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {
 350 |     |         return stdStorageSafe.target(self, _target);
 351 |     |     }
 352 |     | 
 353 |     |     function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {
 354 |     |         return stdStorageSafe.sig(self, _sig);
 355 |     |     }
 356 |     | 
 357 |     |     function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {
 358 |     |         return stdStorageSafe.sig(self, _sig);
 359 |     |     }
 360 |     | 
 361 |     |     function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {
 362 |     |         return stdStorageSafe.with_key(self, who);
 363 |     |     }
 364 |     | 
 365 |     |     function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {
 366 |     |         return stdStorageSafe.with_key(self, amt);
 367 |     |     }
 368 |     | 
 369 |     |     function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {
 370 |     |         return stdStorageSafe.with_key(self, key);
 371 |     |     }
 372 |     | 
 373 |     |     function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {
 374 |     |         return stdStorageSafe.with_calldata(self, _calldata);
 375 |     |     }
 376 |     | 
 377 |     |     function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {
 378 |     |         return stdStorageSafe.enable_packed_slots(self);
 379 |     |     }
 380 |     | 
 381 |     |     function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {
 382 |     |         return stdStorageSafe.depth(self, _depth);
 383 |     |     }
 384 |     | 
 385 |     |     function clear(StdStorage storage self) internal {
 386 |     |         stdStorageSafe.clear(self);
 387 |     |     }
 388 |     | 
 389 |     |     function checked_write(StdStorage storage self, address who) internal {
 390 |     |         checked_write(self, bytes32(uint256(uint160(who))));
 391 |     |     }
 392 |     | 
 393 |     |     function checked_write(StdStorage storage self, uint256 amt) internal {
 394 |     |         checked_write(self, bytes32(amt));
 395 |     |     }
 396 |     | 
 397 |     |     function checked_write_int(StdStorage storage self, int256 val) internal {
 398 |     |         checked_write(self, bytes32(uint256(val)));
 399 |     |     }
 400 |     | 
 401 |     |     function checked_write(StdStorage storage self, bool write) internal {
 402 |     |         bytes32 t;
 403 |     |         /// @solidity memory-safe-assembly
 404 |     |         assembly {
 405 |     |             t := write
 406 |     |         }
 407 |     |         checked_write(self, t);
 408 |     |     }
 409 |     | 
 410 |     |     function checked_write(StdStorage storage self, bytes32 set) internal {
 411 |     |         address who = self._target;
 412 |     |         bytes4 fsig = self._sig;
 413 |     |         uint256 field_depth = self._depth;
 414 |     |         bytes memory params = stdStorageSafe.getCallParams(self);
 415 |     | 
 416 |     |         if (!self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {
 417 |     |             find(self, false);
 418 |     |         }
 419 |     |         FindData storage data = self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];
 420 |     |         if ((data.offsetLeft + data.offsetRight) > 0) {
 421 |     |             uint256 maxVal = 2 ** (256 - (data.offsetLeft + data.offsetRight));
 422 |     |             require(
 423 |     |                 uint256(set) < maxVal,
 424 |     |                 string(
 425 |     |                     abi.encodePacked(
 426 |     |                         "stdStorage find(StdStorage): Packed slot. We can't fit value greater than ",
 427 |     |                         vm.toString(maxVal)
 428 |     |                     )
 429 |     |                 )
 430 |     |             );
 431 |     |         }
 432 |     |         bytes32 curVal = vm.load(who, bytes32(data.slot));
 433 |     |         bytes32 valToSet = stdStorageSafe.getUpdatedSlotValue(curVal, uint256(set), data.offsetLeft, data.offsetRight);
 434 |     | 
 435 |     |         vm.store(who, bytes32(data.slot), valToSet);
 436 |     | 
 437 |     |         (bool success, bytes32 callResult) = stdStorageSafe.callTarget(self);
 438 |     | 
 439 |     |         if (!success || callResult != set) {
 440 |     |             vm.store(who, bytes32(data.slot), curVal);
 441 |     |             revert("stdStorage find(StdStorage): Failed to write value.");
 442 |     |         }
 443 |     |         clear(self);
 444 |     |     }
 445 |     | 
 446 |     |     function read_bytes32(StdStorage storage self) internal returns (bytes32) {
 447 |     |         return stdStorageSafe.read_bytes32(self);
 448 |     |     }
 449 |     | 
 450 |     |     function read_bool(StdStorage storage self) internal returns (bool) {
 451 |     |         return stdStorageSafe.read_bool(self);
 452 |     |     }
 453 |     | 
 454 |     |     function read_address(StdStorage storage self) internal returns (address) {
 455 |     |         return stdStorageSafe.read_address(self);
 456 |     |     }
 457 |     | 
 458 |     |     function read_uint(StdStorage storage self) internal returns (uint256) {
 459 |     |         return stdStorageSafe.read_uint(self);
 460 |     |     }
 461 |     | 
 462 |     |     function read_int(StdStorage storage self) internal returns (int256) {
 463 |     |         return stdStorageSafe.read_int(self);
 464 |     |     }
 465 |     | 
 466 |     |     function parent(StdStorage storage self) internal returns (uint256, bytes32) {
 467 |     |         return stdStorageSafe.parent(self);
 468 |     |     }
 469 |     | 
 470 |     |     function root(StdStorage storage self) internal returns (uint256) {
 471 |     |         return stdStorageSafe.root(self);
 472 |     |     }
 473 |     | }
 474 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/StdStyle.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.4.22 <0.9.0;
   3 |     | 
   4 |     | import {VmSafe} from "./Vm.sol";
   5 |     | 
   6 |     | library StdStyle {
   7 |     |     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
   8 |     | 
   9 |     |     string constant RED = "\u001b[91m";
  10 |     |     string constant GREEN = "\u001b[92m";
  11 |     |     string constant YELLOW = "\u001b[93m";
  12 |     |     string constant BLUE = "\u001b[94m";
  13 |     |     string constant MAGENTA = "\u001b[95m";
  14 |     |     string constant CYAN = "\u001b[96m";
  15 |     |     string constant BOLD = "\u001b[1m";
  16 |     |     string constant DIM = "\u001b[2m";
  17 |     |     string constant ITALIC = "\u001b[3m";
  18 |     |     string constant UNDERLINE = "\u001b[4m";
  19 |     |     string constant INVERSE = "\u001b[7m";
  20 |     |     string constant RESET = "\u001b[0m";
  21 |     | 
  22 |     |     function styleConcat(string memory style, string memory self) private pure returns (string memory) {
  23 |     |         return string(abi.encodePacked(style, self, RESET));
  24 |     |     }
  25 |     | 
  26 |     |     function red(string memory self) internal pure returns (string memory) {
  27 |     |         return styleConcat(RED, self);
  28 |     |     }
  29 |     | 
  30 |     |     function red(uint256 self) internal pure returns (string memory) {
  31 |     |         return red(vm.toString(self));
  32 |     |     }
  33 |     | 
  34 |     |     function red(int256 self) internal pure returns (string memory) {
  35 |     |         return red(vm.toString(self));
  36 |     |     }
  37 |     | 
  38 |     |     function red(address self) internal pure returns (string memory) {
  39 |     |         return red(vm.toString(self));
  40 |     |     }
  41 |     | 
  42 |     |     function red(bool self) internal pure returns (string memory) {
  43 |     |         return red(vm.toString(self));
  44 |     |     }
  45 |     | 
  46 |     |     function redBytes(bytes memory self) internal pure returns (string memory) {
  47 |     |         return red(vm.toString(self));
  48 |     |     }
  49 |     | 
  50 |     |     function redBytes32(bytes32 self) internal pure returns (string memory) {
  51 |     |         return red(vm.toString(self));
  52 |     |     }
  53 |     | 
  54 |     |     function green(string memory self) internal pure returns (string memory) {
  55 |     |         return styleConcat(GREEN, self);
  56 |     |     }
  57 |     | 
  58 |     |     function green(uint256 self) internal pure returns (string memory) {
  59 |     |         return green(vm.toString(self));
  60 |     |     }
  61 |     | 
  62 |     |     function green(int256 self) internal pure returns (string memory) {
  63 |     |         return green(vm.toString(self));
  64 |     |     }
  65 |     | 
  66 |     |     function green(address self) internal pure returns (string memory) {
  67 |     |         return green(vm.toString(self));
  68 |     |     }
  69 |     | 
  70 |     |     function green(bool self) internal pure returns (string memory) {
  71 |     |         return green(vm.toString(self));
  72 |     |     }
  73 |     | 
  74 |     |     function greenBytes(bytes memory self) internal pure returns (string memory) {
  75 |     |         return green(vm.toString(self));
  76 |     |     }
  77 |     | 
  78 |     |     function greenBytes32(bytes32 self) internal pure returns (string memory) {
  79 |     |         return green(vm.toString(self));
  80 |     |     }
  81 |     | 
  82 |     |     function yellow(string memory self) internal pure returns (string memory) {
  83 |     |         return styleConcat(YELLOW, self);
  84 |     |     }
  85 |     | 
  86 |     |     function yellow(uint256 self) internal pure returns (string memory) {
  87 |     |         return yellow(vm.toString(self));
  88 |     |     }
  89 |     | 
  90 |     |     function yellow(int256 self) internal pure returns (string memory) {
  91 |     |         return yellow(vm.toString(self));
  92 |     |     }
  93 |     | 
  94 |     |     function yellow(address self) internal pure returns (string memory) {
  95 |     |         return yellow(vm.toString(self));
  96 |     |     }
  97 |     | 
  98 |     |     function yellow(bool self) internal pure returns (string memory) {
  99 |     |         return yellow(vm.toString(self));
 100 |     |     }
 101 |     | 
 102 |     |     function yellowBytes(bytes memory self) internal pure returns (string memory) {
 103 |     |         return yellow(vm.toString(self));
 104 |     |     }
 105 |     | 
 106 |     |     function yellowBytes32(bytes32 self) internal pure returns (string memory) {
 107 |     |         return yellow(vm.toString(self));
 108 |     |     }
 109 |     | 
 110 |     |     function blue(string memory self) internal pure returns (string memory) {
 111 |     |         return styleConcat(BLUE, self);
 112 |     |     }
 113 |     | 
 114 |     |     function blue(uint256 self) internal pure returns (string memory) {
 115 |     |         return blue(vm.toString(self));
 116 |     |     }
 117 |     | 
 118 |     |     function blue(int256 self) internal pure returns (string memory) {
 119 |     |         return blue(vm.toString(self));
 120 |     |     }
 121 |     | 
 122 |     |     function blue(address self) internal pure returns (string memory) {
 123 |     |         return blue(vm.toString(self));
 124 |     |     }
 125 |     | 
 126 |     |     function blue(bool self) internal pure returns (string memory) {
 127 |     |         return blue(vm.toString(self));
 128 |     |     }
 129 |     | 
 130 |     |     function blueBytes(bytes memory self) internal pure returns (string memory) {
 131 |     |         return blue(vm.toString(self));
 132 |     |     }
 133 |     | 
 134 |     |     function blueBytes32(bytes32 self) internal pure returns (string memory) {
 135 |     |         return blue(vm.toString(self));
 136 |     |     }
 137 |     | 
 138 |     |     function magenta(string memory self) internal pure returns (string memory) {
 139 |     |         return styleConcat(MAGENTA, self);
 140 |     |     }
 141 |     | 
 142 |     |     function magenta(uint256 self) internal pure returns (string memory) {
 143 |     |         return magenta(vm.toString(self));
 144 |     |     }
 145 |     | 
 146 |     |     function magenta(int256 self) internal pure returns (string memory) {
 147 |     |         return magenta(vm.toString(self));
 148 |     |     }
 149 |     | 
 150 |     |     function magenta(address self) internal pure returns (string memory) {
 151 |     |         return magenta(vm.toString(self));
 152 |     |     }
 153 |     | 
 154 |     |     function magenta(bool self) internal pure returns (string memory) {
 155 |     |         return magenta(vm.toString(self));
 156 |     |     }
 157 |     | 
 158 |     |     function magentaBytes(bytes memory self) internal pure returns (string memory) {
 159 |     |         return magenta(vm.toString(self));
 160 |     |     }
 161 |     | 
 162 |     |     function magentaBytes32(bytes32 self) internal pure returns (string memory) {
 163 |     |         return magenta(vm.toString(self));
 164 |     |     }
 165 |     | 
 166 |     |     function cyan(string memory self) internal pure returns (string memory) {
 167 |     |         return styleConcat(CYAN, self);
 168 |     |     }
 169 |     | 
 170 |     |     function cyan(uint256 self) internal pure returns (string memory) {
 171 |     |         return cyan(vm.toString(self));
 172 |     |     }
 173 |     | 
 174 |     |     function cyan(int256 self) internal pure returns (string memory) {
 175 |     |         return cyan(vm.toString(self));
 176 |     |     }
 177 |     | 
 178 |     |     function cyan(address self) internal pure returns (string memory) {
 179 |     |         return cyan(vm.toString(self));
 180 |     |     }
 181 |     | 
 182 |     |     function cyan(bool self) internal pure returns (string memory) {
 183 |     |         return cyan(vm.toString(self));
 184 |     |     }
 185 |     | 
 186 |     |     function cyanBytes(bytes memory self) internal pure returns (string memory) {
 187 |     |         return cyan(vm.toString(self));
 188 |     |     }
 189 |     | 
 190 |     |     function cyanBytes32(bytes32 self) internal pure returns (string memory) {
 191 |     |         return cyan(vm.toString(self));
 192 |     |     }
 193 |     | 
 194 |     |     function bold(string memory self) internal pure returns (string memory) {
 195 |     |         return styleConcat(BOLD, self);
 196 |     |     }
 197 |     | 
 198 |     |     function bold(uint256 self) internal pure returns (string memory) {
 199 |     |         return bold(vm.toString(self));
 200 |     |     }
 201 |     | 
 202 |     |     function bold(int256 self) internal pure returns (string memory) {
 203 |     |         return bold(vm.toString(self));
 204 |     |     }
 205 |     | 
 206 |     |     function bold(address self) internal pure returns (string memory) {
 207 |     |         return bold(vm.toString(self));
 208 |     |     }
 209 |     | 
 210 |     |     function bold(bool self) internal pure returns (string memory) {
 211 |     |         return bold(vm.toString(self));
 212 |     |     }
 213 |     | 
 214 |     |     function boldBytes(bytes memory self) internal pure returns (string memory) {
 215 |     |         return bold(vm.toString(self));
 216 |     |     }
 217 |     | 
 218 |     |     function boldBytes32(bytes32 self) internal pure returns (string memory) {
 219 |     |         return bold(vm.toString(self));
 220 |     |     }
 221 |     | 
 222 |     |     function dim(string memory self) internal pure returns (string memory) {
 223 |     |         return styleConcat(DIM, self);
 224 |     |     }
 225 |     | 
 226 |     |     function dim(uint256 self) internal pure returns (string memory) {
 227 |     |         return dim(vm.toString(self));
 228 |     |     }
 229 |     | 
 230 |     |     function dim(int256 self) internal pure returns (string memory) {
 231 |     |         return dim(vm.toString(self));
 232 |     |     }
 233 |     | 
 234 |     |     function dim(address self) internal pure returns (string memory) {
 235 |     |         return dim(vm.toString(self));
 236 |     |     }
 237 |     | 
 238 |     |     function dim(bool self) internal pure returns (string memory) {
 239 |     |         return dim(vm.toString(self));
 240 |     |     }
 241 |     | 
 242 |     |     function dimBytes(bytes memory self) internal pure returns (string memory) {
 243 |     |         return dim(vm.toString(self));
 244 |     |     }
 245 |     | 
 246 |     |     function dimBytes32(bytes32 self) internal pure returns (string memory) {
 247 |     |         return dim(vm.toString(self));
 248 |     |     }
 249 |     | 
 250 |     |     function italic(string memory self) internal pure returns (string memory) {
 251 |     |         return styleConcat(ITALIC, self);
 252 |     |     }
 253 |     | 
 254 |     |     function italic(uint256 self) internal pure returns (string memory) {
 255 |     |         return italic(vm.toString(self));
 256 |     |     }
 257 |     | 
 258 |     |     function italic(int256 self) internal pure returns (string memory) {
 259 |     |         return italic(vm.toString(self));
 260 |     |     }
 261 |     | 
 262 |     |     function italic(address self) internal pure returns (string memory) {
 263 |     |         return italic(vm.toString(self));
 264 |     |     }
 265 |     | 
 266 |     |     function italic(bool self) internal pure returns (string memory) {
 267 |     |         return italic(vm.toString(self));
 268 |     |     }
 269 |     | 
 270 |     |     function italicBytes(bytes memory self) internal pure returns (string memory) {
 271 |     |         return italic(vm.toString(self));
 272 |     |     }
 273 |     | 
 274 |     |     function italicBytes32(bytes32 self) internal pure returns (string memory) {
 275 |     |         return italic(vm.toString(self));
 276 |     |     }
 277 |     | 
 278 |     |     function underline(string memory self) internal pure returns (string memory) {
 279 |     |         return styleConcat(UNDERLINE, self);
 280 |     |     }
 281 |     | 
 282 |     |     function underline(uint256 self) internal pure returns (string memory) {
 283 |     |         return underline(vm.toString(self));
 284 |     |     }
 285 |     | 
 286 |     |     function underline(int256 self) internal pure returns (string memory) {
 287 |     |         return underline(vm.toString(self));
 288 |     |     }
 289 |     | 
 290 |     |     function underline(address self) internal pure returns (string memory) {
 291 |     |         return underline(vm.toString(self));
 292 |     |     }
 293 |     | 
 294 |     |     function underline(bool self) internal pure returns (string memory) {
 295 |     |         return underline(vm.toString(self));
 296 |     |     }
 297 |     | 
 298 |     |     function underlineBytes(bytes memory self) internal pure returns (string memory) {
 299 |     |         return underline(vm.toString(self));
 300 |     |     }
 301 |     | 
 302 |     |     function underlineBytes32(bytes32 self) internal pure returns (string memory) {
 303 |     |         return underline(vm.toString(self));
 304 |     |     }
 305 |     | 
 306 |     |     function inverse(string memory self) internal pure returns (string memory) {
 307 |     |         return styleConcat(INVERSE, self);
 308 |     |     }
 309 |     | 
 310 |     |     function inverse(uint256 self) internal pure returns (string memory) {
 311 |     |         return inverse(vm.toString(self));
 312 |     |     }
 313 |     | 
 314 |     |     function inverse(int256 self) internal pure returns (string memory) {
 315 |     |         return inverse(vm.toString(self));
 316 |     |     }
 317 |     | 
 318 |     |     function inverse(address self) internal pure returns (string memory) {
 319 |     |         return inverse(vm.toString(self));
 320 |     |     }
 321 |     | 
 322 |     |     function inverse(bool self) internal pure returns (string memory) {
 323 |     |         return inverse(vm.toString(self));
 324 |     |     }
 325 |     | 
 326 |     |     function inverseBytes(bytes memory self) internal pure returns (string memory) {
 327 |     |         return inverse(vm.toString(self));
 328 |     |     }
 329 |     | 
 330 |     |     function inverseBytes32(bytes32 self) internal pure returns (string memory) {
 331 |     |         return inverse(vm.toString(self));
 332 |     |     }
 333 |     | }
 334 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/StdToml.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.0 <0.9.0;
   3 |     | 
   4 |     | pragma experimental ABIEncoderV2;
   5 |     | 
   6 |     | import {VmSafe} from "./Vm.sol";
   7 |     | 
   8 |     | // Helpers for parsing and writing TOML files
   9 |     | // To parse:
  10 |     | // ```
  11 |     | // using stdToml for string;
  12 |     | // string memory toml = vm.readFile("<some_path>");
  13 |     | // toml.readUint("<json_path>");
  14 |     | // ```
  15 |     | // To write:
  16 |     | // ```
  17 |     | // using stdToml for string;
  18 |     | // string memory json = "json";
  19 |     | // json.serialize("a", uint256(123));
  20 |     | // string memory semiFinal = json.serialize("b", string("test"));
  21 |     | // string memory finalJson = json.serialize("c", semiFinal);
  22 |     | // finalJson.write("<some_path>");
  23 |     | // ```
  24 |     | 
  25 |     | library stdToml {
  26 |     |     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
  27 |     | 
  28 |     |     function keyExists(string memory toml, string memory key) internal view returns (bool) {
  29 |     |         return vm.keyExistsToml(toml, key);
  30 |     |     }
  31 |     | 
  32 |     |     function parseRaw(string memory toml, string memory key) internal pure returns (bytes memory) {
  33 |     |         return vm.parseToml(toml, key);
  34 |     |     }
  35 |     | 
  36 |     |     function readUint(string memory toml, string memory key) internal pure returns (uint256) {
  37 |     |         return vm.parseTomlUint(toml, key);
  38 |     |     }
  39 |     | 
  40 |     |     function readUintArray(string memory toml, string memory key) internal pure returns (uint256[] memory) {
  41 |     |         return vm.parseTomlUintArray(toml, key);
  42 |     |     }
  43 |     | 
  44 |     |     function readInt(string memory toml, string memory key) internal pure returns (int256) {
  45 |     |         return vm.parseTomlInt(toml, key);
  46 |     |     }
  47 |     | 
  48 |     |     function readIntArray(string memory toml, string memory key) internal pure returns (int256[] memory) {
  49 |     |         return vm.parseTomlIntArray(toml, key);
  50 |     |     }
  51 |     | 
  52 |     |     function readBytes32(string memory toml, string memory key) internal pure returns (bytes32) {
  53 |     |         return vm.parseTomlBytes32(toml, key);
  54 |     |     }
  55 |     | 
  56 |     |     function readBytes32Array(string memory toml, string memory key) internal pure returns (bytes32[] memory) {
  57 |     |         return vm.parseTomlBytes32Array(toml, key);
  58 |     |     }
  59 |     | 
  60 |     |     function readString(string memory toml, string memory key) internal pure returns (string memory) {
  61 |     |         return vm.parseTomlString(toml, key);
  62 |     |     }
  63 |     | 
  64 |     |     function readStringArray(string memory toml, string memory key) internal pure returns (string[] memory) {
  65 |     |         return vm.parseTomlStringArray(toml, key);
  66 |     |     }
  67 |     | 
  68 |     |     function readAddress(string memory toml, string memory key) internal pure returns (address) {
  69 |     |         return vm.parseTomlAddress(toml, key);
  70 |     |     }
  71 |     | 
  72 |     |     function readAddressArray(string memory toml, string memory key) internal pure returns (address[] memory) {
  73 |     |         return vm.parseTomlAddressArray(toml, key);
  74 |     |     }
  75 |     | 
  76 |     |     function readBool(string memory toml, string memory key) internal pure returns (bool) {
  77 |     |         return vm.parseTomlBool(toml, key);
  78 |     |     }
  79 |     | 
  80 |     |     function readBoolArray(string memory toml, string memory key) internal pure returns (bool[] memory) {
  81 |     |         return vm.parseTomlBoolArray(toml, key);
  82 |     |     }
  83 |     | 
  84 |     |     function readBytes(string memory toml, string memory key) internal pure returns (bytes memory) {
  85 |     |         return vm.parseTomlBytes(toml, key);
  86 |     |     }
  87 |     | 
  88 |     |     function readBytesArray(string memory toml, string memory key) internal pure returns (bytes[] memory) {
  89 |     |         return vm.parseTomlBytesArray(toml, key);
  90 |     |     }
  91 |     | 
  92 |     |     function readUintOr(string memory toml, string memory key, uint256 defaultValue) internal view returns (uint256) {
  93 |     |         return keyExists(toml, key) ? readUint(toml, key) : defaultValue;
  94 |     |     }
  95 |     | 
  96 |     |     function readUintArrayOr(string memory toml, string memory key, uint256[] memory defaultValue)
  97 |     |         internal
  98 |     |         view
  99 |     |         returns (uint256[] memory)
 100 |     |     {
 101 |     |         return keyExists(toml, key) ? readUintArray(toml, key) : defaultValue;
 102 |     |     }
 103 |     | 
 104 |     |     function readIntOr(string memory toml, string memory key, int256 defaultValue) internal view returns (int256) {
 105 |     |         return keyExists(toml, key) ? readInt(toml, key) : defaultValue;
 106 |     |     }
 107 |     | 
 108 |     |     function readIntArrayOr(string memory toml, string memory key, int256[] memory defaultValue)
 109 |     |         internal
 110 |     |         view
 111 |     |         returns (int256[] memory)
 112 |     |     {
 113 |     |         return keyExists(toml, key) ? readIntArray(toml, key) : defaultValue;
 114 |     |     }
 115 |     | 
 116 |     |     function readBytes32Or(string memory toml, string memory key, bytes32 defaultValue)
 117 |     |         internal
 118 |     |         view
 119 |     |         returns (bytes32)
 120 |     |     {
 121 |     |         return keyExists(toml, key) ? readBytes32(toml, key) : defaultValue;
 122 |     |     }
 123 |     | 
 124 |     |     function readBytes32ArrayOr(string memory toml, string memory key, bytes32[] memory defaultValue)
 125 |     |         internal
 126 |     |         view
 127 |     |         returns (bytes32[] memory)
 128 |     |     {
 129 |     |         return keyExists(toml, key) ? readBytes32Array(toml, key) : defaultValue;
 130 |     |     }
 131 |     | 
 132 |     |     function readStringOr(string memory toml, string memory key, string memory defaultValue)
 133 |     |         internal
 134 |     |         view
 135 |     |         returns (string memory)
 136 |     |     {
 137 |     |         return keyExists(toml, key) ? readString(toml, key) : defaultValue;
 138 |     |     }
 139 |     | 
 140 |     |     function readStringArrayOr(string memory toml, string memory key, string[] memory defaultValue)
 141 |     |         internal
 142 |     |         view
 143 |     |         returns (string[] memory)
 144 |     |     {
 145 |     |         return keyExists(toml, key) ? readStringArray(toml, key) : defaultValue;
 146 |     |     }
 147 |     | 
 148 |     |     function readAddressOr(string memory toml, string memory key, address defaultValue)
 149 |     |         internal
 150 |     |         view
 151 |     |         returns (address)
 152 |     |     {
 153 |     |         return keyExists(toml, key) ? readAddress(toml, key) : defaultValue;
 154 |     |     }
 155 |     | 
 156 |     |     function readAddressArrayOr(string memory toml, string memory key, address[] memory defaultValue)
 157 |     |         internal
 158 |     |         view
 159 |     |         returns (address[] memory)
 160 |     |     {
 161 |     |         return keyExists(toml, key) ? readAddressArray(toml, key) : defaultValue;
 162 |     |     }
 163 |     | 
 164 |     |     function readBoolOr(string memory toml, string memory key, bool defaultValue) internal view returns (bool) {
 165 |     |         return keyExists(toml, key) ? readBool(toml, key) : defaultValue;
 166 |     |     }
 167 |     | 
 168 |     |     function readBoolArrayOr(string memory toml, string memory key, bool[] memory defaultValue)
 169 |     |         internal
 170 |     |         view
 171 |     |         returns (bool[] memory)
 172 |     |     {
 173 |     |         return keyExists(toml, key) ? readBoolArray(toml, key) : defaultValue;
 174 |     |     }
 175 |     | 
 176 |     |     function readBytesOr(string memory toml, string memory key, bytes memory defaultValue)
 177 |     |         internal
 178 |     |         view
 179 |     |         returns (bytes memory)
 180 |     |     {
 181 |     |         return keyExists(toml, key) ? readBytes(toml, key) : defaultValue;
 182 |     |     }
 183 |     | 
 184 |     |     function readBytesArrayOr(string memory toml, string memory key, bytes[] memory defaultValue)
 185 |     |         internal
 186 |     |         view
 187 |     |         returns (bytes[] memory)
 188 |     |     {
 189 |     |         return keyExists(toml, key) ? readBytesArray(toml, key) : defaultValue;
 190 |     |     }
 191 |     | 
 192 |     |     function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {
 193 |     |         return vm.serializeJson(jsonKey, rootObject);
 194 |     |     }
 195 |     | 
 196 |     |     function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {
 197 |     |         return vm.serializeBool(jsonKey, key, value);
 198 |     |     }
 199 |     | 
 200 |     |     function serialize(string memory jsonKey, string memory key, bool[] memory value)
 201 |     |         internal
 202 |     |         returns (string memory)
 203 |     |     {
 204 |     |         return vm.serializeBool(jsonKey, key, value);
 205 |     |     }
 206 |     | 
 207 |     |     function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {
 208 |     |         return vm.serializeUint(jsonKey, key, value);
 209 |     |     }
 210 |     | 
 211 |     |     function serialize(string memory jsonKey, string memory key, uint256[] memory value)
 212 |     |         internal
 213 |     |         returns (string memory)
 214 |     |     {
 215 |     |         return vm.serializeUint(jsonKey, key, value);
 216 |     |     }
 217 |     | 
 218 |     |     function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {
 219 |     |         return vm.serializeInt(jsonKey, key, value);
 220 |     |     }
 221 |     | 
 222 |     |     function serialize(string memory jsonKey, string memory key, int256[] memory value)
 223 |     |         internal
 224 |     |         returns (string memory)
 225 |     |     {
 226 |     |         return vm.serializeInt(jsonKey, key, value);
 227 |     |     }
 228 |     | 
 229 |     |     function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {
 230 |     |         return vm.serializeAddress(jsonKey, key, value);
 231 |     |     }
 232 |     | 
 233 |     |     function serialize(string memory jsonKey, string memory key, address[] memory value)
 234 |     |         internal
 235 |     |         returns (string memory)
 236 |     |     {
 237 |     |         return vm.serializeAddress(jsonKey, key, value);
 238 |     |     }
 239 |     | 
 240 |     |     function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {
 241 |     |         return vm.serializeBytes32(jsonKey, key, value);
 242 |     |     }
 243 |     | 
 244 |     |     function serialize(string memory jsonKey, string memory key, bytes32[] memory value)
 245 |     |         internal
 246 |     |         returns (string memory)
 247 |     |     {
 248 |     |         return vm.serializeBytes32(jsonKey, key, value);
 249 |     |     }
 250 |     | 
 251 |     |     function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {
 252 |     |         return vm.serializeBytes(jsonKey, key, value);
 253 |     |     }
 254 |     | 
 255 |     |     function serialize(string memory jsonKey, string memory key, bytes[] memory value)
 256 |     |         internal
 257 |     |         returns (string memory)
 258 |     |     {
 259 |     |         return vm.serializeBytes(jsonKey, key, value);
 260 |     |     }
 261 |     | 
 262 |     |     function serialize(string memory jsonKey, string memory key, string memory value)
 263 |     |         internal
 264 |     |         returns (string memory)
 265 |     |     {
 266 |     |         return vm.serializeString(jsonKey, key, value);
 267 |     |     }
 268 |     | 
 269 |     |     function serialize(string memory jsonKey, string memory key, string[] memory value)
 270 |     |         internal
 271 |     |         returns (string memory)
 272 |     |     {
 273 |     |         return vm.serializeString(jsonKey, key, value);
 274 |     |     }
 275 |     | 
 276 |     |     function write(string memory jsonKey, string memory path) internal {
 277 |     |         vm.writeToml(jsonKey, path);
 278 |     |     }
 279 |     | 
 280 |     |     function write(string memory jsonKey, string memory path, string memory valueKey) internal {
 281 |     |         vm.writeToml(jsonKey, path, valueKey);
 282 |     |     }
 283 |     | }
 284 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/StdUtils.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | pragma experimental ABIEncoderV2;
   5 |     | 
   6 |     | import {IMulticall3} from "./interfaces/IMulticall3.sol";
   7 |     | import {MockERC20} from "./mocks/MockERC20.sol";
   8 |     | import {MockERC721} from "./mocks/MockERC721.sol";
   9 |     | import {VmSafe} from "./Vm.sol";
  10 |     | 
  11 |     | abstract contract StdUtils {
  12 |     |     /*//////////////////////////////////////////////////////////////////////////
  13 |     |                                      CONSTANTS
  14 |     |     //////////////////////////////////////////////////////////////////////////*/
  15 |     | 
  16 |     |     IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);
  17 |     |     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
  18 |     |     address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;
  19 |     |     uint256 private constant INT256_MIN_ABS =
  20 |     |         57896044618658097711785492504343953926634992332820282019728792003956564819968;
  21 |     |     uint256 private constant SECP256K1_ORDER =
  22 |     |         115792089237316195423570985008687907852837564279074904382605163141518161494337;
  23 |     |     uint256 private constant UINT256_MAX =
  24 |     |         115792089237316195423570985008687907853269984665640564039457584007913129639935;
  25 |     | 
  26 |     |     // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.
  27 |     |     address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
  28 |     | 
  29 |     |     /*//////////////////////////////////////////////////////////////////////////
  30 |     |                                  INTERNAL FUNCTIONS
  31 |     |     //////////////////////////////////////////////////////////////////////////*/
  32 |     | 
  33 |     |     function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {
  34 |     |         require(min <= max, "StdUtils bound(uint256,uint256,uint256): Max is less than min.");
  35 |     |         // If x is between min and max, return x directly. This is to ensure that dictionary values
  36 |     |         // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188
  37 |     |         if (x >= min && x <= max) return x;
  38 |     | 
  39 |     |         uint256 size = max - min + 1;
  40 |     | 
  41 |     |         // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.
  42 |     |         // This helps ensure coverage of the min/max values.
  43 |     |         if (x <= 3 && size > x) return min + x;
  44 |     |         if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);
  45 |     | 
  46 |     |         // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.
  47 |     |         if (x > max) {
  48 |     |             uint256 diff = x - max;
  49 |     |             uint256 rem = diff % size;
  50 |     |             if (rem == 0) return max;
  51 |     |             result = min + rem - 1;
  52 |     |         } else if (x < min) {
  53 |     |             uint256 diff = min - x;
  54 |     |             uint256 rem = diff % size;
  55 |     |             if (rem == 0) return min;
  56 |     |             result = max - rem + 1;
  57 |     |         }
  58 |     |     }
  59 |     | 
  60 |     |     function bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {
  61 |     |         result = _bound(x, min, max);
  62 |     |         console2_log_StdUtils("Bound result", result);
  63 |     |     }
  64 |     | 
  65 |     |     function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {
  66 |     |         require(min <= max, "StdUtils bound(int256,int256,int256): Max is less than min.");
  67 |     | 
  68 |     |         // Shifting all int256 values to uint256 to use _bound function. The range of two types are:
  69 |     |         // int256 : -(2**255) ~ (2**255 - 1)
  70 |     |         // uint256:     0     ~ (2**256 - 1)
  71 |     |         // So, add 2**255, INT256_MIN_ABS to the integer values.
  72 |     |         //
  73 |     |         // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.
  74 |     |         // So, use `~uint256(x) + 1` instead.
  75 |     |         uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);
  76 |     |         uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);
  77 |     |         uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);
  78 |     | 
  79 |     |         uint256 y = _bound(_x, _min, _max);
  80 |     | 
  81 |     |         // To move it back to int256 value, subtract INT256_MIN_ABS at here.
  82 |     |         result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);
  83 |     |     }
  84 |     | 
  85 |     |     function bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {
  86 |     |         result = _bound(x, min, max);
  87 |     |         console2_log_StdUtils("Bound result", vm.toString(result));
  88 |     |     }
  89 |     | 
  90 |     |     function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {
  91 |     |         result = _bound(privateKey, 1, SECP256K1_ORDER - 1);
  92 |     |     }
  93 |     | 
  94 |     |     function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {
  95 |     |         require(b.length <= 32, "StdUtils bytesToUint(bytes): Bytes length exceeds 32.");
  96 |     |         return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));
  97 |     |     }
  98 |     | 
  99 |     |     /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce
 100 |     |     /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)
 101 |     |     function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {
 102 |     |         console2_log_StdUtils("computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.");
 103 |     |         return vm.computeCreateAddress(deployer, nonce);
 104 |     |     }
 105 |     | 
 106 |     |     function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)
 107 |     |         internal
 108 |     |         pure
 109 |     |         virtual
 110 |     |         returns (address)
 111 |     |     {
 112 |     |         console2_log_StdUtils("computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.");
 113 |     |         return vm.computeCreate2Address(salt, initcodeHash, deployer);
 114 |     |     }
 115 |     | 
 116 |     |     /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer
 117 |     |     function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {
 118 |     |         console2_log_StdUtils("computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.");
 119 |     |         return vm.computeCreate2Address(salt, initCodeHash);
 120 |     |     }
 121 |     | 
 122 |     |     /// @dev returns an initialized mock ERC20 contract
 123 |     |     function deployMockERC20(string memory name, string memory symbol, uint8 decimals)
 124 |     |         internal
 125 |     |         returns (MockERC20 mock)
 126 |     |     {
 127 |     |         mock = new MockERC20();
 128 |     |         mock.initialize(name, symbol, decimals);
 129 |     |     }
 130 |     | 
 131 |     |     /// @dev returns an initialized mock ERC721 contract
 132 |     |     function deployMockERC721(string memory name, string memory symbol) internal returns (MockERC721 mock) {
 133 |     |         mock = new MockERC721();
 134 |     |         mock.initialize(name, symbol);
 135 |     |     }
 136 |     | 
 137 |     |     /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments
 138 |     |     /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode
 139 |     |     function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {
 140 |     |         return hashInitCode(creationCode, "");
 141 |     |     }
 142 |     | 
 143 |     |     /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2
 144 |     |     /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode
 145 |     |     /// @param args the ABI-encoded arguments to the constructor of C
 146 |     |     function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {
 147 |     |         return keccak256(abi.encodePacked(creationCode, args));
 148 |     |     }
 149 |     | 
 150 |     |     // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.
 151 |     |     function getTokenBalances(address token, address[] memory addresses)
 152 |     |         internal
 153 |     |         virtual
 154 |     |         returns (uint256[] memory balances)
 155 |     |     {
 156 |     |         uint256 tokenCodeSize;
 157 |     |         assembly {
 158 |     |             tokenCodeSize := extcodesize(token)
 159 |     |         }
 160 |     |         require(tokenCodeSize > 0, "StdUtils getTokenBalances(address,address[]): Token address is not a contract.");
 161 |     | 
 162 |     |         // ABI encode the aggregate call to Multicall3.
 163 |     |         uint256 length = addresses.length;
 164 |     |         IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);
 165 |     |         for (uint256 i = 0; i < length; ++i) {
 166 |     |             // 0x70a08231 = bytes4("balanceOf(address)"))
 167 |     |             calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});
 168 |     |         }
 169 |     | 
 170 |     |         // Make the aggregate call.
 171 |     |         (, bytes[] memory returnData) = multicall.aggregate(calls);
 172 |     | 
 173 |     |         // ABI decode the return data and return the balances.
 174 |     |         balances = new uint256[](length);
 175 |     |         for (uint256 i = 0; i < length; ++i) {
 176 |     |             balances[i] = abi.decode(returnData[i], (uint256));
 177 |     |         }
 178 |     |     }
 179 |     | 
 180 |     |     /*//////////////////////////////////////////////////////////////////////////
 181 |     |                                  PRIVATE FUNCTIONS
 182 |     |     //////////////////////////////////////////////////////////////////////////*/
 183 |     | 
 184 |     |     function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {
 185 |     |         return address(uint160(uint256(bytesValue)));
 186 |     |     }
 187 |     | 
 188 |     |     // This section is used to prevent the compilation of console, which shortens the compilation time when console is
 189 |     |     // not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid
 190 |     |     // any breaking changes to function signatures.
 191 |     |     function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)
 192 |     |         internal
 193 |     |         pure
 194 |     |         returns (function(bytes memory) internal pure fnOut)
 195 |     |     {
 196 |     |         assembly {
 197 |     |             fnOut := fnIn
 198 |     |         }
 199 |     |     }
 200 |     | 
 201 |     |     function _sendLogPayload(bytes memory payload) internal pure {
 202 |     |         _castLogPayloadViewToPure(_sendLogPayloadView)(payload);
 203 |     |     }
 204 |     | 
 205 |     |     function _sendLogPayloadView(bytes memory payload) private view {
 206 |     |         uint256 payloadLength = payload.length;
 207 |     |         address consoleAddress = CONSOLE2_ADDRESS;
 208 |     |         /// @solidity memory-safe-assembly
 209 |     |         assembly {
 210 |     |             let payloadStart := add(payload, 32)
 211 |     |             let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)
 212 |     |         }
 213 |     |     }
 214 |     | 
 215 |     |     function console2_log_StdUtils(string memory p0) private pure {
 216 |     |         _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
 217 |     |     }
 218 |     | 
 219 |     |     function console2_log_StdUtils(string memory p0, uint256 p1) private pure {
 220 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256)", p0, p1));
 221 |     |     }
 222 |     | 
 223 |     |     function console2_log_StdUtils(string memory p0, string memory p1) private pure {
 224 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
 225 |     |     }
 226 |     | }
 227 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/Test.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2 <0.9.0;
  3 |     | 
  4 |     | pragma experimental ABIEncoderV2;
  5 |     | 
  6 |     | // 💬 ABOUT
  7 |     | // Forge Std's default Test.
  8 |     | 
  9 |     | // 🧩 MODULES
 10 |     | import {console} from "./console.sol";
 11 |     | import {console2} from "./console2.sol";
 12 |     | import {safeconsole} from "./safeconsole.sol";
 13 |     | import {StdAssertions} from "./StdAssertions.sol";
 14 |     | import {StdChains} from "./StdChains.sol";
 15 |     | import {StdCheats} from "./StdCheats.sol";
 16 |     | import {stdError} from "./StdError.sol";
 17 |     | import {StdInvariant} from "./StdInvariant.sol";
 18 |     | import {stdJson} from "./StdJson.sol";
 19 |     | import {stdMath} from "./StdMath.sol";
 20 |     | import {StdStorage, stdStorage} from "./StdStorage.sol";
 21 |     | import {StdStyle} from "./StdStyle.sol";
 22 |     | import {stdToml} from "./StdToml.sol";
 23 |     | import {StdUtils} from "./StdUtils.sol";
 24 |     | import {Vm} from "./Vm.sol";
 25 |     | 
 26 |     | // 📦 BOILERPLATE
 27 |     | import {TestBase} from "./Base.sol";
 28 |     | 
 29 |     | // ⭐️ TEST
 30 |     | abstract contract Test is TestBase, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils {
 31 |     |     // Note: IS_TEST() must return true.
 32 | *   |     bool public IS_TEST = true;
 33 |     | }
 34 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/Vm.sol
    1 |     | // Automatically @generated by scripts/vm.py. Do not modify manually.
    2 |     | 
    3 |     | // SPDX-License-Identifier: MIT OR Apache-2.0
    4 |     | pragma solidity >=0.6.2 <0.9.0;
    5 |     | pragma experimental ABIEncoderV2;
    6 |     | 
    7 |     | /// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may
    8 |     | /// result in Script simulations differing from on-chain execution. It is recommended to only use
    9 |     | /// these cheats in scripts.
   10 |     | interface VmSafe {
   11 |     |     /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.
   12 |     |     enum CallerMode {
   13 |     |         // No caller modification is currently active.
   14 |     |         None,
   15 |     |         // A one time broadcast triggered by a `vm.broadcast()` call is currently active.
   16 |     |         Broadcast,
   17 |     |         // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.
   18 |     |         RecurrentBroadcast,
   19 |     |         // A one time prank triggered by a `vm.prank()` call is currently active.
   20 |     |         Prank,
   21 |     |         // A recurrent prank triggered by a `vm.startPrank()` call is currently active.
   22 |     |         RecurrentPrank
   23 |     |     }
   24 |     | 
   25 |     |     /// The kind of account access that occurred.
   26 |     |     enum AccountAccessKind {
   27 |     |         // The account was called.
   28 |     |         Call,
   29 |     |         // The account was called via delegatecall.
   30 |     |         DelegateCall,
   31 |     |         // The account was called via callcode.
   32 |     |         CallCode,
   33 |     |         // The account was called via staticcall.
   34 |     |         StaticCall,
   35 |     |         // The account was created.
   36 |     |         Create,
   37 |     |         // The account was selfdestructed.
   38 |     |         SelfDestruct,
   39 |     |         // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).
   40 |     |         Resume,
   41 |     |         // The account's balance was read.
   42 |     |         Balance,
   43 |     |         // The account's codesize was read.
   44 |     |         Extcodesize,
   45 |     |         // The account's codehash was read.
   46 |     |         Extcodehash,
   47 |     |         // The account's code was copied.
   48 |     |         Extcodecopy
   49 |     |     }
   50 |     | 
   51 |     |     /// Forge execution contexts.
   52 |     |     enum ForgeContext {
   53 |     |         // Test group execution context (test, coverage or snapshot).
   54 |     |         TestGroup,
   55 |     |         // `forge test` execution context.
   56 |     |         Test,
   57 |     |         // `forge coverage` execution context.
   58 |     |         Coverage,
   59 |     |         // `forge snapshot` execution context.
   60 |     |         Snapshot,
   61 |     |         // Script group execution context (dry run, broadcast or resume).
   62 |     |         ScriptGroup,
   63 |     |         // `forge script` execution context.
   64 |     |         ScriptDryRun,
   65 |     |         // `forge script --broadcast` execution context.
   66 |     |         ScriptBroadcast,
   67 |     |         // `forge script --resume` execution context.
   68 |     |         ScriptResume,
   69 |     |         // Unknown `forge` execution context.
   70 |     |         Unknown
   71 |     |     }
   72 |     | 
   73 |     |     /// An Ethereum log. Returned by `getRecordedLogs`.
   74 |     |     struct Log {
   75 |     |         // The topics of the log, including the signature, if any.
   76 |     |         bytes32[] topics;
   77 |     |         // The raw data of the log.
   78 |     |         bytes data;
   79 |     |         // The address of the log's emitter.
   80 |     |         address emitter;
   81 |     |     }
   82 |     | 
   83 |     |     /// An RPC URL and its alias. Returned by `rpcUrlStructs`.
   84 |     |     struct Rpc {
   85 |     |         // The alias of the RPC URL.
   86 |     |         string key;
   87 |     |         // The RPC URL.
   88 |     |         string url;
   89 |     |     }
   90 |     | 
   91 |     |     /// An RPC log object. Returned by `eth_getLogs`.
   92 |     |     struct EthGetLogs {
   93 |     |         // The address of the log's emitter.
   94 |     |         address emitter;
   95 |     |         // The topics of the log, including the signature, if any.
   96 |     |         bytes32[] topics;
   97 |     |         // The raw data of the log.
   98 |     |         bytes data;
   99 |     |         // The block hash.
  100 |     |         bytes32 blockHash;
  101 |     |         // The block number.
  102 |     |         uint64 blockNumber;
  103 |     |         // The transaction hash.
  104 |     |         bytes32 transactionHash;
  105 |     |         // The transaction index in the block.
  106 |     |         uint64 transactionIndex;
  107 |     |         // The log index.
  108 |     |         uint256 logIndex;
  109 |     |         // Whether the log was removed.
  110 |     |         bool removed;
  111 |     |     }
  112 |     | 
  113 |     |     /// A single entry in a directory listing. Returned by `readDir`.
  114 |     |     struct DirEntry {
  115 |     |         // The error message, if any.
  116 |     |         string errorMessage;
  117 |     |         // The path of the entry.
  118 |     |         string path;
  119 |     |         // The depth of the entry.
  120 |     |         uint64 depth;
  121 |     |         // Whether the entry is a directory.
  122 |     |         bool isDir;
  123 |     |         // Whether the entry is a symlink.
  124 |     |         bool isSymlink;
  125 |     |     }
  126 |     | 
  127 |     |     /// Metadata information about a file.
  128 |     |     /// This structure is returned from the `fsMetadata` function and represents known
  129 |     |     /// metadata about a file such as its permissions, size, modification
  130 |     |     /// times, etc.
  131 |     |     struct FsMetadata {
  132 |     |         // True if this metadata is for a directory.
  133 |     |         bool isDir;
  134 |     |         // True if this metadata is for a symlink.
  135 |     |         bool isSymlink;
  136 |     |         // The size of the file, in bytes, this metadata is for.
  137 |     |         uint256 length;
  138 |     |         // True if this metadata is for a readonly (unwritable) file.
  139 |     |         bool readOnly;
  140 |     |         // The last modification time listed in this metadata.
  141 |     |         uint256 modified;
  142 |     |         // The last access time of this metadata.
  143 |     |         uint256 accessed;
  144 |     |         // The creation time listed in this metadata.
  145 |     |         uint256 created;
  146 |     |     }
  147 |     | 
  148 |     |     /// A wallet with a public and private key.
  149 |     |     struct Wallet {
  150 |     |         // The wallet's address.
  151 |     |         address addr;
  152 |     |         // The wallet's public key `X`.
  153 |     |         uint256 publicKeyX;
  154 |     |         // The wallet's public key `Y`.
  155 |     |         uint256 publicKeyY;
  156 |     |         // The wallet's private key.
  157 |     |         uint256 privateKey;
  158 |     |     }
  159 |     | 
  160 |     |     /// The result of a `tryFfi` call.
  161 |     |     struct FfiResult {
  162 |     |         // The exit code of the call.
  163 |     |         int32 exitCode;
  164 |     |         // The optionally hex-decoded `stdout` data.
  165 |     |         bytes stdout;
  166 |     |         // The `stderr` data.
  167 |     |         bytes stderr;
  168 |     |     }
  169 |     | 
  170 |     |     /// Information on the chain and fork.
  171 |     |     struct ChainInfo {
  172 |     |         // The fork identifier. Set to zero if no fork is active.
  173 |     |         uint256 forkId;
  174 |     |         // The chain ID of the current fork.
  175 |     |         uint256 chainId;
  176 |     |     }
  177 |     | 
  178 |     |     /// The result of a `stopAndReturnStateDiff` call.
  179 |     |     struct AccountAccess {
  180 |     |         // The chain and fork the access occurred.
  181 |     |         ChainInfo chainInfo;
  182 |     |         // The kind of account access that determines what the account is.
  183 |     |         // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.
  184 |     |         // If kind is Create, then the account is the newly created account.
  185 |     |         // If kind is SelfDestruct, then the account is the selfdestruct recipient.
  186 |     |         // If kind is a Resume, then account represents a account context that has resumed.
  187 |     |         AccountAccessKind kind;
  188 |     |         // The account that was accessed.
  189 |     |         // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.
  190 |     |         address account;
  191 |     |         // What accessed the account.
  192 |     |         address accessor;
  193 |     |         // If the account was initialized or empty prior to the access.
  194 |     |         // An account is considered initialized if it has code, a
  195 |     |         // non-zero nonce, or a non-zero balance.
  196 |     |         bool initialized;
  197 |     |         // The previous balance of the accessed account.
  198 |     |         uint256 oldBalance;
  199 |     |         // The potential new balance of the accessed account.
  200 |     |         // That is, all balance changes are recorded here, even if reverts occurred.
  201 |     |         uint256 newBalance;
  202 |     |         // Code of the account deployed by CREATE.
  203 |     |         bytes deployedCode;
  204 |     |         // Value passed along with the account access
  205 |     |         uint256 value;
  206 |     |         // Input data provided to the CREATE or CALL
  207 |     |         bytes data;
  208 |     |         // If this access reverted in either the current or parent context.
  209 |     |         bool reverted;
  210 |     |         // An ordered list of storage accesses made during an account access operation.
  211 |     |         StorageAccess[] storageAccesses;
  212 |     |         // Call depth traversed during the recording of state differences
  213 |     |         uint64 depth;
  214 |     |     }
  215 |     | 
  216 |     |     /// The storage accessed during an `AccountAccess`.
  217 |     |     struct StorageAccess {
  218 |     |         // The account whose storage was accessed.
  219 |     |         address account;
  220 |     |         // The slot that was accessed.
  221 |     |         bytes32 slot;
  222 |     |         // If the access was a write.
  223 |     |         bool isWrite;
  224 |     |         // The previous value of the slot.
  225 |     |         bytes32 previousValue;
  226 |     |         // The new value of the slot.
  227 |     |         bytes32 newValue;
  228 |     |         // If the access was reverted.
  229 |     |         bool reverted;
  230 |     |     }
  231 |     | 
  232 |     |     /// Gas used. Returned by `lastCallGas`.
  233 |     |     struct Gas {
  234 |     |         // The gas limit of the call.
  235 |     |         uint64 gasLimit;
  236 |     |         // The total gas used.
  237 |     |         uint64 gasTotalUsed;
  238 |     |         // DEPRECATED: The amount of gas used for memory expansion. Ref: <https://github.com/foundry-rs/foundry/pull/7934#pullrequestreview-2069236939>
  239 |     |         uint64 gasMemoryUsed;
  240 |     |         // The amount of gas refunded.
  241 |     |         int64 gasRefunded;
  242 |     |         // The amount of gas remaining.
  243 |     |         uint64 gasRemaining;
  244 |     |     }
  245 |     | 
  246 |     |     // ======== Crypto ========
  247 |     | 
  248 |     |     /// Derives a private key from the name, labels the account with that name, and returns the wallet.
  249 |     |     function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);
  250 |     | 
  251 |     |     /// Generates a wallet from the private key and returns the wallet.
  252 |     |     function createWallet(uint256 privateKey) external returns (Wallet memory wallet);
  253 |     | 
  254 |     |     /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.
  255 |     |     function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);
  256 |     | 
  257 |     |     /// Derive a private key from a provided mnenomic string (or mnenomic file path)
  258 |     |     /// at the derivation path `m/44'/60'/0'/0/{index}`.
  259 |     |     function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);
  260 |     | 
  261 |     |     /// Derive a private key from a provided mnenomic string (or mnenomic file path)
  262 |     |     /// at `{derivationPath}{index}`.
  263 |     |     function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)
  264 |     |         external
  265 |     |         pure
  266 |     |         returns (uint256 privateKey);
  267 |     | 
  268 |     |     /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language
  269 |     |     /// at the derivation path `m/44'/60'/0'/0/{index}`.
  270 |     |     function deriveKey(string calldata mnemonic, uint32 index, string calldata language)
  271 |     |         external
  272 |     |         pure
  273 |     |         returns (uint256 privateKey);
  274 |     | 
  275 |     |     /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language
  276 |     |     /// at `{derivationPath}{index}`.
  277 |     |     function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)
  278 |     |         external
  279 |     |         pure
  280 |     |         returns (uint256 privateKey);
  281 |     | 
  282 |     |     /// Derives secp256r1 public key from the provided `privateKey`.
  283 |     |     function publicKeyP256(uint256 privateKey) external pure returns (uint256 publicKeyX, uint256 publicKeyY);
  284 |     | 
  285 |     |     /// Adds a private key to the local forge wallet and returns the address.
  286 |     |     function rememberKey(uint256 privateKey) external returns (address keyAddr);
  287 |     | 
  288 |     |     /// Signs data with a `Wallet`.
  289 |     |     /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
  290 |     |     /// signature's `s` value, and the recovery id `v` in a single bytes32.
  291 |     |     /// This format reduces the signature size from 65 to 64 bytes.
  292 |     |     function signCompact(Wallet calldata wallet, bytes32 digest) external returns (bytes32 r, bytes32 vs);
  293 |     | 
  294 |     |     /// Signs `digest` with `privateKey` using the secp256k1 curve.
  295 |     |     /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
  296 |     |     /// signature's `s` value, and the recovery id `v` in a single bytes32.
  297 |     |     /// This format reduces the signature size from 65 to 64 bytes.
  298 |     |     function signCompact(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);
  299 |     | 
  300 |     |     /// Signs `digest` with signer provided to script using the secp256k1 curve.
  301 |     |     /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
  302 |     |     /// signature's `s` value, and the recovery id `v` in a single bytes32.
  303 |     |     /// This format reduces the signature size from 65 to 64 bytes.
  304 |     |     /// If `--sender` is provided, the signer with provided address is used, otherwise,
  305 |     |     /// if exactly one signer is provided to the script, that signer is used.
  306 |     |     /// Raises error if signer passed through `--sender` does not match any unlocked signers or
  307 |     |     /// if `--sender` is not provided and not exactly one signer is passed to the script.
  308 |     |     function signCompact(bytes32 digest) external pure returns (bytes32 r, bytes32 vs);
  309 |     | 
  310 |     |     /// Signs `digest` with signer provided to script using the secp256k1 curve.
  311 |     |     /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
  312 |     |     /// signature's `s` value, and the recovery id `v` in a single bytes32.
  313 |     |     /// This format reduces the signature size from 65 to 64 bytes.
  314 |     |     /// Raises error if none of the signers passed into the script have provided address.
  315 |     |     function signCompact(address signer, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);
  316 |     | 
  317 |     |     /// Signs `digest` with `privateKey` using the secp256r1 curve.
  318 |     |     function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);
  319 |     | 
  320 |     |     /// Signs data with a `Wallet`.
  321 |     |     function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);
  322 |     | 
  323 |     |     /// Signs `digest` with `privateKey` using the secp256k1 curve.
  324 |     |     function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);
  325 |     | 
  326 |     |     /// Signs `digest` with signer provided to script using the secp256k1 curve.
  327 |     |     /// If `--sender` is provided, the signer with provided address is used, otherwise,
  328 |     |     /// if exactly one signer is provided to the script, that signer is used.
  329 |     |     /// Raises error if signer passed through `--sender` does not match any unlocked signers or
  330 |     |     /// if `--sender` is not provided and not exactly one signer is passed to the script.
  331 |     |     function sign(bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);
  332 |     | 
  333 |     |     /// Signs `digest` with signer provided to script using the secp256k1 curve.
  334 |     |     /// Raises error if none of the signers passed into the script have provided address.
  335 |     |     function sign(address signer, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);
  336 |     | 
  337 |     |     // ======== Environment ========
  338 |     | 
  339 |     |     /// Gets the environment variable `name` and parses it as `address`.
  340 |     |     /// Reverts if the variable was not found or could not be parsed.
  341 |     |     function envAddress(string calldata name) external view returns (address value);
  342 |     | 
  343 |     |     /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.
  344 |     |     /// Reverts if the variable was not found or could not be parsed.
  345 |     |     function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);
  346 |     | 
  347 |     |     /// Gets the environment variable `name` and parses it as `bool`.
  348 |     |     /// Reverts if the variable was not found or could not be parsed.
  349 |     |     function envBool(string calldata name) external view returns (bool value);
  350 |     | 
  351 |     |     /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.
  352 |     |     /// Reverts if the variable was not found or could not be parsed.
  353 |     |     function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);
  354 |     | 
  355 |     |     /// Gets the environment variable `name` and parses it as `bytes32`.
  356 |     |     /// Reverts if the variable was not found or could not be parsed.
  357 |     |     function envBytes32(string calldata name) external view returns (bytes32 value);
  358 |     | 
  359 |     |     /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.
  360 |     |     /// Reverts if the variable was not found or could not be parsed.
  361 |     |     function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);
  362 |     | 
  363 |     |     /// Gets the environment variable `name` and parses it as `bytes`.
  364 |     |     /// Reverts if the variable was not found or could not be parsed.
  365 |     |     function envBytes(string calldata name) external view returns (bytes memory value);
  366 |     | 
  367 |     |     /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.
  368 |     |     /// Reverts if the variable was not found or could not be parsed.
  369 |     |     function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);
  370 |     | 
  371 |     |     /// Gets the environment variable `name` and returns true if it exists, else returns false.
  372 |     |     function envExists(string calldata name) external view returns (bool result);
  373 |     | 
  374 |     |     /// Gets the environment variable `name` and parses it as `int256`.
  375 |     |     /// Reverts if the variable was not found or could not be parsed.
  376 |     |     function envInt(string calldata name) external view returns (int256 value);
  377 |     | 
  378 |     |     /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.
  379 |     |     /// Reverts if the variable was not found or could not be parsed.
  380 |     |     function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);
  381 |     | 
  382 |     |     /// Gets the environment variable `name` and parses it as `bool`.
  383 |     |     /// Reverts if the variable could not be parsed.
  384 |     |     /// Returns `defaultValue` if the variable was not found.
  385 |     |     function envOr(string calldata name, bool defaultValue) external view returns (bool value);
  386 |     | 
  387 |     |     /// Gets the environment variable `name` and parses it as `uint256`.
  388 |     |     /// Reverts if the variable could not be parsed.
  389 |     |     /// Returns `defaultValue` if the variable was not found.
  390 |     |     function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);
  391 |     | 
  392 |     |     /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.
  393 |     |     /// Reverts if the variable could not be parsed.
  394 |     |     /// Returns `defaultValue` if the variable was not found.
  395 |     |     function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)
  396 |     |         external
  397 |     |         view
  398 |     |         returns (address[] memory value);
  399 |     | 
  400 |     |     /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.
  401 |     |     /// Reverts if the variable could not be parsed.
  402 |     |     /// Returns `defaultValue` if the variable was not found.
  403 |     |     function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)
  404 |     |         external
  405 |     |         view
  406 |     |         returns (bytes32[] memory value);
  407 |     | 
  408 |     |     /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.
  409 |     |     /// Reverts if the variable could not be parsed.
  410 |     |     /// Returns `defaultValue` if the variable was not found.
  411 |     |     function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)
  412 |     |         external
  413 |     |         view
  414 |     |         returns (string[] memory value);
  415 |     | 
  416 |     |     /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.
  417 |     |     /// Reverts if the variable could not be parsed.
  418 |     |     /// Returns `defaultValue` if the variable was not found.
  419 |     |     function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)
  420 |     |         external
  421 |     |         view
  422 |     |         returns (bytes[] memory value);
  423 |     | 
  424 |     |     /// Gets the environment variable `name` and parses it as `int256`.
  425 |     |     /// Reverts if the variable could not be parsed.
  426 |     |     /// Returns `defaultValue` if the variable was not found.
  427 |     |     function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);
  428 |     | 
  429 |     |     /// Gets the environment variable `name` and parses it as `address`.
  430 |     |     /// Reverts if the variable could not be parsed.
  431 |     |     /// Returns `defaultValue` if the variable was not found.
  432 |     |     function envOr(string calldata name, address defaultValue) external view returns (address value);
  433 |     | 
  434 |     |     /// Gets the environment variable `name` and parses it as `bytes32`.
  435 |     |     /// Reverts if the variable could not be parsed.
  436 |     |     /// Returns `defaultValue` if the variable was not found.
  437 |     |     function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);
  438 |     | 
  439 |     |     /// Gets the environment variable `name` and parses it as `string`.
  440 |     |     /// Reverts if the variable could not be parsed.
  441 |     |     /// Returns `defaultValue` if the variable was not found.
  442 |     |     function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);
  443 |     | 
  444 |     |     /// Gets the environment variable `name` and parses it as `bytes`.
  445 |     |     /// Reverts if the variable could not be parsed.
  446 |     |     /// Returns `defaultValue` if the variable was not found.
  447 |     |     function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);
  448 |     | 
  449 |     |     /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.
  450 |     |     /// Reverts if the variable could not be parsed.
  451 |     |     /// Returns `defaultValue` if the variable was not found.
  452 |     |     function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)
  453 |     |         external
  454 |     |         view
  455 |     |         returns (bool[] memory value);
  456 |     | 
  457 |     |     /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.
  458 |     |     /// Reverts if the variable could not be parsed.
  459 |     |     /// Returns `defaultValue` if the variable was not found.
  460 |     |     function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)
  461 |     |         external
  462 |     |         view
  463 |     |         returns (uint256[] memory value);
  464 |     | 
  465 |     |     /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.
  466 |     |     /// Reverts if the variable could not be parsed.
  467 |     |     /// Returns `defaultValue` if the variable was not found.
  468 |     |     function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)
  469 |     |         external
  470 |     |         view
  471 |     |         returns (int256[] memory value);
  472 |     | 
  473 |     |     /// Gets the environment variable `name` and parses it as `string`.
  474 |     |     /// Reverts if the variable was not found or could not be parsed.
  475 |     |     function envString(string calldata name) external view returns (string memory value);
  476 |     | 
  477 |     |     /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.
  478 |     |     /// Reverts if the variable was not found or could not be parsed.
  479 |     |     function envString(string calldata name, string calldata delim) external view returns (string[] memory value);
  480 |     | 
  481 |     |     /// Gets the environment variable `name` and parses it as `uint256`.
  482 |     |     /// Reverts if the variable was not found or could not be parsed.
  483 |     |     function envUint(string calldata name) external view returns (uint256 value);
  484 |     | 
  485 |     |     /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.
  486 |     |     /// Reverts if the variable was not found or could not be parsed.
  487 |     |     function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);
  488 |     | 
  489 |     |     /// Returns true if `forge` command was executed in given context.
  490 |     |     function isContext(ForgeContext context) external view returns (bool result);
  491 |     | 
  492 |     |     /// Sets environment variables.
  493 |     |     function setEnv(string calldata name, string calldata value) external;
  494 |     | 
  495 |     |     // ======== EVM ========
  496 |     | 
  497 |     |     /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.
  498 |     |     function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);
  499 |     | 
  500 |     |     /// Gets the address for a given private key.
  501 |     |     function addr(uint256 privateKey) external pure returns (address keyAddr);
  502 |     | 
  503 |     |     /// Gets all the logs according to specified filter.
  504 |     |     function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)
  505 |     |         external
  506 |     |         returns (EthGetLogs[] memory logs);
  507 |     | 
  508 |     |     /// Gets the current `block.blobbasefee`.
  509 |     |     /// You should use this instead of `block.blobbasefee` if you use `vm.blobBaseFee`, as `block.blobbasefee` is assumed to be constant across a transaction,
  510 |     |     /// and as a result will get optimized out by the compiler.
  511 |     |     /// See https://github.com/foundry-rs/foundry/issues/6180
  512 |     |     function getBlobBaseFee() external view returns (uint256 blobBaseFee);
  513 |     | 
  514 |     |     /// Gets the current `block.number`.
  515 |     |     /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,
  516 |     |     /// and as a result will get optimized out by the compiler.
  517 |     |     /// See https://github.com/foundry-rs/foundry/issues/6180
  518 |     |     function getBlockNumber() external view returns (uint256 height);
  519 |     | 
  520 |     |     /// Gets the current `block.timestamp`.
  521 |     |     /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,
  522 |     |     /// and as a result will get optimized out by the compiler.
  523 |     |     /// See https://github.com/foundry-rs/foundry/issues/6180
  524 |     |     function getBlockTimestamp() external view returns (uint256 timestamp);
  525 |     | 
  526 |     |     /// Gets the map key and parent of a mapping at a given slot, for a given address.
  527 |     |     function getMappingKeyAndParentOf(address target, bytes32 elementSlot)
  528 |     |         external
  529 |     |         returns (bool found, bytes32 key, bytes32 parent);
  530 |     | 
  531 |     |     /// Gets the number of elements in the mapping at the given slot, for a given address.
  532 |     |     function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);
  533 |     | 
  534 |     |     /// Gets the elements at index idx of the mapping at the given slot, for a given address. The
  535 |     |     /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).
  536 |     |     function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);
  537 |     | 
  538 |     |     /// Gets the nonce of an account.
  539 |     |     function getNonce(address account) external view returns (uint64 nonce);
  540 |     | 
  541 |     |     /// Get the nonce of a `Wallet`.
  542 |     |     function getNonce(Wallet calldata wallet) external returns (uint64 nonce);
  543 |     | 
  544 |     |     /// Gets all the recorded logs.
  545 |     |     function getRecordedLogs() external returns (Log[] memory logs);
  546 |     | 
  547 |     |     /// Gets the gas used in the last call.
  548 |     |     function lastCallGas() external view returns (Gas memory gas);
  549 |     | 
  550 |     |     /// Loads a storage slot from an address.
  551 |     |     function load(address target, bytes32 slot) external view returns (bytes32 data);
  552 |     | 
  553 |     |     /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.
  554 |     |     function pauseGasMetering() external;
  555 |     | 
  556 |     |     /// Records all storage reads and writes.
  557 |     |     function record() external;
  558 |     | 
  559 |     |     /// Record all the transaction logs.
  560 |     |     function recordLogs() external;
  561 |     | 
  562 |     |     /// Reset gas metering (i.e. gas usage is set to gas limit).
  563 |     |     function resetGasMetering() external;
  564 |     | 
  565 |     |     /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.
  566 |     |     function resumeGasMetering() external;
  567 |     | 
  568 |     |     /// Performs an Ethereum JSON-RPC request to the current fork URL.
  569 |     |     function rpc(string calldata method, string calldata params) external returns (bytes memory data);
  570 |     | 
  571 |     |     /// Performs an Ethereum JSON-RPC request to the given endpoint.
  572 |     |     function rpc(string calldata urlOrAlias, string calldata method, string calldata params)
  573 |     |         external
  574 |     |         returns (bytes memory data);
  575 |     | 
  576 |     |     /// Starts recording all map SSTOREs for later retrieval.
  577 |     |     function startMappingRecording() external;
  578 |     | 
  579 |     |     /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,
  580 |     |     /// along with the context of the calls
  581 |     |     function startStateDiffRecording() external;
  582 |     | 
  583 |     |     /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.
  584 |     |     function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);
  585 |     | 
  586 |     |     /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.
  587 |     |     function stopMappingRecording() external;
  588 |     | 
  589 |     |     // ======== Filesystem ========
  590 |     | 
  591 |     |     /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.
  592 |     |     /// `path` is relative to the project root.
  593 |     |     function closeFile(string calldata path) external;
  594 |     | 
  595 |     |     /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.
  596 |     |     /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.
  597 |     |     /// Both `from` and `to` are relative to the project root.
  598 |     |     function copyFile(string calldata from, string calldata to) external returns (uint64 copied);
  599 |     | 
  600 |     |     /// Creates a new, empty directory at the provided path.
  601 |     |     /// This cheatcode will revert in the following situations, but is not limited to just these cases:
  602 |     |     /// - User lacks permissions to modify `path`.
  603 |     |     /// - A parent of the given path doesn't exist and `recursive` is false.
  604 |     |     /// - `path` already exists and `recursive` is false.
  605 |     |     /// `path` is relative to the project root.
  606 |     |     function createDir(string calldata path, bool recursive) external;
  607 |     | 
  608 |     |     /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the
  609 |     |     /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
  610 |     |     function deployCode(string calldata artifactPath) external returns (address deployedAddress);
  611 |     | 
  612 |     |     /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the
  613 |     |     /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
  614 |     |     /// Additionally accepts abi-encoded constructor arguments.
  615 |     |     function deployCode(string calldata artifactPath, bytes calldata constructorArgs)
  616 |     |         external
  617 |     |         returns (address deployedAddress);
  618 |     | 
  619 |     |     /// Returns true if the given path points to an existing entity, else returns false.
  620 |     |     function exists(string calldata path) external returns (bool result);
  621 |     | 
  622 |     |     /// Performs a foreign function call via the terminal.
  623 |     |     function ffi(string[] calldata commandInput) external returns (bytes memory result);
  624 |     | 
  625 |     |     /// Given a path, query the file system to get information about a file, directory, etc.
  626 |     |     function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);
  627 |     | 
  628 |     |     /// Gets the artifact path from code (aka. creation code).
  629 |     |     function getArtifactPathByCode(bytes calldata code) external view returns (string memory path);
  630 |     | 
  631 |     |     /// Gets the artifact path from deployed code (aka. runtime code).
  632 |     |     function getArtifactPathByDeployedCode(bytes calldata deployedCode) external view returns (string memory path);
  633 |     | 
  634 |     |     /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file or the path to the
  635 |     |     /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
  636 |     |     function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);
  637 |     | 
  638 |     |     /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file or the path to the
  639 |     |     /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
  640 |     |     function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);
  641 |     | 
  642 |     |     /// Returns true if the path exists on disk and is pointing at a directory, else returns false.
  643 |     |     function isDir(string calldata path) external returns (bool result);
  644 |     | 
  645 |     |     /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.
  646 |     |     function isFile(string calldata path) external returns (bool result);
  647 |     | 
  648 |     |     /// Get the path of the current project root.
  649 |     |     function projectRoot() external view returns (string memory path);
  650 |     | 
  651 |     |     /// Prompts the user for a string value in the terminal.
  652 |     |     function prompt(string calldata promptText) external returns (string memory input);
  653 |     | 
  654 |     |     /// Prompts the user for an address in the terminal.
  655 |     |     function promptAddress(string calldata promptText) external returns (address);
  656 |     | 
  657 |     |     /// Prompts the user for a hidden string value in the terminal.
  658 |     |     function promptSecret(string calldata promptText) external returns (string memory input);
  659 |     | 
  660 |     |     /// Prompts the user for hidden uint256 in the terminal (usually pk).
  661 |     |     function promptSecretUint(string calldata promptText) external returns (uint256);
  662 |     | 
  663 |     |     /// Prompts the user for uint256 in the terminal.
  664 |     |     function promptUint(string calldata promptText) external returns (uint256);
  665 |     | 
  666 |     |     /// Reads the directory at the given path recursively, up to `maxDepth`.
  667 |     |     /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.
  668 |     |     /// Follows symbolic links if `followLinks` is true.
  669 |     |     function readDir(string calldata path) external view returns (DirEntry[] memory entries);
  670 |     | 
  671 |     |     /// See `readDir(string)`.
  672 |     |     function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);
  673 |     | 
  674 |     |     /// See `readDir(string)`.
  675 |     |     function readDir(string calldata path, uint64 maxDepth, bool followLinks)
  676 |     |         external
  677 |     |         view
  678 |     |         returns (DirEntry[] memory entries);
  679 |     | 
  680 |     |     /// Reads the entire content of file to string. `path` is relative to the project root.
  681 |     |     function readFile(string calldata path) external view returns (string memory data);
  682 |     | 
  683 |     |     /// Reads the entire content of file as binary. `path` is relative to the project root.
  684 |     |     function readFileBinary(string calldata path) external view returns (bytes memory data);
  685 |     | 
  686 |     |     /// Reads next line of file to string.
  687 |     |     function readLine(string calldata path) external view returns (string memory line);
  688 |     | 
  689 |     |     /// Reads a symbolic link, returning the path that the link points to.
  690 |     |     /// This cheatcode will revert in the following situations, but is not limited to just these cases:
  691 |     |     /// - `path` is not a symbolic link.
  692 |     |     /// - `path` does not exist.
  693 |     |     function readLink(string calldata linkPath) external view returns (string memory targetPath);
  694 |     | 
  695 |     |     /// Removes a directory at the provided path.
  696 |     |     /// This cheatcode will revert in the following situations, but is not limited to just these cases:
  697 |     |     /// - `path` doesn't exist.
  698 |     |     /// - `path` isn't a directory.
  699 |     |     /// - User lacks permissions to modify `path`.
  700 |     |     /// - The directory is not empty and `recursive` is false.
  701 |     |     /// `path` is relative to the project root.
  702 |     |     function removeDir(string calldata path, bool recursive) external;
  703 |     | 
  704 |     |     /// Removes a file from the filesystem.
  705 |     |     /// This cheatcode will revert in the following situations, but is not limited to just these cases:
  706 |     |     /// - `path` points to a directory.
  707 |     |     /// - The file doesn't exist.
  708 |     |     /// - The user lacks permissions to remove the file.
  709 |     |     /// `path` is relative to the project root.
  710 |     |     function removeFile(string calldata path) external;
  711 |     | 
  712 |     |     /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.
  713 |     |     function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);
  714 |     | 
  715 |     |     /// Returns the time since unix epoch in milliseconds.
  716 |     |     function unixTime() external returns (uint256 milliseconds);
  717 |     | 
  718 |     |     /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.
  719 |     |     /// `path` is relative to the project root.
  720 |     |     function writeFile(string calldata path, string calldata data) external;
  721 |     | 
  722 |     |     /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.
  723 |     |     /// `path` is relative to the project root.
  724 |     |     function writeFileBinary(string calldata path, bytes calldata data) external;
  725 |     | 
  726 |     |     /// Writes line to file, creating a file if it does not exist.
  727 |     |     /// `path` is relative to the project root.
  728 |     |     function writeLine(string calldata path, string calldata data) external;
  729 |     | 
  730 |     |     // ======== JSON ========
  731 |     | 
  732 |     |     /// Checks if `key` exists in a JSON object.
  733 |     |     function keyExistsJson(string calldata json, string calldata key) external view returns (bool);
  734 |     | 
  735 |     |     /// Parses a string of JSON data at `key` and coerces it to `address`.
  736 |     |     function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);
  737 |     | 
  738 |     |     /// Parses a string of JSON data at `key` and coerces it to `address[]`.
  739 |     |     function parseJsonAddressArray(string calldata json, string calldata key)
  740 |     |         external
  741 |     |         pure
  742 |     |         returns (address[] memory);
  743 |     | 
  744 |     |     /// Parses a string of JSON data at `key` and coerces it to `bool`.
  745 |     |     function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);
  746 |     | 
  747 |     |     /// Parses a string of JSON data at `key` and coerces it to `bool[]`.
  748 |     |     function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);
  749 |     | 
  750 |     |     /// Parses a string of JSON data at `key` and coerces it to `bytes`.
  751 |     |     function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);
  752 |     | 
  753 |     |     /// Parses a string of JSON data at `key` and coerces it to `bytes32`.
  754 |     |     function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);
  755 |     | 
  756 |     |     /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.
  757 |     |     function parseJsonBytes32Array(string calldata json, string calldata key)
  758 |     |         external
  759 |     |         pure
  760 |     |         returns (bytes32[] memory);
  761 |     | 
  762 |     |     /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.
  763 |     |     function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);
  764 |     | 
  765 |     |     /// Parses a string of JSON data at `key` and coerces it to `int256`.
  766 |     |     function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);
  767 |     | 
  768 |     |     /// Parses a string of JSON data at `key` and coerces it to `int256[]`.
  769 |     |     function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);
  770 |     | 
  771 |     |     /// Returns an array of all the keys in a JSON object.
  772 |     |     function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);
  773 |     | 
  774 |     |     /// Parses a string of JSON data at `key` and coerces it to `string`.
  775 |     |     function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);
  776 |     | 
  777 |     |     /// Parses a string of JSON data at `key` and coerces it to `string[]`.
  778 |     |     function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);
  779 |     | 
  780 |     |     /// Parses a string of JSON data at `key` and coerces it to type array corresponding to `typeDescription`.
  781 |     |     function parseJsonTypeArray(string calldata json, string calldata key, string calldata typeDescription)
  782 |     |         external
  783 |     |         pure
  784 |     |         returns (bytes memory);
  785 |     | 
  786 |     |     /// Parses a string of JSON data and coerces it to type corresponding to `typeDescription`.
  787 |     |     function parseJsonType(string calldata json, string calldata typeDescription)
  788 |     |         external
  789 |     |         pure
  790 |     |         returns (bytes memory);
  791 |     | 
  792 |     |     /// Parses a string of JSON data at `key` and coerces it to type corresponding to `typeDescription`.
  793 |     |     function parseJsonType(string calldata json, string calldata key, string calldata typeDescription)
  794 |     |         external
  795 |     |         pure
  796 |     |         returns (bytes memory);
  797 |     | 
  798 |     |     /// Parses a string of JSON data at `key` and coerces it to `uint256`.
  799 |     |     function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);
  800 |     | 
  801 |     |     /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.
  802 |     |     function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);
  803 |     | 
  804 |     |     /// ABI-encodes a JSON object.
  805 |     |     function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);
  806 |     | 
  807 |     |     /// ABI-encodes a JSON object at `key`.
  808 |     |     function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);
  809 |     | 
  810 |     |     /// See `serializeJson`.
  811 |     |     function serializeAddress(string calldata objectKey, string calldata valueKey, address value)
  812 |     |         external
  813 |     |         returns (string memory json);
  814 |     | 
  815 |     |     /// See `serializeJson`.
  816 |     |     function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)
  817 |     |         external
  818 |     |         returns (string memory json);
  819 |     | 
  820 |     |     /// See `serializeJson`.
  821 |     |     function serializeBool(string calldata objectKey, string calldata valueKey, bool value)
  822 |     |         external
  823 |     |         returns (string memory json);
  824 |     | 
  825 |     |     /// See `serializeJson`.
  826 |     |     function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)
  827 |     |         external
  828 |     |         returns (string memory json);
  829 |     | 
  830 |     |     /// See `serializeJson`.
  831 |     |     function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)
  832 |     |         external
  833 |     |         returns (string memory json);
  834 |     | 
  835 |     |     /// See `serializeJson`.
  836 |     |     function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)
  837 |     |         external
  838 |     |         returns (string memory json);
  839 |     | 
  840 |     |     /// See `serializeJson`.
  841 |     |     function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)
  842 |     |         external
  843 |     |         returns (string memory json);
  844 |     | 
  845 |     |     /// See `serializeJson`.
  846 |     |     function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)
  847 |     |         external
  848 |     |         returns (string memory json);
  849 |     | 
  850 |     |     /// See `serializeJson`.
  851 |     |     function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)
  852 |     |         external
  853 |     |         returns (string memory json);
  854 |     | 
  855 |     |     /// See `serializeJson`.
  856 |     |     function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)
  857 |     |         external
  858 |     |         returns (string memory json);
  859 |     | 
  860 |     |     /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.
  861 |     |     /// Returns the stringified version of the specific JSON file up to that moment.
  862 |     |     function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);
  863 |     | 
  864 |     |     /// See `serializeJson`.
  865 |     |     function serializeJsonType(string calldata typeDescription, bytes calldata value)
  866 |     |         external
  867 |     |         pure
  868 |     |         returns (string memory json);
  869 |     | 
  870 |     |     /// See `serializeJson`.
  871 |     |     function serializeJsonType(
  872 |     |         string calldata objectKey,
  873 |     |         string calldata valueKey,
  874 |     |         string calldata typeDescription,
  875 |     |         bytes calldata value
  876 |     |     ) external returns (string memory json);
  877 |     | 
  878 |     |     /// See `serializeJson`.
  879 |     |     function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)
  880 |     |         external
  881 |     |         returns (string memory json);
  882 |     | 
  883 |     |     /// See `serializeJson`.
  884 |     |     function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)
  885 |     |         external
  886 |     |         returns (string memory json);
  887 |     | 
  888 |     |     /// See `serializeJson`.
  889 |     |     function serializeUintToHex(string calldata objectKey, string calldata valueKey, uint256 value)
  890 |     |         external
  891 |     |         returns (string memory json);
  892 |     | 
  893 |     |     /// See `serializeJson`.
  894 |     |     function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)
  895 |     |         external
  896 |     |         returns (string memory json);
  897 |     | 
  898 |     |     /// See `serializeJson`.
  899 |     |     function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)
  900 |     |         external
  901 |     |         returns (string memory json);
  902 |     | 
  903 |     |     /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.
  904 |     |     function writeJson(string calldata json, string calldata path) external;
  905 |     | 
  906 |     |     /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>
  907 |     |     /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.
  908 |     |     function writeJson(string calldata json, string calldata path, string calldata valueKey) external;
  909 |     | 
  910 |     |     /// Checks if `key` exists in a JSON object
  911 |     |     /// `keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.
  912 |     |     function keyExists(string calldata json, string calldata key) external view returns (bool);
  913 |     | 
  914 |     |     // ======== Scripting ========
  915 |     | 
  916 |     |     /// Takes a signed transaction and broadcasts it to the network.
  917 |     |     function broadcastRawTransaction(bytes calldata data) external;
  918 |     | 
  919 |     |     /// Has the next call (at this call depth only) create transactions that can later be signed and sent onchain.
  920 |     |     /// Broadcasting address is determined by checking the following in order:
  921 |     |     /// 1. If `--sender` argument was provided, that address is used.
  922 |     |     /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.
  923 |     |     /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.
  924 |     |     function broadcast() external;
  925 |     | 
  926 |     |     /// Has the next call (at this call depth only) create a transaction with the address provided
  927 |     |     /// as the sender that can later be signed and sent onchain.
  928 |     |     function broadcast(address signer) external;
  929 |     | 
  930 |     |     /// Has the next call (at this call depth only) create a transaction with the private key
  931 |     |     /// provided as the sender that can later be signed and sent onchain.
  932 |     |     function broadcast(uint256 privateKey) external;
  933 |     | 
  934 |     |     /// Has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain.
  935 |     |     /// Broadcasting address is determined by checking the following in order:
  936 |     |     /// 1. If `--sender` argument was provided, that address is used.
  937 |     |     /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.
  938 |     |     /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.
  939 |     |     function startBroadcast() external;
  940 |     | 
  941 |     |     /// Has all subsequent calls (at this call depth only) create transactions with the address
  942 |     |     /// provided that can later be signed and sent onchain.
  943 |     |     function startBroadcast(address signer) external;
  944 |     | 
  945 |     |     /// Has all subsequent calls (at this call depth only) create transactions with the private key
  946 |     |     /// provided that can later be signed and sent onchain.
  947 |     |     function startBroadcast(uint256 privateKey) external;
  948 |     | 
  949 |     |     /// Stops collecting onchain transactions.
  950 |     |     function stopBroadcast() external;
  951 |     | 
  952 |     |     // ======== String ========
  953 |     | 
  954 |     |     /// Returns the index of the first occurrence of a `key` in an `input` string.
  955 |     |     /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `key` is not found.
  956 |     |     /// Returns 0 in case of an empty `key`.
  957 |     |     function indexOf(string calldata input, string calldata key) external pure returns (uint256);
  958 |     | 
  959 |     |     /// Parses the given `string` into an `address`.
  960 |     |     function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);
  961 |     | 
  962 |     |     /// Parses the given `string` into a `bool`.
  963 |     |     function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);
  964 |     | 
  965 |     |     /// Parses the given `string` into `bytes`.
  966 |     |     function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);
  967 |     | 
  968 |     |     /// Parses the given `string` into a `bytes32`.
  969 |     |     function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);
  970 |     | 
  971 |     |     /// Parses the given `string` into a `int256`.
  972 |     |     function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);
  973 |     | 
  974 |     |     /// Parses the given `string` into a `uint256`.
  975 |     |     function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);
  976 |     | 
  977 |     |     /// Replaces occurrences of `from` in the given `string` with `to`.
  978 |     |     function replace(string calldata input, string calldata from, string calldata to)
  979 |     |         external
  980 |     |         pure
  981 |     |         returns (string memory output);
  982 |     | 
  983 |     |     /// Splits the given `string` into an array of strings divided by the `delimiter`.
  984 |     |     function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);
  985 |     | 
  986 |     |     /// Converts the given `string` value to Lowercase.
  987 |     |     function toLowercase(string calldata input) external pure returns (string memory output);
  988 |     | 
  989 |     |     /// Converts the given value to a `string`.
  990 |     |     function toString(address value) external pure returns (string memory stringifiedValue);
  991 |     | 
  992 |     |     /// Converts the given value to a `string`.
  993 |     |     function toString(bytes calldata value) external pure returns (string memory stringifiedValue);
  994 |     | 
  995 |     |     /// Converts the given value to a `string`.
  996 |     |     function toString(bytes32 value) external pure returns (string memory stringifiedValue);
  997 |     | 
  998 |     |     /// Converts the given value to a `string`.
  999 |     |     function toString(bool value) external pure returns (string memory stringifiedValue);
 1000 |     | 
 1001 |     |     /// Converts the given value to a `string`.
 1002 |     |     function toString(uint256 value) external pure returns (string memory stringifiedValue);
 1003 |     | 
 1004 |     |     /// Converts the given value to a `string`.
 1005 |     |     function toString(int256 value) external pure returns (string memory stringifiedValue);
 1006 |     | 
 1007 |     |     /// Converts the given `string` value to Uppercase.
 1008 |     |     function toUppercase(string calldata input) external pure returns (string memory output);
 1009 |     | 
 1010 |     |     /// Trims leading and trailing whitespace from the given `string` value.
 1011 |     |     function trim(string calldata input) external pure returns (string memory output);
 1012 |     | 
 1013 |     |     // ======== Testing ========
 1014 |     | 
 1015 |     |     /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
 1016 |     |     /// Formats values with decimals in failure message.
 1017 |     |     function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;
 1018 |     | 
 1019 |     |     /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
 1020 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1021 |     |     function assertApproxEqAbsDecimal(
 1022 |     |         uint256 left,
 1023 |     |         uint256 right,
 1024 |     |         uint256 maxDelta,
 1025 |     |         uint256 decimals,
 1026 |     |         string calldata error
 1027 |     |     ) external pure;
 1028 |     | 
 1029 |     |     /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
 1030 |     |     /// Formats values with decimals in failure message.
 1031 |     |     function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;
 1032 |     | 
 1033 |     |     /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
 1034 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1035 |     |     function assertApproxEqAbsDecimal(
 1036 |     |         int256 left,
 1037 |     |         int256 right,
 1038 |     |         uint256 maxDelta,
 1039 |     |         uint256 decimals,
 1040 |     |         string calldata error
 1041 |     |     ) external pure;
 1042 |     | 
 1043 |     |     /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
 1044 |     |     function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;
 1045 |     | 
 1046 |     |     /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
 1047 |     |     /// Includes error message into revert string on failure.
 1048 |     |     function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;
 1049 |     | 
 1050 |     |     /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
 1051 |     |     function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;
 1052 |     | 
 1053 |     |     /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
 1054 |     |     /// Includes error message into revert string on failure.
 1055 |     |     function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;
 1056 |     | 
 1057 |     |     /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1058 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1059 |     |     /// Formats values with decimals in failure message.
 1060 |     |     function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals)
 1061 |     |         external
 1062 |     |         pure;
 1063 |     | 
 1064 |     |     /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1065 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1066 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1067 |     |     function assertApproxEqRelDecimal(
 1068 |     |         uint256 left,
 1069 |     |         uint256 right,
 1070 |     |         uint256 maxPercentDelta,
 1071 |     |         uint256 decimals,
 1072 |     |         string calldata error
 1073 |     |     ) external pure;
 1074 |     | 
 1075 |     |     /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1076 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1077 |     |     /// Formats values with decimals in failure message.
 1078 |     |     function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals)
 1079 |     |         external
 1080 |     |         pure;
 1081 |     | 
 1082 |     |     /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1083 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1084 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1085 |     |     function assertApproxEqRelDecimal(
 1086 |     |         int256 left,
 1087 |     |         int256 right,
 1088 |     |         uint256 maxPercentDelta,
 1089 |     |         uint256 decimals,
 1090 |     |         string calldata error
 1091 |     |     ) external pure;
 1092 |     | 
 1093 |     |     /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1094 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1095 |     |     function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;
 1096 |     | 
 1097 |     |     /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1098 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1099 |     |     /// Includes error message into revert string on failure.
 1100 |     |     function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error)
 1101 |     |         external
 1102 |     |         pure;
 1103 |     | 
 1104 |     |     /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1105 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1106 |     |     function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;
 1107 |     | 
 1108 |     |     /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1109 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1110 |     |     /// Includes error message into revert string on failure.
 1111 |     |     function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error)
 1112 |     |         external
 1113 |     |         pure;
 1114 |     | 
 1115 |     |     /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.
 1116 |     |     function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1117 |     | 
 1118 |     |     /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.
 1119 |     |     /// Includes error message into revert string on failure.
 1120 |     |     function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1121 |     | 
 1122 |     |     /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.
 1123 |     |     function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1124 |     | 
 1125 |     |     /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.
 1126 |     |     /// Includes error message into revert string on failure.
 1127 |     |     function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1128 |     | 
 1129 |     |     /// Asserts that two `bool` values are equal.
 1130 |     |     function assertEq(bool left, bool right) external pure;
 1131 |     | 
 1132 |     |     /// Asserts that two `bool` values are equal and includes error message into revert string on failure.
 1133 |     |     function assertEq(bool left, bool right, string calldata error) external pure;
 1134 |     | 
 1135 |     |     /// Asserts that two `string` values are equal.
 1136 |     |     function assertEq(string calldata left, string calldata right) external pure;
 1137 |     | 
 1138 |     |     /// Asserts that two `string` values are equal and includes error message into revert string on failure.
 1139 |     |     function assertEq(string calldata left, string calldata right, string calldata error) external pure;
 1140 |     | 
 1141 |     |     /// Asserts that two `bytes` values are equal.
 1142 |     |     function assertEq(bytes calldata left, bytes calldata right) external pure;
 1143 |     | 
 1144 |     |     /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.
 1145 |     |     function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;
 1146 |     | 
 1147 |     |     /// Asserts that two arrays of `bool` values are equal.
 1148 |     |     function assertEq(bool[] calldata left, bool[] calldata right) external pure;
 1149 |     | 
 1150 |     |     /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.
 1151 |     |     function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;
 1152 |     | 
 1153 |     |     /// Asserts that two arrays of `uint256 values are equal.
 1154 |     |     function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;
 1155 |     | 
 1156 |     |     /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.
 1157 |     |     function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;
 1158 |     | 
 1159 |     |     /// Asserts that two arrays of `int256` values are equal.
 1160 |     |     function assertEq(int256[] calldata left, int256[] calldata right) external pure;
 1161 |     | 
 1162 |     |     /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.
 1163 |     |     function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;
 1164 |     | 
 1165 |     |     /// Asserts that two `uint256` values are equal.
 1166 |     |     function assertEq(uint256 left, uint256 right) external pure;
 1167 |     | 
 1168 |     |     /// Asserts that two arrays of `address` values are equal.
 1169 |     |     function assertEq(address[] calldata left, address[] calldata right) external pure;
 1170 |     | 
 1171 |     |     /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.
 1172 |     |     function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;
 1173 |     | 
 1174 |     |     /// Asserts that two arrays of `bytes32` values are equal.
 1175 |     |     function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;
 1176 |     | 
 1177 |     |     /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.
 1178 |     |     function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;
 1179 |     | 
 1180 |     |     /// Asserts that two arrays of `string` values are equal.
 1181 |     |     function assertEq(string[] calldata left, string[] calldata right) external pure;
 1182 |     | 
 1183 |     |     /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.
 1184 |     |     function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;
 1185 |     | 
 1186 |     |     /// Asserts that two arrays of `bytes` values are equal.
 1187 |     |     function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;
 1188 |     | 
 1189 |     |     /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.
 1190 |     |     function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;
 1191 |     | 
 1192 |     |     /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.
 1193 |     |     function assertEq(uint256 left, uint256 right, string calldata error) external pure;
 1194 |     | 
 1195 |     |     /// Asserts that two `int256` values are equal.
 1196 |     |     function assertEq(int256 left, int256 right) external pure;
 1197 |     | 
 1198 |     |     /// Asserts that two `int256` values are equal and includes error message into revert string on failure.
 1199 |     |     function assertEq(int256 left, int256 right, string calldata error) external pure;
 1200 |     | 
 1201 |     |     /// Asserts that two `address` values are equal.
 1202 |     |     function assertEq(address left, address right) external pure;
 1203 |     | 
 1204 |     |     /// Asserts that two `address` values are equal and includes error message into revert string on failure.
 1205 |     |     function assertEq(address left, address right, string calldata error) external pure;
 1206 |     | 
 1207 |     |     /// Asserts that two `bytes32` values are equal.
 1208 |     |     function assertEq(bytes32 left, bytes32 right) external pure;
 1209 |     | 
 1210 |     |     /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.
 1211 |     |     function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;
 1212 |     | 
 1213 |     |     /// Asserts that the given condition is false.
 1214 |     |     function assertFalse(bool condition) external pure;
 1215 |     | 
 1216 |     |     /// Asserts that the given condition is false and includes error message into revert string on failure.
 1217 |     |     function assertFalse(bool condition, string calldata error) external pure;
 1218 |     | 
 1219 |     |     /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
 1220 |     |     /// Formats values with decimals in failure message.
 1221 |     |     function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1222 |     | 
 1223 |     |     /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
 1224 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1225 |     |     function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1226 |     | 
 1227 |     |     /// Compares two `int256` values. Expects first value to be greater than or equal to second.
 1228 |     |     /// Formats values with decimals in failure message.
 1229 |     |     function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1230 |     | 
 1231 |     |     /// Compares two `int256` values. Expects first value to be greater than or equal to second.
 1232 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1233 |     |     function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1234 |     | 
 1235 |     |     /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
 1236 |     |     function assertGe(uint256 left, uint256 right) external pure;
 1237 |     | 
 1238 |     |     /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
 1239 |     |     /// Includes error message into revert string on failure.
 1240 |     |     function assertGe(uint256 left, uint256 right, string calldata error) external pure;
 1241 |     | 
 1242 |     |     /// Compares two `int256` values. Expects first value to be greater than or equal to second.
 1243 |     |     function assertGe(int256 left, int256 right) external pure;
 1244 |     | 
 1245 |     |     /// Compares two `int256` values. Expects first value to be greater than or equal to second.
 1246 |     |     /// Includes error message into revert string on failure.
 1247 |     |     function assertGe(int256 left, int256 right, string calldata error) external pure;
 1248 |     | 
 1249 |     |     /// Compares two `uint256` values. Expects first value to be greater than second.
 1250 |     |     /// Formats values with decimals in failure message.
 1251 |     |     function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1252 |     | 
 1253 |     |     /// Compares two `uint256` values. Expects first value to be greater than second.
 1254 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1255 |     |     function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1256 |     | 
 1257 |     |     /// Compares two `int256` values. Expects first value to be greater than second.
 1258 |     |     /// Formats values with decimals in failure message.
 1259 |     |     function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1260 |     | 
 1261 |     |     /// Compares two `int256` values. Expects first value to be greater than second.
 1262 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1263 |     |     function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1264 |     | 
 1265 |     |     /// Compares two `uint256` values. Expects first value to be greater than second.
 1266 |     |     function assertGt(uint256 left, uint256 right) external pure;
 1267 |     | 
 1268 |     |     /// Compares two `uint256` values. Expects first value to be greater than second.
 1269 |     |     /// Includes error message into revert string on failure.
 1270 |     |     function assertGt(uint256 left, uint256 right, string calldata error) external pure;
 1271 |     | 
 1272 |     |     /// Compares two `int256` values. Expects first value to be greater than second.
 1273 |     |     function assertGt(int256 left, int256 right) external pure;
 1274 |     | 
 1275 |     |     /// Compares two `int256` values. Expects first value to be greater than second.
 1276 |     |     /// Includes error message into revert string on failure.
 1277 |     |     function assertGt(int256 left, int256 right, string calldata error) external pure;
 1278 |     | 
 1279 |     |     /// Compares two `uint256` values. Expects first value to be less than or equal to second.
 1280 |     |     /// Formats values with decimals in failure message.
 1281 |     |     function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1282 |     | 
 1283 |     |     /// Compares two `uint256` values. Expects first value to be less than or equal to second.
 1284 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1285 |     |     function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1286 |     | 
 1287 |     |     /// Compares two `int256` values. Expects first value to be less than or equal to second.
 1288 |     |     /// Formats values with decimals in failure message.
 1289 |     |     function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1290 |     | 
 1291 |     |     /// Compares two `int256` values. Expects first value to be less than or equal to second.
 1292 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1293 |     |     function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1294 |     | 
 1295 |     |     /// Compares two `uint256` values. Expects first value to be less than or equal to second.
 1296 |     |     function assertLe(uint256 left, uint256 right) external pure;
 1297 |     | 
 1298 |     |     /// Compares two `uint256` values. Expects first value to be less than or equal to second.
 1299 |     |     /// Includes error message into revert string on failure.
 1300 |     |     function assertLe(uint256 left, uint256 right, string calldata error) external pure;
 1301 |     | 
 1302 |     |     /// Compares two `int256` values. Expects first value to be less than or equal to second.
 1303 |     |     function assertLe(int256 left, int256 right) external pure;
 1304 |     | 
 1305 |     |     /// Compares two `int256` values. Expects first value to be less than or equal to second.
 1306 |     |     /// Includes error message into revert string on failure.
 1307 |     |     function assertLe(int256 left, int256 right, string calldata error) external pure;
 1308 |     | 
 1309 |     |     /// Compares two `uint256` values. Expects first value to be less than second.
 1310 |     |     /// Formats values with decimals in failure message.
 1311 |     |     function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1312 |     | 
 1313 |     |     /// Compares two `uint256` values. Expects first value to be less than second.
 1314 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1315 |     |     function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1316 |     | 
 1317 |     |     /// Compares two `int256` values. Expects first value to be less than second.
 1318 |     |     /// Formats values with decimals in failure message.
 1319 |     |     function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1320 |     | 
 1321 |     |     /// Compares two `int256` values. Expects first value to be less than second.
 1322 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1323 |     |     function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1324 |     | 
 1325 |     |     /// Compares two `uint256` values. Expects first value to be less than second.
 1326 |     |     function assertLt(uint256 left, uint256 right) external pure;
 1327 |     | 
 1328 |     |     /// Compares two `uint256` values. Expects first value to be less than second.
 1329 |     |     /// Includes error message into revert string on failure.
 1330 |     |     function assertLt(uint256 left, uint256 right, string calldata error) external pure;
 1331 |     | 
 1332 |     |     /// Compares two `int256` values. Expects first value to be less than second.
 1333 |     |     function assertLt(int256 left, int256 right) external pure;
 1334 |     | 
 1335 |     |     /// Compares two `int256` values. Expects first value to be less than second.
 1336 |     |     /// Includes error message into revert string on failure.
 1337 |     |     function assertLt(int256 left, int256 right, string calldata error) external pure;
 1338 |     | 
 1339 |     |     /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.
 1340 |     |     function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1341 |     | 
 1342 |     |     /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.
 1343 |     |     /// Includes error message into revert string on failure.
 1344 |     |     function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1345 |     | 
 1346 |     |     /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.
 1347 |     |     function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1348 |     | 
 1349 |     |     /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.
 1350 |     |     /// Includes error message into revert string on failure.
 1351 |     |     function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1352 |     | 
 1353 |     |     /// Asserts that two `bool` values are not equal.
 1354 |     |     function assertNotEq(bool left, bool right) external pure;
 1355 |     | 
 1356 |     |     /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.
 1357 |     |     function assertNotEq(bool left, bool right, string calldata error) external pure;
 1358 |     | 
 1359 |     |     /// Asserts that two `string` values are not equal.
 1360 |     |     function assertNotEq(string calldata left, string calldata right) external pure;
 1361 |     | 
 1362 |     |     /// Asserts that two `string` values are not equal and includes error message into revert string on failure.
 1363 |     |     function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;
 1364 |     | 
 1365 |     |     /// Asserts that two `bytes` values are not equal.
 1366 |     |     function assertNotEq(bytes calldata left, bytes calldata right) external pure;
 1367 |     | 
 1368 |     |     /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.
 1369 |     |     function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;
 1370 |     | 
 1371 |     |     /// Asserts that two arrays of `bool` values are not equal.
 1372 |     |     function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;
 1373 |     | 
 1374 |     |     /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.
 1375 |     |     function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;
 1376 |     | 
 1377 |     |     /// Asserts that two arrays of `uint256` values are not equal.
 1378 |     |     function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;
 1379 |     | 
 1380 |     |     /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.
 1381 |     |     function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;
 1382 |     | 
 1383 |     |     /// Asserts that two arrays of `int256` values are not equal.
 1384 |     |     function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;
 1385 |     | 
 1386 |     |     /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.
 1387 |     |     function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;
 1388 |     | 
 1389 |     |     /// Asserts that two `uint256` values are not equal.
 1390 |     |     function assertNotEq(uint256 left, uint256 right) external pure;
 1391 |     | 
 1392 |     |     /// Asserts that two arrays of `address` values are not equal.
 1393 |     |     function assertNotEq(address[] calldata left, address[] calldata right) external pure;
 1394 |     | 
 1395 |     |     /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.
 1396 |     |     function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;
 1397 |     | 
 1398 |     |     /// Asserts that two arrays of `bytes32` values are not equal.
 1399 |     |     function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;
 1400 |     | 
 1401 |     |     /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.
 1402 |     |     function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;
 1403 |     | 
 1404 |     |     /// Asserts that two arrays of `string` values are not equal.
 1405 |     |     function assertNotEq(string[] calldata left, string[] calldata right) external pure;
 1406 |     | 
 1407 |     |     /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.
 1408 |     |     function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;
 1409 |     | 
 1410 |     |     /// Asserts that two arrays of `bytes` values are not equal.
 1411 |     |     function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;
 1412 |     | 
 1413 |     |     /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.
 1414 |     |     function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;
 1415 |     | 
 1416 |     |     /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.
 1417 |     |     function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;
 1418 |     | 
 1419 |     |     /// Asserts that two `int256` values are not equal.
 1420 |     |     function assertNotEq(int256 left, int256 right) external pure;
 1421 |     | 
 1422 |     |     /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.
 1423 |     |     function assertNotEq(int256 left, int256 right, string calldata error) external pure;
 1424 |     | 
 1425 |     |     /// Asserts that two `address` values are not equal.
 1426 |     |     function assertNotEq(address left, address right) external pure;
 1427 |     | 
 1428 |     |     /// Asserts that two `address` values are not equal and includes error message into revert string on failure.
 1429 |     |     function assertNotEq(address left, address right, string calldata error) external pure;
 1430 |     | 
 1431 |     |     /// Asserts that two `bytes32` values are not equal.
 1432 |     |     function assertNotEq(bytes32 left, bytes32 right) external pure;
 1433 |     | 
 1434 |     |     /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.
 1435 |     |     function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;
 1436 |     | 
 1437 |     |     /// Asserts that the given condition is true.
 1438 |     |     function assertTrue(bool condition) external pure;
 1439 |     | 
 1440 |     |     /// Asserts that the given condition is true and includes error message into revert string on failure.
 1441 |     |     function assertTrue(bool condition, string calldata error) external pure;
 1442 |     | 
 1443 |     |     /// If the condition is false, discard this run's fuzz inputs and generate new ones.
 1444 |     |     function assume(bool condition) external pure;
 1445 |     | 
 1446 |     |     /// Discard this run's fuzz inputs and generate new ones if next call reverted.
 1447 |     |     function assumeNoRevert() external pure;
 1448 |     | 
 1449 |     |     /// Writes a breakpoint to jump to in the debugger.
 1450 |     |     function breakpoint(string calldata char) external;
 1451 |     | 
 1452 |     |     /// Writes a conditional breakpoint to jump to in the debugger.
 1453 |     |     function breakpoint(string calldata char, bool value) external;
 1454 |     | 
 1455 |     |     /// Returns the Foundry version.
 1456 |     |     /// Format: <cargo_version>+<git_sha>+<build_timestamp>
 1457 |     |     /// Sample output: 0.2.0+faa94c384+202407110019
 1458 |     |     /// Note: Build timestamps may vary slightly across platforms due to separate CI jobs.
 1459 |     |     /// For reliable version comparisons, use YYYYMMDD0000 format (e.g., >= 202407110000)
 1460 |     |     /// to compare timestamps while ignoring minor time differences.
 1461 |     |     function getFoundryVersion() external view returns (string memory version);
 1462 |     | 
 1463 |     |     /// Returns the RPC url for the given alias.
 1464 |     |     function rpcUrl(string calldata rpcAlias) external view returns (string memory json);
 1465 |     | 
 1466 |     |     /// Returns all rpc urls and their aliases as structs.
 1467 |     |     function rpcUrlStructs() external view returns (Rpc[] memory urls);
 1468 |     | 
 1469 |     |     /// Returns all rpc urls and their aliases `[alias, url][]`.
 1470 |     |     function rpcUrls() external view returns (string[2][] memory urls);
 1471 |     | 
 1472 |     |     /// Suspends execution of the main thread for `duration` milliseconds.
 1473 |     |     function sleep(uint256 duration) external;
 1474 |     | 
 1475 |     |     // ======== Toml ========
 1476 |     | 
 1477 |     |     /// Checks if `key` exists in a TOML table.
 1478 |     |     function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);
 1479 |     | 
 1480 |     |     /// Parses a string of TOML data at `key` and coerces it to `address`.
 1481 |     |     function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);
 1482 |     | 
 1483 |     |     /// Parses a string of TOML data at `key` and coerces it to `address[]`.
 1484 |     |     function parseTomlAddressArray(string calldata toml, string calldata key)
 1485 |     |         external
 1486 |     |         pure
 1487 |     |         returns (address[] memory);
 1488 |     | 
 1489 |     |     /// Parses a string of TOML data at `key` and coerces it to `bool`.
 1490 |     |     function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);
 1491 |     | 
 1492 |     |     /// Parses a string of TOML data at `key` and coerces it to `bool[]`.
 1493 |     |     function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);
 1494 |     | 
 1495 |     |     /// Parses a string of TOML data at `key` and coerces it to `bytes`.
 1496 |     |     function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);
 1497 |     | 
 1498 |     |     /// Parses a string of TOML data at `key` and coerces it to `bytes32`.
 1499 |     |     function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);
 1500 |     | 
 1501 |     |     /// Parses a string of TOML data at `key` and coerces it to `bytes32[]`.
 1502 |     |     function parseTomlBytes32Array(string calldata toml, string calldata key)
 1503 |     |         external
 1504 |     |         pure
 1505 |     |         returns (bytes32[] memory);
 1506 |     | 
 1507 |     |     /// Parses a string of TOML data at `key` and coerces it to `bytes[]`.
 1508 |     |     function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);
 1509 |     | 
 1510 |     |     /// Parses a string of TOML data at `key` and coerces it to `int256`.
 1511 |     |     function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);
 1512 |     | 
 1513 |     |     /// Parses a string of TOML data at `key` and coerces it to `int256[]`.
 1514 |     |     function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);
 1515 |     | 
 1516 |     |     /// Returns an array of all the keys in a TOML table.
 1517 |     |     function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);
 1518 |     | 
 1519 |     |     /// Parses a string of TOML data at `key` and coerces it to `string`.
 1520 |     |     function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);
 1521 |     | 
 1522 |     |     /// Parses a string of TOML data at `key` and coerces it to `string[]`.
 1523 |     |     function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);
 1524 |     | 
 1525 |     |     /// Parses a string of TOML data at `key` and coerces it to type array corresponding to `typeDescription`.
 1526 |     |     function parseTomlTypeArray(string calldata toml, string calldata key, string calldata typeDescription)
 1527 |     |         external
 1528 |     |         pure
 1529 |     |         returns (bytes memory);
 1530 |     | 
 1531 |     |     /// Parses a string of TOML data and coerces it to type corresponding to `typeDescription`.
 1532 |     |     function parseTomlType(string calldata toml, string calldata typeDescription)
 1533 |     |         external
 1534 |     |         pure
 1535 |     |         returns (bytes memory);
 1536 |     | 
 1537 |     |     /// Parses a string of TOML data at `key` and coerces it to type corresponding to `typeDescription`.
 1538 |     |     function parseTomlType(string calldata toml, string calldata key, string calldata typeDescription)
 1539 |     |         external
 1540 |     |         pure
 1541 |     |         returns (bytes memory);
 1542 |     | 
 1543 |     |     /// Parses a string of TOML data at `key` and coerces it to `uint256`.
 1544 |     |     function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);
 1545 |     | 
 1546 |     |     /// Parses a string of TOML data at `key` and coerces it to `uint256[]`.
 1547 |     |     function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);
 1548 |     | 
 1549 |     |     /// ABI-encodes a TOML table.
 1550 |     |     function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);
 1551 |     | 
 1552 |     |     /// ABI-encodes a TOML table at `key`.
 1553 |     |     function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);
 1554 |     | 
 1555 |     |     /// Takes serialized JSON, converts to TOML and write a serialized TOML to a file.
 1556 |     |     function writeToml(string calldata json, string calldata path) external;
 1557 |     | 
 1558 |     |     /// Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>
 1559 |     |     /// This is useful to replace a specific value of a TOML file, without having to parse the entire thing.
 1560 |     |     function writeToml(string calldata json, string calldata path, string calldata valueKey) external;
 1561 |     | 
 1562 |     |     // ======== Utilities ========
 1563 |     | 
 1564 |     |     /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.
 1565 |     |     function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)
 1566 |     |         external
 1567 |     |         pure
 1568 |     |         returns (address);
 1569 |     | 
 1570 |     |     /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.
 1571 |     |     function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);
 1572 |     | 
 1573 |     |     /// Compute the address a contract will be deployed at for a given deployer address and nonce.
 1574 |     |     function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);
 1575 |     | 
 1576 |     |     /// Utility cheatcode to copy storage of `from` contract to another `to` contract.
 1577 |     |     function copyStorage(address from, address to) external;
 1578 |     | 
 1579 |     |     /// Returns ENS namehash for provided string.
 1580 |     |     function ensNamehash(string calldata name) external pure returns (bytes32);
 1581 |     | 
 1582 |     |     /// Gets the label for the specified address.
 1583 |     |     function getLabel(address account) external view returns (string memory currentLabel);
 1584 |     | 
 1585 |     |     /// Labels an address in call traces.
 1586 |     |     function label(address account, string calldata newLabel) external;
 1587 |     | 
 1588 |     |     /// Pauses collection of call traces. Useful in cases when you want to skip tracing of
 1589 |     |     /// complex calls which are not useful for debugging.
 1590 |     |     function pauseTracing() external view;
 1591 |     | 
 1592 |     |     /// Returns a random `address`.
 1593 |     |     function randomAddress() external returns (address);
 1594 |     | 
 1595 |     |     /// Returns an random `bool`.
 1596 |     |     function randomBool() external view returns (bool);
 1597 |     | 
 1598 |     |     /// Returns an random byte array value of the given length.
 1599 |     |     function randomBytes(uint256 len) external view returns (bytes memory);
 1600 |     | 
 1601 |     |     /// Returns an random `int256` value.
 1602 |     |     function randomInt() external view returns (int256);
 1603 |     | 
 1604 |     |     /// Returns an random `int256` value of given bits.
 1605 |     |     function randomInt(uint256 bits) external view returns (int256);
 1606 |     | 
 1607 |     |     /// Returns a random uint256 value.
 1608 |     |     function randomUint() external returns (uint256);
 1609 |     | 
 1610 |     |     /// Returns random uint256 value between the provided range (=min..=max).
 1611 |     |     function randomUint(uint256 min, uint256 max) external returns (uint256);
 1612 |     | 
 1613 |     |     /// Returns an random `uint256` value of given bits.
 1614 |     |     function randomUint(uint256 bits) external view returns (uint256);
 1615 |     | 
 1616 |     |     /// Unpauses collection of call traces.
 1617 |     |     function resumeTracing() external view;
 1618 |     | 
 1619 |     |     /// Utility cheatcode to set arbitrary storage for given target address.
 1620 |     |     function setArbitraryStorage(address target) external;
 1621 |     | 
 1622 |     |     /// Encodes a `bytes` value to a base64url string.
 1623 |     |     function toBase64URL(bytes calldata data) external pure returns (string memory);
 1624 |     | 
 1625 |     |     /// Encodes a `string` value to a base64url string.
 1626 |     |     function toBase64URL(string calldata data) external pure returns (string memory);
 1627 |     | 
 1628 |     |     /// Encodes a `bytes` value to a base64 string.
 1629 |     |     function toBase64(bytes calldata data) external pure returns (string memory);
 1630 |     | 
 1631 |     |     /// Encodes a `string` value to a base64 string.
 1632 |     |     function toBase64(string calldata data) external pure returns (string memory);
 1633 |     | }
 1634 |     | 
 1635 |     | /// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used
 1636 |     | /// in tests, but it is not recommended to use these cheats in scripts.
 1637 |     | interface Vm is VmSafe {
 1638 |     |     // ======== EVM ========
 1639 |     | 
 1640 |     |     /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.
 1641 |     |     function activeFork() external view returns (uint256 forkId);
 1642 |     | 
 1643 |     |     /// In forking mode, explicitly grant the given address cheatcode access.
 1644 |     |     function allowCheatcodes(address account) external;
 1645 |     | 
 1646 |     |     /// Sets `block.blobbasefee`
 1647 |     |     function blobBaseFee(uint256 newBlobBaseFee) external;
 1648 |     | 
 1649 |     |     /// Sets the blobhashes in the transaction.
 1650 |     |     /// Not available on EVM versions before Cancun.
 1651 |     |     /// If used on unsupported EVM versions it will revert.
 1652 |     |     function blobhashes(bytes32[] calldata hashes) external;
 1653 |     | 
 1654 |     |     /// Sets `block.chainid`.
 1655 |     |     function chainId(uint256 newChainId) external;
 1656 |     | 
 1657 |     |     /// Clears all mocked calls.
 1658 |     |     function clearMockedCalls() external;
 1659 |     | 
 1660 |     |     /// Sets `block.coinbase`.
 1661 |     |     function coinbase(address newCoinbase) external;
 1662 |     | 
 1663 |     |     /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.
 1664 |     |     function createFork(string calldata urlOrAlias) external returns (uint256 forkId);
 1665 |     | 
 1666 |     |     /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.
 1667 |     |     function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);
 1668 |     | 
 1669 |     |     /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,
 1670 |     |     /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.
 1671 |     |     function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);
 1672 |     | 
 1673 |     |     /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.
 1674 |     |     function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);
 1675 |     | 
 1676 |     |     /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.
 1677 |     |     function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);
 1678 |     | 
 1679 |     |     /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,
 1680 |     |     /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.
 1681 |     |     function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);
 1682 |     | 
 1683 |     |     /// Sets an address' balance.
 1684 |     |     function deal(address account, uint256 newBalance) external;
 1685 |     | 
 1686 |     |     /// Removes the snapshot with the given ID created by `snapshot`.
 1687 |     |     /// Takes the snapshot ID to delete.
 1688 |     |     /// Returns `true` if the snapshot was successfully deleted.
 1689 |     |     /// Returns `false` if the snapshot does not exist.
 1690 |     |     function deleteSnapshot(uint256 snapshotId) external returns (bool success);
 1691 |     | 
 1692 |     |     /// Removes _all_ snapshots previously created by `snapshot`.
 1693 |     |     function deleteSnapshots() external;
 1694 |     | 
 1695 |     |     /// Sets `block.difficulty`.
 1696 |     |     /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.
 1697 |     |     /// Reverts if used on unsupported EVM versions.
 1698 |     |     function difficulty(uint256 newDifficulty) external;
 1699 |     | 
 1700 |     |     /// Dump a genesis JSON file's `allocs` to disk.
 1701 |     |     function dumpState(string calldata pathToStateJson) external;
 1702 |     | 
 1703 |     |     /// Sets an address' code.
 1704 |     |     function etch(address target, bytes calldata newRuntimeBytecode) external;
 1705 |     | 
 1706 |     |     /// Sets `block.basefee`.
 1707 |     |     function fee(uint256 newBasefee) external;
 1708 |     | 
 1709 |     |     /// Gets the blockhashes from the current transaction.
 1710 |     |     /// Not available on EVM versions before Cancun.
 1711 |     |     /// If used on unsupported EVM versions it will revert.
 1712 |     |     function getBlobhashes() external view returns (bytes32[] memory hashes);
 1713 |     | 
 1714 |     |     /// Returns true if the account is marked as persistent.
 1715 |     |     function isPersistent(address account) external view returns (bool persistent);
 1716 |     | 
 1717 |     |     /// Load a genesis JSON file's `allocs` into the in-memory revm state.
 1718 |     |     function loadAllocs(string calldata pathToAllocsJson) external;
 1719 |     | 
 1720 |     |     /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup
 1721 |     |     /// Meaning, changes made to the state of this account will be kept when switching forks.
 1722 |     |     function makePersistent(address account) external;
 1723 |     | 
 1724 |     |     /// See `makePersistent(address)`.
 1725 |     |     function makePersistent(address account0, address account1) external;
 1726 |     | 
 1727 |     |     /// See `makePersistent(address)`.
 1728 |     |     function makePersistent(address account0, address account1, address account2) external;
 1729 |     | 
 1730 |     |     /// See `makePersistent(address)`.
 1731 |     |     function makePersistent(address[] calldata accounts) external;
 1732 |     | 
 1733 |     |     /// Reverts a call to an address with specified revert data.
 1734 |     |     function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;
 1735 |     | 
 1736 |     |     /// Reverts a call to an address with a specific `msg.value`, with specified revert data.
 1737 |     |     function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)
 1738 |     |         external;
 1739 |     | 
 1740 |     |     /// Mocks a call to an address, returning specified data.
 1741 |     |     /// Calldata can either be strict or a partial match, e.g. if you only
 1742 |     |     /// pass a Solidity selector to the expected calldata, then the entire Solidity
 1743 |     |     /// function will be mocked.
 1744 |     |     function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;
 1745 |     | 
 1746 |     |     /// Mocks a call to an address with a specific `msg.value`, returning specified data.
 1747 |     |     /// Calldata match takes precedence over `msg.value` in case of ambiguity.
 1748 |     |     function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;
 1749 |     | 
 1750 |     |     /// Whenever a call is made to `callee` with calldata `data`, this cheatcode instead calls
 1751 |     |     /// `target` with the same calldata. This functionality is similar to a delegate call made to
 1752 |     |     /// `target` contract from `callee`.
 1753 |     |     /// Can be used to substitute a call to a function with another implementation that captures
 1754 |     |     /// the primary logic of the original function but is easier to reason about.
 1755 |     |     /// If calldata is not a strict match then partial match by selector is attempted.
 1756 |     |     function mockFunction(address callee, address target, bytes calldata data) external;
 1757 |     | 
 1758 |     |     /// Sets the *next* call's `msg.sender` to be the input address.
 1759 |     |     function prank(address msgSender) external;
 1760 |     | 
 1761 |     |     /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.
 1762 |     |     function prank(address msgSender, address txOrigin) external;
 1763 |     | 
 1764 |     |     /// Sets `block.prevrandao`.
 1765 |     |     /// Not available on EVM versions before Paris. Use `difficulty` instead.
 1766 |     |     /// If used on unsupported EVM versions it will revert.
 1767 |     |     function prevrandao(bytes32 newPrevrandao) external;
 1768 |     | 
 1769 |     |     /// Sets `block.prevrandao`.
 1770 |     |     /// Not available on EVM versions before Paris. Use `difficulty` instead.
 1771 |     |     /// If used on unsupported EVM versions it will revert.
 1772 |     |     function prevrandao(uint256 newPrevrandao) external;
 1773 |     | 
 1774 |     |     /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.
 1775 |     |     function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);
 1776 |     | 
 1777 |     |     /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.
 1778 |     |     function resetNonce(address account) external;
 1779 |     | 
 1780 |     |     /// Revert the state of the EVM to a previous snapshot
 1781 |     |     /// Takes the snapshot ID to revert to.
 1782 |     |     /// Returns `true` if the snapshot was successfully reverted.
 1783 |     |     /// Returns `false` if the snapshot does not exist.
 1784 |     |     /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteSnapshot`.
 1785 |     |     function revertTo(uint256 snapshotId) external returns (bool success);
 1786 |     | 
 1787 |     |     /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots
 1788 |     |     /// Takes the snapshot ID to revert to.
 1789 |     |     /// Returns `true` if the snapshot was successfully reverted and deleted.
 1790 |     |     /// Returns `false` if the snapshot does not exist.
 1791 |     |     function revertToAndDelete(uint256 snapshotId) external returns (bool success);
 1792 |     | 
 1793 |     |     /// Revokes persistent status from the address, previously added via `makePersistent`.
 1794 |     |     function revokePersistent(address account) external;
 1795 |     | 
 1796 |     |     /// See `revokePersistent(address)`.
 1797 |     |     function revokePersistent(address[] calldata accounts) external;
 1798 |     | 
 1799 |     |     /// Sets `block.height`.
 1800 |     |     function roll(uint256 newHeight) external;
 1801 |     | 
 1802 |     |     /// Updates the currently active fork to given block number
 1803 |     |     /// This is similar to `roll` but for the currently active fork.
 1804 |     |     function rollFork(uint256 blockNumber) external;
 1805 |     | 
 1806 |     |     /// Updates the currently active fork to given transaction. This will `rollFork` with the number
 1807 |     |     /// of the block the transaction was mined in and replays all transaction mined before it in the block.
 1808 |     |     function rollFork(bytes32 txHash) external;
 1809 |     | 
 1810 |     |     /// Updates the given fork to given block number.
 1811 |     |     function rollFork(uint256 forkId, uint256 blockNumber) external;
 1812 |     | 
 1813 |     |     /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.
 1814 |     |     function rollFork(uint256 forkId, bytes32 txHash) external;
 1815 |     | 
 1816 |     |     /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.
 1817 |     |     function selectFork(uint256 forkId) external;
 1818 |     | 
 1819 |     |     /// Set blockhash for the current block.
 1820 |     |     /// It only sets the blockhash for blocks where `block.number - 256 <= number < block.number`.
 1821 |     |     function setBlockhash(uint256 blockNumber, bytes32 blockHash) external;
 1822 |     | 
 1823 |     |     /// Sets the nonce of an account. Must be higher than the current nonce of the account.
 1824 |     |     function setNonce(address account, uint64 newNonce) external;
 1825 |     | 
 1826 |     |     /// Sets the nonce of an account to an arbitrary value.
 1827 |     |     function setNonceUnsafe(address account, uint64 newNonce) external;
 1828 |     | 
 1829 |     |     /// Snapshot the current state of the evm.
 1830 |     |     /// Returns the ID of the snapshot that was created.
 1831 |     |     /// To revert a snapshot use `revertTo`.
 1832 |     |     function snapshot() external returns (uint256 snapshotId);
 1833 |     | 
 1834 |     |     /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.
 1835 |     |     function startPrank(address msgSender) external;
 1836 |     | 
 1837 |     |     /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.
 1838 |     |     function startPrank(address msgSender, address txOrigin) external;
 1839 |     | 
 1840 |     |     /// Resets subsequent calls' `msg.sender` to be `address(this)`.
 1841 |     |     function stopPrank() external;
 1842 |     | 
 1843 |     |     /// Stores a value to an address' storage slot.
 1844 |     |     function store(address target, bytes32 slot, bytes32 value) external;
 1845 |     | 
 1846 |     |     /// Fetches the given transaction from the active fork and executes it on the current state.
 1847 |     |     function transact(bytes32 txHash) external;
 1848 |     | 
 1849 |     |     /// Fetches the given transaction from the given fork and executes it on the current state.
 1850 |     |     function transact(uint256 forkId, bytes32 txHash) external;
 1851 |     | 
 1852 |     |     /// Sets `tx.gasprice`.
 1853 |     |     function txGasPrice(uint256 newGasPrice) external;
 1854 |     | 
 1855 |     |     /// Sets `block.timestamp`.
 1856 |     |     function warp(uint256 newTimestamp) external;
 1857 |     | 
 1858 |     |     // ======== Testing ========
 1859 |     | 
 1860 |     |     /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.
 1861 |     |     function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;
 1862 |     | 
 1863 |     |     /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.
 1864 |     |     function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)
 1865 |     |         external;
 1866 |     | 
 1867 |     |     /// Expects a call to an address with the specified calldata.
 1868 |     |     /// Calldata can either be a strict or a partial match.
 1869 |     |     function expectCall(address callee, bytes calldata data) external;
 1870 |     | 
 1871 |     |     /// Expects given number of calls to an address with the specified calldata.
 1872 |     |     function expectCall(address callee, bytes calldata data, uint64 count) external;
 1873 |     | 
 1874 |     |     /// Expects a call to an address with the specified `msg.value` and calldata.
 1875 |     |     function expectCall(address callee, uint256 msgValue, bytes calldata data) external;
 1876 |     | 
 1877 |     |     /// Expects given number of calls to an address with the specified `msg.value` and calldata.
 1878 |     |     function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;
 1879 |     | 
 1880 |     |     /// Expect a call to an address with the specified `msg.value`, gas, and calldata.
 1881 |     |     function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;
 1882 |     | 
 1883 |     |     /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.
 1884 |     |     function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;
 1885 |     | 
 1886 |     |     /// Prepare an expected anonymous log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).
 1887 |     |     /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if
 1888 |     |     /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).
 1889 |     |     function expectEmitAnonymous(bool checkTopic0, bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData)
 1890 |     |         external;
 1891 |     | 
 1892 |     |     /// Same as the previous method, but also checks supplied address against emitting contract.
 1893 |     |     function expectEmitAnonymous(
 1894 |     |         bool checkTopic0,
 1895 |     |         bool checkTopic1,
 1896 |     |         bool checkTopic2,
 1897 |     |         bool checkTopic3,
 1898 |     |         bool checkData,
 1899 |     |         address emitter
 1900 |     |     ) external;
 1901 |     | 
 1902 |     |     /// Prepare an expected anonymous log with all topic and data checks enabled.
 1903 |     |     /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if
 1904 |     |     /// logs were emitted in the expected order with the expected topics and data.
 1905 |     |     function expectEmitAnonymous() external;
 1906 |     | 
 1907 |     |     /// Same as the previous method, but also checks supplied address against emitting contract.
 1908 |     |     function expectEmitAnonymous(address emitter) external;
 1909 |     | 
 1910 |     |     /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).
 1911 |     |     /// Call this function, then emit an event, then call a function. Internally after the call, we check if
 1912 |     |     /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).
 1913 |     |     function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;
 1914 |     | 
 1915 |     |     /// Same as the previous method, but also checks supplied address against emitting contract.
 1916 |     |     function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)
 1917 |     |         external;
 1918 |     | 
 1919 |     |     /// Prepare an expected log with all topic and data checks enabled.
 1920 |     |     /// Call this function, then emit an event, then call a function. Internally after the call, we check if
 1921 |     |     /// logs were emitted in the expected order with the expected topics and data.
 1922 |     |     function expectEmit() external;
 1923 |     | 
 1924 |     |     /// Same as the previous method, but also checks supplied address against emitting contract.
 1925 |     |     function expectEmit(address emitter) external;
 1926 |     | 
 1927 |     |     /// Expects an error on next call that starts with the revert data.
 1928 |     |     function expectPartialRevert(bytes4 revertData) external;
 1929 |     | 
 1930 |     |     /// Expects an error on next call to reverter address, that starts with the revert data.
 1931 |     |     function expectPartialRevert(bytes4 revertData, address reverter) external;
 1932 |     | 
 1933 |     |     /// Expects an error on next call with any revert data.
 1934 |     |     function expectRevert() external;
 1935 |     | 
 1936 |     |     /// Expects an error on next call that exactly matches the revert data.
 1937 |     |     function expectRevert(bytes4 revertData) external;
 1938 |     | 
 1939 |     |     /// Expects an error on next call that exactly matches the revert data.
 1940 |     |     function expectRevert(bytes calldata revertData) external;
 1941 |     | 
 1942 |     |     /// Expects an error with any revert data on next call to reverter address.
 1943 |     |     function expectRevert(address reverter) external;
 1944 |     | 
 1945 |     |     /// Expects an error from reverter address on next call, with any revert data.
 1946 |     |     function expectRevert(bytes4 revertData, address reverter) external;
 1947 |     | 
 1948 |     |     /// Expects an error from reverter address on next call, that exactly matches the revert data.
 1949 |     |     function expectRevert(bytes calldata revertData, address reverter) external;
 1950 |     | 
 1951 |     |     /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other
 1952 |     |     /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.
 1953 |     |     function expectSafeMemory(uint64 min, uint64 max) external;
 1954 |     | 
 1955 |     |     /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.
 1956 |     |     /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges
 1957 |     |     /// to the set.
 1958 |     |     function expectSafeMemoryCall(uint64 min, uint64 max) external;
 1959 |     | 
 1960 |     |     /// Marks a test as skipped. Must be called at the top level of a test.
 1961 |     |     function skip(bool skipTest) external;
 1962 |     | 
 1963 |     |     /// Marks a test as skipped with a reason. Must be called at the top level of a test.
 1964 |     |     function skip(bool skipTest, string calldata reason) external;
 1965 |     | 
 1966 |     |     /// Stops all safe memory expectation in the current subcontext.
 1967 |     |     function stopExpectSafeMemory() external;
 1968 |     | }
 1969 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/console.sol
    1 |     | // SPDX-License-Identifier: MIT
    2 |     | pragma solidity >=0.4.22 <0.9.0;
    3 |     | 
    4 |     | library console {
    5 |     |     address constant CONSOLE_ADDRESS =
    6 |     |         0x000000000000000000636F6e736F6c652e6c6f67;
    7 |     | 
    8 |     |     function _sendLogPayloadImplementation(bytes memory payload) internal view {
    9 |     |         address consoleAddress = CONSOLE_ADDRESS;
   10 |     |         /// @solidity memory-safe-assembly
   11 |     |         assembly {
   12 |     |             pop(
   13 |     |                 staticcall(
   14 |     |                     gas(),
   15 |     |                     consoleAddress,
   16 |     |                     add(payload, 32),
   17 |     |                     mload(payload),
   18 |     |                     0,
   19 |     |                     0
   20 |     |                 )
   21 |     |             )
   22 |     |         }
   23 |     |     }
   24 |     | 
   25 |     |     function _castToPure(
   26 |     |       function(bytes memory) internal view fnIn
   27 |     |     ) internal pure returns (function(bytes memory) pure fnOut) {
   28 |     |         assembly {
   29 |     |             fnOut := fnIn
   30 |     |         }
   31 |     |     }
   32 |     | 
   33 |     |     function _sendLogPayload(bytes memory payload) internal pure {
   34 |     |         _castToPure(_sendLogPayloadImplementation)(payload);
   35 |     |     }
   36 |     | 
   37 |     |     function log() internal pure {
   38 |     |         _sendLogPayload(abi.encodeWithSignature("log()"));
   39 |     |     }
   40 |     | 
   41 |     |     function logInt(int256 p0) internal pure {
   42 |     |         _sendLogPayload(abi.encodeWithSignature("log(int256)", p0));
   43 |     |     }
   44 |     | 
   45 |     |     function logUint(uint256 p0) internal pure {
   46 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256)", p0));
   47 |     |     }
   48 |     | 
   49 |     |     function logString(string memory p0) internal pure {
   50 |     |         _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
   51 |     |     }
   52 |     | 
   53 |     |     function logBool(bool p0) internal pure {
   54 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
   55 |     |     }
   56 |     | 
   57 |     |     function logAddress(address p0) internal pure {
   58 |     |         _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
   59 |     |     }
   60 |     | 
   61 |     |     function logBytes(bytes memory p0) internal pure {
   62 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
   63 |     |     }
   64 |     | 
   65 |     |     function logBytes1(bytes1 p0) internal pure {
   66 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
   67 |     |     }
   68 |     | 
   69 |     |     function logBytes2(bytes2 p0) internal pure {
   70 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
   71 |     |     }
   72 |     | 
   73 |     |     function logBytes3(bytes3 p0) internal pure {
   74 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
   75 |     |     }
   76 |     | 
   77 |     |     function logBytes4(bytes4 p0) internal pure {
   78 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
   79 |     |     }
   80 |     | 
   81 |     |     function logBytes5(bytes5 p0) internal pure {
   82 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
   83 |     |     }
   84 |     | 
   85 |     |     function logBytes6(bytes6 p0) internal pure {
   86 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
   87 |     |     }
   88 |     | 
   89 |     |     function logBytes7(bytes7 p0) internal pure {
   90 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
   91 |     |     }
   92 |     | 
   93 |     |     function logBytes8(bytes8 p0) internal pure {
   94 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
   95 |     |     }
   96 |     | 
   97 |     |     function logBytes9(bytes9 p0) internal pure {
   98 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
   99 |     |     }
  100 |     | 
  101 |     |     function logBytes10(bytes10 p0) internal pure {
  102 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
  103 |     |     }
  104 |     | 
  105 |     |     function logBytes11(bytes11 p0) internal pure {
  106 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
  107 |     |     }
  108 |     | 
  109 |     |     function logBytes12(bytes12 p0) internal pure {
  110 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
  111 |     |     }
  112 |     | 
  113 |     |     function logBytes13(bytes13 p0) internal pure {
  114 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
  115 |     |     }
  116 |     | 
  117 |     |     function logBytes14(bytes14 p0) internal pure {
  118 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
  119 |     |     }
  120 |     | 
  121 |     |     function logBytes15(bytes15 p0) internal pure {
  122 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
  123 |     |     }
  124 |     | 
  125 |     |     function logBytes16(bytes16 p0) internal pure {
  126 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
  127 |     |     }
  128 |     | 
  129 |     |     function logBytes17(bytes17 p0) internal pure {
  130 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
  131 |     |     }
  132 |     | 
  133 |     |     function logBytes18(bytes18 p0) internal pure {
  134 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
  135 |     |     }
  136 |     | 
  137 |     |     function logBytes19(bytes19 p0) internal pure {
  138 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
  139 |     |     }
  140 |     | 
  141 |     |     function logBytes20(bytes20 p0) internal pure {
  142 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
  143 |     |     }
  144 |     | 
  145 |     |     function logBytes21(bytes21 p0) internal pure {
  146 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
  147 |     |     }
  148 |     | 
  149 |     |     function logBytes22(bytes22 p0) internal pure {
  150 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
  151 |     |     }
  152 |     | 
  153 |     |     function logBytes23(bytes23 p0) internal pure {
  154 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
  155 |     |     }
  156 |     | 
  157 |     |     function logBytes24(bytes24 p0) internal pure {
  158 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
  159 |     |     }
  160 |     | 
  161 |     |     function logBytes25(bytes25 p0) internal pure {
  162 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
  163 |     |     }
  164 |     | 
  165 |     |     function logBytes26(bytes26 p0) internal pure {
  166 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
  167 |     |     }
  168 |     | 
  169 |     |     function logBytes27(bytes27 p0) internal pure {
  170 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
  171 |     |     }
  172 |     | 
  173 |     |     function logBytes28(bytes28 p0) internal pure {
  174 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
  175 |     |     }
  176 |     | 
  177 |     |     function logBytes29(bytes29 p0) internal pure {
  178 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
  179 |     |     }
  180 |     | 
  181 |     |     function logBytes30(bytes30 p0) internal pure {
  182 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
  183 |     |     }
  184 |     | 
  185 |     |     function logBytes31(bytes31 p0) internal pure {
  186 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
  187 |     |     }
  188 |     | 
  189 |     |     function logBytes32(bytes32 p0) internal pure {
  190 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
  191 |     |     }
  192 |     | 
  193 |     |     function log(uint256 p0) internal pure {
  194 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256)", p0));
  195 |     |     }
  196 |     | 
  197 |     |     function log(int256 p0) internal pure {
  198 |     |         _sendLogPayload(abi.encodeWithSignature("log(int256)", p0));
  199 |     |     }
  200 |     | 
  201 |     |     function log(string memory p0) internal pure {
  202 |     |         _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
  203 |     |     }
  204 |     | 
  205 |     |     function log(bool p0) internal pure {
  206 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
  207 |     |     }
  208 |     | 
  209 |     |     function log(address p0) internal pure {
  210 |     |         _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
  211 |     |     }
  212 |     | 
  213 |     |     function log(uint256 p0, uint256 p1) internal pure {
  214 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256)", p0, p1));
  215 |     |     }
  216 |     | 
  217 |     |     function log(uint256 p0, string memory p1) internal pure {
  218 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string)", p0, p1));
  219 |     |     }
  220 |     | 
  221 |     |     function log(uint256 p0, bool p1) internal pure {
  222 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool)", p0, p1));
  223 |     |     }
  224 |     | 
  225 |     |     function log(uint256 p0, address p1) internal pure {
  226 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address)", p0, p1));
  227 |     |     }
  228 |     | 
  229 |     |     function log(string memory p0, uint256 p1) internal pure {
  230 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256)", p0, p1));
  231 |     |     }
  232 |     | 
  233 |     |     function log(string memory p0, int256 p1) internal pure {
  234 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,int256)", p0, p1));
  235 |     |     }
  236 |     | 
  237 |     |     function log(string memory p0, string memory p1) internal pure {
  238 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
  239 |     |     }
  240 |     | 
  241 |     |     function log(string memory p0, bool p1) internal pure {
  242 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
  243 |     |     }
  244 |     | 
  245 |     |     function log(string memory p0, address p1) internal pure {
  246 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
  247 |     |     }
  248 |     | 
  249 |     |     function log(bool p0, uint256 p1) internal pure {
  250 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256)", p0, p1));
  251 |     |     }
  252 |     | 
  253 |     |     function log(bool p0, string memory p1) internal pure {
  254 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
  255 |     |     }
  256 |     | 
  257 |     |     function log(bool p0, bool p1) internal pure {
  258 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
  259 |     |     }
  260 |     | 
  261 |     |     function log(bool p0, address p1) internal pure {
  262 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
  263 |     |     }
  264 |     | 
  265 |     |     function log(address p0, uint256 p1) internal pure {
  266 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256)", p0, p1));
  267 |     |     }
  268 |     | 
  269 |     |     function log(address p0, string memory p1) internal pure {
  270 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
  271 |     |     }
  272 |     | 
  273 |     |     function log(address p0, bool p1) internal pure {
  274 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
  275 |     |     }
  276 |     | 
  277 |     |     function log(address p0, address p1) internal pure {
  278 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
  279 |     |     }
  280 |     | 
  281 |     |     function log(uint256 p0, uint256 p1, uint256 p2) internal pure {
  282 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256)", p0, p1, p2));
  283 |     |     }
  284 |     | 
  285 |     |     function log(uint256 p0, uint256 p1, string memory p2) internal pure {
  286 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string)", p0, p1, p2));
  287 |     |     }
  288 |     | 
  289 |     |     function log(uint256 p0, uint256 p1, bool p2) internal pure {
  290 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool)", p0, p1, p2));
  291 |     |     }
  292 |     | 
  293 |     |     function log(uint256 p0, uint256 p1, address p2) internal pure {
  294 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address)", p0, p1, p2));
  295 |     |     }
  296 |     | 
  297 |     |     function log(uint256 p0, string memory p1, uint256 p2) internal pure {
  298 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256)", p0, p1, p2));
  299 |     |     }
  300 |     | 
  301 |     |     function log(uint256 p0, string memory p1, string memory p2) internal pure {
  302 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string)", p0, p1, p2));
  303 |     |     }
  304 |     | 
  305 |     |     function log(uint256 p0, string memory p1, bool p2) internal pure {
  306 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool)", p0, p1, p2));
  307 |     |     }
  308 |     | 
  309 |     |     function log(uint256 p0, string memory p1, address p2) internal pure {
  310 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address)", p0, p1, p2));
  311 |     |     }
  312 |     | 
  313 |     |     function log(uint256 p0, bool p1, uint256 p2) internal pure {
  314 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256)", p0, p1, p2));
  315 |     |     }
  316 |     | 
  317 |     |     function log(uint256 p0, bool p1, string memory p2) internal pure {
  318 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string)", p0, p1, p2));
  319 |     |     }
  320 |     | 
  321 |     |     function log(uint256 p0, bool p1, bool p2) internal pure {
  322 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool)", p0, p1, p2));
  323 |     |     }
  324 |     | 
  325 |     |     function log(uint256 p0, bool p1, address p2) internal pure {
  326 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address)", p0, p1, p2));
  327 |     |     }
  328 |     | 
  329 |     |     function log(uint256 p0, address p1, uint256 p2) internal pure {
  330 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256)", p0, p1, p2));
  331 |     |     }
  332 |     | 
  333 |     |     function log(uint256 p0, address p1, string memory p2) internal pure {
  334 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string)", p0, p1, p2));
  335 |     |     }
  336 |     | 
  337 |     |     function log(uint256 p0, address p1, bool p2) internal pure {
  338 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool)", p0, p1, p2));
  339 |     |     }
  340 |     | 
  341 |     |     function log(uint256 p0, address p1, address p2) internal pure {
  342 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address)", p0, p1, p2));
  343 |     |     }
  344 |     | 
  345 |     |     function log(string memory p0, uint256 p1, uint256 p2) internal pure {
  346 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256)", p0, p1, p2));
  347 |     |     }
  348 |     | 
  349 |     |     function log(string memory p0, uint256 p1, string memory p2) internal pure {
  350 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string)", p0, p1, p2));
  351 |     |     }
  352 |     | 
  353 |     |     function log(string memory p0, uint256 p1, bool p2) internal pure {
  354 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool)", p0, p1, p2));
  355 |     |     }
  356 |     | 
  357 |     |     function log(string memory p0, uint256 p1, address p2) internal pure {
  358 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address)", p0, p1, p2));
  359 |     |     }
  360 |     | 
  361 |     |     function log(string memory p0, string memory p1, uint256 p2) internal pure {
  362 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256)", p0, p1, p2));
  363 |     |     }
  364 |     | 
  365 |     |     function log(string memory p0, string memory p1, string memory p2) internal pure {
  366 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
  367 |     |     }
  368 |     | 
  369 |     |     function log(string memory p0, string memory p1, bool p2) internal pure {
  370 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
  371 |     |     }
  372 |     | 
  373 |     |     function log(string memory p0, string memory p1, address p2) internal pure {
  374 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
  375 |     |     }
  376 |     | 
  377 |     |     function log(string memory p0, bool p1, uint256 p2) internal pure {
  378 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256)", p0, p1, p2));
  379 |     |     }
  380 |     | 
  381 |     |     function log(string memory p0, bool p1, string memory p2) internal pure {
  382 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
  383 |     |     }
  384 |     | 
  385 |     |     function log(string memory p0, bool p1, bool p2) internal pure {
  386 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
  387 |     |     }
  388 |     | 
  389 |     |     function log(string memory p0, bool p1, address p2) internal pure {
  390 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
  391 |     |     }
  392 |     | 
  393 |     |     function log(string memory p0, address p1, uint256 p2) internal pure {
  394 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256)", p0, p1, p2));
  395 |     |     }
  396 |     | 
  397 |     |     function log(string memory p0, address p1, string memory p2) internal pure {
  398 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
  399 |     |     }
  400 |     | 
  401 |     |     function log(string memory p0, address p1, bool p2) internal pure {
  402 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
  403 |     |     }
  404 |     | 
  405 |     |     function log(string memory p0, address p1, address p2) internal pure {
  406 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
  407 |     |     }
  408 |     | 
  409 |     |     function log(bool p0, uint256 p1, uint256 p2) internal pure {
  410 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256)", p0, p1, p2));
  411 |     |     }
  412 |     | 
  413 |     |     function log(bool p0, uint256 p1, string memory p2) internal pure {
  414 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string)", p0, p1, p2));
  415 |     |     }
  416 |     | 
  417 |     |     function log(bool p0, uint256 p1, bool p2) internal pure {
  418 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool)", p0, p1, p2));
  419 |     |     }
  420 |     | 
  421 |     |     function log(bool p0, uint256 p1, address p2) internal pure {
  422 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address)", p0, p1, p2));
  423 |     |     }
  424 |     | 
  425 |     |     function log(bool p0, string memory p1, uint256 p2) internal pure {
  426 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256)", p0, p1, p2));
  427 |     |     }
  428 |     | 
  429 |     |     function log(bool p0, string memory p1, string memory p2) internal pure {
  430 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
  431 |     |     }
  432 |     | 
  433 |     |     function log(bool p0, string memory p1, bool p2) internal pure {
  434 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
  435 |     |     }
  436 |     | 
  437 |     |     function log(bool p0, string memory p1, address p2) internal pure {
  438 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
  439 |     |     }
  440 |     | 
  441 |     |     function log(bool p0, bool p1, uint256 p2) internal pure {
  442 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256)", p0, p1, p2));
  443 |     |     }
  444 |     | 
  445 |     |     function log(bool p0, bool p1, string memory p2) internal pure {
  446 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
  447 |     |     }
  448 |     | 
  449 |     |     function log(bool p0, bool p1, bool p2) internal pure {
  450 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
  451 |     |     }
  452 |     | 
  453 |     |     function log(bool p0, bool p1, address p2) internal pure {
  454 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
  455 |     |     }
  456 |     | 
  457 |     |     function log(bool p0, address p1, uint256 p2) internal pure {
  458 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256)", p0, p1, p2));
  459 |     |     }
  460 |     | 
  461 |     |     function log(bool p0, address p1, string memory p2) internal pure {
  462 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
  463 |     |     }
  464 |     | 
  465 |     |     function log(bool p0, address p1, bool p2) internal pure {
  466 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
  467 |     |     }
  468 |     | 
  469 |     |     function log(bool p0, address p1, address p2) internal pure {
  470 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
  471 |     |     }
  472 |     | 
  473 |     |     function log(address p0, uint256 p1, uint256 p2) internal pure {
  474 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256)", p0, p1, p2));
  475 |     |     }
  476 |     | 
  477 |     |     function log(address p0, uint256 p1, string memory p2) internal pure {
  478 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string)", p0, p1, p2));
  479 |     |     }
  480 |     | 
  481 |     |     function log(address p0, uint256 p1, bool p2) internal pure {
  482 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool)", p0, p1, p2));
  483 |     |     }
  484 |     | 
  485 |     |     function log(address p0, uint256 p1, address p2) internal pure {
  486 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address)", p0, p1, p2));
  487 |     |     }
  488 |     | 
  489 |     |     function log(address p0, string memory p1, uint256 p2) internal pure {
  490 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256)", p0, p1, p2));
  491 |     |     }
  492 |     | 
  493 |     |     function log(address p0, string memory p1, string memory p2) internal pure {
  494 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
  495 |     |     }
  496 |     | 
  497 |     |     function log(address p0, string memory p1, bool p2) internal pure {
  498 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
  499 |     |     }
  500 |     | 
  501 |     |     function log(address p0, string memory p1, address p2) internal pure {
  502 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
  503 |     |     }
  504 |     | 
  505 |     |     function log(address p0, bool p1, uint256 p2) internal pure {
  506 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256)", p0, p1, p2));
  507 |     |     }
  508 |     | 
  509 |     |     function log(address p0, bool p1, string memory p2) internal pure {
  510 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
  511 |     |     }
  512 |     | 
  513 |     |     function log(address p0, bool p1, bool p2) internal pure {
  514 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
  515 |     |     }
  516 |     | 
  517 |     |     function log(address p0, bool p1, address p2) internal pure {
  518 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
  519 |     |     }
  520 |     | 
  521 |     |     function log(address p0, address p1, uint256 p2) internal pure {
  522 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256)", p0, p1, p2));
  523 |     |     }
  524 |     | 
  525 |     |     function log(address p0, address p1, string memory p2) internal pure {
  526 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
  527 |     |     }
  528 |     | 
  529 |     |     function log(address p0, address p1, bool p2) internal pure {
  530 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
  531 |     |     }
  532 |     | 
  533 |     |     function log(address p0, address p1, address p2) internal pure {
  534 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
  535 |     |     }
  536 |     | 
  537 |     |     function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
  538 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,uint256)", p0, p1, p2, p3));
  539 |     |     }
  540 |     | 
  541 |     |     function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {
  542 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,string)", p0, p1, p2, p3));
  543 |     |     }
  544 |     | 
  545 |     |     function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {
  546 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,bool)", p0, p1, p2, p3));
  547 |     |     }
  548 |     | 
  549 |     |     function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {
  550 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,address)", p0, p1, p2, p3));
  551 |     |     }
  552 |     | 
  553 |     |     function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {
  554 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,uint256)", p0, p1, p2, p3));
  555 |     |     }
  556 |     | 
  557 |     |     function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {
  558 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,string)", p0, p1, p2, p3));
  559 |     |     }
  560 |     | 
  561 |     |     function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {
  562 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,bool)", p0, p1, p2, p3));
  563 |     |     }
  564 |     | 
  565 |     |     function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {
  566 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,address)", p0, p1, p2, p3));
  567 |     |     }
  568 |     | 
  569 |     |     function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {
  570 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,uint256)", p0, p1, p2, p3));
  571 |     |     }
  572 |     | 
  573 |     |     function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {
  574 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,string)", p0, p1, p2, p3));
  575 |     |     }
  576 |     | 
  577 |     |     function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {
  578 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,bool)", p0, p1, p2, p3));
  579 |     |     }
  580 |     | 
  581 |     |     function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {
  582 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,address)", p0, p1, p2, p3));
  583 |     |     }
  584 |     | 
  585 |     |     function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {
  586 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,uint256)", p0, p1, p2, p3));
  587 |     |     }
  588 |     | 
  589 |     |     function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {
  590 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,string)", p0, p1, p2, p3));
  591 |     |     }
  592 |     | 
  593 |     |     function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {
  594 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,bool)", p0, p1, p2, p3));
  595 |     |     }
  596 |     | 
  597 |     |     function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {
  598 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,address)", p0, p1, p2, p3));
  599 |     |     }
  600 |     | 
  601 |     |     function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {
  602 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,uint256)", p0, p1, p2, p3));
  603 |     |     }
  604 |     | 
  605 |     |     function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {
  606 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,string)", p0, p1, p2, p3));
  607 |     |     }
  608 |     | 
  609 |     |     function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {
  610 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,bool)", p0, p1, p2, p3));
  611 |     |     }
  612 |     | 
  613 |     |     function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {
  614 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,address)", p0, p1, p2, p3));
  615 |     |     }
  616 |     | 
  617 |     |     function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {
  618 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,uint256)", p0, p1, p2, p3));
  619 |     |     }
  620 |     | 
  621 |     |     function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {
  622 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,string)", p0, p1, p2, p3));
  623 |     |     }
  624 |     | 
  625 |     |     function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {
  626 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,bool)", p0, p1, p2, p3));
  627 |     |     }
  628 |     | 
  629 |     |     function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {
  630 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,address)", p0, p1, p2, p3));
  631 |     |     }
  632 |     | 
  633 |     |     function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {
  634 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,uint256)", p0, p1, p2, p3));
  635 |     |     }
  636 |     | 
  637 |     |     function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {
  638 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,string)", p0, p1, p2, p3));
  639 |     |     }
  640 |     | 
  641 |     |     function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {
  642 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,bool)", p0, p1, p2, p3));
  643 |     |     }
  644 |     | 
  645 |     |     function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {
  646 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,address)", p0, p1, p2, p3));
  647 |     |     }
  648 |     | 
  649 |     |     function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {
  650 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,uint256)", p0, p1, p2, p3));
  651 |     |     }
  652 |     | 
  653 |     |     function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {
  654 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,string)", p0, p1, p2, p3));
  655 |     |     }
  656 |     | 
  657 |     |     function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {
  658 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,bool)", p0, p1, p2, p3));
  659 |     |     }
  660 |     | 
  661 |     |     function log(uint256 p0, string memory p1, address p2, address p3) internal pure {
  662 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,address)", p0, p1, p2, p3));
  663 |     |     }
  664 |     | 
  665 |     |     function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {
  666 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,uint256)", p0, p1, p2, p3));
  667 |     |     }
  668 |     | 
  669 |     |     function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {
  670 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,string)", p0, p1, p2, p3));
  671 |     |     }
  672 |     | 
  673 |     |     function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {
  674 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,bool)", p0, p1, p2, p3));
  675 |     |     }
  676 |     | 
  677 |     |     function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {
  678 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,address)", p0, p1, p2, p3));
  679 |     |     }
  680 |     | 
  681 |     |     function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {
  682 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,uint256)", p0, p1, p2, p3));
  683 |     |     }
  684 |     | 
  685 |     |     function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {
  686 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,string)", p0, p1, p2, p3));
  687 |     |     }
  688 |     | 
  689 |     |     function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {
  690 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,bool)", p0, p1, p2, p3));
  691 |     |     }
  692 |     | 
  693 |     |     function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {
  694 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,address)", p0, p1, p2, p3));
  695 |     |     }
  696 |     | 
  697 |     |     function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {
  698 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,uint256)", p0, p1, p2, p3));
  699 |     |     }
  700 |     | 
  701 |     |     function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {
  702 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,string)", p0, p1, p2, p3));
  703 |     |     }
  704 |     | 
  705 |     |     function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {
  706 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,bool)", p0, p1, p2, p3));
  707 |     |     }
  708 |     | 
  709 |     |     function log(uint256 p0, bool p1, bool p2, address p3) internal pure {
  710 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,address)", p0, p1, p2, p3));
  711 |     |     }
  712 |     | 
  713 |     |     function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {
  714 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,uint256)", p0, p1, p2, p3));
  715 |     |     }
  716 |     | 
  717 |     |     function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {
  718 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,string)", p0, p1, p2, p3));
  719 |     |     }
  720 |     | 
  721 |     |     function log(uint256 p0, bool p1, address p2, bool p3) internal pure {
  722 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,bool)", p0, p1, p2, p3));
  723 |     |     }
  724 |     | 
  725 |     |     function log(uint256 p0, bool p1, address p2, address p3) internal pure {
  726 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,address)", p0, p1, p2, p3));
  727 |     |     }
  728 |     | 
  729 |     |     function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {
  730 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,uint256)", p0, p1, p2, p3));
  731 |     |     }
  732 |     | 
  733 |     |     function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {
  734 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,string)", p0, p1, p2, p3));
  735 |     |     }
  736 |     | 
  737 |     |     function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {
  738 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,bool)", p0, p1, p2, p3));
  739 |     |     }
  740 |     | 
  741 |     |     function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {
  742 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,address)", p0, p1, p2, p3));
  743 |     |     }
  744 |     | 
  745 |     |     function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {
  746 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,uint256)", p0, p1, p2, p3));
  747 |     |     }
  748 |     | 
  749 |     |     function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {
  750 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,string)", p0, p1, p2, p3));
  751 |     |     }
  752 |     | 
  753 |     |     function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {
  754 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,bool)", p0, p1, p2, p3));
  755 |     |     }
  756 |     | 
  757 |     |     function log(uint256 p0, address p1, string memory p2, address p3) internal pure {
  758 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,address)", p0, p1, p2, p3));
  759 |     |     }
  760 |     | 
  761 |     |     function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {
  762 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,uint256)", p0, p1, p2, p3));
  763 |     |     }
  764 |     | 
  765 |     |     function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {
  766 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,string)", p0, p1, p2, p3));
  767 |     |     }
  768 |     | 
  769 |     |     function log(uint256 p0, address p1, bool p2, bool p3) internal pure {
  770 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,bool)", p0, p1, p2, p3));
  771 |     |     }
  772 |     | 
  773 |     |     function log(uint256 p0, address p1, bool p2, address p3) internal pure {
  774 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,address)", p0, p1, p2, p3));
  775 |     |     }
  776 |     | 
  777 |     |     function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {
  778 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,uint256)", p0, p1, p2, p3));
  779 |     |     }
  780 |     | 
  781 |     |     function log(uint256 p0, address p1, address p2, string memory p3) internal pure {
  782 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,string)", p0, p1, p2, p3));
  783 |     |     }
  784 |     | 
  785 |     |     function log(uint256 p0, address p1, address p2, bool p3) internal pure {
  786 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,bool)", p0, p1, p2, p3));
  787 |     |     }
  788 |     | 
  789 |     |     function log(uint256 p0, address p1, address p2, address p3) internal pure {
  790 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,address)", p0, p1, p2, p3));
  791 |     |     }
  792 |     | 
  793 |     |     function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
  794 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,uint256)", p0, p1, p2, p3));
  795 |     |     }
  796 |     | 
  797 |     |     function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {
  798 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,string)", p0, p1, p2, p3));
  799 |     |     }
  800 |     | 
  801 |     |     function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {
  802 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,bool)", p0, p1, p2, p3));
  803 |     |     }
  804 |     | 
  805 |     |     function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {
  806 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,address)", p0, p1, p2, p3));
  807 |     |     }
  808 |     | 
  809 |     |     function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {
  810 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,uint256)", p0, p1, p2, p3));
  811 |     |     }
  812 |     | 
  813 |     |     function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {
  814 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,string)", p0, p1, p2, p3));
  815 |     |     }
  816 |     | 
  817 |     |     function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {
  818 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,bool)", p0, p1, p2, p3));
  819 |     |     }
  820 |     | 
  821 |     |     function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {
  822 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,address)", p0, p1, p2, p3));
  823 |     |     }
  824 |     | 
  825 |     |     function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {
  826 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,uint256)", p0, p1, p2, p3));
  827 |     |     }
  828 |     | 
  829 |     |     function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {
  830 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,string)", p0, p1, p2, p3));
  831 |     |     }
  832 |     | 
  833 |     |     function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {
  834 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,bool)", p0, p1, p2, p3));
  835 |     |     }
  836 |     | 
  837 |     |     function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {
  838 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,address)", p0, p1, p2, p3));
  839 |     |     }
  840 |     | 
  841 |     |     function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {
  842 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,uint256)", p0, p1, p2, p3));
  843 |     |     }
  844 |     | 
  845 |     |     function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {
  846 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,string)", p0, p1, p2, p3));
  847 |     |     }
  848 |     | 
  849 |     |     function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {
  850 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,bool)", p0, p1, p2, p3));
  851 |     |     }
  852 |     | 
  853 |     |     function log(string memory p0, uint256 p1, address p2, address p3) internal pure {
  854 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,address)", p0, p1, p2, p3));
  855 |     |     }
  856 |     | 
  857 |     |     function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {
  858 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,uint256)", p0, p1, p2, p3));
  859 |     |     }
  860 |     | 
  861 |     |     function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {
  862 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,string)", p0, p1, p2, p3));
  863 |     |     }
  864 |     | 
  865 |     |     function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {
  866 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,bool)", p0, p1, p2, p3));
  867 |     |     }
  868 |     | 
  869 |     |     function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {
  870 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,address)", p0, p1, p2, p3));
  871 |     |     }
  872 |     | 
  873 |     |     function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {
  874 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint256)", p0, p1, p2, p3));
  875 |     |     }
  876 |     | 
  877 |     |     function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {
  878 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
  879 |     |     }
  880 |     | 
  881 |     |     function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {
  882 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
  883 |     |     }
  884 |     | 
  885 |     |     function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {
  886 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
  887 |     |     }
  888 |     | 
  889 |     |     function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {
  890 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint256)", p0, p1, p2, p3));
  891 |     |     }
  892 |     | 
  893 |     |     function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {
  894 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
  895 |     |     }
  896 |     | 
  897 |     |     function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {
  898 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
  899 |     |     }
  900 |     | 
  901 |     |     function log(string memory p0, string memory p1, bool p2, address p3) internal pure {
  902 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
  903 |     |     }
  904 |     | 
  905 |     |     function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {
  906 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint256)", p0, p1, p2, p3));
  907 |     |     }
  908 |     | 
  909 |     |     function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {
  910 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
  911 |     |     }
  912 |     | 
  913 |     |     function log(string memory p0, string memory p1, address p2, bool p3) internal pure {
  914 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
  915 |     |     }
  916 |     | 
  917 |     |     function log(string memory p0, string memory p1, address p2, address p3) internal pure {
  918 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
  919 |     |     }
  920 |     | 
  921 |     |     function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {
  922 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,uint256)", p0, p1, p2, p3));
  923 |     |     }
  924 |     | 
  925 |     |     function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {
  926 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,string)", p0, p1, p2, p3));
  927 |     |     }
  928 |     | 
  929 |     |     function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {
  930 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,bool)", p0, p1, p2, p3));
  931 |     |     }
  932 |     | 
  933 |     |     function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {
  934 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,address)", p0, p1, p2, p3));
  935 |     |     }
  936 |     | 
  937 |     |     function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {
  938 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint256)", p0, p1, p2, p3));
  939 |     |     }
  940 |     | 
  941 |     |     function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {
  942 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
  943 |     |     }
  944 |     | 
  945 |     |     function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {
  946 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
  947 |     |     }
  948 |     | 
  949 |     |     function log(string memory p0, bool p1, string memory p2, address p3) internal pure {
  950 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
  951 |     |     }
  952 |     | 
  953 |     |     function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {
  954 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint256)", p0, p1, p2, p3));
  955 |     |     }
  956 |     | 
  957 |     |     function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {
  958 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
  959 |     |     }
  960 |     | 
  961 |     |     function log(string memory p0, bool p1, bool p2, bool p3) internal pure {
  962 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
  963 |     |     }
  964 |     | 
  965 |     |     function log(string memory p0, bool p1, bool p2, address p3) internal pure {
  966 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
  967 |     |     }
  968 |     | 
  969 |     |     function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {
  970 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint256)", p0, p1, p2, p3));
  971 |     |     }
  972 |     | 
  973 |     |     function log(string memory p0, bool p1, address p2, string memory p3) internal pure {
  974 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
  975 |     |     }
  976 |     | 
  977 |     |     function log(string memory p0, bool p1, address p2, bool p3) internal pure {
  978 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
  979 |     |     }
  980 |     | 
  981 |     |     function log(string memory p0, bool p1, address p2, address p3) internal pure {
  982 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
  983 |     |     }
  984 |     | 
  985 |     |     function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {
  986 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,uint256)", p0, p1, p2, p3));
  987 |     |     }
  988 |     | 
  989 |     |     function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {
  990 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,string)", p0, p1, p2, p3));
  991 |     |     }
  992 |     | 
  993 |     |     function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {
  994 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,bool)", p0, p1, p2, p3));
  995 |     |     }
  996 |     | 
  997 |     |     function log(string memory p0, address p1, uint256 p2, address p3) internal pure {
  998 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,address)", p0, p1, p2, p3));
  999 |     |     }
 1000 |     | 
 1001 |     |     function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {
 1002 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint256)", p0, p1, p2, p3));
 1003 |     |     }
 1004 |     | 
 1005 |     |     function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {
 1006 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
 1007 |     |     }
 1008 |     | 
 1009 |     |     function log(string memory p0, address p1, string memory p2, bool p3) internal pure {
 1010 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
 1011 |     |     }
 1012 |     | 
 1013 |     |     function log(string memory p0, address p1, string memory p2, address p3) internal pure {
 1014 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
 1015 |     |     }
 1016 |     | 
 1017 |     |     function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {
 1018 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint256)", p0, p1, p2, p3));
 1019 |     |     }
 1020 |     | 
 1021 |     |     function log(string memory p0, address p1, bool p2, string memory p3) internal pure {
 1022 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
 1023 |     |     }
 1024 |     | 
 1025 |     |     function log(string memory p0, address p1, bool p2, bool p3) internal pure {
 1026 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
 1027 |     |     }
 1028 |     | 
 1029 |     |     function log(string memory p0, address p1, bool p2, address p3) internal pure {
 1030 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
 1031 |     |     }
 1032 |     | 
 1033 |     |     function log(string memory p0, address p1, address p2, uint256 p3) internal pure {
 1034 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint256)", p0, p1, p2, p3));
 1035 |     |     }
 1036 |     | 
 1037 |     |     function log(string memory p0, address p1, address p2, string memory p3) internal pure {
 1038 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
 1039 |     |     }
 1040 |     | 
 1041 |     |     function log(string memory p0, address p1, address p2, bool p3) internal pure {
 1042 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
 1043 |     |     }
 1044 |     | 
 1045 |     |     function log(string memory p0, address p1, address p2, address p3) internal pure {
 1046 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
 1047 |     |     }
 1048 |     | 
 1049 |     |     function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
 1050 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,uint256)", p0, p1, p2, p3));
 1051 |     |     }
 1052 |     | 
 1053 |     |     function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {
 1054 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,string)", p0, p1, p2, p3));
 1055 |     |     }
 1056 |     | 
 1057 |     |     function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {
 1058 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,bool)", p0, p1, p2, p3));
 1059 |     |     }
 1060 |     | 
 1061 |     |     function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {
 1062 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,address)", p0, p1, p2, p3));
 1063 |     |     }
 1064 |     | 
 1065 |     |     function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {
 1066 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,uint256)", p0, p1, p2, p3));
 1067 |     |     }
 1068 |     | 
 1069 |     |     function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {
 1070 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,string)", p0, p1, p2, p3));
 1071 |     |     }
 1072 |     | 
 1073 |     |     function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {
 1074 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,bool)", p0, p1, p2, p3));
 1075 |     |     }
 1076 |     | 
 1077 |     |     function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {
 1078 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,address)", p0, p1, p2, p3));
 1079 |     |     }
 1080 |     | 
 1081 |     |     function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {
 1082 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,uint256)", p0, p1, p2, p3));
 1083 |     |     }
 1084 |     | 
 1085 |     |     function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {
 1086 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,string)", p0, p1, p2, p3));
 1087 |     |     }
 1088 |     | 
 1089 |     |     function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {
 1090 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,bool)", p0, p1, p2, p3));
 1091 |     |     }
 1092 |     | 
 1093 |     |     function log(bool p0, uint256 p1, bool p2, address p3) internal pure {
 1094 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,address)", p0, p1, p2, p3));
 1095 |     |     }
 1096 |     | 
 1097 |     |     function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {
 1098 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,uint256)", p0, p1, p2, p3));
 1099 |     |     }
 1100 |     | 
 1101 |     |     function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {
 1102 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,string)", p0, p1, p2, p3));
 1103 |     |     }
 1104 |     | 
 1105 |     |     function log(bool p0, uint256 p1, address p2, bool p3) internal pure {
 1106 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,bool)", p0, p1, p2, p3));
 1107 |     |     }
 1108 |     | 
 1109 |     |     function log(bool p0, uint256 p1, address p2, address p3) internal pure {
 1110 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,address)", p0, p1, p2, p3));
 1111 |     |     }
 1112 |     | 
 1113 |     |     function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {
 1114 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,uint256)", p0, p1, p2, p3));
 1115 |     |     }
 1116 |     | 
 1117 |     |     function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {
 1118 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,string)", p0, p1, p2, p3));
 1119 |     |     }
 1120 |     | 
 1121 |     |     function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {
 1122 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,bool)", p0, p1, p2, p3));
 1123 |     |     }
 1124 |     | 
 1125 |     |     function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {
 1126 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,address)", p0, p1, p2, p3));
 1127 |     |     }
 1128 |     | 
 1129 |     |     function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {
 1130 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint256)", p0, p1, p2, p3));
 1131 |     |     }
 1132 |     | 
 1133 |     |     function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {
 1134 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
 1135 |     |     }
 1136 |     | 
 1137 |     |     function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {
 1138 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
 1139 |     |     }
 1140 |     | 
 1141 |     |     function log(bool p0, string memory p1, string memory p2, address p3) internal pure {
 1142 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
 1143 |     |     }
 1144 |     | 
 1145 |     |     function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {
 1146 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint256)", p0, p1, p2, p3));
 1147 |     |     }
 1148 |     | 
 1149 |     |     function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {
 1150 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
 1151 |     |     }
 1152 |     | 
 1153 |     |     function log(bool p0, string memory p1, bool p2, bool p3) internal pure {
 1154 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
 1155 |     |     }
 1156 |     | 
 1157 |     |     function log(bool p0, string memory p1, bool p2, address p3) internal pure {
 1158 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
 1159 |     |     }
 1160 |     | 
 1161 |     |     function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {
 1162 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint256)", p0, p1, p2, p3));
 1163 |     |     }
 1164 |     | 
 1165 |     |     function log(bool p0, string memory p1, address p2, string memory p3) internal pure {
 1166 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
 1167 |     |     }
 1168 |     | 
 1169 |     |     function log(bool p0, string memory p1, address p2, bool p3) internal pure {
 1170 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
 1171 |     |     }
 1172 |     | 
 1173 |     |     function log(bool p0, string memory p1, address p2, address p3) internal pure {
 1174 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
 1175 |     |     }
 1176 |     | 
 1177 |     |     function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {
 1178 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,uint256)", p0, p1, p2, p3));
 1179 |     |     }
 1180 |     | 
 1181 |     |     function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {
 1182 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,string)", p0, p1, p2, p3));
 1183 |     |     }
 1184 |     | 
 1185 |     |     function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {
 1186 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,bool)", p0, p1, p2, p3));
 1187 |     |     }
 1188 |     | 
 1189 |     |     function log(bool p0, bool p1, uint256 p2, address p3) internal pure {
 1190 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,address)", p0, p1, p2, p3));
 1191 |     |     }
 1192 |     | 
 1193 |     |     function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {
 1194 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint256)", p0, p1, p2, p3));
 1195 |     |     }
 1196 |     | 
 1197 |     |     function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {
 1198 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
 1199 |     |     }
 1200 |     | 
 1201 |     |     function log(bool p0, bool p1, string memory p2, bool p3) internal pure {
 1202 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
 1203 |     |     }
 1204 |     | 
 1205 |     |     function log(bool p0, bool p1, string memory p2, address p3) internal pure {
 1206 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
 1207 |     |     }
 1208 |     | 
 1209 |     |     function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {
 1210 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint256)", p0, p1, p2, p3));
 1211 |     |     }
 1212 |     | 
 1213 |     |     function log(bool p0, bool p1, bool p2, string memory p3) internal pure {
 1214 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
 1215 |     |     }
 1216 |     | 
 1217 |     |     function log(bool p0, bool p1, bool p2, bool p3) internal pure {
 1218 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
 1219 |     |     }
 1220 |     | 
 1221 |     |     function log(bool p0, bool p1, bool p2, address p3) internal pure {
 1222 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
 1223 |     |     }
 1224 |     | 
 1225 |     |     function log(bool p0, bool p1, address p2, uint256 p3) internal pure {
 1226 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint256)", p0, p1, p2, p3));
 1227 |     |     }
 1228 |     | 
 1229 |     |     function log(bool p0, bool p1, address p2, string memory p3) internal pure {
 1230 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
 1231 |     |     }
 1232 |     | 
 1233 |     |     function log(bool p0, bool p1, address p2, bool p3) internal pure {
 1234 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
 1235 |     |     }
 1236 |     | 
 1237 |     |     function log(bool p0, bool p1, address p2, address p3) internal pure {
 1238 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
 1239 |     |     }
 1240 |     | 
 1241 |     |     function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {
 1242 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,uint256)", p0, p1, p2, p3));
 1243 |     |     }
 1244 |     | 
 1245 |     |     function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {
 1246 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,string)", p0, p1, p2, p3));
 1247 |     |     }
 1248 |     | 
 1249 |     |     function log(bool p0, address p1, uint256 p2, bool p3) internal pure {
 1250 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,bool)", p0, p1, p2, p3));
 1251 |     |     }
 1252 |     | 
 1253 |     |     function log(bool p0, address p1, uint256 p2, address p3) internal pure {
 1254 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,address)", p0, p1, p2, p3));
 1255 |     |     }
 1256 |     | 
 1257 |     |     function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {
 1258 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint256)", p0, p1, p2, p3));
 1259 |     |     }
 1260 |     | 
 1261 |     |     function log(bool p0, address p1, string memory p2, string memory p3) internal pure {
 1262 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
 1263 |     |     }
 1264 |     | 
 1265 |     |     function log(bool p0, address p1, string memory p2, bool p3) internal pure {
 1266 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
 1267 |     |     }
 1268 |     | 
 1269 |     |     function log(bool p0, address p1, string memory p2, address p3) internal pure {
 1270 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
 1271 |     |     }
 1272 |     | 
 1273 |     |     function log(bool p0, address p1, bool p2, uint256 p3) internal pure {
 1274 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint256)", p0, p1, p2, p3));
 1275 |     |     }
 1276 |     | 
 1277 |     |     function log(bool p0, address p1, bool p2, string memory p3) internal pure {
 1278 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
 1279 |     |     }
 1280 |     | 
 1281 |     |     function log(bool p0, address p1, bool p2, bool p3) internal pure {
 1282 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
 1283 |     |     }
 1284 |     | 
 1285 |     |     function log(bool p0, address p1, bool p2, address p3) internal pure {
 1286 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
 1287 |     |     }
 1288 |     | 
 1289 |     |     function log(bool p0, address p1, address p2, uint256 p3) internal pure {
 1290 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint256)", p0, p1, p2, p3));
 1291 |     |     }
 1292 |     | 
 1293 |     |     function log(bool p0, address p1, address p2, string memory p3) internal pure {
 1294 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
 1295 |     |     }
 1296 |     | 
 1297 |     |     function log(bool p0, address p1, address p2, bool p3) internal pure {
 1298 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
 1299 |     |     }
 1300 |     | 
 1301 |     |     function log(bool p0, address p1, address p2, address p3) internal pure {
 1302 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
 1303 |     |     }
 1304 |     | 
 1305 |     |     function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
 1306 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,uint256)", p0, p1, p2, p3));
 1307 |     |     }
 1308 |     | 
 1309 |     |     function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {
 1310 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,string)", p0, p1, p2, p3));
 1311 |     |     }
 1312 |     | 
 1313 |     |     function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {
 1314 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,bool)", p0, p1, p2, p3));
 1315 |     |     }
 1316 |     | 
 1317 |     |     function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {
 1318 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,address)", p0, p1, p2, p3));
 1319 |     |     }
 1320 |     | 
 1321 |     |     function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {
 1322 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,uint256)", p0, p1, p2, p3));
 1323 |     |     }
 1324 |     | 
 1325 |     |     function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {
 1326 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,string)", p0, p1, p2, p3));
 1327 |     |     }
 1328 |     | 
 1329 |     |     function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {
 1330 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,bool)", p0, p1, p2, p3));
 1331 |     |     }
 1332 |     | 
 1333 |     |     function log(address p0, uint256 p1, string memory p2, address p3) internal pure {
 1334 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,address)", p0, p1, p2, p3));
 1335 |     |     }
 1336 |     | 
 1337 |     |     function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {
 1338 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,uint256)", p0, p1, p2, p3));
 1339 |     |     }
 1340 |     | 
 1341 |     |     function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {
 1342 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,string)", p0, p1, p2, p3));
 1343 |     |     }
 1344 |     | 
 1345 |     |     function log(address p0, uint256 p1, bool p2, bool p3) internal pure {
 1346 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,bool)", p0, p1, p2, p3));
 1347 |     |     }
 1348 |     | 
 1349 |     |     function log(address p0, uint256 p1, bool p2, address p3) internal pure {
 1350 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,address)", p0, p1, p2, p3));
 1351 |     |     }
 1352 |     | 
 1353 |     |     function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {
 1354 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,uint256)", p0, p1, p2, p3));
 1355 |     |     }
 1356 |     | 
 1357 |     |     function log(address p0, uint256 p1, address p2, string memory p3) internal pure {
 1358 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,string)", p0, p1, p2, p3));
 1359 |     |     }
 1360 |     | 
 1361 |     |     function log(address p0, uint256 p1, address p2, bool p3) internal pure {
 1362 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,bool)", p0, p1, p2, p3));
 1363 |     |     }
 1364 |     | 
 1365 |     |     function log(address p0, uint256 p1, address p2, address p3) internal pure {
 1366 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,address)", p0, p1, p2, p3));
 1367 |     |     }
 1368 |     | 
 1369 |     |     function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {
 1370 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,uint256)", p0, p1, p2, p3));
 1371 |     |     }
 1372 |     | 
 1373 |     |     function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {
 1374 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,string)", p0, p1, p2, p3));
 1375 |     |     }
 1376 |     | 
 1377 |     |     function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {
 1378 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,bool)", p0, p1, p2, p3));
 1379 |     |     }
 1380 |     | 
 1381 |     |     function log(address p0, string memory p1, uint256 p2, address p3) internal pure {
 1382 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,address)", p0, p1, p2, p3));
 1383 |     |     }
 1384 |     | 
 1385 |     |     function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {
 1386 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint256)", p0, p1, p2, p3));
 1387 |     |     }
 1388 |     | 
 1389 |     |     function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {
 1390 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
 1391 |     |     }
 1392 |     | 
 1393 |     |     function log(address p0, string memory p1, string memory p2, bool p3) internal pure {
 1394 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
 1395 |     |     }
 1396 |     | 
 1397 |     |     function log(address p0, string memory p1, string memory p2, address p3) internal pure {
 1398 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
 1399 |     |     }
 1400 |     | 
 1401 |     |     function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {
 1402 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint256)", p0, p1, p2, p3));
 1403 |     |     }
 1404 |     | 
 1405 |     |     function log(address p0, string memory p1, bool p2, string memory p3) internal pure {
 1406 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
 1407 |     |     }
 1408 |     | 
 1409 |     |     function log(address p0, string memory p1, bool p2, bool p3) internal pure {
 1410 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
 1411 |     |     }
 1412 |     | 
 1413 |     |     function log(address p0, string memory p1, bool p2, address p3) internal pure {
 1414 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
 1415 |     |     }
 1416 |     | 
 1417 |     |     function log(address p0, string memory p1, address p2, uint256 p3) internal pure {
 1418 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint256)", p0, p1, p2, p3));
 1419 |     |     }
 1420 |     | 
 1421 |     |     function log(address p0, string memory p1, address p2, string memory p3) internal pure {
 1422 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
 1423 |     |     }
 1424 |     | 
 1425 |     |     function log(address p0, string memory p1, address p2, bool p3) internal pure {
 1426 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
 1427 |     |     }
 1428 |     | 
 1429 |     |     function log(address p0, string memory p1, address p2, address p3) internal pure {
 1430 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
 1431 |     |     }
 1432 |     | 
 1433 |     |     function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {
 1434 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,uint256)", p0, p1, p2, p3));
 1435 |     |     }
 1436 |     | 
 1437 |     |     function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {
 1438 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,string)", p0, p1, p2, p3));
 1439 |     |     }
 1440 |     | 
 1441 |     |     function log(address p0, bool p1, uint256 p2, bool p3) internal pure {
 1442 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,bool)", p0, p1, p2, p3));
 1443 |     |     }
 1444 |     | 
 1445 |     |     function log(address p0, bool p1, uint256 p2, address p3) internal pure {
 1446 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,address)", p0, p1, p2, p3));
 1447 |     |     }
 1448 |     | 
 1449 |     |     function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {
 1450 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint256)", p0, p1, p2, p3));
 1451 |     |     }
 1452 |     | 
 1453 |     |     function log(address p0, bool p1, string memory p2, string memory p3) internal pure {
 1454 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
 1455 |     |     }
 1456 |     | 
 1457 |     |     function log(address p0, bool p1, string memory p2, bool p3) internal pure {
 1458 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
 1459 |     |     }
 1460 |     | 
 1461 |     |     function log(address p0, bool p1, string memory p2, address p3) internal pure {
 1462 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
 1463 |     |     }
 1464 |     | 
 1465 |     |     function log(address p0, bool p1, bool p2, uint256 p3) internal pure {
 1466 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint256)", p0, p1, p2, p3));
 1467 |     |     }
 1468 |     | 
 1469 |     |     function log(address p0, bool p1, bool p2, string memory p3) internal pure {
 1470 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
 1471 |     |     }
 1472 |     | 
 1473 |     |     function log(address p0, bool p1, bool p2, bool p3) internal pure {
 1474 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
 1475 |     |     }
 1476 |     | 
 1477 |     |     function log(address p0, bool p1, bool p2, address p3) internal pure {
 1478 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
 1479 |     |     }
 1480 |     | 
 1481 |     |     function log(address p0, bool p1, address p2, uint256 p3) internal pure {
 1482 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint256)", p0, p1, p2, p3));
 1483 |     |     }
 1484 |     | 
 1485 |     |     function log(address p0, bool p1, address p2, string memory p3) internal pure {
 1486 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
 1487 |     |     }
 1488 |     | 
 1489 |     |     function log(address p0, bool p1, address p2, bool p3) internal pure {
 1490 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
 1491 |     |     }
 1492 |     | 
 1493 |     |     function log(address p0, bool p1, address p2, address p3) internal pure {
 1494 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
 1495 |     |     }
 1496 |     | 
 1497 |     |     function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {
 1498 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,uint256)", p0, p1, p2, p3));
 1499 |     |     }
 1500 |     | 
 1501 |     |     function log(address p0, address p1, uint256 p2, string memory p3) internal pure {
 1502 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,string)", p0, p1, p2, p3));
 1503 |     |     }
 1504 |     | 
 1505 |     |     function log(address p0, address p1, uint256 p2, bool p3) internal pure {
 1506 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,bool)", p0, p1, p2, p3));
 1507 |     |     }
 1508 |     | 
 1509 |     |     function log(address p0, address p1, uint256 p2, address p3) internal pure {
 1510 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,address)", p0, p1, p2, p3));
 1511 |     |     }
 1512 |     | 
 1513 |     |     function log(address p0, address p1, string memory p2, uint256 p3) internal pure {
 1514 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint256)", p0, p1, p2, p3));
 1515 |     |     }
 1516 |     | 
 1517 |     |     function log(address p0, address p1, string memory p2, string memory p3) internal pure {
 1518 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
 1519 |     |     }
 1520 |     | 
 1521 |     |     function log(address p0, address p1, string memory p2, bool p3) internal pure {
 1522 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
 1523 |     |     }
 1524 |     | 
 1525 |     |     function log(address p0, address p1, string memory p2, address p3) internal pure {
 1526 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
 1527 |     |     }
 1528 |     | 
 1529 |     |     function log(address p0, address p1, bool p2, uint256 p3) internal pure {
 1530 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint256)", p0, p1, p2, p3));
 1531 |     |     }
 1532 |     | 
 1533 |     |     function log(address p0, address p1, bool p2, string memory p3) internal pure {
 1534 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
 1535 |     |     }
 1536 |     | 
 1537 |     |     function log(address p0, address p1, bool p2, bool p3) internal pure {
 1538 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
 1539 |     |     }
 1540 |     | 
 1541 |     |     function log(address p0, address p1, bool p2, address p3) internal pure {
 1542 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
 1543 |     |     }
 1544 |     | 
 1545 |     |     function log(address p0, address p1, address p2, uint256 p3) internal pure {
 1546 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint256)", p0, p1, p2, p3));
 1547 |     |     }
 1548 |     | 
 1549 |     |     function log(address p0, address p1, address p2, string memory p3) internal pure {
 1550 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
 1551 |     |     }
 1552 |     | 
 1553 |     |     function log(address p0, address p1, address p2, bool p3) internal pure {
 1554 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
 1555 |     |     }
 1556 |     | 
 1557 |     |     function log(address p0, address p1, address p2, address p3) internal pure {
 1558 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
 1559 |     |     }
 1560 |     | }
 1561 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/console2.sol
 1 |     | // SPDX-License-Identifier: MIT
 2 |     | pragma solidity >=0.4.22 <0.9.0;
 3 |     | 
 4 |     | import {console as console2} from "./console.sol";
 5 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/interfaces/IERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2;
  3 |     | 
  4 |     | interface IERC165 {
  5 |     |     /// @notice Query if a contract implements an interface
  6 |     |     /// @param interfaceID The interface identifier, as specified in ERC-165
  7 |     |     /// @dev Interface identification is specified in ERC-165. This function
  8 |     |     /// uses less than 30,000 gas.
  9 |     |     /// @return `true` if the contract implements `interfaceID` and
 10 |     |     /// `interfaceID` is not 0xffffffff, `false` otherwise
 11 |     |     function supportsInterface(bytes4 interfaceID) external view returns (bool);
 12 |     | }
 13 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/interfaces/IERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2;
  3 |     | 
  4 |     | /// @dev Interface of the ERC20 standard as defined in the EIP.
  5 |     | /// @dev This includes the optional name, symbol, and decimals metadata.
  6 |     | interface IERC20 {
  7 |     |     /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).
  8 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
  9 |     | 
 10 |     |     /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`
 11 |     |     /// is the new allowance.
 12 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 13 |     | 
 14 |     |     /// @notice Returns the amount of tokens in existence.
 15 |     |     function totalSupply() external view returns (uint256);
 16 |     | 
 17 |     |     /// @notice Returns the amount of tokens owned by `account`.
 18 |     |     function balanceOf(address account) external view returns (uint256);
 19 |     | 
 20 |     |     /// @notice Moves `amount` tokens from the caller's account to `to`.
 21 |     |     function transfer(address to, uint256 amount) external returns (bool);
 22 |     | 
 23 |     |     /// @notice Returns the remaining number of tokens that `spender` is allowed
 24 |     |     /// to spend on behalf of `owner`
 25 |     |     function allowance(address owner, address spender) external view returns (uint256);
 26 |     | 
 27 |     |     /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.
 28 |     |     /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 29 |     |     function approve(address spender, uint256 amount) external returns (bool);
 30 |     | 
 31 |     |     /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.
 32 |     |     /// `amount` is then deducted from the caller's allowance.
 33 |     |     function transferFrom(address from, address to, uint256 amount) external returns (bool);
 34 |     | 
 35 |     |     /// @notice Returns the name of the token.
 36 |     |     function name() external view returns (string memory);
 37 |     | 
 38 |     |     /// @notice Returns the symbol of the token.
 39 |     |     function symbol() external view returns (string memory);
 40 |     | 
 41 |     |     /// @notice Returns the decimals places of the token.
 42 |     |     function decimals() external view returns (uint8);
 43 |     | }
 44 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/interfaces/IERC721.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2;
   3 |     | 
   4 |     | import "./IERC165.sol";
   5 |     | 
   6 |     | /// @title ERC-721 Non-Fungible Token Standard
   7 |     | /// @dev See https://eips.ethereum.org/EIPS/eip-721
   8 |     | /// Note: the ERC-165 identifier for this interface is 0x80ac58cd.
   9 |     | interface IERC721 is IERC165 {
  10 |     |     /// @dev This emits when ownership of any NFT changes by any mechanism.
  11 |     |     /// This event emits when NFTs are created (`from` == 0) and destroyed
  12 |     |     /// (`to` == 0). Exception: during contract creation, any number of NFTs
  13 |     |     /// may be created and assigned without emitting Transfer. At the time of
  14 |     |     /// any transfer, the approved address for that NFT (if any) is reset to none.
  15 |     |     event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
  16 |     | 
  17 |     |     /// @dev This emits when the approved address for an NFT is changed or
  18 |     |     /// reaffirmed. The zero address indicates there is no approved address.
  19 |     |     /// When a Transfer event emits, this also indicates that the approved
  20 |     |     /// address for that NFT (if any) is reset to none.
  21 |     |     event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
  22 |     | 
  23 |     |     /// @dev This emits when an operator is enabled or disabled for an owner.
  24 |     |     /// The operator can manage all NFTs of the owner.
  25 |     |     event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
  26 |     | 
  27 |     |     /// @notice Count all NFTs assigned to an owner
  28 |     |     /// @dev NFTs assigned to the zero address are considered invalid, and this
  29 |     |     /// function throws for queries about the zero address.
  30 |     |     /// @param _owner An address for whom to query the balance
  31 |     |     /// @return The number of NFTs owned by `_owner`, possibly zero
  32 |     |     function balanceOf(address _owner) external view returns (uint256);
  33 |     | 
  34 |     |     /// @notice Find the owner of an NFT
  35 |     |     /// @dev NFTs assigned to zero address are considered invalid, and queries
  36 |     |     /// about them do throw.
  37 |     |     /// @param _tokenId The identifier for an NFT
  38 |     |     /// @return The address of the owner of the NFT
  39 |     |     function ownerOf(uint256 _tokenId) external view returns (address);
  40 |     | 
  41 |     |     /// @notice Transfers the ownership of an NFT from one address to another address
  42 |     |     /// @dev Throws unless `msg.sender` is the current owner, an authorized
  43 |     |     /// operator, or the approved address for this NFT. Throws if `_from` is
  44 |     |     /// not the current owner. Throws if `_to` is the zero address. Throws if
  45 |     |     /// `_tokenId` is not a valid NFT. When transfer is complete, this function
  46 |     |     /// checks if `_to` is a smart contract (code size > 0). If so, it calls
  47 |     |     /// `onERC721Received` on `_to` and throws if the return value is not
  48 |     |     /// `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.
  49 |     |     /// @param _from The current owner of the NFT
  50 |     |     /// @param _to The new owner
  51 |     |     /// @param _tokenId The NFT to transfer
  52 |     |     /// @param data Additional data with no specified format, sent in call to `_to`
  53 |     |     function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;
  54 |     | 
  55 |     |     /// @notice Transfers the ownership of an NFT from one address to another address
  56 |     |     /// @dev This works identically to the other function with an extra data parameter,
  57 |     |     /// except this function just sets data to "".
  58 |     |     /// @param _from The current owner of the NFT
  59 |     |     /// @param _to The new owner
  60 |     |     /// @param _tokenId The NFT to transfer
  61 |     |     function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;
  62 |     | 
  63 |     |     /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
  64 |     |     /// TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
  65 |     |     /// THEY MAY BE PERMANENTLY LOST
  66 |     |     /// @dev Throws unless `msg.sender` is the current owner, an authorized
  67 |     |     /// operator, or the approved address for this NFT. Throws if `_from` is
  68 |     |     /// not the current owner. Throws if `_to` is the zero address. Throws if
  69 |     |     /// `_tokenId` is not a valid NFT.
  70 |     |     /// @param _from The current owner of the NFT
  71 |     |     /// @param _to The new owner
  72 |     |     /// @param _tokenId The NFT to transfer
  73 |     |     function transferFrom(address _from, address _to, uint256 _tokenId) external payable;
  74 |     | 
  75 |     |     /// @notice Change or reaffirm the approved address for an NFT
  76 |     |     /// @dev The zero address indicates there is no approved address.
  77 |     |     /// Throws unless `msg.sender` is the current NFT owner, or an authorized
  78 |     |     /// operator of the current owner.
  79 |     |     /// @param _approved The new approved NFT controller
  80 |     |     /// @param _tokenId The NFT to approve
  81 |     |     function approve(address _approved, uint256 _tokenId) external payable;
  82 |     | 
  83 |     |     /// @notice Enable or disable approval for a third party ("operator") to manage
  84 |     |     /// all of `msg.sender`'s assets
  85 |     |     /// @dev Emits the ApprovalForAll event. The contract MUST allow
  86 |     |     /// multiple operators per owner.
  87 |     |     /// @param _operator Address to add to the set of authorized operators
  88 |     |     /// @param _approved True if the operator is approved, false to revoke approval
  89 |     |     function setApprovalForAll(address _operator, bool _approved) external;
  90 |     | 
  91 |     |     /// @notice Get the approved address for a single NFT
  92 |     |     /// @dev Throws if `_tokenId` is not a valid NFT.
  93 |     |     /// @param _tokenId The NFT to find the approved address for
  94 |     |     /// @return The approved address for this NFT, or the zero address if there is none
  95 |     |     function getApproved(uint256 _tokenId) external view returns (address);
  96 |     | 
  97 |     |     /// @notice Query if an address is an authorized operator for another address
  98 |     |     /// @param _owner The address that owns the NFTs
  99 |     |     /// @param _operator The address that acts on behalf of the owner
 100 |     |     /// @return True if `_operator` is an approved operator for `_owner`, false otherwise
 101 |     |     function isApprovedForAll(address _owner, address _operator) external view returns (bool);
 102 |     | }
 103 |     | 
 104 |     | /// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.
 105 |     | interface IERC721TokenReceiver {
 106 |     |     /// @notice Handle the receipt of an NFT
 107 |     |     /// @dev The ERC721 smart contract calls this function on the recipient
 108 |     |     /// after a `transfer`. This function MAY throw to revert and reject the
 109 |     |     /// transfer. Return of other than the magic value MUST result in the
 110 |     |     /// transaction being reverted.
 111 |     |     /// Note: the contract address is always the message sender.
 112 |     |     /// @param _operator The address which called `safeTransferFrom` function
 113 |     |     /// @param _from The address which previously owned the token
 114 |     |     /// @param _tokenId The NFT identifier which is being transferred
 115 |     |     /// @param _data Additional data with no specified format
 116 |     |     /// @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
 117 |     |     ///  unless throwing
 118 |     |     function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data)
 119 |     |         external
 120 |     |         returns (bytes4);
 121 |     | }
 122 |     | 
 123 |     | /// @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 124 |     | /// @dev See https://eips.ethereum.org/EIPS/eip-721
 125 |     | /// Note: the ERC-165 identifier for this interface is 0x5b5e139f.
 126 |     | interface IERC721Metadata is IERC721 {
 127 |     |     /// @notice A descriptive name for a collection of NFTs in this contract
 128 |     |     function name() external view returns (string memory _name);
 129 |     | 
 130 |     |     /// @notice An abbreviated name for NFTs in this contract
 131 |     |     function symbol() external view returns (string memory _symbol);
 132 |     | 
 133 |     |     /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.
 134 |     |     /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC
 135 |     |     /// 3986. The URI may point to a JSON file that conforms to the "ERC721
 136 |     |     /// Metadata JSON Schema".
 137 |     |     function tokenURI(uint256 _tokenId) external view returns (string memory);
 138 |     | }
 139 |     | 
 140 |     | /// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 141 |     | /// @dev See https://eips.ethereum.org/EIPS/eip-721
 142 |     | /// Note: the ERC-165 identifier for this interface is 0x780e9d63.
 143 |     | interface IERC721Enumerable is IERC721 {
 144 |     |     /// @notice Count NFTs tracked by this contract
 145 |     |     /// @return A count of valid NFTs tracked by this contract, where each one of
 146 |     |     /// them has an assigned and queryable owner not equal to the zero address
 147 |     |     function totalSupply() external view returns (uint256);
 148 |     | 
 149 |     |     /// @notice Enumerate valid NFTs
 150 |     |     /// @dev Throws if `_index` >= `totalSupply()`.
 151 |     |     /// @param _index A counter less than `totalSupply()`
 152 |     |     /// @return The token identifier for the `_index`th NFT,
 153 |     |     /// (sort order not specified)
 154 |     |     function tokenByIndex(uint256 _index) external view returns (uint256);
 155 |     | 
 156 |     |     /// @notice Enumerate NFTs assigned to an owner
 157 |     |     /// @dev Throws if `_index` >= `balanceOf(_owner)` or if
 158 |     |     /// `_owner` is the zero address, representing invalid NFTs.
 159 |     |     /// @param _owner An address where we are interested in NFTs owned by them
 160 |     |     /// @param _index A counter less than `balanceOf(_owner)`
 161 |     |     /// @return The token identifier for the `_index`th NFT assigned to `_owner`,
 162 |     |     /// (sort order not specified)
 163 |     |     function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);
 164 |     | }
 165 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/interfaces/IMulticall3.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2 <0.9.0;
  3 |     | 
  4 |     | pragma experimental ABIEncoderV2;
  5 |     | 
  6 |     | interface IMulticall3 {
  7 |     |     struct Call {
  8 |     |         address target;
  9 |     |         bytes callData;
 10 |     |     }
 11 |     | 
 12 |     |     struct Call3 {
 13 |     |         address target;
 14 |     |         bool allowFailure;
 15 |     |         bytes callData;
 16 |     |     }
 17 |     | 
 18 |     |     struct Call3Value {
 19 |     |         address target;
 20 |     |         bool allowFailure;
 21 |     |         uint256 value;
 22 |     |         bytes callData;
 23 |     |     }
 24 |     | 
 25 |     |     struct Result {
 26 |     |         bool success;
 27 |     |         bytes returnData;
 28 |     |     }
 29 |     | 
 30 |     |     function aggregate(Call[] calldata calls)
 31 |     |         external
 32 |     |         payable
 33 |     |         returns (uint256 blockNumber, bytes[] memory returnData);
 34 |     | 
 35 |     |     function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);
 36 |     | 
 37 |     |     function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);
 38 |     | 
 39 |     |     function blockAndAggregate(Call[] calldata calls)
 40 |     |         external
 41 |     |         payable
 42 |     |         returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);
 43 |     | 
 44 |     |     function getBasefee() external view returns (uint256 basefee);
 45 |     | 
 46 |     |     function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);
 47 |     | 
 48 |     |     function getBlockNumber() external view returns (uint256 blockNumber);
 49 |     | 
 50 |     |     function getChainId() external view returns (uint256 chainid);
 51 |     | 
 52 |     |     function getCurrentBlockCoinbase() external view returns (address coinbase);
 53 |     | 
 54 |     |     function getCurrentBlockDifficulty() external view returns (uint256 difficulty);
 55 |     | 
 56 |     |     function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);
 57 |     | 
 58 |     |     function getCurrentBlockTimestamp() external view returns (uint256 timestamp);
 59 |     | 
 60 |     |     function getEthBalance(address addr) external view returns (uint256 balance);
 61 |     | 
 62 |     |     function getLastBlockHash() external view returns (bytes32 blockHash);
 63 |     | 
 64 |     |     function tryAggregate(bool requireSuccess, Call[] calldata calls)
 65 |     |         external
 66 |     |         payable
 67 |     |         returns (Result[] memory returnData);
 68 |     | 
 69 |     |     function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)
 70 |     |         external
 71 |     |         payable
 72 |     |         returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);
 73 |     | }
 74 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/mocks/MockERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | import {IERC20} from "../interfaces/IERC20.sol";
   5 |     | 
   6 |     | /// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.
   7 |     | /// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol
   8 |     | contract MockERC20 is IERC20 {
   9 |     |     /*//////////////////////////////////////////////////////////////
  10 |     |                             METADATA STORAGE
  11 |     |     //////////////////////////////////////////////////////////////*/
  12 |     | 
  13 |     |     string internal _name;
  14 |     | 
  15 |     |     string internal _symbol;
  16 |     | 
  17 |     |     uint8 internal _decimals;
  18 |     | 
  19 |     |     function name() external view override returns (string memory) {
  20 |     |         return _name;
  21 |     |     }
  22 |     | 
  23 |     |     function symbol() external view override returns (string memory) {
  24 |     |         return _symbol;
  25 |     |     }
  26 |     | 
  27 |     |     function decimals() external view override returns (uint8) {
  28 |     |         return _decimals;
  29 |     |     }
  30 |     | 
  31 |     |     /*//////////////////////////////////////////////////////////////
  32 |     |                               ERC20 STORAGE
  33 |     |     //////////////////////////////////////////////////////////////*/
  34 |     | 
  35 |     |     uint256 internal _totalSupply;
  36 |     | 
  37 |     |     mapping(address => uint256) internal _balanceOf;
  38 |     | 
  39 |     |     mapping(address => mapping(address => uint256)) internal _allowance;
  40 |     | 
  41 |     |     function totalSupply() external view override returns (uint256) {
  42 |     |         return _totalSupply;
  43 |     |     }
  44 |     | 
  45 |     |     function balanceOf(address owner) external view override returns (uint256) {
  46 |     |         return _balanceOf[owner];
  47 |     |     }
  48 |     | 
  49 |     |     function allowance(address owner, address spender) external view override returns (uint256) {
  50 |     |         return _allowance[owner][spender];
  51 |     |     }
  52 |     | 
  53 |     |     /*//////////////////////////////////////////////////////////////
  54 |     |                             EIP-2612 STORAGE
  55 |     |     //////////////////////////////////////////////////////////////*/
  56 |     | 
  57 |     |     uint256 internal INITIAL_CHAIN_ID;
  58 |     | 
  59 |     |     bytes32 internal INITIAL_DOMAIN_SEPARATOR;
  60 |     | 
  61 |     |     mapping(address => uint256) public nonces;
  62 |     | 
  63 |     |     /*//////////////////////////////////////////////////////////////
  64 |     |                                INITIALIZE
  65 |     |     //////////////////////////////////////////////////////////////*/
  66 |     | 
  67 |     |     /// @dev A bool to track whether the contract has been initialized.
  68 |     |     bool private initialized;
  69 |     | 
  70 |     |     /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and
  71 |     |     /// syntaxes, we add an initialization function that can be called only once.
  72 |     |     function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {
  73 |     |         require(!initialized, "ALREADY_INITIALIZED");
  74 |     | 
  75 |     |         _name = name_;
  76 |     |         _symbol = symbol_;
  77 |     |         _decimals = decimals_;
  78 |     | 
  79 |     |         INITIAL_CHAIN_ID = _pureChainId();
  80 |     |         INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();
  81 |     | 
  82 |     |         initialized = true;
  83 |     |     }
  84 |     | 
  85 |     |     /*//////////////////////////////////////////////////////////////
  86 |     |                                ERC20 LOGIC
  87 |     |     //////////////////////////////////////////////////////////////*/
  88 |     | 
  89 |     |     function approve(address spender, uint256 amount) public virtual override returns (bool) {
  90 |     |         _allowance[msg.sender][spender] = amount;
  91 |     | 
  92 |     |         emit Approval(msg.sender, spender, amount);
  93 |     | 
  94 |     |         return true;
  95 |     |     }
  96 |     | 
  97 |     |     function transfer(address to, uint256 amount) public virtual override returns (bool) {
  98 |     |         _balanceOf[msg.sender] = _sub(_balanceOf[msg.sender], amount);
  99 |     |         _balanceOf[to] = _add(_balanceOf[to], amount);
 100 |     | 
 101 |     |         emit Transfer(msg.sender, to, amount);
 102 |     | 
 103 |     |         return true;
 104 |     |     }
 105 |     | 
 106 |     |     function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
 107 |     |         uint256 allowed = _allowance[from][msg.sender]; // Saves gas for limited approvals.
 108 |     | 
 109 |     |         if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount);
 110 |     | 
 111 |     |         _balanceOf[from] = _sub(_balanceOf[from], amount);
 112 |     |         _balanceOf[to] = _add(_balanceOf[to], amount);
 113 |     | 
 114 |     |         emit Transfer(from, to, amount);
 115 |     | 
 116 |     |         return true;
 117 |     |     }
 118 |     | 
 119 |     |     /*//////////////////////////////////////////////////////////////
 120 |     |                              EIP-2612 LOGIC
 121 |     |     //////////////////////////////////////////////////////////////*/
 122 |     | 
 123 |     |     function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
 124 |     |         public
 125 |     |         virtual
 126 |     |     {
 127 |     |         require(deadline >= block.timestamp, "PERMIT_DEADLINE_EXPIRED");
 128 |     | 
 129 |     |         address recoveredAddress = ecrecover(
 130 |     |             keccak256(
 131 |     |                 abi.encodePacked(
 132 |     |                     "\x19\x01",
 133 |     |                     DOMAIN_SEPARATOR(),
 134 |     |                     keccak256(
 135 |     |                         abi.encode(
 136 |     |                             keccak256(
 137 |     |                                 "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
 138 |     |                             ),
 139 |     |                             owner,
 140 |     |                             spender,
 141 |     |                             value,
 142 |     |                             nonces[owner]++,
 143 |     |                             deadline
 144 |     |                         )
 145 |     |                     )
 146 |     |                 )
 147 |     |             ),
 148 |     |             v,
 149 |     |             r,
 150 |     |             s
 151 |     |         );
 152 |     | 
 153 |     |         require(recoveredAddress != address(0) && recoveredAddress == owner, "INVALID_SIGNER");
 154 |     | 
 155 |     |         _allowance[recoveredAddress][spender] = value;
 156 |     | 
 157 |     |         emit Approval(owner, spender, value);
 158 |     |     }
 159 |     | 
 160 |     |     function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {
 161 |     |         return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();
 162 |     |     }
 163 |     | 
 164 |     |     function computeDomainSeparator() internal view virtual returns (bytes32) {
 165 |     |         return keccak256(
 166 |     |             abi.encode(
 167 |     |                 keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),
 168 |     |                 keccak256(bytes(_name)),
 169 |     |                 keccak256("1"),
 170 |     |                 _pureChainId(),
 171 |     |                 address(this)
 172 |     |             )
 173 |     |         );
 174 |     |     }
 175 |     | 
 176 |     |     /*//////////////////////////////////////////////////////////////
 177 |     |                         INTERNAL MINT/BURN LOGIC
 178 |     |     //////////////////////////////////////////////////////////////*/
 179 |     | 
 180 |     |     function _mint(address to, uint256 amount) internal virtual {
 181 |     |         _totalSupply = _add(_totalSupply, amount);
 182 |     |         _balanceOf[to] = _add(_balanceOf[to], amount);
 183 |     | 
 184 |     |         emit Transfer(address(0), to, amount);
 185 |     |     }
 186 |     | 
 187 |     |     function _burn(address from, uint256 amount) internal virtual {
 188 |     |         _balanceOf[from] = _sub(_balanceOf[from], amount);
 189 |     |         _totalSupply = _sub(_totalSupply, amount);
 190 |     | 
 191 |     |         emit Transfer(from, address(0), amount);
 192 |     |     }
 193 |     | 
 194 |     |     /*//////////////////////////////////////////////////////////////
 195 |     |                         INTERNAL SAFE MATH LOGIC
 196 |     |     //////////////////////////////////////////////////////////////*/
 197 |     | 
 198 |     |     function _add(uint256 a, uint256 b) internal pure returns (uint256) {
 199 |     |         uint256 c = a + b;
 200 |     |         require(c >= a, "ERC20: addition overflow");
 201 |     |         return c;
 202 |     |     }
 203 |     | 
 204 |     |     function _sub(uint256 a, uint256 b) internal pure returns (uint256) {
 205 |     |         require(a >= b, "ERC20: subtraction underflow");
 206 |     |         return a - b;
 207 |     |     }
 208 |     | 
 209 |     |     /*//////////////////////////////////////////////////////////////
 210 |     |                                 HELPERS
 211 |     |     //////////////////////////////////////////////////////////////*/
 212 |     | 
 213 |     |     // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no
 214 |     |     // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We
 215 |     |     // can't simply access the chain ID in a normal view or pure function because the solc View Pure
 216 |     |     // Checker changed `chainid` from pure to view in 0.8.0.
 217 |     |     function _viewChainId() private view returns (uint256 chainId) {
 218 |     |         // Assembly required since `block.chainid` was introduced in 0.8.0.
 219 |     |         assembly {
 220 |     |             chainId := chainid()
 221 |     |         }
 222 |     | 
 223 |     |         address(this); // Silence warnings in older Solc versions.
 224 |     |     }
 225 |     | 
 226 |     |     function _pureChainId() private pure returns (uint256 chainId) {
 227 |     |         function() internal view returns (uint256) fnIn = _viewChainId;
 228 |     |         function() internal pure returns (uint256) pureChainId;
 229 |     |         assembly {
 230 |     |             pureChainId := fnIn
 231 |     |         }
 232 |     |         chainId = pureChainId();
 233 |     |     }
 234 |     | }
 235 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/mocks/MockERC721.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | import {IERC721Metadata, IERC721TokenReceiver} from "../interfaces/IERC721.sol";
   5 |     | 
   6 |     | /// @notice This is a mock contract of the ERC721 standard for testing purposes only, it SHOULD NOT be used in production.
   7 |     | /// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC721.sol
   8 |     | contract MockERC721 is IERC721Metadata {
   9 |     |     /*//////////////////////////////////////////////////////////////
  10 |     |                          METADATA STORAGE/LOGIC
  11 |     |     //////////////////////////////////////////////////////////////*/
  12 |     | 
  13 |     |     string internal _name;
  14 |     | 
  15 |     |     string internal _symbol;
  16 |     | 
  17 |     |     function name() external view override returns (string memory) {
  18 |     |         return _name;
  19 |     |     }
  20 |     | 
  21 |     |     function symbol() external view override returns (string memory) {
  22 |     |         return _symbol;
  23 |     |     }
  24 |     | 
  25 |     |     function tokenURI(uint256 id) public view virtual override returns (string memory) {}
  26 |     | 
  27 |     |     /*//////////////////////////////////////////////////////////////
  28 |     |                       ERC721 BALANCE/OWNER STORAGE
  29 |     |     //////////////////////////////////////////////////////////////*/
  30 |     | 
  31 |     |     mapping(uint256 => address) internal _ownerOf;
  32 |     | 
  33 |     |     mapping(address => uint256) internal _balanceOf;
  34 |     | 
  35 |     |     function ownerOf(uint256 id) public view virtual override returns (address owner) {
  36 |     |         require((owner = _ownerOf[id]) != address(0), "NOT_MINTED");
  37 |     |     }
  38 |     | 
  39 |     |     function balanceOf(address owner) public view virtual override returns (uint256) {
  40 |     |         require(owner != address(0), "ZERO_ADDRESS");
  41 |     | 
  42 |     |         return _balanceOf[owner];
  43 |     |     }
  44 |     | 
  45 |     |     /*//////////////////////////////////////////////////////////////
  46 |     |                          ERC721 APPROVAL STORAGE
  47 |     |     //////////////////////////////////////////////////////////////*/
  48 |     | 
  49 |     |     mapping(uint256 => address) internal _getApproved;
  50 |     | 
  51 |     |     mapping(address => mapping(address => bool)) internal _isApprovedForAll;
  52 |     | 
  53 |     |     function getApproved(uint256 id) public view virtual override returns (address) {
  54 |     |         return _getApproved[id];
  55 |     |     }
  56 |     | 
  57 |     |     function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
  58 |     |         return _isApprovedForAll[owner][operator];
  59 |     |     }
  60 |     | 
  61 |     |     /*//////////////////////////////////////////////////////////////
  62 |     |                                INITIALIZE
  63 |     |     //////////////////////////////////////////////////////////////*/
  64 |     | 
  65 |     |     /// @dev A bool to track whether the contract has been initialized.
  66 |     |     bool private initialized;
  67 |     | 
  68 |     |     /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and
  69 |     |     /// syntaxes, we add an initialization function that can be called only once.
  70 |     |     function initialize(string memory name_, string memory symbol_) public {
  71 |     |         require(!initialized, "ALREADY_INITIALIZED");
  72 |     | 
  73 |     |         _name = name_;
  74 |     |         _symbol = symbol_;
  75 |     | 
  76 |     |         initialized = true;
  77 |     |     }
  78 |     | 
  79 |     |     /*//////////////////////////////////////////////////////////////
  80 |     |                               ERC721 LOGIC
  81 |     |     //////////////////////////////////////////////////////////////*/
  82 |     | 
  83 |     |     function approve(address spender, uint256 id) public payable virtual override {
  84 |     |         address owner = _ownerOf[id];
  85 |     | 
  86 |     |         require(msg.sender == owner || _isApprovedForAll[owner][msg.sender], "NOT_AUTHORIZED");
  87 |     | 
  88 |     |         _getApproved[id] = spender;
  89 |     | 
  90 |     |         emit Approval(owner, spender, id);
  91 |     |     }
  92 |     | 
  93 |     |     function setApprovalForAll(address operator, bool approved) public virtual override {
  94 |     |         _isApprovedForAll[msg.sender][operator] = approved;
  95 |     | 
  96 |     |         emit ApprovalForAll(msg.sender, operator, approved);
  97 |     |     }
  98 |     | 
  99 |     |     function transferFrom(address from, address to, uint256 id) public payable virtual override {
 100 |     |         require(from == _ownerOf[id], "WRONG_FROM");
 101 |     | 
 102 |     |         require(to != address(0), "INVALID_RECIPIENT");
 103 |     | 
 104 |     |         require(
 105 |     |             msg.sender == from || _isApprovedForAll[from][msg.sender] || msg.sender == _getApproved[id],
 106 |     |             "NOT_AUTHORIZED"
 107 |     |         );
 108 |     | 
 109 |     |         // Underflow of the sender's balance is impossible because we check for
 110 |     |         // ownership above and the recipient's balance can't realistically overflow.
 111 |     |         _balanceOf[from]--;
 112 |     | 
 113 |     |         _balanceOf[to]++;
 114 |     | 
 115 |     |         _ownerOf[id] = to;
 116 |     | 
 117 |     |         delete _getApproved[id];
 118 |     | 
 119 |     |         emit Transfer(from, to, id);
 120 |     |     }
 121 |     | 
 122 |     |     function safeTransferFrom(address from, address to, uint256 id) public payable virtual override {
 123 |     |         transferFrom(from, to, id);
 124 |     | 
 125 |     |         require(
 126 |     |             !_isContract(to)
 127 |     |                 || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, "")
 128 |     |                     == IERC721TokenReceiver.onERC721Received.selector,
 129 |     |             "UNSAFE_RECIPIENT"
 130 |     |         );
 131 |     |     }
 132 |     | 
 133 |     |     function safeTransferFrom(address from, address to, uint256 id, bytes memory data)
 134 |     |         public
 135 |     |         payable
 136 |     |         virtual
 137 |     |         override
 138 |     |     {
 139 |     |         transferFrom(from, to, id);
 140 |     | 
 141 |     |         require(
 142 |     |             !_isContract(to)
 143 |     |                 || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)
 144 |     |                     == IERC721TokenReceiver.onERC721Received.selector,
 145 |     |             "UNSAFE_RECIPIENT"
 146 |     |         );
 147 |     |     }
 148 |     | 
 149 |     |     /*//////////////////////////////////////////////////////////////
 150 |     |                               ERC165 LOGIC
 151 |     |     //////////////////////////////////////////////////////////////*/
 152 |     | 
 153 |     |     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 154 |     |         return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165
 155 |     |             || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721
 156 |     |             || interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata
 157 |     |     }
 158 |     | 
 159 |     |     /*//////////////////////////////////////////////////////////////
 160 |     |                         INTERNAL MINT/BURN LOGIC
 161 |     |     //////////////////////////////////////////////////////////////*/
 162 |     | 
 163 |     |     function _mint(address to, uint256 id) internal virtual {
 164 |     |         require(to != address(0), "INVALID_RECIPIENT");
 165 |     | 
 166 |     |         require(_ownerOf[id] == address(0), "ALREADY_MINTED");
 167 |     | 
 168 |     |         // Counter overflow is incredibly unrealistic.
 169 |     | 
 170 |     |         _balanceOf[to]++;
 171 |     | 
 172 |     |         _ownerOf[id] = to;
 173 |     | 
 174 |     |         emit Transfer(address(0), to, id);
 175 |     |     }
 176 |     | 
 177 |     |     function _burn(uint256 id) internal virtual {
 178 |     |         address owner = _ownerOf[id];
 179 |     | 
 180 |     |         require(owner != address(0), "NOT_MINTED");
 181 |     | 
 182 |     |         _balanceOf[owner]--;
 183 |     | 
 184 |     |         delete _ownerOf[id];
 185 |     | 
 186 |     |         delete _getApproved[id];
 187 |     | 
 188 |     |         emit Transfer(owner, address(0), id);
 189 |     |     }
 190 |     | 
 191 |     |     /*//////////////////////////////////////////////////////////////
 192 |     |                         INTERNAL SAFE MINT LOGIC
 193 |     |     //////////////////////////////////////////////////////////////*/
 194 |     | 
 195 |     |     function _safeMint(address to, uint256 id) internal virtual {
 196 |     |         _mint(to, id);
 197 |     | 
 198 |     |         require(
 199 |     |             !_isContract(to)
 200 |     |                 || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, "")
 201 |     |                     == IERC721TokenReceiver.onERC721Received.selector,
 202 |     |             "UNSAFE_RECIPIENT"
 203 |     |         );
 204 |     |     }
 205 |     | 
 206 |     |     function _safeMint(address to, uint256 id, bytes memory data) internal virtual {
 207 |     |         _mint(to, id);
 208 |     | 
 209 |     |         require(
 210 |     |             !_isContract(to)
 211 |     |                 || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data)
 212 |     |                     == IERC721TokenReceiver.onERC721Received.selector,
 213 |     |             "UNSAFE_RECIPIENT"
 214 |     |         );
 215 |     |     }
 216 |     | 
 217 |     |     /*//////////////////////////////////////////////////////////////
 218 |     |                                 HELPERS
 219 |     |     //////////////////////////////////////////////////////////////*/
 220 |     | 
 221 |     |     function _isContract(address _addr) private view returns (bool) {
 222 |     |         uint256 codeLength;
 223 |     | 
 224 |     |         // Assembly required for versions < 0.8.0 to check extcodesize.
 225 |     |         assembly {
 226 |     |             codeLength := extcodesize(_addr)
 227 |     |         }
 228 |     | 
 229 |     |         return codeLength > 0;
 230 |     |     }
 231 |     | }
 232 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/node_modules/forge-std/src/safeconsole.sol
     1 |     | // SPDX-License-Identifier: MIT
     2 |     | pragma solidity >=0.6.2 <0.9.0;
     3 |     | 
     4 |     | /// @author philogy <https://github.com/philogy>
     5 |     | /// @dev Code generated automatically by script.
     6 |     | library safeconsole {
     7 |     |     uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;
     8 |     | 
     9 |     |     // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)
    10 |     |     // for the view-to-pure log trick.
    11 |     |     function _sendLogPayload(uint256 offset, uint256 size) private pure {
    12 |     |         function(uint256, uint256) internal view fnIn = _sendLogPayloadView;
    13 |     |         function(uint256, uint256) internal pure pureSendLogPayload;
    14 |     |         /// @solidity memory-safe-assembly
    15 |     |         assembly {
    16 |     |             pureSendLogPayload := fnIn
    17 |     |         }
    18 |     |         pureSendLogPayload(offset, size);
    19 |     |     }
    20 |     | 
    21 |     |     function _sendLogPayloadView(uint256 offset, uint256 size) private view {
    22 |     |         /// @solidity memory-safe-assembly
    23 |     |         assembly {
    24 |     |             pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))
    25 |     |         }
    26 |     |     }
    27 |     | 
    28 |     |     function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {
    29 |     |         function(uint256, uint256, uint256) internal view fnIn = _memcopyView;
    30 |     |         function(uint256, uint256, uint256) internal pure pureMemcopy;
    31 |     |         /// @solidity memory-safe-assembly
    32 |     |         assembly {
    33 |     |             pureMemcopy := fnIn
    34 |     |         }
    35 |     |         pureMemcopy(fromOffset, toOffset, length);
    36 |     |     }
    37 |     | 
    38 |     |     function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {
    39 |     |         /// @solidity memory-safe-assembly
    40 |     |         assembly {
    41 |     |             pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))
    42 |     |         }
    43 |     |     }
    44 |     | 
    45 |     |     function logMemory(uint256 offset, uint256 length) internal pure {
    46 |     |         if (offset >= 0x60) {
    47 |     |             // Sufficient memory before slice to prepare call header.
    48 |     |             bytes32 m0;
    49 |     |             bytes32 m1;
    50 |     |             bytes32 m2;
    51 |     |             /// @solidity memory-safe-assembly
    52 |     |             assembly {
    53 |     |                 m0 := mload(sub(offset, 0x60))
    54 |     |                 m1 := mload(sub(offset, 0x40))
    55 |     |                 m2 := mload(sub(offset, 0x20))
    56 |     |                 // Selector of `log(bytes)`.
    57 |     |                 mstore(sub(offset, 0x60), 0x0be77f56)
    58 |     |                 mstore(sub(offset, 0x40), 0x20)
    59 |     |                 mstore(sub(offset, 0x20), length)
    60 |     |             }
    61 |     |             _sendLogPayload(offset - 0x44, length + 0x44);
    62 |     |             /// @solidity memory-safe-assembly
    63 |     |             assembly {
    64 |     |                 mstore(sub(offset, 0x60), m0)
    65 |     |                 mstore(sub(offset, 0x40), m1)
    66 |     |                 mstore(sub(offset, 0x20), m2)
    67 |     |             }
    68 |     |         } else {
    69 |     |             // Insufficient space, so copy slice forward, add header and reverse.
    70 |     |             bytes32 m0;
    71 |     |             bytes32 m1;
    72 |     |             bytes32 m2;
    73 |     |             uint256 endOffset = offset + length;
    74 |     |             /// @solidity memory-safe-assembly
    75 |     |             assembly {
    76 |     |                 m0 := mload(add(endOffset, 0x00))
    77 |     |                 m1 := mload(add(endOffset, 0x20))
    78 |     |                 m2 := mload(add(endOffset, 0x40))
    79 |     |             }
    80 |     |             _memcopy(offset, offset + 0x60, length);
    81 |     |             /// @solidity memory-safe-assembly
    82 |     |             assembly {
    83 |     |                 // Selector of `log(bytes)`.
    84 |     |                 mstore(add(offset, 0x00), 0x0be77f56)
    85 |     |                 mstore(add(offset, 0x20), 0x20)
    86 |     |                 mstore(add(offset, 0x40), length)
    87 |     |             }
    88 |     |             _sendLogPayload(offset + 0x1c, length + 0x44);
    89 |     |             _memcopy(offset + 0x60, offset, length);
    90 |     |             /// @solidity memory-safe-assembly
    91 |     |             assembly {
    92 |     |                 mstore(add(endOffset, 0x00), m0)
    93 |     |                 mstore(add(endOffset, 0x20), m1)
    94 |     |                 mstore(add(endOffset, 0x40), m2)
    95 |     |             }
    96 |     |         }
    97 |     |     }
    98 |     | 
    99 |     |     function log(address p0) internal pure {
   100 |     |         bytes32 m0;
   101 |     |         bytes32 m1;
   102 |     |         /// @solidity memory-safe-assembly
   103 |     |         assembly {
   104 |     |             m0 := mload(0x00)
   105 |     |             m1 := mload(0x20)
   106 |     |             // Selector of `log(address)`.
   107 |     |             mstore(0x00, 0x2c2ecbc2)
   108 |     |             mstore(0x20, p0)
   109 |     |         }
   110 |     |         _sendLogPayload(0x1c, 0x24);
   111 |     |         /// @solidity memory-safe-assembly
   112 |     |         assembly {
   113 |     |             mstore(0x00, m0)
   114 |     |             mstore(0x20, m1)
   115 |     |         }
   116 |     |     }
   117 |     | 
   118 |     |     function log(bool p0) internal pure {
   119 |     |         bytes32 m0;
   120 |     |         bytes32 m1;
   121 |     |         /// @solidity memory-safe-assembly
   122 |     |         assembly {
   123 |     |             m0 := mload(0x00)
   124 |     |             m1 := mload(0x20)
   125 |     |             // Selector of `log(bool)`.
   126 |     |             mstore(0x00, 0x32458eed)
   127 |     |             mstore(0x20, p0)
   128 |     |         }
   129 |     |         _sendLogPayload(0x1c, 0x24);
   130 |     |         /// @solidity memory-safe-assembly
   131 |     |         assembly {
   132 |     |             mstore(0x00, m0)
   133 |     |             mstore(0x20, m1)
   134 |     |         }
   135 |     |     }
   136 |     | 
   137 |     |     function log(uint256 p0) internal pure {
   138 |     |         bytes32 m0;
   139 |     |         bytes32 m1;
   140 |     |         /// @solidity memory-safe-assembly
   141 |     |         assembly {
   142 |     |             m0 := mload(0x00)
   143 |     |             m1 := mload(0x20)
   144 |     |             // Selector of `log(uint256)`.
   145 |     |             mstore(0x00, 0xf82c50f1)
   146 |     |             mstore(0x20, p0)
   147 |     |         }
   148 |     |         _sendLogPayload(0x1c, 0x24);
   149 |     |         /// @solidity memory-safe-assembly
   150 |     |         assembly {
   151 |     |             mstore(0x00, m0)
   152 |     |             mstore(0x20, m1)
   153 |     |         }
   154 |     |     }
   155 |     | 
   156 |     |     function log(bytes32 p0) internal pure {
   157 |     |         bytes32 m0;
   158 |     |         bytes32 m1;
   159 |     |         bytes32 m2;
   160 |     |         bytes32 m3;
   161 |     |         /// @solidity memory-safe-assembly
   162 |     |         assembly {
   163 |     |             function writeString(pos, w) {
   164 |     |                 let length := 0
   165 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   166 |     |                 mstore(pos, length)
   167 |     |                 let shift := sub(256, shl(3, length))
   168 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   169 |     |             }
   170 |     |             m0 := mload(0x00)
   171 |     |             m1 := mload(0x20)
   172 |     |             m2 := mload(0x40)
   173 |     |             m3 := mload(0x60)
   174 |     |             // Selector of `log(string)`.
   175 |     |             mstore(0x00, 0x41304fac)
   176 |     |             mstore(0x20, 0x20)
   177 |     |             writeString(0x40, p0)
   178 |     |         }
   179 |     |         _sendLogPayload(0x1c, 0x64);
   180 |     |         /// @solidity memory-safe-assembly
   181 |     |         assembly {
   182 |     |             mstore(0x00, m0)
   183 |     |             mstore(0x20, m1)
   184 |     |             mstore(0x40, m2)
   185 |     |             mstore(0x60, m3)
   186 |     |         }
   187 |     |     }
   188 |     | 
   189 |     |     function log(address p0, address p1) internal pure {
   190 |     |         bytes32 m0;
   191 |     |         bytes32 m1;
   192 |     |         bytes32 m2;
   193 |     |         /// @solidity memory-safe-assembly
   194 |     |         assembly {
   195 |     |             m0 := mload(0x00)
   196 |     |             m1 := mload(0x20)
   197 |     |             m2 := mload(0x40)
   198 |     |             // Selector of `log(address,address)`.
   199 |     |             mstore(0x00, 0xdaf0d4aa)
   200 |     |             mstore(0x20, p0)
   201 |     |             mstore(0x40, p1)
   202 |     |         }
   203 |     |         _sendLogPayload(0x1c, 0x44);
   204 |     |         /// @solidity memory-safe-assembly
   205 |     |         assembly {
   206 |     |             mstore(0x00, m0)
   207 |     |             mstore(0x20, m1)
   208 |     |             mstore(0x40, m2)
   209 |     |         }
   210 |     |     }
   211 |     | 
   212 |     |     function log(address p0, bool p1) internal pure {
   213 |     |         bytes32 m0;
   214 |     |         bytes32 m1;
   215 |     |         bytes32 m2;
   216 |     |         /// @solidity memory-safe-assembly
   217 |     |         assembly {
   218 |     |             m0 := mload(0x00)
   219 |     |             m1 := mload(0x20)
   220 |     |             m2 := mload(0x40)
   221 |     |             // Selector of `log(address,bool)`.
   222 |     |             mstore(0x00, 0x75b605d3)
   223 |     |             mstore(0x20, p0)
   224 |     |             mstore(0x40, p1)
   225 |     |         }
   226 |     |         _sendLogPayload(0x1c, 0x44);
   227 |     |         /// @solidity memory-safe-assembly
   228 |     |         assembly {
   229 |     |             mstore(0x00, m0)
   230 |     |             mstore(0x20, m1)
   231 |     |             mstore(0x40, m2)
   232 |     |         }
   233 |     |     }
   234 |     | 
   235 |     |     function log(address p0, uint256 p1) internal pure {
   236 |     |         bytes32 m0;
   237 |     |         bytes32 m1;
   238 |     |         bytes32 m2;
   239 |     |         /// @solidity memory-safe-assembly
   240 |     |         assembly {
   241 |     |             m0 := mload(0x00)
   242 |     |             m1 := mload(0x20)
   243 |     |             m2 := mload(0x40)
   244 |     |             // Selector of `log(address,uint256)`.
   245 |     |             mstore(0x00, 0x8309e8a8)
   246 |     |             mstore(0x20, p0)
   247 |     |             mstore(0x40, p1)
   248 |     |         }
   249 |     |         _sendLogPayload(0x1c, 0x44);
   250 |     |         /// @solidity memory-safe-assembly
   251 |     |         assembly {
   252 |     |             mstore(0x00, m0)
   253 |     |             mstore(0x20, m1)
   254 |     |             mstore(0x40, m2)
   255 |     |         }
   256 |     |     }
   257 |     | 
   258 |     |     function log(address p0, bytes32 p1) internal pure {
   259 |     |         bytes32 m0;
   260 |     |         bytes32 m1;
   261 |     |         bytes32 m2;
   262 |     |         bytes32 m3;
   263 |     |         bytes32 m4;
   264 |     |         /// @solidity memory-safe-assembly
   265 |     |         assembly {
   266 |     |             function writeString(pos, w) {
   267 |     |                 let length := 0
   268 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   269 |     |                 mstore(pos, length)
   270 |     |                 let shift := sub(256, shl(3, length))
   271 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   272 |     |             }
   273 |     |             m0 := mload(0x00)
   274 |     |             m1 := mload(0x20)
   275 |     |             m2 := mload(0x40)
   276 |     |             m3 := mload(0x60)
   277 |     |             m4 := mload(0x80)
   278 |     |             // Selector of `log(address,string)`.
   279 |     |             mstore(0x00, 0x759f86bb)
   280 |     |             mstore(0x20, p0)
   281 |     |             mstore(0x40, 0x40)
   282 |     |             writeString(0x60, p1)
   283 |     |         }
   284 |     |         _sendLogPayload(0x1c, 0x84);
   285 |     |         /// @solidity memory-safe-assembly
   286 |     |         assembly {
   287 |     |             mstore(0x00, m0)
   288 |     |             mstore(0x20, m1)
   289 |     |             mstore(0x40, m2)
   290 |     |             mstore(0x60, m3)
   291 |     |             mstore(0x80, m4)
   292 |     |         }
   293 |     |     }
   294 |     | 
   295 |     |     function log(bool p0, address p1) internal pure {
   296 |     |         bytes32 m0;
   297 |     |         bytes32 m1;
   298 |     |         bytes32 m2;
   299 |     |         /// @solidity memory-safe-assembly
   300 |     |         assembly {
   301 |     |             m0 := mload(0x00)
   302 |     |             m1 := mload(0x20)
   303 |     |             m2 := mload(0x40)
   304 |     |             // Selector of `log(bool,address)`.
   305 |     |             mstore(0x00, 0x853c4849)
   306 |     |             mstore(0x20, p0)
   307 |     |             mstore(0x40, p1)
   308 |     |         }
   309 |     |         _sendLogPayload(0x1c, 0x44);
   310 |     |         /// @solidity memory-safe-assembly
   311 |     |         assembly {
   312 |     |             mstore(0x00, m0)
   313 |     |             mstore(0x20, m1)
   314 |     |             mstore(0x40, m2)
   315 |     |         }
   316 |     |     }
   317 |     | 
   318 |     |     function log(bool p0, bool p1) internal pure {
   319 |     |         bytes32 m0;
   320 |     |         bytes32 m1;
   321 |     |         bytes32 m2;
   322 |     |         /// @solidity memory-safe-assembly
   323 |     |         assembly {
   324 |     |             m0 := mload(0x00)
   325 |     |             m1 := mload(0x20)
   326 |     |             m2 := mload(0x40)
   327 |     |             // Selector of `log(bool,bool)`.
   328 |     |             mstore(0x00, 0x2a110e83)
   329 |     |             mstore(0x20, p0)
   330 |     |             mstore(0x40, p1)
   331 |     |         }
   332 |     |         _sendLogPayload(0x1c, 0x44);
   333 |     |         /// @solidity memory-safe-assembly
   334 |     |         assembly {
   335 |     |             mstore(0x00, m0)
   336 |     |             mstore(0x20, m1)
   337 |     |             mstore(0x40, m2)
   338 |     |         }
   339 |     |     }
   340 |     | 
   341 |     |     function log(bool p0, uint256 p1) internal pure {
   342 |     |         bytes32 m0;
   343 |     |         bytes32 m1;
   344 |     |         bytes32 m2;
   345 |     |         /// @solidity memory-safe-assembly
   346 |     |         assembly {
   347 |     |             m0 := mload(0x00)
   348 |     |             m1 := mload(0x20)
   349 |     |             m2 := mload(0x40)
   350 |     |             // Selector of `log(bool,uint256)`.
   351 |     |             mstore(0x00, 0x399174d3)
   352 |     |             mstore(0x20, p0)
   353 |     |             mstore(0x40, p1)
   354 |     |         }
   355 |     |         _sendLogPayload(0x1c, 0x44);
   356 |     |         /// @solidity memory-safe-assembly
   357 |     |         assembly {
   358 |     |             mstore(0x00, m0)
   359 |     |             mstore(0x20, m1)
   360 |     |             mstore(0x40, m2)
   361 |     |         }
   362 |     |     }
   363 |     | 
   364 |     |     function log(bool p0, bytes32 p1) internal pure {
   365 |     |         bytes32 m0;
   366 |     |         bytes32 m1;
   367 |     |         bytes32 m2;
   368 |     |         bytes32 m3;
   369 |     |         bytes32 m4;
   370 |     |         /// @solidity memory-safe-assembly
   371 |     |         assembly {
   372 |     |             function writeString(pos, w) {
   373 |     |                 let length := 0
   374 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   375 |     |                 mstore(pos, length)
   376 |     |                 let shift := sub(256, shl(3, length))
   377 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   378 |     |             }
   379 |     |             m0 := mload(0x00)
   380 |     |             m1 := mload(0x20)
   381 |     |             m2 := mload(0x40)
   382 |     |             m3 := mload(0x60)
   383 |     |             m4 := mload(0x80)
   384 |     |             // Selector of `log(bool,string)`.
   385 |     |             mstore(0x00, 0x8feac525)
   386 |     |             mstore(0x20, p0)
   387 |     |             mstore(0x40, 0x40)
   388 |     |             writeString(0x60, p1)
   389 |     |         }
   390 |     |         _sendLogPayload(0x1c, 0x84);
   391 |     |         /// @solidity memory-safe-assembly
   392 |     |         assembly {
   393 |     |             mstore(0x00, m0)
   394 |     |             mstore(0x20, m1)
   395 |     |             mstore(0x40, m2)
   396 |     |             mstore(0x60, m3)
   397 |     |             mstore(0x80, m4)
   398 |     |         }
   399 |     |     }
   400 |     | 
   401 |     |     function log(uint256 p0, address p1) internal pure {
   402 |     |         bytes32 m0;
   403 |     |         bytes32 m1;
   404 |     |         bytes32 m2;
   405 |     |         /// @solidity memory-safe-assembly
   406 |     |         assembly {
   407 |     |             m0 := mload(0x00)
   408 |     |             m1 := mload(0x20)
   409 |     |             m2 := mload(0x40)
   410 |     |             // Selector of `log(uint256,address)`.
   411 |     |             mstore(0x00, 0x69276c86)
   412 |     |             mstore(0x20, p0)
   413 |     |             mstore(0x40, p1)
   414 |     |         }
   415 |     |         _sendLogPayload(0x1c, 0x44);
   416 |     |         /// @solidity memory-safe-assembly
   417 |     |         assembly {
   418 |     |             mstore(0x00, m0)
   419 |     |             mstore(0x20, m1)
   420 |     |             mstore(0x40, m2)
   421 |     |         }
   422 |     |     }
   423 |     | 
   424 |     |     function log(uint256 p0, bool p1) internal pure {
   425 |     |         bytes32 m0;
   426 |     |         bytes32 m1;
   427 |     |         bytes32 m2;
   428 |     |         /// @solidity memory-safe-assembly
   429 |     |         assembly {
   430 |     |             m0 := mload(0x00)
   431 |     |             m1 := mload(0x20)
   432 |     |             m2 := mload(0x40)
   433 |     |             // Selector of `log(uint256,bool)`.
   434 |     |             mstore(0x00, 0x1c9d7eb3)
   435 |     |             mstore(0x20, p0)
   436 |     |             mstore(0x40, p1)
   437 |     |         }
   438 |     |         _sendLogPayload(0x1c, 0x44);
   439 |     |         /// @solidity memory-safe-assembly
   440 |     |         assembly {
   441 |     |             mstore(0x00, m0)
   442 |     |             mstore(0x20, m1)
   443 |     |             mstore(0x40, m2)
   444 |     |         }
   445 |     |     }
   446 |     | 
   447 |     |     function log(uint256 p0, uint256 p1) internal pure {
   448 |     |         bytes32 m0;
   449 |     |         bytes32 m1;
   450 |     |         bytes32 m2;
   451 |     |         /// @solidity memory-safe-assembly
   452 |     |         assembly {
   453 |     |             m0 := mload(0x00)
   454 |     |             m1 := mload(0x20)
   455 |     |             m2 := mload(0x40)
   456 |     |             // Selector of `log(uint256,uint256)`.
   457 |     |             mstore(0x00, 0xf666715a)
   458 |     |             mstore(0x20, p0)
   459 |     |             mstore(0x40, p1)
   460 |     |         }
   461 |     |         _sendLogPayload(0x1c, 0x44);
   462 |     |         /// @solidity memory-safe-assembly
   463 |     |         assembly {
   464 |     |             mstore(0x00, m0)
   465 |     |             mstore(0x20, m1)
   466 |     |             mstore(0x40, m2)
   467 |     |         }
   468 |     |     }
   469 |     | 
   470 |     |     function log(uint256 p0, bytes32 p1) internal pure {
   471 |     |         bytes32 m0;
   472 |     |         bytes32 m1;
   473 |     |         bytes32 m2;
   474 |     |         bytes32 m3;
   475 |     |         bytes32 m4;
   476 |     |         /// @solidity memory-safe-assembly
   477 |     |         assembly {
   478 |     |             function writeString(pos, w) {
   479 |     |                 let length := 0
   480 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   481 |     |                 mstore(pos, length)
   482 |     |                 let shift := sub(256, shl(3, length))
   483 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   484 |     |             }
   485 |     |             m0 := mload(0x00)
   486 |     |             m1 := mload(0x20)
   487 |     |             m2 := mload(0x40)
   488 |     |             m3 := mload(0x60)
   489 |     |             m4 := mload(0x80)
   490 |     |             // Selector of `log(uint256,string)`.
   491 |     |             mstore(0x00, 0x643fd0df)
   492 |     |             mstore(0x20, p0)
   493 |     |             mstore(0x40, 0x40)
   494 |     |             writeString(0x60, p1)
   495 |     |         }
   496 |     |         _sendLogPayload(0x1c, 0x84);
   497 |     |         /// @solidity memory-safe-assembly
   498 |     |         assembly {
   499 |     |             mstore(0x00, m0)
   500 |     |             mstore(0x20, m1)
   501 |     |             mstore(0x40, m2)
   502 |     |             mstore(0x60, m3)
   503 |     |             mstore(0x80, m4)
   504 |     |         }
   505 |     |     }
   506 |     | 
   507 |     |     function log(bytes32 p0, address p1) internal pure {
   508 |     |         bytes32 m0;
   509 |     |         bytes32 m1;
   510 |     |         bytes32 m2;
   511 |     |         bytes32 m3;
   512 |     |         bytes32 m4;
   513 |     |         /// @solidity memory-safe-assembly
   514 |     |         assembly {
   515 |     |             function writeString(pos, w) {
   516 |     |                 let length := 0
   517 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   518 |     |                 mstore(pos, length)
   519 |     |                 let shift := sub(256, shl(3, length))
   520 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   521 |     |             }
   522 |     |             m0 := mload(0x00)
   523 |     |             m1 := mload(0x20)
   524 |     |             m2 := mload(0x40)
   525 |     |             m3 := mload(0x60)
   526 |     |             m4 := mload(0x80)
   527 |     |             // Selector of `log(string,address)`.
   528 |     |             mstore(0x00, 0x319af333)
   529 |     |             mstore(0x20, 0x40)
   530 |     |             mstore(0x40, p1)
   531 |     |             writeString(0x60, p0)
   532 |     |         }
   533 |     |         _sendLogPayload(0x1c, 0x84);
   534 |     |         /// @solidity memory-safe-assembly
   535 |     |         assembly {
   536 |     |             mstore(0x00, m0)
   537 |     |             mstore(0x20, m1)
   538 |     |             mstore(0x40, m2)
   539 |     |             mstore(0x60, m3)
   540 |     |             mstore(0x80, m4)
   541 |     |         }
   542 |     |     }
   543 |     | 
   544 |     |     function log(bytes32 p0, bool p1) internal pure {
   545 |     |         bytes32 m0;
   546 |     |         bytes32 m1;
   547 |     |         bytes32 m2;
   548 |     |         bytes32 m3;
   549 |     |         bytes32 m4;
   550 |     |         /// @solidity memory-safe-assembly
   551 |     |         assembly {
   552 |     |             function writeString(pos, w) {
   553 |     |                 let length := 0
   554 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   555 |     |                 mstore(pos, length)
   556 |     |                 let shift := sub(256, shl(3, length))
   557 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   558 |     |             }
   559 |     |             m0 := mload(0x00)
   560 |     |             m1 := mload(0x20)
   561 |     |             m2 := mload(0x40)
   562 |     |             m3 := mload(0x60)
   563 |     |             m4 := mload(0x80)
   564 |     |             // Selector of `log(string,bool)`.
   565 |     |             mstore(0x00, 0xc3b55635)
   566 |     |             mstore(0x20, 0x40)
   567 |     |             mstore(0x40, p1)
   568 |     |             writeString(0x60, p0)
   569 |     |         }
   570 |     |         _sendLogPayload(0x1c, 0x84);
   571 |     |         /// @solidity memory-safe-assembly
   572 |     |         assembly {
   573 |     |             mstore(0x00, m0)
   574 |     |             mstore(0x20, m1)
   575 |     |             mstore(0x40, m2)
   576 |     |             mstore(0x60, m3)
   577 |     |             mstore(0x80, m4)
   578 |     |         }
   579 |     |     }
   580 |     | 
   581 |     |     function log(bytes32 p0, uint256 p1) internal pure {
   582 |     |         bytes32 m0;
   583 |     |         bytes32 m1;
   584 |     |         bytes32 m2;
   585 |     |         bytes32 m3;
   586 |     |         bytes32 m4;
   587 |     |         /// @solidity memory-safe-assembly
   588 |     |         assembly {
   589 |     |             function writeString(pos, w) {
   590 |     |                 let length := 0
   591 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   592 |     |                 mstore(pos, length)
   593 |     |                 let shift := sub(256, shl(3, length))
   594 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   595 |     |             }
   596 |     |             m0 := mload(0x00)
   597 |     |             m1 := mload(0x20)
   598 |     |             m2 := mload(0x40)
   599 |     |             m3 := mload(0x60)
   600 |     |             m4 := mload(0x80)
   601 |     |             // Selector of `log(string,uint256)`.
   602 |     |             mstore(0x00, 0xb60e72cc)
   603 |     |             mstore(0x20, 0x40)
   604 |     |             mstore(0x40, p1)
   605 |     |             writeString(0x60, p0)
   606 |     |         }
   607 |     |         _sendLogPayload(0x1c, 0x84);
   608 |     |         /// @solidity memory-safe-assembly
   609 |     |         assembly {
   610 |     |             mstore(0x00, m0)
   611 |     |             mstore(0x20, m1)
   612 |     |             mstore(0x40, m2)
   613 |     |             mstore(0x60, m3)
   614 |     |             mstore(0x80, m4)
   615 |     |         }
   616 |     |     }
   617 |     | 
   618 |     |     function log(bytes32 p0, bytes32 p1) internal pure {
   619 |     |         bytes32 m0;
   620 |     |         bytes32 m1;
   621 |     |         bytes32 m2;
   622 |     |         bytes32 m3;
   623 |     |         bytes32 m4;
   624 |     |         bytes32 m5;
   625 |     |         bytes32 m6;
   626 |     |         /// @solidity memory-safe-assembly
   627 |     |         assembly {
   628 |     |             function writeString(pos, w) {
   629 |     |                 let length := 0
   630 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   631 |     |                 mstore(pos, length)
   632 |     |                 let shift := sub(256, shl(3, length))
   633 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   634 |     |             }
   635 |     |             m0 := mload(0x00)
   636 |     |             m1 := mload(0x20)
   637 |     |             m2 := mload(0x40)
   638 |     |             m3 := mload(0x60)
   639 |     |             m4 := mload(0x80)
   640 |     |             m5 := mload(0xa0)
   641 |     |             m6 := mload(0xc0)
   642 |     |             // Selector of `log(string,string)`.
   643 |     |             mstore(0x00, 0x4b5c4277)
   644 |     |             mstore(0x20, 0x40)
   645 |     |             mstore(0x40, 0x80)
   646 |     |             writeString(0x60, p0)
   647 |     |             writeString(0xa0, p1)
   648 |     |         }
   649 |     |         _sendLogPayload(0x1c, 0xc4);
   650 |     |         /// @solidity memory-safe-assembly
   651 |     |         assembly {
   652 |     |             mstore(0x00, m0)
   653 |     |             mstore(0x20, m1)
   654 |     |             mstore(0x40, m2)
   655 |     |             mstore(0x60, m3)
   656 |     |             mstore(0x80, m4)
   657 |     |             mstore(0xa0, m5)
   658 |     |             mstore(0xc0, m6)
   659 |     |         }
   660 |     |     }
   661 |     | 
   662 |     |     function log(address p0, address p1, address p2) internal pure {
   663 |     |         bytes32 m0;
   664 |     |         bytes32 m1;
   665 |     |         bytes32 m2;
   666 |     |         bytes32 m3;
   667 |     |         /// @solidity memory-safe-assembly
   668 |     |         assembly {
   669 |     |             m0 := mload(0x00)
   670 |     |             m1 := mload(0x20)
   671 |     |             m2 := mload(0x40)
   672 |     |             m3 := mload(0x60)
   673 |     |             // Selector of `log(address,address,address)`.
   674 |     |             mstore(0x00, 0x018c84c2)
   675 |     |             mstore(0x20, p0)
   676 |     |             mstore(0x40, p1)
   677 |     |             mstore(0x60, p2)
   678 |     |         }
   679 |     |         _sendLogPayload(0x1c, 0x64);
   680 |     |         /// @solidity memory-safe-assembly
   681 |     |         assembly {
   682 |     |             mstore(0x00, m0)
   683 |     |             mstore(0x20, m1)
   684 |     |             mstore(0x40, m2)
   685 |     |             mstore(0x60, m3)
   686 |     |         }
   687 |     |     }
   688 |     | 
   689 |     |     function log(address p0, address p1, bool p2) internal pure {
   690 |     |         bytes32 m0;
   691 |     |         bytes32 m1;
   692 |     |         bytes32 m2;
   693 |     |         bytes32 m3;
   694 |     |         /// @solidity memory-safe-assembly
   695 |     |         assembly {
   696 |     |             m0 := mload(0x00)
   697 |     |             m1 := mload(0x20)
   698 |     |             m2 := mload(0x40)
   699 |     |             m3 := mload(0x60)
   700 |     |             // Selector of `log(address,address,bool)`.
   701 |     |             mstore(0x00, 0xf2a66286)
   702 |     |             mstore(0x20, p0)
   703 |     |             mstore(0x40, p1)
   704 |     |             mstore(0x60, p2)
   705 |     |         }
   706 |     |         _sendLogPayload(0x1c, 0x64);
   707 |     |         /// @solidity memory-safe-assembly
   708 |     |         assembly {
   709 |     |             mstore(0x00, m0)
   710 |     |             mstore(0x20, m1)
   711 |     |             mstore(0x40, m2)
   712 |     |             mstore(0x60, m3)
   713 |     |         }
   714 |     |     }
   715 |     | 
   716 |     |     function log(address p0, address p1, uint256 p2) internal pure {
   717 |     |         bytes32 m0;
   718 |     |         bytes32 m1;
   719 |     |         bytes32 m2;
   720 |     |         bytes32 m3;
   721 |     |         /// @solidity memory-safe-assembly
   722 |     |         assembly {
   723 |     |             m0 := mload(0x00)
   724 |     |             m1 := mload(0x20)
   725 |     |             m2 := mload(0x40)
   726 |     |             m3 := mload(0x60)
   727 |     |             // Selector of `log(address,address,uint256)`.
   728 |     |             mstore(0x00, 0x17fe6185)
   729 |     |             mstore(0x20, p0)
   730 |     |             mstore(0x40, p1)
   731 |     |             mstore(0x60, p2)
   732 |     |         }
   733 |     |         _sendLogPayload(0x1c, 0x64);
   734 |     |         /// @solidity memory-safe-assembly
   735 |     |         assembly {
   736 |     |             mstore(0x00, m0)
   737 |     |             mstore(0x20, m1)
   738 |     |             mstore(0x40, m2)
   739 |     |             mstore(0x60, m3)
   740 |     |         }
   741 |     |     }
   742 |     | 
   743 |     |     function log(address p0, address p1, bytes32 p2) internal pure {
   744 |     |         bytes32 m0;
   745 |     |         bytes32 m1;
   746 |     |         bytes32 m2;
   747 |     |         bytes32 m3;
   748 |     |         bytes32 m4;
   749 |     |         bytes32 m5;
   750 |     |         /// @solidity memory-safe-assembly
   751 |     |         assembly {
   752 |     |             function writeString(pos, w) {
   753 |     |                 let length := 0
   754 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   755 |     |                 mstore(pos, length)
   756 |     |                 let shift := sub(256, shl(3, length))
   757 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   758 |     |             }
   759 |     |             m0 := mload(0x00)
   760 |     |             m1 := mload(0x20)
   761 |     |             m2 := mload(0x40)
   762 |     |             m3 := mload(0x60)
   763 |     |             m4 := mload(0x80)
   764 |     |             m5 := mload(0xa0)
   765 |     |             // Selector of `log(address,address,string)`.
   766 |     |             mstore(0x00, 0x007150be)
   767 |     |             mstore(0x20, p0)
   768 |     |             mstore(0x40, p1)
   769 |     |             mstore(0x60, 0x60)
   770 |     |             writeString(0x80, p2)
   771 |     |         }
   772 |     |         _sendLogPayload(0x1c, 0xa4);
   773 |     |         /// @solidity memory-safe-assembly
   774 |     |         assembly {
   775 |     |             mstore(0x00, m0)
   776 |     |             mstore(0x20, m1)
   777 |     |             mstore(0x40, m2)
   778 |     |             mstore(0x60, m3)
   779 |     |             mstore(0x80, m4)
   780 |     |             mstore(0xa0, m5)
   781 |     |         }
   782 |     |     }
   783 |     | 
   784 |     |     function log(address p0, bool p1, address p2) internal pure {
   785 |     |         bytes32 m0;
   786 |     |         bytes32 m1;
   787 |     |         bytes32 m2;
   788 |     |         bytes32 m3;
   789 |     |         /// @solidity memory-safe-assembly
   790 |     |         assembly {
   791 |     |             m0 := mload(0x00)
   792 |     |             m1 := mload(0x20)
   793 |     |             m2 := mload(0x40)
   794 |     |             m3 := mload(0x60)
   795 |     |             // Selector of `log(address,bool,address)`.
   796 |     |             mstore(0x00, 0xf11699ed)
   797 |     |             mstore(0x20, p0)
   798 |     |             mstore(0x40, p1)
   799 |     |             mstore(0x60, p2)
   800 |     |         }
   801 |     |         _sendLogPayload(0x1c, 0x64);
   802 |     |         /// @solidity memory-safe-assembly
   803 |     |         assembly {
   804 |     |             mstore(0x00, m0)
   805 |     |             mstore(0x20, m1)
   806 |     |             mstore(0x40, m2)
   807 |     |             mstore(0x60, m3)
   808 |     |         }
   809 |     |     }
   810 |     | 
   811 |     |     function log(address p0, bool p1, bool p2) internal pure {
   812 |     |         bytes32 m0;
   813 |     |         bytes32 m1;
   814 |     |         bytes32 m2;
   815 |     |         bytes32 m3;
   816 |     |         /// @solidity memory-safe-assembly
   817 |     |         assembly {
   818 |     |             m0 := mload(0x00)
   819 |     |             m1 := mload(0x20)
   820 |     |             m2 := mload(0x40)
   821 |     |             m3 := mload(0x60)
   822 |     |             // Selector of `log(address,bool,bool)`.
   823 |     |             mstore(0x00, 0xeb830c92)
   824 |     |             mstore(0x20, p0)
   825 |     |             mstore(0x40, p1)
   826 |     |             mstore(0x60, p2)
   827 |     |         }
   828 |     |         _sendLogPayload(0x1c, 0x64);
   829 |     |         /// @solidity memory-safe-assembly
   830 |     |         assembly {
   831 |     |             mstore(0x00, m0)
   832 |     |             mstore(0x20, m1)
   833 |     |             mstore(0x40, m2)
   834 |     |             mstore(0x60, m3)
   835 |     |         }
   836 |     |     }
   837 |     | 
   838 |     |     function log(address p0, bool p1, uint256 p2) internal pure {
   839 |     |         bytes32 m0;
   840 |     |         bytes32 m1;
   841 |     |         bytes32 m2;
   842 |     |         bytes32 m3;
   843 |     |         /// @solidity memory-safe-assembly
   844 |     |         assembly {
   845 |     |             m0 := mload(0x00)
   846 |     |             m1 := mload(0x20)
   847 |     |             m2 := mload(0x40)
   848 |     |             m3 := mload(0x60)
   849 |     |             // Selector of `log(address,bool,uint256)`.
   850 |     |             mstore(0x00, 0x9c4f99fb)
   851 |     |             mstore(0x20, p0)
   852 |     |             mstore(0x40, p1)
   853 |     |             mstore(0x60, p2)
   854 |     |         }
   855 |     |         _sendLogPayload(0x1c, 0x64);
   856 |     |         /// @solidity memory-safe-assembly
   857 |     |         assembly {
   858 |     |             mstore(0x00, m0)
   859 |     |             mstore(0x20, m1)
   860 |     |             mstore(0x40, m2)
   861 |     |             mstore(0x60, m3)
   862 |     |         }
   863 |     |     }
   864 |     | 
   865 |     |     function log(address p0, bool p1, bytes32 p2) internal pure {
   866 |     |         bytes32 m0;
   867 |     |         bytes32 m1;
   868 |     |         bytes32 m2;
   869 |     |         bytes32 m3;
   870 |     |         bytes32 m4;
   871 |     |         bytes32 m5;
   872 |     |         /// @solidity memory-safe-assembly
   873 |     |         assembly {
   874 |     |             function writeString(pos, w) {
   875 |     |                 let length := 0
   876 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   877 |     |                 mstore(pos, length)
   878 |     |                 let shift := sub(256, shl(3, length))
   879 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   880 |     |             }
   881 |     |             m0 := mload(0x00)
   882 |     |             m1 := mload(0x20)
   883 |     |             m2 := mload(0x40)
   884 |     |             m3 := mload(0x60)
   885 |     |             m4 := mload(0x80)
   886 |     |             m5 := mload(0xa0)
   887 |     |             // Selector of `log(address,bool,string)`.
   888 |     |             mstore(0x00, 0x212255cc)
   889 |     |             mstore(0x20, p0)
   890 |     |             mstore(0x40, p1)
   891 |     |             mstore(0x60, 0x60)
   892 |     |             writeString(0x80, p2)
   893 |     |         }
   894 |     |         _sendLogPayload(0x1c, 0xa4);
   895 |     |         /// @solidity memory-safe-assembly
   896 |     |         assembly {
   897 |     |             mstore(0x00, m0)
   898 |     |             mstore(0x20, m1)
   899 |     |             mstore(0x40, m2)
   900 |     |             mstore(0x60, m3)
   901 |     |             mstore(0x80, m4)
   902 |     |             mstore(0xa0, m5)
   903 |     |         }
   904 |     |     }
   905 |     | 
   906 |     |     function log(address p0, uint256 p1, address p2) internal pure {
   907 |     |         bytes32 m0;
   908 |     |         bytes32 m1;
   909 |     |         bytes32 m2;
   910 |     |         bytes32 m3;
   911 |     |         /// @solidity memory-safe-assembly
   912 |     |         assembly {
   913 |     |             m0 := mload(0x00)
   914 |     |             m1 := mload(0x20)
   915 |     |             m2 := mload(0x40)
   916 |     |             m3 := mload(0x60)
   917 |     |             // Selector of `log(address,uint256,address)`.
   918 |     |             mstore(0x00, 0x7bc0d848)
   919 |     |             mstore(0x20, p0)
   920 |     |             mstore(0x40, p1)
   921 |     |             mstore(0x60, p2)
   922 |     |         }
   923 |     |         _sendLogPayload(0x1c, 0x64);
   924 |     |         /// @solidity memory-safe-assembly
   925 |     |         assembly {
   926 |     |             mstore(0x00, m0)
   927 |     |             mstore(0x20, m1)
   928 |     |             mstore(0x40, m2)
   929 |     |             mstore(0x60, m3)
   930 |     |         }
   931 |     |     }
   932 |     | 
   933 |     |     function log(address p0, uint256 p1, bool p2) internal pure {
   934 |     |         bytes32 m0;
   935 |     |         bytes32 m1;
   936 |     |         bytes32 m2;
   937 |     |         bytes32 m3;
   938 |     |         /// @solidity memory-safe-assembly
   939 |     |         assembly {
   940 |     |             m0 := mload(0x00)
   941 |     |             m1 := mload(0x20)
   942 |     |             m2 := mload(0x40)
   943 |     |             m3 := mload(0x60)
   944 |     |             // Selector of `log(address,uint256,bool)`.
   945 |     |             mstore(0x00, 0x678209a8)
   946 |     |             mstore(0x20, p0)
   947 |     |             mstore(0x40, p1)
   948 |     |             mstore(0x60, p2)
   949 |     |         }
   950 |     |         _sendLogPayload(0x1c, 0x64);
   951 |     |         /// @solidity memory-safe-assembly
   952 |     |         assembly {
   953 |     |             mstore(0x00, m0)
   954 |     |             mstore(0x20, m1)
   955 |     |             mstore(0x40, m2)
   956 |     |             mstore(0x60, m3)
   957 |     |         }
   958 |     |     }
   959 |     | 
   960 |     |     function log(address p0, uint256 p1, uint256 p2) internal pure {
   961 |     |         bytes32 m0;
   962 |     |         bytes32 m1;
   963 |     |         bytes32 m2;
   964 |     |         bytes32 m3;
   965 |     |         /// @solidity memory-safe-assembly
   966 |     |         assembly {
   967 |     |             m0 := mload(0x00)
   968 |     |             m1 := mload(0x20)
   969 |     |             m2 := mload(0x40)
   970 |     |             m3 := mload(0x60)
   971 |     |             // Selector of `log(address,uint256,uint256)`.
   972 |     |             mstore(0x00, 0xb69bcaf6)
   973 |     |             mstore(0x20, p0)
   974 |     |             mstore(0x40, p1)
   975 |     |             mstore(0x60, p2)
   976 |     |         }
   977 |     |         _sendLogPayload(0x1c, 0x64);
   978 |     |         /// @solidity memory-safe-assembly
   979 |     |         assembly {
   980 |     |             mstore(0x00, m0)
   981 |     |             mstore(0x20, m1)
   982 |     |             mstore(0x40, m2)
   983 |     |             mstore(0x60, m3)
   984 |     |         }
   985 |     |     }
   986 |     | 
   987 |     |     function log(address p0, uint256 p1, bytes32 p2) internal pure {
   988 |     |         bytes32 m0;
   989 |     |         bytes32 m1;
   990 |     |         bytes32 m2;
   991 |     |         bytes32 m3;
   992 |     |         bytes32 m4;
   993 |     |         bytes32 m5;
   994 |     |         /// @solidity memory-safe-assembly
   995 |     |         assembly {
   996 |     |             function writeString(pos, w) {
   997 |     |                 let length := 0
   998 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   999 |     |                 mstore(pos, length)
  1000 |     |                 let shift := sub(256, shl(3, length))
  1001 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1002 |     |             }
  1003 |     |             m0 := mload(0x00)
  1004 |     |             m1 := mload(0x20)
  1005 |     |             m2 := mload(0x40)
  1006 |     |             m3 := mload(0x60)
  1007 |     |             m4 := mload(0x80)
  1008 |     |             m5 := mload(0xa0)
  1009 |     |             // Selector of `log(address,uint256,string)`.
  1010 |     |             mstore(0x00, 0xa1f2e8aa)
  1011 |     |             mstore(0x20, p0)
  1012 |     |             mstore(0x40, p1)
  1013 |     |             mstore(0x60, 0x60)
  1014 |     |             writeString(0x80, p2)
  1015 |     |         }
  1016 |     |         _sendLogPayload(0x1c, 0xa4);
  1017 |     |         /// @solidity memory-safe-assembly
  1018 |     |         assembly {
  1019 |     |             mstore(0x00, m0)
  1020 |     |             mstore(0x20, m1)
  1021 |     |             mstore(0x40, m2)
  1022 |     |             mstore(0x60, m3)
  1023 |     |             mstore(0x80, m4)
  1024 |     |             mstore(0xa0, m5)
  1025 |     |         }
  1026 |     |     }
  1027 |     | 
  1028 |     |     function log(address p0, bytes32 p1, address p2) internal pure {
  1029 |     |         bytes32 m0;
  1030 |     |         bytes32 m1;
  1031 |     |         bytes32 m2;
  1032 |     |         bytes32 m3;
  1033 |     |         bytes32 m4;
  1034 |     |         bytes32 m5;
  1035 |     |         /// @solidity memory-safe-assembly
  1036 |     |         assembly {
  1037 |     |             function writeString(pos, w) {
  1038 |     |                 let length := 0
  1039 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1040 |     |                 mstore(pos, length)
  1041 |     |                 let shift := sub(256, shl(3, length))
  1042 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1043 |     |             }
  1044 |     |             m0 := mload(0x00)
  1045 |     |             m1 := mload(0x20)
  1046 |     |             m2 := mload(0x40)
  1047 |     |             m3 := mload(0x60)
  1048 |     |             m4 := mload(0x80)
  1049 |     |             m5 := mload(0xa0)
  1050 |     |             // Selector of `log(address,string,address)`.
  1051 |     |             mstore(0x00, 0xf08744e8)
  1052 |     |             mstore(0x20, p0)
  1053 |     |             mstore(0x40, 0x60)
  1054 |     |             mstore(0x60, p2)
  1055 |     |             writeString(0x80, p1)
  1056 |     |         }
  1057 |     |         _sendLogPayload(0x1c, 0xa4);
  1058 |     |         /// @solidity memory-safe-assembly
  1059 |     |         assembly {
  1060 |     |             mstore(0x00, m0)
  1061 |     |             mstore(0x20, m1)
  1062 |     |             mstore(0x40, m2)
  1063 |     |             mstore(0x60, m3)
  1064 |     |             mstore(0x80, m4)
  1065 |     |             mstore(0xa0, m5)
  1066 |     |         }
  1067 |     |     }
  1068 |     | 
  1069 |     |     function log(address p0, bytes32 p1, bool p2) internal pure {
  1070 |     |         bytes32 m0;
  1071 |     |         bytes32 m1;
  1072 |     |         bytes32 m2;
  1073 |     |         bytes32 m3;
  1074 |     |         bytes32 m4;
  1075 |     |         bytes32 m5;
  1076 |     |         /// @solidity memory-safe-assembly
  1077 |     |         assembly {
  1078 |     |             function writeString(pos, w) {
  1079 |     |                 let length := 0
  1080 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1081 |     |                 mstore(pos, length)
  1082 |     |                 let shift := sub(256, shl(3, length))
  1083 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1084 |     |             }
  1085 |     |             m0 := mload(0x00)
  1086 |     |             m1 := mload(0x20)
  1087 |     |             m2 := mload(0x40)
  1088 |     |             m3 := mload(0x60)
  1089 |     |             m4 := mload(0x80)
  1090 |     |             m5 := mload(0xa0)
  1091 |     |             // Selector of `log(address,string,bool)`.
  1092 |     |             mstore(0x00, 0xcf020fb1)
  1093 |     |             mstore(0x20, p0)
  1094 |     |             mstore(0x40, 0x60)
  1095 |     |             mstore(0x60, p2)
  1096 |     |             writeString(0x80, p1)
  1097 |     |         }
  1098 |     |         _sendLogPayload(0x1c, 0xa4);
  1099 |     |         /// @solidity memory-safe-assembly
  1100 |     |         assembly {
  1101 |     |             mstore(0x00, m0)
  1102 |     |             mstore(0x20, m1)
  1103 |     |             mstore(0x40, m2)
  1104 |     |             mstore(0x60, m3)
  1105 |     |             mstore(0x80, m4)
  1106 |     |             mstore(0xa0, m5)
  1107 |     |         }
  1108 |     |     }
  1109 |     | 
  1110 |     |     function log(address p0, bytes32 p1, uint256 p2) internal pure {
  1111 |     |         bytes32 m0;
  1112 |     |         bytes32 m1;
  1113 |     |         bytes32 m2;
  1114 |     |         bytes32 m3;
  1115 |     |         bytes32 m4;
  1116 |     |         bytes32 m5;
  1117 |     |         /// @solidity memory-safe-assembly
  1118 |     |         assembly {
  1119 |     |             function writeString(pos, w) {
  1120 |     |                 let length := 0
  1121 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1122 |     |                 mstore(pos, length)
  1123 |     |                 let shift := sub(256, shl(3, length))
  1124 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1125 |     |             }
  1126 |     |             m0 := mload(0x00)
  1127 |     |             m1 := mload(0x20)
  1128 |     |             m2 := mload(0x40)
  1129 |     |             m3 := mload(0x60)
  1130 |     |             m4 := mload(0x80)
  1131 |     |             m5 := mload(0xa0)
  1132 |     |             // Selector of `log(address,string,uint256)`.
  1133 |     |             mstore(0x00, 0x67dd6ff1)
  1134 |     |             mstore(0x20, p0)
  1135 |     |             mstore(0x40, 0x60)
  1136 |     |             mstore(0x60, p2)
  1137 |     |             writeString(0x80, p1)
  1138 |     |         }
  1139 |     |         _sendLogPayload(0x1c, 0xa4);
  1140 |     |         /// @solidity memory-safe-assembly
  1141 |     |         assembly {
  1142 |     |             mstore(0x00, m0)
  1143 |     |             mstore(0x20, m1)
  1144 |     |             mstore(0x40, m2)
  1145 |     |             mstore(0x60, m3)
  1146 |     |             mstore(0x80, m4)
  1147 |     |             mstore(0xa0, m5)
  1148 |     |         }
  1149 |     |     }
  1150 |     | 
  1151 |     |     function log(address p0, bytes32 p1, bytes32 p2) internal pure {
  1152 |     |         bytes32 m0;
  1153 |     |         bytes32 m1;
  1154 |     |         bytes32 m2;
  1155 |     |         bytes32 m3;
  1156 |     |         bytes32 m4;
  1157 |     |         bytes32 m5;
  1158 |     |         bytes32 m6;
  1159 |     |         bytes32 m7;
  1160 |     |         /// @solidity memory-safe-assembly
  1161 |     |         assembly {
  1162 |     |             function writeString(pos, w) {
  1163 |     |                 let length := 0
  1164 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1165 |     |                 mstore(pos, length)
  1166 |     |                 let shift := sub(256, shl(3, length))
  1167 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1168 |     |             }
  1169 |     |             m0 := mload(0x00)
  1170 |     |             m1 := mload(0x20)
  1171 |     |             m2 := mload(0x40)
  1172 |     |             m3 := mload(0x60)
  1173 |     |             m4 := mload(0x80)
  1174 |     |             m5 := mload(0xa0)
  1175 |     |             m6 := mload(0xc0)
  1176 |     |             m7 := mload(0xe0)
  1177 |     |             // Selector of `log(address,string,string)`.
  1178 |     |             mstore(0x00, 0xfb772265)
  1179 |     |             mstore(0x20, p0)
  1180 |     |             mstore(0x40, 0x60)
  1181 |     |             mstore(0x60, 0xa0)
  1182 |     |             writeString(0x80, p1)
  1183 |     |             writeString(0xc0, p2)
  1184 |     |         }
  1185 |     |         _sendLogPayload(0x1c, 0xe4);
  1186 |     |         /// @solidity memory-safe-assembly
  1187 |     |         assembly {
  1188 |     |             mstore(0x00, m0)
  1189 |     |             mstore(0x20, m1)
  1190 |     |             mstore(0x40, m2)
  1191 |     |             mstore(0x60, m3)
  1192 |     |             mstore(0x80, m4)
  1193 |     |             mstore(0xa0, m5)
  1194 |     |             mstore(0xc0, m6)
  1195 |     |             mstore(0xe0, m7)
  1196 |     |         }
  1197 |     |     }
  1198 |     | 
  1199 |     |     function log(bool p0, address p1, address p2) internal pure {
  1200 |     |         bytes32 m0;
  1201 |     |         bytes32 m1;
  1202 |     |         bytes32 m2;
  1203 |     |         bytes32 m3;
  1204 |     |         /// @solidity memory-safe-assembly
  1205 |     |         assembly {
  1206 |     |             m0 := mload(0x00)
  1207 |     |             m1 := mload(0x20)
  1208 |     |             m2 := mload(0x40)
  1209 |     |             m3 := mload(0x60)
  1210 |     |             // Selector of `log(bool,address,address)`.
  1211 |     |             mstore(0x00, 0xd2763667)
  1212 |     |             mstore(0x20, p0)
  1213 |     |             mstore(0x40, p1)
  1214 |     |             mstore(0x60, p2)
  1215 |     |         }
  1216 |     |         _sendLogPayload(0x1c, 0x64);
  1217 |     |         /// @solidity memory-safe-assembly
  1218 |     |         assembly {
  1219 |     |             mstore(0x00, m0)
  1220 |     |             mstore(0x20, m1)
  1221 |     |             mstore(0x40, m2)
  1222 |     |             mstore(0x60, m3)
  1223 |     |         }
  1224 |     |     }
  1225 |     | 
  1226 |     |     function log(bool p0, address p1, bool p2) internal pure {
  1227 |     |         bytes32 m0;
  1228 |     |         bytes32 m1;
  1229 |     |         bytes32 m2;
  1230 |     |         bytes32 m3;
  1231 |     |         /// @solidity memory-safe-assembly
  1232 |     |         assembly {
  1233 |     |             m0 := mload(0x00)
  1234 |     |             m1 := mload(0x20)
  1235 |     |             m2 := mload(0x40)
  1236 |     |             m3 := mload(0x60)
  1237 |     |             // Selector of `log(bool,address,bool)`.
  1238 |     |             mstore(0x00, 0x18c9c746)
  1239 |     |             mstore(0x20, p0)
  1240 |     |             mstore(0x40, p1)
  1241 |     |             mstore(0x60, p2)
  1242 |     |         }
  1243 |     |         _sendLogPayload(0x1c, 0x64);
  1244 |     |         /// @solidity memory-safe-assembly
  1245 |     |         assembly {
  1246 |     |             mstore(0x00, m0)
  1247 |     |             mstore(0x20, m1)
  1248 |     |             mstore(0x40, m2)
  1249 |     |             mstore(0x60, m3)
  1250 |     |         }
  1251 |     |     }
  1252 |     | 
  1253 |     |     function log(bool p0, address p1, uint256 p2) internal pure {
  1254 |     |         bytes32 m0;
  1255 |     |         bytes32 m1;
  1256 |     |         bytes32 m2;
  1257 |     |         bytes32 m3;
  1258 |     |         /// @solidity memory-safe-assembly
  1259 |     |         assembly {
  1260 |     |             m0 := mload(0x00)
  1261 |     |             m1 := mload(0x20)
  1262 |     |             m2 := mload(0x40)
  1263 |     |             m3 := mload(0x60)
  1264 |     |             // Selector of `log(bool,address,uint256)`.
  1265 |     |             mstore(0x00, 0x5f7b9afb)
  1266 |     |             mstore(0x20, p0)
  1267 |     |             mstore(0x40, p1)
  1268 |     |             mstore(0x60, p2)
  1269 |     |         }
  1270 |     |         _sendLogPayload(0x1c, 0x64);
  1271 |     |         /// @solidity memory-safe-assembly
  1272 |     |         assembly {
  1273 |     |             mstore(0x00, m0)
  1274 |     |             mstore(0x20, m1)
  1275 |     |             mstore(0x40, m2)
  1276 |     |             mstore(0x60, m3)
  1277 |     |         }
  1278 |     |     }
  1279 |     | 
  1280 |     |     function log(bool p0, address p1, bytes32 p2) internal pure {
  1281 |     |         bytes32 m0;
  1282 |     |         bytes32 m1;
  1283 |     |         bytes32 m2;
  1284 |     |         bytes32 m3;
  1285 |     |         bytes32 m4;
  1286 |     |         bytes32 m5;
  1287 |     |         /// @solidity memory-safe-assembly
  1288 |     |         assembly {
  1289 |     |             function writeString(pos, w) {
  1290 |     |                 let length := 0
  1291 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1292 |     |                 mstore(pos, length)
  1293 |     |                 let shift := sub(256, shl(3, length))
  1294 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1295 |     |             }
  1296 |     |             m0 := mload(0x00)
  1297 |     |             m1 := mload(0x20)
  1298 |     |             m2 := mload(0x40)
  1299 |     |             m3 := mload(0x60)
  1300 |     |             m4 := mload(0x80)
  1301 |     |             m5 := mload(0xa0)
  1302 |     |             // Selector of `log(bool,address,string)`.
  1303 |     |             mstore(0x00, 0xde9a9270)
  1304 |     |             mstore(0x20, p0)
  1305 |     |             mstore(0x40, p1)
  1306 |     |             mstore(0x60, 0x60)
  1307 |     |             writeString(0x80, p2)
  1308 |     |         }
  1309 |     |         _sendLogPayload(0x1c, 0xa4);
  1310 |     |         /// @solidity memory-safe-assembly
  1311 |     |         assembly {
  1312 |     |             mstore(0x00, m0)
  1313 |     |             mstore(0x20, m1)
  1314 |     |             mstore(0x40, m2)
  1315 |     |             mstore(0x60, m3)
  1316 |     |             mstore(0x80, m4)
  1317 |     |             mstore(0xa0, m5)
  1318 |     |         }
  1319 |     |     }
  1320 |     | 
  1321 |     |     function log(bool p0, bool p1, address p2) internal pure {
  1322 |     |         bytes32 m0;
  1323 |     |         bytes32 m1;
  1324 |     |         bytes32 m2;
  1325 |     |         bytes32 m3;
  1326 |     |         /// @solidity memory-safe-assembly
  1327 |     |         assembly {
  1328 |     |             m0 := mload(0x00)
  1329 |     |             m1 := mload(0x20)
  1330 |     |             m2 := mload(0x40)
  1331 |     |             m3 := mload(0x60)
  1332 |     |             // Selector of `log(bool,bool,address)`.
  1333 |     |             mstore(0x00, 0x1078f68d)
  1334 |     |             mstore(0x20, p0)
  1335 |     |             mstore(0x40, p1)
  1336 |     |             mstore(0x60, p2)
  1337 |     |         }
  1338 |     |         _sendLogPayload(0x1c, 0x64);
  1339 |     |         /// @solidity memory-safe-assembly
  1340 |     |         assembly {
  1341 |     |             mstore(0x00, m0)
  1342 |     |             mstore(0x20, m1)
  1343 |     |             mstore(0x40, m2)
  1344 |     |             mstore(0x60, m3)
  1345 |     |         }
  1346 |     |     }
  1347 |     | 
  1348 |     |     function log(bool p0, bool p1, bool p2) internal pure {
  1349 |     |         bytes32 m0;
  1350 |     |         bytes32 m1;
  1351 |     |         bytes32 m2;
  1352 |     |         bytes32 m3;
  1353 |     |         /// @solidity memory-safe-assembly
  1354 |     |         assembly {
  1355 |     |             m0 := mload(0x00)
  1356 |     |             m1 := mload(0x20)
  1357 |     |             m2 := mload(0x40)
  1358 |     |             m3 := mload(0x60)
  1359 |     |             // Selector of `log(bool,bool,bool)`.
  1360 |     |             mstore(0x00, 0x50709698)
  1361 |     |             mstore(0x20, p0)
  1362 |     |             mstore(0x40, p1)
  1363 |     |             mstore(0x60, p2)
  1364 |     |         }
  1365 |     |         _sendLogPayload(0x1c, 0x64);
  1366 |     |         /// @solidity memory-safe-assembly
  1367 |     |         assembly {
  1368 |     |             mstore(0x00, m0)
  1369 |     |             mstore(0x20, m1)
  1370 |     |             mstore(0x40, m2)
  1371 |     |             mstore(0x60, m3)
  1372 |     |         }
  1373 |     |     }
  1374 |     | 
  1375 |     |     function log(bool p0, bool p1, uint256 p2) internal pure {
  1376 |     |         bytes32 m0;
  1377 |     |         bytes32 m1;
  1378 |     |         bytes32 m2;
  1379 |     |         bytes32 m3;
  1380 |     |         /// @solidity memory-safe-assembly
  1381 |     |         assembly {
  1382 |     |             m0 := mload(0x00)
  1383 |     |             m1 := mload(0x20)
  1384 |     |             m2 := mload(0x40)
  1385 |     |             m3 := mload(0x60)
  1386 |     |             // Selector of `log(bool,bool,uint256)`.
  1387 |     |             mstore(0x00, 0x12f21602)
  1388 |     |             mstore(0x20, p0)
  1389 |     |             mstore(0x40, p1)
  1390 |     |             mstore(0x60, p2)
  1391 |     |         }
  1392 |     |         _sendLogPayload(0x1c, 0x64);
  1393 |     |         /// @solidity memory-safe-assembly
  1394 |     |         assembly {
  1395 |     |             mstore(0x00, m0)
  1396 |     |             mstore(0x20, m1)
  1397 |     |             mstore(0x40, m2)
  1398 |     |             mstore(0x60, m3)
  1399 |     |         }
  1400 |     |     }
  1401 |     | 
  1402 |     |     function log(bool p0, bool p1, bytes32 p2) internal pure {
  1403 |     |         bytes32 m0;
  1404 |     |         bytes32 m1;
  1405 |     |         bytes32 m2;
  1406 |     |         bytes32 m3;
  1407 |     |         bytes32 m4;
  1408 |     |         bytes32 m5;
  1409 |     |         /// @solidity memory-safe-assembly
  1410 |     |         assembly {
  1411 |     |             function writeString(pos, w) {
  1412 |     |                 let length := 0
  1413 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1414 |     |                 mstore(pos, length)
  1415 |     |                 let shift := sub(256, shl(3, length))
  1416 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1417 |     |             }
  1418 |     |             m0 := mload(0x00)
  1419 |     |             m1 := mload(0x20)
  1420 |     |             m2 := mload(0x40)
  1421 |     |             m3 := mload(0x60)
  1422 |     |             m4 := mload(0x80)
  1423 |     |             m5 := mload(0xa0)
  1424 |     |             // Selector of `log(bool,bool,string)`.
  1425 |     |             mstore(0x00, 0x2555fa46)
  1426 |     |             mstore(0x20, p0)
  1427 |     |             mstore(0x40, p1)
  1428 |     |             mstore(0x60, 0x60)
  1429 |     |             writeString(0x80, p2)
  1430 |     |         }
  1431 |     |         _sendLogPayload(0x1c, 0xa4);
  1432 |     |         /// @solidity memory-safe-assembly
  1433 |     |         assembly {
  1434 |     |             mstore(0x00, m0)
  1435 |     |             mstore(0x20, m1)
  1436 |     |             mstore(0x40, m2)
  1437 |     |             mstore(0x60, m3)
  1438 |     |             mstore(0x80, m4)
  1439 |     |             mstore(0xa0, m5)
  1440 |     |         }
  1441 |     |     }
  1442 |     | 
  1443 |     |     function log(bool p0, uint256 p1, address p2) internal pure {
  1444 |     |         bytes32 m0;
  1445 |     |         bytes32 m1;
  1446 |     |         bytes32 m2;
  1447 |     |         bytes32 m3;
  1448 |     |         /// @solidity memory-safe-assembly
  1449 |     |         assembly {
  1450 |     |             m0 := mload(0x00)
  1451 |     |             m1 := mload(0x20)
  1452 |     |             m2 := mload(0x40)
  1453 |     |             m3 := mload(0x60)
  1454 |     |             // Selector of `log(bool,uint256,address)`.
  1455 |     |             mstore(0x00, 0x088ef9d2)
  1456 |     |             mstore(0x20, p0)
  1457 |     |             mstore(0x40, p1)
  1458 |     |             mstore(0x60, p2)
  1459 |     |         }
  1460 |     |         _sendLogPayload(0x1c, 0x64);
  1461 |     |         /// @solidity memory-safe-assembly
  1462 |     |         assembly {
  1463 |     |             mstore(0x00, m0)
  1464 |     |             mstore(0x20, m1)
  1465 |     |             mstore(0x40, m2)
  1466 |     |             mstore(0x60, m3)
  1467 |     |         }
  1468 |     |     }
  1469 |     | 
  1470 |     |     function log(bool p0, uint256 p1, bool p2) internal pure {
  1471 |     |         bytes32 m0;
  1472 |     |         bytes32 m1;
  1473 |     |         bytes32 m2;
  1474 |     |         bytes32 m3;
  1475 |     |         /// @solidity memory-safe-assembly
  1476 |     |         assembly {
  1477 |     |             m0 := mload(0x00)
  1478 |     |             m1 := mload(0x20)
  1479 |     |             m2 := mload(0x40)
  1480 |     |             m3 := mload(0x60)
  1481 |     |             // Selector of `log(bool,uint256,bool)`.
  1482 |     |             mstore(0x00, 0xe8defba9)
  1483 |     |             mstore(0x20, p0)
  1484 |     |             mstore(0x40, p1)
  1485 |     |             mstore(0x60, p2)
  1486 |     |         }
  1487 |     |         _sendLogPayload(0x1c, 0x64);
  1488 |     |         /// @solidity memory-safe-assembly
  1489 |     |         assembly {
  1490 |     |             mstore(0x00, m0)
  1491 |     |             mstore(0x20, m1)
  1492 |     |             mstore(0x40, m2)
  1493 |     |             mstore(0x60, m3)
  1494 |     |         }
  1495 |     |     }
  1496 |     | 
  1497 |     |     function log(bool p0, uint256 p1, uint256 p2) internal pure {
  1498 |     |         bytes32 m0;
  1499 |     |         bytes32 m1;
  1500 |     |         bytes32 m2;
  1501 |     |         bytes32 m3;
  1502 |     |         /// @solidity memory-safe-assembly
  1503 |     |         assembly {
  1504 |     |             m0 := mload(0x00)
  1505 |     |             m1 := mload(0x20)
  1506 |     |             m2 := mload(0x40)
  1507 |     |             m3 := mload(0x60)
  1508 |     |             // Selector of `log(bool,uint256,uint256)`.
  1509 |     |             mstore(0x00, 0x37103367)
  1510 |     |             mstore(0x20, p0)
  1511 |     |             mstore(0x40, p1)
  1512 |     |             mstore(0x60, p2)
  1513 |     |         }
  1514 |     |         _sendLogPayload(0x1c, 0x64);
  1515 |     |         /// @solidity memory-safe-assembly
  1516 |     |         assembly {
  1517 |     |             mstore(0x00, m0)
  1518 |     |             mstore(0x20, m1)
  1519 |     |             mstore(0x40, m2)
  1520 |     |             mstore(0x60, m3)
  1521 |     |         }
  1522 |     |     }
  1523 |     | 
  1524 |     |     function log(bool p0, uint256 p1, bytes32 p2) internal pure {
  1525 |     |         bytes32 m0;
  1526 |     |         bytes32 m1;
  1527 |     |         bytes32 m2;
  1528 |     |         bytes32 m3;
  1529 |     |         bytes32 m4;
  1530 |     |         bytes32 m5;
  1531 |     |         /// @solidity memory-safe-assembly
  1532 |     |         assembly {
  1533 |     |             function writeString(pos, w) {
  1534 |     |                 let length := 0
  1535 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1536 |     |                 mstore(pos, length)
  1537 |     |                 let shift := sub(256, shl(3, length))
  1538 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1539 |     |             }
  1540 |     |             m0 := mload(0x00)
  1541 |     |             m1 := mload(0x20)
  1542 |     |             m2 := mload(0x40)
  1543 |     |             m3 := mload(0x60)
  1544 |     |             m4 := mload(0x80)
  1545 |     |             m5 := mload(0xa0)
  1546 |     |             // Selector of `log(bool,uint256,string)`.
  1547 |     |             mstore(0x00, 0xc3fc3970)
  1548 |     |             mstore(0x20, p0)
  1549 |     |             mstore(0x40, p1)
  1550 |     |             mstore(0x60, 0x60)
  1551 |     |             writeString(0x80, p2)
  1552 |     |         }
  1553 |     |         _sendLogPayload(0x1c, 0xa4);
  1554 |     |         /// @solidity memory-safe-assembly
  1555 |     |         assembly {
  1556 |     |             mstore(0x00, m0)
  1557 |     |             mstore(0x20, m1)
  1558 |     |             mstore(0x40, m2)
  1559 |     |             mstore(0x60, m3)
  1560 |     |             mstore(0x80, m4)
  1561 |     |             mstore(0xa0, m5)
  1562 |     |         }
  1563 |     |     }
  1564 |     | 
  1565 |     |     function log(bool p0, bytes32 p1, address p2) internal pure {
  1566 |     |         bytes32 m0;
  1567 |     |         bytes32 m1;
  1568 |     |         bytes32 m2;
  1569 |     |         bytes32 m3;
  1570 |     |         bytes32 m4;
  1571 |     |         bytes32 m5;
  1572 |     |         /// @solidity memory-safe-assembly
  1573 |     |         assembly {
  1574 |     |             function writeString(pos, w) {
  1575 |     |                 let length := 0
  1576 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1577 |     |                 mstore(pos, length)
  1578 |     |                 let shift := sub(256, shl(3, length))
  1579 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1580 |     |             }
  1581 |     |             m0 := mload(0x00)
  1582 |     |             m1 := mload(0x20)
  1583 |     |             m2 := mload(0x40)
  1584 |     |             m3 := mload(0x60)
  1585 |     |             m4 := mload(0x80)
  1586 |     |             m5 := mload(0xa0)
  1587 |     |             // Selector of `log(bool,string,address)`.
  1588 |     |             mstore(0x00, 0x9591b953)
  1589 |     |             mstore(0x20, p0)
  1590 |     |             mstore(0x40, 0x60)
  1591 |     |             mstore(0x60, p2)
  1592 |     |             writeString(0x80, p1)
  1593 |     |         }
  1594 |     |         _sendLogPayload(0x1c, 0xa4);
  1595 |     |         /// @solidity memory-safe-assembly
  1596 |     |         assembly {
  1597 |     |             mstore(0x00, m0)
  1598 |     |             mstore(0x20, m1)
  1599 |     |             mstore(0x40, m2)
  1600 |     |             mstore(0x60, m3)
  1601 |     |             mstore(0x80, m4)
  1602 |     |             mstore(0xa0, m5)
  1603 |     |         }
  1604 |     |     }
  1605 |     | 
  1606 |     |     function log(bool p0, bytes32 p1, bool p2) internal pure {
  1607 |     |         bytes32 m0;
  1608 |     |         bytes32 m1;
  1609 |     |         bytes32 m2;
  1610 |     |         bytes32 m3;
  1611 |     |         bytes32 m4;
  1612 |     |         bytes32 m5;
  1613 |     |         /// @solidity memory-safe-assembly
  1614 |     |         assembly {
  1615 |     |             function writeString(pos, w) {
  1616 |     |                 let length := 0
  1617 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1618 |     |                 mstore(pos, length)
  1619 |     |                 let shift := sub(256, shl(3, length))
  1620 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1621 |     |             }
  1622 |     |             m0 := mload(0x00)
  1623 |     |             m1 := mload(0x20)
  1624 |     |             m2 := mload(0x40)
  1625 |     |             m3 := mload(0x60)
  1626 |     |             m4 := mload(0x80)
  1627 |     |             m5 := mload(0xa0)
  1628 |     |             // Selector of `log(bool,string,bool)`.
  1629 |     |             mstore(0x00, 0xdbb4c247)
  1630 |     |             mstore(0x20, p0)
  1631 |     |             mstore(0x40, 0x60)
  1632 |     |             mstore(0x60, p2)
  1633 |     |             writeString(0x80, p1)
  1634 |     |         }
  1635 |     |         _sendLogPayload(0x1c, 0xa4);
  1636 |     |         /// @solidity memory-safe-assembly
  1637 |     |         assembly {
  1638 |     |             mstore(0x00, m0)
  1639 |     |             mstore(0x20, m1)
  1640 |     |             mstore(0x40, m2)
  1641 |     |             mstore(0x60, m3)
  1642 |     |             mstore(0x80, m4)
  1643 |     |             mstore(0xa0, m5)
  1644 |     |         }
  1645 |     |     }
  1646 |     | 
  1647 |     |     function log(bool p0, bytes32 p1, uint256 p2) internal pure {
  1648 |     |         bytes32 m0;
  1649 |     |         bytes32 m1;
  1650 |     |         bytes32 m2;
  1651 |     |         bytes32 m3;
  1652 |     |         bytes32 m4;
  1653 |     |         bytes32 m5;
  1654 |     |         /// @solidity memory-safe-assembly
  1655 |     |         assembly {
  1656 |     |             function writeString(pos, w) {
  1657 |     |                 let length := 0
  1658 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1659 |     |                 mstore(pos, length)
  1660 |     |                 let shift := sub(256, shl(3, length))
  1661 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1662 |     |             }
  1663 |     |             m0 := mload(0x00)
  1664 |     |             m1 := mload(0x20)
  1665 |     |             m2 := mload(0x40)
  1666 |     |             m3 := mload(0x60)
  1667 |     |             m4 := mload(0x80)
  1668 |     |             m5 := mload(0xa0)
  1669 |     |             // Selector of `log(bool,string,uint256)`.
  1670 |     |             mstore(0x00, 0x1093ee11)
  1671 |     |             mstore(0x20, p0)
  1672 |     |             mstore(0x40, 0x60)
  1673 |     |             mstore(0x60, p2)
  1674 |     |             writeString(0x80, p1)
  1675 |     |         }
  1676 |     |         _sendLogPayload(0x1c, 0xa4);
  1677 |     |         /// @solidity memory-safe-assembly
  1678 |     |         assembly {
  1679 |     |             mstore(0x00, m0)
  1680 |     |             mstore(0x20, m1)
  1681 |     |             mstore(0x40, m2)
  1682 |     |             mstore(0x60, m3)
  1683 |     |             mstore(0x80, m4)
  1684 |     |             mstore(0xa0, m5)
  1685 |     |         }
  1686 |     |     }
  1687 |     | 
  1688 |     |     function log(bool p0, bytes32 p1, bytes32 p2) internal pure {
  1689 |     |         bytes32 m0;
  1690 |     |         bytes32 m1;
  1691 |     |         bytes32 m2;
  1692 |     |         bytes32 m3;
  1693 |     |         bytes32 m4;
  1694 |     |         bytes32 m5;
  1695 |     |         bytes32 m6;
  1696 |     |         bytes32 m7;
  1697 |     |         /// @solidity memory-safe-assembly
  1698 |     |         assembly {
  1699 |     |             function writeString(pos, w) {
  1700 |     |                 let length := 0
  1701 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1702 |     |                 mstore(pos, length)
  1703 |     |                 let shift := sub(256, shl(3, length))
  1704 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1705 |     |             }
  1706 |     |             m0 := mload(0x00)
  1707 |     |             m1 := mload(0x20)
  1708 |     |             m2 := mload(0x40)
  1709 |     |             m3 := mload(0x60)
  1710 |     |             m4 := mload(0x80)
  1711 |     |             m5 := mload(0xa0)
  1712 |     |             m6 := mload(0xc0)
  1713 |     |             m7 := mload(0xe0)
  1714 |     |             // Selector of `log(bool,string,string)`.
  1715 |     |             mstore(0x00, 0xb076847f)
  1716 |     |             mstore(0x20, p0)
  1717 |     |             mstore(0x40, 0x60)
  1718 |     |             mstore(0x60, 0xa0)
  1719 |     |             writeString(0x80, p1)
  1720 |     |             writeString(0xc0, p2)
  1721 |     |         }
  1722 |     |         _sendLogPayload(0x1c, 0xe4);
  1723 |     |         /// @solidity memory-safe-assembly
  1724 |     |         assembly {
  1725 |     |             mstore(0x00, m0)
  1726 |     |             mstore(0x20, m1)
  1727 |     |             mstore(0x40, m2)
  1728 |     |             mstore(0x60, m3)
  1729 |     |             mstore(0x80, m4)
  1730 |     |             mstore(0xa0, m5)
  1731 |     |             mstore(0xc0, m6)
  1732 |     |             mstore(0xe0, m7)
  1733 |     |         }
  1734 |     |     }
  1735 |     | 
  1736 |     |     function log(uint256 p0, address p1, address p2) internal pure {
  1737 |     |         bytes32 m0;
  1738 |     |         bytes32 m1;
  1739 |     |         bytes32 m2;
  1740 |     |         bytes32 m3;
  1741 |     |         /// @solidity memory-safe-assembly
  1742 |     |         assembly {
  1743 |     |             m0 := mload(0x00)
  1744 |     |             m1 := mload(0x20)
  1745 |     |             m2 := mload(0x40)
  1746 |     |             m3 := mload(0x60)
  1747 |     |             // Selector of `log(uint256,address,address)`.
  1748 |     |             mstore(0x00, 0xbcfd9be0)
  1749 |     |             mstore(0x20, p0)
  1750 |     |             mstore(0x40, p1)
  1751 |     |             mstore(0x60, p2)
  1752 |     |         }
  1753 |     |         _sendLogPayload(0x1c, 0x64);
  1754 |     |         /// @solidity memory-safe-assembly
  1755 |     |         assembly {
  1756 |     |             mstore(0x00, m0)
  1757 |     |             mstore(0x20, m1)
  1758 |     |             mstore(0x40, m2)
  1759 |     |             mstore(0x60, m3)
  1760 |     |         }
  1761 |     |     }
  1762 |     | 
  1763 |     |     function log(uint256 p0, address p1, bool p2) internal pure {
  1764 |     |         bytes32 m0;
  1765 |     |         bytes32 m1;
  1766 |     |         bytes32 m2;
  1767 |     |         bytes32 m3;
  1768 |     |         /// @solidity memory-safe-assembly
  1769 |     |         assembly {
  1770 |     |             m0 := mload(0x00)
  1771 |     |             m1 := mload(0x20)
  1772 |     |             m2 := mload(0x40)
  1773 |     |             m3 := mload(0x60)
  1774 |     |             // Selector of `log(uint256,address,bool)`.
  1775 |     |             mstore(0x00, 0x9b6ec042)
  1776 |     |             mstore(0x20, p0)
  1777 |     |             mstore(0x40, p1)
  1778 |     |             mstore(0x60, p2)
  1779 |     |         }
  1780 |     |         _sendLogPayload(0x1c, 0x64);
  1781 |     |         /// @solidity memory-safe-assembly
  1782 |     |         assembly {
  1783 |     |             mstore(0x00, m0)
  1784 |     |             mstore(0x20, m1)
  1785 |     |             mstore(0x40, m2)
  1786 |     |             mstore(0x60, m3)
  1787 |     |         }
  1788 |     |     }
  1789 |     | 
  1790 |     |     function log(uint256 p0, address p1, uint256 p2) internal pure {
  1791 |     |         bytes32 m0;
  1792 |     |         bytes32 m1;
  1793 |     |         bytes32 m2;
  1794 |     |         bytes32 m3;
  1795 |     |         /// @solidity memory-safe-assembly
  1796 |     |         assembly {
  1797 |     |             m0 := mload(0x00)
  1798 |     |             m1 := mload(0x20)
  1799 |     |             m2 := mload(0x40)
  1800 |     |             m3 := mload(0x60)
  1801 |     |             // Selector of `log(uint256,address,uint256)`.
  1802 |     |             mstore(0x00, 0x5a9b5ed5)
  1803 |     |             mstore(0x20, p0)
  1804 |     |             mstore(0x40, p1)
  1805 |     |             mstore(0x60, p2)
  1806 |     |         }
  1807 |     |         _sendLogPayload(0x1c, 0x64);
  1808 |     |         /// @solidity memory-safe-assembly
  1809 |     |         assembly {
  1810 |     |             mstore(0x00, m0)
  1811 |     |             mstore(0x20, m1)
  1812 |     |             mstore(0x40, m2)
  1813 |     |             mstore(0x60, m3)
  1814 |     |         }
  1815 |     |     }
  1816 |     | 
  1817 |     |     function log(uint256 p0, address p1, bytes32 p2) internal pure {
  1818 |     |         bytes32 m0;
  1819 |     |         bytes32 m1;
  1820 |     |         bytes32 m2;
  1821 |     |         bytes32 m3;
  1822 |     |         bytes32 m4;
  1823 |     |         bytes32 m5;
  1824 |     |         /// @solidity memory-safe-assembly
  1825 |     |         assembly {
  1826 |     |             function writeString(pos, w) {
  1827 |     |                 let length := 0
  1828 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1829 |     |                 mstore(pos, length)
  1830 |     |                 let shift := sub(256, shl(3, length))
  1831 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1832 |     |             }
  1833 |     |             m0 := mload(0x00)
  1834 |     |             m1 := mload(0x20)
  1835 |     |             m2 := mload(0x40)
  1836 |     |             m3 := mload(0x60)
  1837 |     |             m4 := mload(0x80)
  1838 |     |             m5 := mload(0xa0)
  1839 |     |             // Selector of `log(uint256,address,string)`.
  1840 |     |             mstore(0x00, 0x63cb41f9)
  1841 |     |             mstore(0x20, p0)
  1842 |     |             mstore(0x40, p1)
  1843 |     |             mstore(0x60, 0x60)
  1844 |     |             writeString(0x80, p2)
  1845 |     |         }
  1846 |     |         _sendLogPayload(0x1c, 0xa4);
  1847 |     |         /// @solidity memory-safe-assembly
  1848 |     |         assembly {
  1849 |     |             mstore(0x00, m0)
  1850 |     |             mstore(0x20, m1)
  1851 |     |             mstore(0x40, m2)
  1852 |     |             mstore(0x60, m3)
  1853 |     |             mstore(0x80, m4)
  1854 |     |             mstore(0xa0, m5)
  1855 |     |         }
  1856 |     |     }
  1857 |     | 
  1858 |     |     function log(uint256 p0, bool p1, address p2) internal pure {
  1859 |     |         bytes32 m0;
  1860 |     |         bytes32 m1;
  1861 |     |         bytes32 m2;
  1862 |     |         bytes32 m3;
  1863 |     |         /// @solidity memory-safe-assembly
  1864 |     |         assembly {
  1865 |     |             m0 := mload(0x00)
  1866 |     |             m1 := mload(0x20)
  1867 |     |             m2 := mload(0x40)
  1868 |     |             m3 := mload(0x60)
  1869 |     |             // Selector of `log(uint256,bool,address)`.
  1870 |     |             mstore(0x00, 0x35085f7b)
  1871 |     |             mstore(0x20, p0)
  1872 |     |             mstore(0x40, p1)
  1873 |     |             mstore(0x60, p2)
  1874 |     |         }
  1875 |     |         _sendLogPayload(0x1c, 0x64);
  1876 |     |         /// @solidity memory-safe-assembly
  1877 |     |         assembly {
  1878 |     |             mstore(0x00, m0)
  1879 |     |             mstore(0x20, m1)
  1880 |     |             mstore(0x40, m2)
  1881 |     |             mstore(0x60, m3)
  1882 |     |         }
  1883 |     |     }
  1884 |     | 
  1885 |     |     function log(uint256 p0, bool p1, bool p2) internal pure {
  1886 |     |         bytes32 m0;
  1887 |     |         bytes32 m1;
  1888 |     |         bytes32 m2;
  1889 |     |         bytes32 m3;
  1890 |     |         /// @solidity memory-safe-assembly
  1891 |     |         assembly {
  1892 |     |             m0 := mload(0x00)
  1893 |     |             m1 := mload(0x20)
  1894 |     |             m2 := mload(0x40)
  1895 |     |             m3 := mload(0x60)
  1896 |     |             // Selector of `log(uint256,bool,bool)`.
  1897 |     |             mstore(0x00, 0x20718650)
  1898 |     |             mstore(0x20, p0)
  1899 |     |             mstore(0x40, p1)
  1900 |     |             mstore(0x60, p2)
  1901 |     |         }
  1902 |     |         _sendLogPayload(0x1c, 0x64);
  1903 |     |         /// @solidity memory-safe-assembly
  1904 |     |         assembly {
  1905 |     |             mstore(0x00, m0)
  1906 |     |             mstore(0x20, m1)
  1907 |     |             mstore(0x40, m2)
  1908 |     |             mstore(0x60, m3)
  1909 |     |         }
  1910 |     |     }
  1911 |     | 
  1912 |     |     function log(uint256 p0, bool p1, uint256 p2) internal pure {
  1913 |     |         bytes32 m0;
  1914 |     |         bytes32 m1;
  1915 |     |         bytes32 m2;
  1916 |     |         bytes32 m3;
  1917 |     |         /// @solidity memory-safe-assembly
  1918 |     |         assembly {
  1919 |     |             m0 := mload(0x00)
  1920 |     |             m1 := mload(0x20)
  1921 |     |             m2 := mload(0x40)
  1922 |     |             m3 := mload(0x60)
  1923 |     |             // Selector of `log(uint256,bool,uint256)`.
  1924 |     |             mstore(0x00, 0x20098014)
  1925 |     |             mstore(0x20, p0)
  1926 |     |             mstore(0x40, p1)
  1927 |     |             mstore(0x60, p2)
  1928 |     |         }
  1929 |     |         _sendLogPayload(0x1c, 0x64);
  1930 |     |         /// @solidity memory-safe-assembly
  1931 |     |         assembly {
  1932 |     |             mstore(0x00, m0)
  1933 |     |             mstore(0x20, m1)
  1934 |     |             mstore(0x40, m2)
  1935 |     |             mstore(0x60, m3)
  1936 |     |         }
  1937 |     |     }
  1938 |     | 
  1939 |     |     function log(uint256 p0, bool p1, bytes32 p2) internal pure {
  1940 |     |         bytes32 m0;
  1941 |     |         bytes32 m1;
  1942 |     |         bytes32 m2;
  1943 |     |         bytes32 m3;
  1944 |     |         bytes32 m4;
  1945 |     |         bytes32 m5;
  1946 |     |         /// @solidity memory-safe-assembly
  1947 |     |         assembly {
  1948 |     |             function writeString(pos, w) {
  1949 |     |                 let length := 0
  1950 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1951 |     |                 mstore(pos, length)
  1952 |     |                 let shift := sub(256, shl(3, length))
  1953 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1954 |     |             }
  1955 |     |             m0 := mload(0x00)
  1956 |     |             m1 := mload(0x20)
  1957 |     |             m2 := mload(0x40)
  1958 |     |             m3 := mload(0x60)
  1959 |     |             m4 := mload(0x80)
  1960 |     |             m5 := mload(0xa0)
  1961 |     |             // Selector of `log(uint256,bool,string)`.
  1962 |     |             mstore(0x00, 0x85775021)
  1963 |     |             mstore(0x20, p0)
  1964 |     |             mstore(0x40, p1)
  1965 |     |             mstore(0x60, 0x60)
  1966 |     |             writeString(0x80, p2)
  1967 |     |         }
  1968 |     |         _sendLogPayload(0x1c, 0xa4);
  1969 |     |         /// @solidity memory-safe-assembly
  1970 |     |         assembly {
  1971 |     |             mstore(0x00, m0)
  1972 |     |             mstore(0x20, m1)
  1973 |     |             mstore(0x40, m2)
  1974 |     |             mstore(0x60, m3)
  1975 |     |             mstore(0x80, m4)
  1976 |     |             mstore(0xa0, m5)
  1977 |     |         }
  1978 |     |     }
  1979 |     | 
  1980 |     |     function log(uint256 p0, uint256 p1, address p2) internal pure {
  1981 |     |         bytes32 m0;
  1982 |     |         bytes32 m1;
  1983 |     |         bytes32 m2;
  1984 |     |         bytes32 m3;
  1985 |     |         /// @solidity memory-safe-assembly
  1986 |     |         assembly {
  1987 |     |             m0 := mload(0x00)
  1988 |     |             m1 := mload(0x20)
  1989 |     |             m2 := mload(0x40)
  1990 |     |             m3 := mload(0x60)
  1991 |     |             // Selector of `log(uint256,uint256,address)`.
  1992 |     |             mstore(0x00, 0x5c96b331)
  1993 |     |             mstore(0x20, p0)
  1994 |     |             mstore(0x40, p1)
  1995 |     |             mstore(0x60, p2)
  1996 |     |         }
  1997 |     |         _sendLogPayload(0x1c, 0x64);
  1998 |     |         /// @solidity memory-safe-assembly
  1999 |     |         assembly {
  2000 |     |             mstore(0x00, m0)
  2001 |     |             mstore(0x20, m1)
  2002 |     |             mstore(0x40, m2)
  2003 |     |             mstore(0x60, m3)
  2004 |     |         }
  2005 |     |     }
  2006 |     | 
  2007 |     |     function log(uint256 p0, uint256 p1, bool p2) internal pure {
  2008 |     |         bytes32 m0;
  2009 |     |         bytes32 m1;
  2010 |     |         bytes32 m2;
  2011 |     |         bytes32 m3;
  2012 |     |         /// @solidity memory-safe-assembly
  2013 |     |         assembly {
  2014 |     |             m0 := mload(0x00)
  2015 |     |             m1 := mload(0x20)
  2016 |     |             m2 := mload(0x40)
  2017 |     |             m3 := mload(0x60)
  2018 |     |             // Selector of `log(uint256,uint256,bool)`.
  2019 |     |             mstore(0x00, 0x4766da72)
  2020 |     |             mstore(0x20, p0)
  2021 |     |             mstore(0x40, p1)
  2022 |     |             mstore(0x60, p2)
  2023 |     |         }
  2024 |     |         _sendLogPayload(0x1c, 0x64);
  2025 |     |         /// @solidity memory-safe-assembly
  2026 |     |         assembly {
  2027 |     |             mstore(0x00, m0)
  2028 |     |             mstore(0x20, m1)
  2029 |     |             mstore(0x40, m2)
  2030 |     |             mstore(0x60, m3)
  2031 |     |         }
  2032 |     |     }
  2033 |     | 
  2034 |     |     function log(uint256 p0, uint256 p1, uint256 p2) internal pure {
  2035 |     |         bytes32 m0;
  2036 |     |         bytes32 m1;
  2037 |     |         bytes32 m2;
  2038 |     |         bytes32 m3;
  2039 |     |         /// @solidity memory-safe-assembly
  2040 |     |         assembly {
  2041 |     |             m0 := mload(0x00)
  2042 |     |             m1 := mload(0x20)
  2043 |     |             m2 := mload(0x40)
  2044 |     |             m3 := mload(0x60)
  2045 |     |             // Selector of `log(uint256,uint256,uint256)`.
  2046 |     |             mstore(0x00, 0xd1ed7a3c)
  2047 |     |             mstore(0x20, p0)
  2048 |     |             mstore(0x40, p1)
  2049 |     |             mstore(0x60, p2)
  2050 |     |         }
  2051 |     |         _sendLogPayload(0x1c, 0x64);
  2052 |     |         /// @solidity memory-safe-assembly
  2053 |     |         assembly {
  2054 |     |             mstore(0x00, m0)
  2055 |     |             mstore(0x20, m1)
  2056 |     |             mstore(0x40, m2)
  2057 |     |             mstore(0x60, m3)
  2058 |     |         }
  2059 |     |     }
  2060 |     | 
  2061 |     |     function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {
  2062 |     |         bytes32 m0;
  2063 |     |         bytes32 m1;
  2064 |     |         bytes32 m2;
  2065 |     |         bytes32 m3;
  2066 |     |         bytes32 m4;
  2067 |     |         bytes32 m5;
  2068 |     |         /// @solidity memory-safe-assembly
  2069 |     |         assembly {
  2070 |     |             function writeString(pos, w) {
  2071 |     |                 let length := 0
  2072 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2073 |     |                 mstore(pos, length)
  2074 |     |                 let shift := sub(256, shl(3, length))
  2075 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2076 |     |             }
  2077 |     |             m0 := mload(0x00)
  2078 |     |             m1 := mload(0x20)
  2079 |     |             m2 := mload(0x40)
  2080 |     |             m3 := mload(0x60)
  2081 |     |             m4 := mload(0x80)
  2082 |     |             m5 := mload(0xa0)
  2083 |     |             // Selector of `log(uint256,uint256,string)`.
  2084 |     |             mstore(0x00, 0x71d04af2)
  2085 |     |             mstore(0x20, p0)
  2086 |     |             mstore(0x40, p1)
  2087 |     |             mstore(0x60, 0x60)
  2088 |     |             writeString(0x80, p2)
  2089 |     |         }
  2090 |     |         _sendLogPayload(0x1c, 0xa4);
  2091 |     |         /// @solidity memory-safe-assembly
  2092 |     |         assembly {
  2093 |     |             mstore(0x00, m0)
  2094 |     |             mstore(0x20, m1)
  2095 |     |             mstore(0x40, m2)
  2096 |     |             mstore(0x60, m3)
  2097 |     |             mstore(0x80, m4)
  2098 |     |             mstore(0xa0, m5)
  2099 |     |         }
  2100 |     |     }
  2101 |     | 
  2102 |     |     function log(uint256 p0, bytes32 p1, address p2) internal pure {
  2103 |     |         bytes32 m0;
  2104 |     |         bytes32 m1;
  2105 |     |         bytes32 m2;
  2106 |     |         bytes32 m3;
  2107 |     |         bytes32 m4;
  2108 |     |         bytes32 m5;
  2109 |     |         /// @solidity memory-safe-assembly
  2110 |     |         assembly {
  2111 |     |             function writeString(pos, w) {
  2112 |     |                 let length := 0
  2113 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2114 |     |                 mstore(pos, length)
  2115 |     |                 let shift := sub(256, shl(3, length))
  2116 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2117 |     |             }
  2118 |     |             m0 := mload(0x00)
  2119 |     |             m1 := mload(0x20)
  2120 |     |             m2 := mload(0x40)
  2121 |     |             m3 := mload(0x60)
  2122 |     |             m4 := mload(0x80)
  2123 |     |             m5 := mload(0xa0)
  2124 |     |             // Selector of `log(uint256,string,address)`.
  2125 |     |             mstore(0x00, 0x7afac959)
  2126 |     |             mstore(0x20, p0)
  2127 |     |             mstore(0x40, 0x60)
  2128 |     |             mstore(0x60, p2)
  2129 |     |             writeString(0x80, p1)
  2130 |     |         }
  2131 |     |         _sendLogPayload(0x1c, 0xa4);
  2132 |     |         /// @solidity memory-safe-assembly
  2133 |     |         assembly {
  2134 |     |             mstore(0x00, m0)
  2135 |     |             mstore(0x20, m1)
  2136 |     |             mstore(0x40, m2)
  2137 |     |             mstore(0x60, m3)
  2138 |     |             mstore(0x80, m4)
  2139 |     |             mstore(0xa0, m5)
  2140 |     |         }
  2141 |     |     }
  2142 |     | 
  2143 |     |     function log(uint256 p0, bytes32 p1, bool p2) internal pure {
  2144 |     |         bytes32 m0;
  2145 |     |         bytes32 m1;
  2146 |     |         bytes32 m2;
  2147 |     |         bytes32 m3;
  2148 |     |         bytes32 m4;
  2149 |     |         bytes32 m5;
  2150 |     |         /// @solidity memory-safe-assembly
  2151 |     |         assembly {
  2152 |     |             function writeString(pos, w) {
  2153 |     |                 let length := 0
  2154 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2155 |     |                 mstore(pos, length)
  2156 |     |                 let shift := sub(256, shl(3, length))
  2157 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2158 |     |             }
  2159 |     |             m0 := mload(0x00)
  2160 |     |             m1 := mload(0x20)
  2161 |     |             m2 := mload(0x40)
  2162 |     |             m3 := mload(0x60)
  2163 |     |             m4 := mload(0x80)
  2164 |     |             m5 := mload(0xa0)
  2165 |     |             // Selector of `log(uint256,string,bool)`.
  2166 |     |             mstore(0x00, 0x4ceda75a)
  2167 |     |             mstore(0x20, p0)
  2168 |     |             mstore(0x40, 0x60)
  2169 |     |             mstore(0x60, p2)
  2170 |     |             writeString(0x80, p1)
  2171 |     |         }
  2172 |     |         _sendLogPayload(0x1c, 0xa4);
  2173 |     |         /// @solidity memory-safe-assembly
  2174 |     |         assembly {
  2175 |     |             mstore(0x00, m0)
  2176 |     |             mstore(0x20, m1)
  2177 |     |             mstore(0x40, m2)
  2178 |     |             mstore(0x60, m3)
  2179 |     |             mstore(0x80, m4)
  2180 |     |             mstore(0xa0, m5)
  2181 |     |         }
  2182 |     |     }
  2183 |     | 
  2184 |     |     function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {
  2185 |     |         bytes32 m0;
  2186 |     |         bytes32 m1;
  2187 |     |         bytes32 m2;
  2188 |     |         bytes32 m3;
  2189 |     |         bytes32 m4;
  2190 |     |         bytes32 m5;
  2191 |     |         /// @solidity memory-safe-assembly
  2192 |     |         assembly {
  2193 |     |             function writeString(pos, w) {
  2194 |     |                 let length := 0
  2195 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2196 |     |                 mstore(pos, length)
  2197 |     |                 let shift := sub(256, shl(3, length))
  2198 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2199 |     |             }
  2200 |     |             m0 := mload(0x00)
  2201 |     |             m1 := mload(0x20)
  2202 |     |             m2 := mload(0x40)
  2203 |     |             m3 := mload(0x60)
  2204 |     |             m4 := mload(0x80)
  2205 |     |             m5 := mload(0xa0)
  2206 |     |             // Selector of `log(uint256,string,uint256)`.
  2207 |     |             mstore(0x00, 0x37aa7d4c)
  2208 |     |             mstore(0x20, p0)
  2209 |     |             mstore(0x40, 0x60)
  2210 |     |             mstore(0x60, p2)
  2211 |     |             writeString(0x80, p1)
  2212 |     |         }
  2213 |     |         _sendLogPayload(0x1c, 0xa4);
  2214 |     |         /// @solidity memory-safe-assembly
  2215 |     |         assembly {
  2216 |     |             mstore(0x00, m0)
  2217 |     |             mstore(0x20, m1)
  2218 |     |             mstore(0x40, m2)
  2219 |     |             mstore(0x60, m3)
  2220 |     |             mstore(0x80, m4)
  2221 |     |             mstore(0xa0, m5)
  2222 |     |         }
  2223 |     |     }
  2224 |     | 
  2225 |     |     function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {
  2226 |     |         bytes32 m0;
  2227 |     |         bytes32 m1;
  2228 |     |         bytes32 m2;
  2229 |     |         bytes32 m3;
  2230 |     |         bytes32 m4;
  2231 |     |         bytes32 m5;
  2232 |     |         bytes32 m6;
  2233 |     |         bytes32 m7;
  2234 |     |         /// @solidity memory-safe-assembly
  2235 |     |         assembly {
  2236 |     |             function writeString(pos, w) {
  2237 |     |                 let length := 0
  2238 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2239 |     |                 mstore(pos, length)
  2240 |     |                 let shift := sub(256, shl(3, length))
  2241 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2242 |     |             }
  2243 |     |             m0 := mload(0x00)
  2244 |     |             m1 := mload(0x20)
  2245 |     |             m2 := mload(0x40)
  2246 |     |             m3 := mload(0x60)
  2247 |     |             m4 := mload(0x80)
  2248 |     |             m5 := mload(0xa0)
  2249 |     |             m6 := mload(0xc0)
  2250 |     |             m7 := mload(0xe0)
  2251 |     |             // Selector of `log(uint256,string,string)`.
  2252 |     |             mstore(0x00, 0xb115611f)
  2253 |     |             mstore(0x20, p0)
  2254 |     |             mstore(0x40, 0x60)
  2255 |     |             mstore(0x60, 0xa0)
  2256 |     |             writeString(0x80, p1)
  2257 |     |             writeString(0xc0, p2)
  2258 |     |         }
  2259 |     |         _sendLogPayload(0x1c, 0xe4);
  2260 |     |         /// @solidity memory-safe-assembly
  2261 |     |         assembly {
  2262 |     |             mstore(0x00, m0)
  2263 |     |             mstore(0x20, m1)
  2264 |     |             mstore(0x40, m2)
  2265 |     |             mstore(0x60, m3)
  2266 |     |             mstore(0x80, m4)
  2267 |     |             mstore(0xa0, m5)
  2268 |     |             mstore(0xc0, m6)
  2269 |     |             mstore(0xe0, m7)
  2270 |     |         }
  2271 |     |     }
  2272 |     | 
  2273 |     |     function log(bytes32 p0, address p1, address p2) internal pure {
  2274 |     |         bytes32 m0;
  2275 |     |         bytes32 m1;
  2276 |     |         bytes32 m2;
  2277 |     |         bytes32 m3;
  2278 |     |         bytes32 m4;
  2279 |     |         bytes32 m5;
  2280 |     |         /// @solidity memory-safe-assembly
  2281 |     |         assembly {
  2282 |     |             function writeString(pos, w) {
  2283 |     |                 let length := 0
  2284 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2285 |     |                 mstore(pos, length)
  2286 |     |                 let shift := sub(256, shl(3, length))
  2287 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2288 |     |             }
  2289 |     |             m0 := mload(0x00)
  2290 |     |             m1 := mload(0x20)
  2291 |     |             m2 := mload(0x40)
  2292 |     |             m3 := mload(0x60)
  2293 |     |             m4 := mload(0x80)
  2294 |     |             m5 := mload(0xa0)
  2295 |     |             // Selector of `log(string,address,address)`.
  2296 |     |             mstore(0x00, 0xfcec75e0)
  2297 |     |             mstore(0x20, 0x60)
  2298 |     |             mstore(0x40, p1)
  2299 |     |             mstore(0x60, p2)
  2300 |     |             writeString(0x80, p0)
  2301 |     |         }
  2302 |     |         _sendLogPayload(0x1c, 0xa4);
  2303 |     |         /// @solidity memory-safe-assembly
  2304 |     |         assembly {
  2305 |     |             mstore(0x00, m0)
  2306 |     |             mstore(0x20, m1)
  2307 |     |             mstore(0x40, m2)
  2308 |     |             mstore(0x60, m3)
  2309 |     |             mstore(0x80, m4)
  2310 |     |             mstore(0xa0, m5)
  2311 |     |         }
  2312 |     |     }
  2313 |     | 
  2314 |     |     function log(bytes32 p0, address p1, bool p2) internal pure {
  2315 |     |         bytes32 m0;
  2316 |     |         bytes32 m1;
  2317 |     |         bytes32 m2;
  2318 |     |         bytes32 m3;
  2319 |     |         bytes32 m4;
  2320 |     |         bytes32 m5;
  2321 |     |         /// @solidity memory-safe-assembly
  2322 |     |         assembly {
  2323 |     |             function writeString(pos, w) {
  2324 |     |                 let length := 0
  2325 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2326 |     |                 mstore(pos, length)
  2327 |     |                 let shift := sub(256, shl(3, length))
  2328 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2329 |     |             }
  2330 |     |             m0 := mload(0x00)
  2331 |     |             m1 := mload(0x20)
  2332 |     |             m2 := mload(0x40)
  2333 |     |             m3 := mload(0x60)
  2334 |     |             m4 := mload(0x80)
  2335 |     |             m5 := mload(0xa0)
  2336 |     |             // Selector of `log(string,address,bool)`.
  2337 |     |             mstore(0x00, 0xc91d5ed4)
  2338 |     |             mstore(0x20, 0x60)
  2339 |     |             mstore(0x40, p1)
  2340 |     |             mstore(0x60, p2)
  2341 |     |             writeString(0x80, p0)
  2342 |     |         }
  2343 |     |         _sendLogPayload(0x1c, 0xa4);
  2344 |     |         /// @solidity memory-safe-assembly
  2345 |     |         assembly {
  2346 |     |             mstore(0x00, m0)
  2347 |     |             mstore(0x20, m1)
  2348 |     |             mstore(0x40, m2)
  2349 |     |             mstore(0x60, m3)
  2350 |     |             mstore(0x80, m4)
  2351 |     |             mstore(0xa0, m5)
  2352 |     |         }
  2353 |     |     }
  2354 |     | 
  2355 |     |     function log(bytes32 p0, address p1, uint256 p2) internal pure {
  2356 |     |         bytes32 m0;
  2357 |     |         bytes32 m1;
  2358 |     |         bytes32 m2;
  2359 |     |         bytes32 m3;
  2360 |     |         bytes32 m4;
  2361 |     |         bytes32 m5;
  2362 |     |         /// @solidity memory-safe-assembly
  2363 |     |         assembly {
  2364 |     |             function writeString(pos, w) {
  2365 |     |                 let length := 0
  2366 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2367 |     |                 mstore(pos, length)
  2368 |     |                 let shift := sub(256, shl(3, length))
  2369 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2370 |     |             }
  2371 |     |             m0 := mload(0x00)
  2372 |     |             m1 := mload(0x20)
  2373 |     |             m2 := mload(0x40)
  2374 |     |             m3 := mload(0x60)
  2375 |     |             m4 := mload(0x80)
  2376 |     |             m5 := mload(0xa0)
  2377 |     |             // Selector of `log(string,address,uint256)`.
  2378 |     |             mstore(0x00, 0x0d26b925)
  2379 |     |             mstore(0x20, 0x60)
  2380 |     |             mstore(0x40, p1)
  2381 |     |             mstore(0x60, p2)
  2382 |     |             writeString(0x80, p0)
  2383 |     |         }
  2384 |     |         _sendLogPayload(0x1c, 0xa4);
  2385 |     |         /// @solidity memory-safe-assembly
  2386 |     |         assembly {
  2387 |     |             mstore(0x00, m0)
  2388 |     |             mstore(0x20, m1)
  2389 |     |             mstore(0x40, m2)
  2390 |     |             mstore(0x60, m3)
  2391 |     |             mstore(0x80, m4)
  2392 |     |             mstore(0xa0, m5)
  2393 |     |         }
  2394 |     |     }
  2395 |     | 
  2396 |     |     function log(bytes32 p0, address p1, bytes32 p2) internal pure {
  2397 |     |         bytes32 m0;
  2398 |     |         bytes32 m1;
  2399 |     |         bytes32 m2;
  2400 |     |         bytes32 m3;
  2401 |     |         bytes32 m4;
  2402 |     |         bytes32 m5;
  2403 |     |         bytes32 m6;
  2404 |     |         bytes32 m7;
  2405 |     |         /// @solidity memory-safe-assembly
  2406 |     |         assembly {
  2407 |     |             function writeString(pos, w) {
  2408 |     |                 let length := 0
  2409 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2410 |     |                 mstore(pos, length)
  2411 |     |                 let shift := sub(256, shl(3, length))
  2412 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2413 |     |             }
  2414 |     |             m0 := mload(0x00)
  2415 |     |             m1 := mload(0x20)
  2416 |     |             m2 := mload(0x40)
  2417 |     |             m3 := mload(0x60)
  2418 |     |             m4 := mload(0x80)
  2419 |     |             m5 := mload(0xa0)
  2420 |     |             m6 := mload(0xc0)
  2421 |     |             m7 := mload(0xe0)
  2422 |     |             // Selector of `log(string,address,string)`.
  2423 |     |             mstore(0x00, 0xe0e9ad4f)
  2424 |     |             mstore(0x20, 0x60)
  2425 |     |             mstore(0x40, p1)
  2426 |     |             mstore(0x60, 0xa0)
  2427 |     |             writeString(0x80, p0)
  2428 |     |             writeString(0xc0, p2)
  2429 |     |         }
  2430 |     |         _sendLogPayload(0x1c, 0xe4);
  2431 |     |         /// @solidity memory-safe-assembly
  2432 |     |         assembly {
  2433 |     |             mstore(0x00, m0)
  2434 |     |             mstore(0x20, m1)
  2435 |     |             mstore(0x40, m2)
  2436 |     |             mstore(0x60, m3)
  2437 |     |             mstore(0x80, m4)
  2438 |     |             mstore(0xa0, m5)
  2439 |     |             mstore(0xc0, m6)
  2440 |     |             mstore(0xe0, m7)
  2441 |     |         }
  2442 |     |     }
  2443 |     | 
  2444 |     |     function log(bytes32 p0, bool p1, address p2) internal pure {
  2445 |     |         bytes32 m0;
  2446 |     |         bytes32 m1;
  2447 |     |         bytes32 m2;
  2448 |     |         bytes32 m3;
  2449 |     |         bytes32 m4;
  2450 |     |         bytes32 m5;
  2451 |     |         /// @solidity memory-safe-assembly
  2452 |     |         assembly {
  2453 |     |             function writeString(pos, w) {
  2454 |     |                 let length := 0
  2455 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2456 |     |                 mstore(pos, length)
  2457 |     |                 let shift := sub(256, shl(3, length))
  2458 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2459 |     |             }
  2460 |     |             m0 := mload(0x00)
  2461 |     |             m1 := mload(0x20)
  2462 |     |             m2 := mload(0x40)
  2463 |     |             m3 := mload(0x60)
  2464 |     |             m4 := mload(0x80)
  2465 |     |             m5 := mload(0xa0)
  2466 |     |             // Selector of `log(string,bool,address)`.
  2467 |     |             mstore(0x00, 0x932bbb38)
  2468 |     |             mstore(0x20, 0x60)
  2469 |     |             mstore(0x40, p1)
  2470 |     |             mstore(0x60, p2)
  2471 |     |             writeString(0x80, p0)
  2472 |     |         }
  2473 |     |         _sendLogPayload(0x1c, 0xa4);
  2474 |     |         /// @solidity memory-safe-assembly
  2475 |     |         assembly {
  2476 |     |             mstore(0x00, m0)
  2477 |     |             mstore(0x20, m1)
  2478 |     |             mstore(0x40, m2)
  2479 |     |             mstore(0x60, m3)
  2480 |     |             mstore(0x80, m4)
  2481 |     |             mstore(0xa0, m5)
  2482 |     |         }
  2483 |     |     }
  2484 |     | 
  2485 |     |     function log(bytes32 p0, bool p1, bool p2) internal pure {
  2486 |     |         bytes32 m0;
  2487 |     |         bytes32 m1;
  2488 |     |         bytes32 m2;
  2489 |     |         bytes32 m3;
  2490 |     |         bytes32 m4;
  2491 |     |         bytes32 m5;
  2492 |     |         /// @solidity memory-safe-assembly
  2493 |     |         assembly {
  2494 |     |             function writeString(pos, w) {
  2495 |     |                 let length := 0
  2496 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2497 |     |                 mstore(pos, length)
  2498 |     |                 let shift := sub(256, shl(3, length))
  2499 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2500 |     |             }
  2501 |     |             m0 := mload(0x00)
  2502 |     |             m1 := mload(0x20)
  2503 |     |             m2 := mload(0x40)
  2504 |     |             m3 := mload(0x60)
  2505 |     |             m4 := mload(0x80)
  2506 |     |             m5 := mload(0xa0)
  2507 |     |             // Selector of `log(string,bool,bool)`.
  2508 |     |             mstore(0x00, 0x850b7ad6)
  2509 |     |             mstore(0x20, 0x60)
  2510 |     |             mstore(0x40, p1)
  2511 |     |             mstore(0x60, p2)
  2512 |     |             writeString(0x80, p0)
  2513 |     |         }
  2514 |     |         _sendLogPayload(0x1c, 0xa4);
  2515 |     |         /// @solidity memory-safe-assembly
  2516 |     |         assembly {
  2517 |     |             mstore(0x00, m0)
  2518 |     |             mstore(0x20, m1)
  2519 |     |             mstore(0x40, m2)
  2520 |     |             mstore(0x60, m3)
  2521 |     |             mstore(0x80, m4)
  2522 |     |             mstore(0xa0, m5)
  2523 |     |         }
  2524 |     |     }
  2525 |     | 
  2526 |     |     function log(bytes32 p0, bool p1, uint256 p2) internal pure {
  2527 |     |         bytes32 m0;
  2528 |     |         bytes32 m1;
  2529 |     |         bytes32 m2;
  2530 |     |         bytes32 m3;
  2531 |     |         bytes32 m4;
  2532 |     |         bytes32 m5;
  2533 |     |         /// @solidity memory-safe-assembly
  2534 |     |         assembly {
  2535 |     |             function writeString(pos, w) {
  2536 |     |                 let length := 0
  2537 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2538 |     |                 mstore(pos, length)
  2539 |     |                 let shift := sub(256, shl(3, length))
  2540 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2541 |     |             }
  2542 |     |             m0 := mload(0x00)
  2543 |     |             m1 := mload(0x20)
  2544 |     |             m2 := mload(0x40)
  2545 |     |             m3 := mload(0x60)
  2546 |     |             m4 := mload(0x80)
  2547 |     |             m5 := mload(0xa0)
  2548 |     |             // Selector of `log(string,bool,uint256)`.
  2549 |     |             mstore(0x00, 0xc95958d6)
  2550 |     |             mstore(0x20, 0x60)
  2551 |     |             mstore(0x40, p1)
  2552 |     |             mstore(0x60, p2)
  2553 |     |             writeString(0x80, p0)
  2554 |     |         }
  2555 |     |         _sendLogPayload(0x1c, 0xa4);
  2556 |     |         /// @solidity memory-safe-assembly
  2557 |     |         assembly {
  2558 |     |             mstore(0x00, m0)
  2559 |     |             mstore(0x20, m1)
  2560 |     |             mstore(0x40, m2)
  2561 |     |             mstore(0x60, m3)
  2562 |     |             mstore(0x80, m4)
  2563 |     |             mstore(0xa0, m5)
  2564 |     |         }
  2565 |     |     }
  2566 |     | 
  2567 |     |     function log(bytes32 p0, bool p1, bytes32 p2) internal pure {
  2568 |     |         bytes32 m0;
  2569 |     |         bytes32 m1;
  2570 |     |         bytes32 m2;
  2571 |     |         bytes32 m3;
  2572 |     |         bytes32 m4;
  2573 |     |         bytes32 m5;
  2574 |     |         bytes32 m6;
  2575 |     |         bytes32 m7;
  2576 |     |         /// @solidity memory-safe-assembly
  2577 |     |         assembly {
  2578 |     |             function writeString(pos, w) {
  2579 |     |                 let length := 0
  2580 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2581 |     |                 mstore(pos, length)
  2582 |     |                 let shift := sub(256, shl(3, length))
  2583 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2584 |     |             }
  2585 |     |             m0 := mload(0x00)
  2586 |     |             m1 := mload(0x20)
  2587 |     |             m2 := mload(0x40)
  2588 |     |             m3 := mload(0x60)
  2589 |     |             m4 := mload(0x80)
  2590 |     |             m5 := mload(0xa0)
  2591 |     |             m6 := mload(0xc0)
  2592 |     |             m7 := mload(0xe0)
  2593 |     |             // Selector of `log(string,bool,string)`.
  2594 |     |             mstore(0x00, 0xe298f47d)
  2595 |     |             mstore(0x20, 0x60)
  2596 |     |             mstore(0x40, p1)
  2597 |     |             mstore(0x60, 0xa0)
  2598 |     |             writeString(0x80, p0)
  2599 |     |             writeString(0xc0, p2)
  2600 |     |         }
  2601 |     |         _sendLogPayload(0x1c, 0xe4);
  2602 |     |         /// @solidity memory-safe-assembly
  2603 |     |         assembly {
  2604 |     |             mstore(0x00, m0)
  2605 |     |             mstore(0x20, m1)
  2606 |     |             mstore(0x40, m2)
  2607 |     |             mstore(0x60, m3)
  2608 |     |             mstore(0x80, m4)
  2609 |     |             mstore(0xa0, m5)
  2610 |     |             mstore(0xc0, m6)
  2611 |     |             mstore(0xe0, m7)
  2612 |     |         }
  2613 |     |     }
  2614 |     | 
  2615 |     |     function log(bytes32 p0, uint256 p1, address p2) internal pure {
  2616 |     |         bytes32 m0;
  2617 |     |         bytes32 m1;
  2618 |     |         bytes32 m2;
  2619 |     |         bytes32 m3;
  2620 |     |         bytes32 m4;
  2621 |     |         bytes32 m5;
  2622 |     |         /// @solidity memory-safe-assembly
  2623 |     |         assembly {
  2624 |     |             function writeString(pos, w) {
  2625 |     |                 let length := 0
  2626 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2627 |     |                 mstore(pos, length)
  2628 |     |                 let shift := sub(256, shl(3, length))
  2629 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2630 |     |             }
  2631 |     |             m0 := mload(0x00)
  2632 |     |             m1 := mload(0x20)
  2633 |     |             m2 := mload(0x40)
  2634 |     |             m3 := mload(0x60)
  2635 |     |             m4 := mload(0x80)
  2636 |     |             m5 := mload(0xa0)
  2637 |     |             // Selector of `log(string,uint256,address)`.
  2638 |     |             mstore(0x00, 0x1c7ec448)
  2639 |     |             mstore(0x20, 0x60)
  2640 |     |             mstore(0x40, p1)
  2641 |     |             mstore(0x60, p2)
  2642 |     |             writeString(0x80, p0)
  2643 |     |         }
  2644 |     |         _sendLogPayload(0x1c, 0xa4);
  2645 |     |         /// @solidity memory-safe-assembly
  2646 |     |         assembly {
  2647 |     |             mstore(0x00, m0)
  2648 |     |             mstore(0x20, m1)
  2649 |     |             mstore(0x40, m2)
  2650 |     |             mstore(0x60, m3)
  2651 |     |             mstore(0x80, m4)
  2652 |     |             mstore(0xa0, m5)
  2653 |     |         }
  2654 |     |     }
  2655 |     | 
  2656 |     |     function log(bytes32 p0, uint256 p1, bool p2) internal pure {
  2657 |     |         bytes32 m0;
  2658 |     |         bytes32 m1;
  2659 |     |         bytes32 m2;
  2660 |     |         bytes32 m3;
  2661 |     |         bytes32 m4;
  2662 |     |         bytes32 m5;
  2663 |     |         /// @solidity memory-safe-assembly
  2664 |     |         assembly {
  2665 |     |             function writeString(pos, w) {
  2666 |     |                 let length := 0
  2667 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2668 |     |                 mstore(pos, length)
  2669 |     |                 let shift := sub(256, shl(3, length))
  2670 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2671 |     |             }
  2672 |     |             m0 := mload(0x00)
  2673 |     |             m1 := mload(0x20)
  2674 |     |             m2 := mload(0x40)
  2675 |     |             m3 := mload(0x60)
  2676 |     |             m4 := mload(0x80)
  2677 |     |             m5 := mload(0xa0)
  2678 |     |             // Selector of `log(string,uint256,bool)`.
  2679 |     |             mstore(0x00, 0xca7733b1)
  2680 |     |             mstore(0x20, 0x60)
  2681 |     |             mstore(0x40, p1)
  2682 |     |             mstore(0x60, p2)
  2683 |     |             writeString(0x80, p0)
  2684 |     |         }
  2685 |     |         _sendLogPayload(0x1c, 0xa4);
  2686 |     |         /// @solidity memory-safe-assembly
  2687 |     |         assembly {
  2688 |     |             mstore(0x00, m0)
  2689 |     |             mstore(0x20, m1)
  2690 |     |             mstore(0x40, m2)
  2691 |     |             mstore(0x60, m3)
  2692 |     |             mstore(0x80, m4)
  2693 |     |             mstore(0xa0, m5)
  2694 |     |         }
  2695 |     |     }
  2696 |     | 
  2697 |     |     function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {
  2698 |     |         bytes32 m0;
  2699 |     |         bytes32 m1;
  2700 |     |         bytes32 m2;
  2701 |     |         bytes32 m3;
  2702 |     |         bytes32 m4;
  2703 |     |         bytes32 m5;
  2704 |     |         /// @solidity memory-safe-assembly
  2705 |     |         assembly {
  2706 |     |             function writeString(pos, w) {
  2707 |     |                 let length := 0
  2708 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2709 |     |                 mstore(pos, length)
  2710 |     |                 let shift := sub(256, shl(3, length))
  2711 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2712 |     |             }
  2713 |     |             m0 := mload(0x00)
  2714 |     |             m1 := mload(0x20)
  2715 |     |             m2 := mload(0x40)
  2716 |     |             m3 := mload(0x60)
  2717 |     |             m4 := mload(0x80)
  2718 |     |             m5 := mload(0xa0)
  2719 |     |             // Selector of `log(string,uint256,uint256)`.
  2720 |     |             mstore(0x00, 0xca47c4eb)
  2721 |     |             mstore(0x20, 0x60)
  2722 |     |             mstore(0x40, p1)
  2723 |     |             mstore(0x60, p2)
  2724 |     |             writeString(0x80, p0)
  2725 |     |         }
  2726 |     |         _sendLogPayload(0x1c, 0xa4);
  2727 |     |         /// @solidity memory-safe-assembly
  2728 |     |         assembly {
  2729 |     |             mstore(0x00, m0)
  2730 |     |             mstore(0x20, m1)
  2731 |     |             mstore(0x40, m2)
  2732 |     |             mstore(0x60, m3)
  2733 |     |             mstore(0x80, m4)
  2734 |     |             mstore(0xa0, m5)
  2735 |     |         }
  2736 |     |     }
  2737 |     | 
  2738 |     |     function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {
  2739 |     |         bytes32 m0;
  2740 |     |         bytes32 m1;
  2741 |     |         bytes32 m2;
  2742 |     |         bytes32 m3;
  2743 |     |         bytes32 m4;
  2744 |     |         bytes32 m5;
  2745 |     |         bytes32 m6;
  2746 |     |         bytes32 m7;
  2747 |     |         /// @solidity memory-safe-assembly
  2748 |     |         assembly {
  2749 |     |             function writeString(pos, w) {
  2750 |     |                 let length := 0
  2751 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2752 |     |                 mstore(pos, length)
  2753 |     |                 let shift := sub(256, shl(3, length))
  2754 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2755 |     |             }
  2756 |     |             m0 := mload(0x00)
  2757 |     |             m1 := mload(0x20)
  2758 |     |             m2 := mload(0x40)
  2759 |     |             m3 := mload(0x60)
  2760 |     |             m4 := mload(0x80)
  2761 |     |             m5 := mload(0xa0)
  2762 |     |             m6 := mload(0xc0)
  2763 |     |             m7 := mload(0xe0)
  2764 |     |             // Selector of `log(string,uint256,string)`.
  2765 |     |             mstore(0x00, 0x5970e089)
  2766 |     |             mstore(0x20, 0x60)
  2767 |     |             mstore(0x40, p1)
  2768 |     |             mstore(0x60, 0xa0)
  2769 |     |             writeString(0x80, p0)
  2770 |     |             writeString(0xc0, p2)
  2771 |     |         }
  2772 |     |         _sendLogPayload(0x1c, 0xe4);
  2773 |     |         /// @solidity memory-safe-assembly
  2774 |     |         assembly {
  2775 |     |             mstore(0x00, m0)
  2776 |     |             mstore(0x20, m1)
  2777 |     |             mstore(0x40, m2)
  2778 |     |             mstore(0x60, m3)
  2779 |     |             mstore(0x80, m4)
  2780 |     |             mstore(0xa0, m5)
  2781 |     |             mstore(0xc0, m6)
  2782 |     |             mstore(0xe0, m7)
  2783 |     |         }
  2784 |     |     }
  2785 |     | 
  2786 |     |     function log(bytes32 p0, bytes32 p1, address p2) internal pure {
  2787 |     |         bytes32 m0;
  2788 |     |         bytes32 m1;
  2789 |     |         bytes32 m2;
  2790 |     |         bytes32 m3;
  2791 |     |         bytes32 m4;
  2792 |     |         bytes32 m5;
  2793 |     |         bytes32 m6;
  2794 |     |         bytes32 m7;
  2795 |     |         /// @solidity memory-safe-assembly
  2796 |     |         assembly {
  2797 |     |             function writeString(pos, w) {
  2798 |     |                 let length := 0
  2799 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2800 |     |                 mstore(pos, length)
  2801 |     |                 let shift := sub(256, shl(3, length))
  2802 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2803 |     |             }
  2804 |     |             m0 := mload(0x00)
  2805 |     |             m1 := mload(0x20)
  2806 |     |             m2 := mload(0x40)
  2807 |     |             m3 := mload(0x60)
  2808 |     |             m4 := mload(0x80)
  2809 |     |             m5 := mload(0xa0)
  2810 |     |             m6 := mload(0xc0)
  2811 |     |             m7 := mload(0xe0)
  2812 |     |             // Selector of `log(string,string,address)`.
  2813 |     |             mstore(0x00, 0x95ed0195)
  2814 |     |             mstore(0x20, 0x60)
  2815 |     |             mstore(0x40, 0xa0)
  2816 |     |             mstore(0x60, p2)
  2817 |     |             writeString(0x80, p0)
  2818 |     |             writeString(0xc0, p1)
  2819 |     |         }
  2820 |     |         _sendLogPayload(0x1c, 0xe4);
  2821 |     |         /// @solidity memory-safe-assembly
  2822 |     |         assembly {
  2823 |     |             mstore(0x00, m0)
  2824 |     |             mstore(0x20, m1)
  2825 |     |             mstore(0x40, m2)
  2826 |     |             mstore(0x60, m3)
  2827 |     |             mstore(0x80, m4)
  2828 |     |             mstore(0xa0, m5)
  2829 |     |             mstore(0xc0, m6)
  2830 |     |             mstore(0xe0, m7)
  2831 |     |         }
  2832 |     |     }
  2833 |     | 
  2834 |     |     function log(bytes32 p0, bytes32 p1, bool p2) internal pure {
  2835 |     |         bytes32 m0;
  2836 |     |         bytes32 m1;
  2837 |     |         bytes32 m2;
  2838 |     |         bytes32 m3;
  2839 |     |         bytes32 m4;
  2840 |     |         bytes32 m5;
  2841 |     |         bytes32 m6;
  2842 |     |         bytes32 m7;
  2843 |     |         /// @solidity memory-safe-assembly
  2844 |     |         assembly {
  2845 |     |             function writeString(pos, w) {
  2846 |     |                 let length := 0
  2847 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2848 |     |                 mstore(pos, length)
  2849 |     |                 let shift := sub(256, shl(3, length))
  2850 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2851 |     |             }
  2852 |     |             m0 := mload(0x00)
  2853 |     |             m1 := mload(0x20)
  2854 |     |             m2 := mload(0x40)
  2855 |     |             m3 := mload(0x60)
  2856 |     |             m4 := mload(0x80)
  2857 |     |             m5 := mload(0xa0)
  2858 |     |             m6 := mload(0xc0)
  2859 |     |             m7 := mload(0xe0)
  2860 |     |             // Selector of `log(string,string,bool)`.
  2861 |     |             mstore(0x00, 0xb0e0f9b5)
  2862 |     |             mstore(0x20, 0x60)
  2863 |     |             mstore(0x40, 0xa0)
  2864 |     |             mstore(0x60, p2)
  2865 |     |             writeString(0x80, p0)
  2866 |     |             writeString(0xc0, p1)
  2867 |     |         }
  2868 |     |         _sendLogPayload(0x1c, 0xe4);
  2869 |     |         /// @solidity memory-safe-assembly
  2870 |     |         assembly {
  2871 |     |             mstore(0x00, m0)
  2872 |     |             mstore(0x20, m1)
  2873 |     |             mstore(0x40, m2)
  2874 |     |             mstore(0x60, m3)
  2875 |     |             mstore(0x80, m4)
  2876 |     |             mstore(0xa0, m5)
  2877 |     |             mstore(0xc0, m6)
  2878 |     |             mstore(0xe0, m7)
  2879 |     |         }
  2880 |     |     }
  2881 |     | 
  2882 |     |     function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {
  2883 |     |         bytes32 m0;
  2884 |     |         bytes32 m1;
  2885 |     |         bytes32 m2;
  2886 |     |         bytes32 m3;
  2887 |     |         bytes32 m4;
  2888 |     |         bytes32 m5;
  2889 |     |         bytes32 m6;
  2890 |     |         bytes32 m7;
  2891 |     |         /// @solidity memory-safe-assembly
  2892 |     |         assembly {
  2893 |     |             function writeString(pos, w) {
  2894 |     |                 let length := 0
  2895 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2896 |     |                 mstore(pos, length)
  2897 |     |                 let shift := sub(256, shl(3, length))
  2898 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2899 |     |             }
  2900 |     |             m0 := mload(0x00)
  2901 |     |             m1 := mload(0x20)
  2902 |     |             m2 := mload(0x40)
  2903 |     |             m3 := mload(0x60)
  2904 |     |             m4 := mload(0x80)
  2905 |     |             m5 := mload(0xa0)
  2906 |     |             m6 := mload(0xc0)
  2907 |     |             m7 := mload(0xe0)
  2908 |     |             // Selector of `log(string,string,uint256)`.
  2909 |     |             mstore(0x00, 0x5821efa1)
  2910 |     |             mstore(0x20, 0x60)
  2911 |     |             mstore(0x40, 0xa0)
  2912 |     |             mstore(0x60, p2)
  2913 |     |             writeString(0x80, p0)
  2914 |     |             writeString(0xc0, p1)
  2915 |     |         }
  2916 |     |         _sendLogPayload(0x1c, 0xe4);
  2917 |     |         /// @solidity memory-safe-assembly
  2918 |     |         assembly {
  2919 |     |             mstore(0x00, m0)
  2920 |     |             mstore(0x20, m1)
  2921 |     |             mstore(0x40, m2)
  2922 |     |             mstore(0x60, m3)
  2923 |     |             mstore(0x80, m4)
  2924 |     |             mstore(0xa0, m5)
  2925 |     |             mstore(0xc0, m6)
  2926 |     |             mstore(0xe0, m7)
  2927 |     |         }
  2928 |     |     }
  2929 |     | 
  2930 |     |     function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {
  2931 |     |         bytes32 m0;
  2932 |     |         bytes32 m1;
  2933 |     |         bytes32 m2;
  2934 |     |         bytes32 m3;
  2935 |     |         bytes32 m4;
  2936 |     |         bytes32 m5;
  2937 |     |         bytes32 m6;
  2938 |     |         bytes32 m7;
  2939 |     |         bytes32 m8;
  2940 |     |         bytes32 m9;
  2941 |     |         /// @solidity memory-safe-assembly
  2942 |     |         assembly {
  2943 |     |             function writeString(pos, w) {
  2944 |     |                 let length := 0
  2945 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2946 |     |                 mstore(pos, length)
  2947 |     |                 let shift := sub(256, shl(3, length))
  2948 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2949 |     |             }
  2950 |     |             m0 := mload(0x00)
  2951 |     |             m1 := mload(0x20)
  2952 |     |             m2 := mload(0x40)
  2953 |     |             m3 := mload(0x60)
  2954 |     |             m4 := mload(0x80)
  2955 |     |             m5 := mload(0xa0)
  2956 |     |             m6 := mload(0xc0)
  2957 |     |             m7 := mload(0xe0)
  2958 |     |             m8 := mload(0x100)
  2959 |     |             m9 := mload(0x120)
  2960 |     |             // Selector of `log(string,string,string)`.
  2961 |     |             mstore(0x00, 0x2ced7cef)
  2962 |     |             mstore(0x20, 0x60)
  2963 |     |             mstore(0x40, 0xa0)
  2964 |     |             mstore(0x60, 0xe0)
  2965 |     |             writeString(0x80, p0)
  2966 |     |             writeString(0xc0, p1)
  2967 |     |             writeString(0x100, p2)
  2968 |     |         }
  2969 |     |         _sendLogPayload(0x1c, 0x124);
  2970 |     |         /// @solidity memory-safe-assembly
  2971 |     |         assembly {
  2972 |     |             mstore(0x00, m0)
  2973 |     |             mstore(0x20, m1)
  2974 |     |             mstore(0x40, m2)
  2975 |     |             mstore(0x60, m3)
  2976 |     |             mstore(0x80, m4)
  2977 |     |             mstore(0xa0, m5)
  2978 |     |             mstore(0xc0, m6)
  2979 |     |             mstore(0xe0, m7)
  2980 |     |             mstore(0x100, m8)
  2981 |     |             mstore(0x120, m9)
  2982 |     |         }
  2983 |     |     }
  2984 |     | 
  2985 |     |     function log(address p0, address p1, address p2, address p3) internal pure {
  2986 |     |         bytes32 m0;
  2987 |     |         bytes32 m1;
  2988 |     |         bytes32 m2;
  2989 |     |         bytes32 m3;
  2990 |     |         bytes32 m4;
  2991 |     |         /// @solidity memory-safe-assembly
  2992 |     |         assembly {
  2993 |     |             m0 := mload(0x00)
  2994 |     |             m1 := mload(0x20)
  2995 |     |             m2 := mload(0x40)
  2996 |     |             m3 := mload(0x60)
  2997 |     |             m4 := mload(0x80)
  2998 |     |             // Selector of `log(address,address,address,address)`.
  2999 |     |             mstore(0x00, 0x665bf134)
  3000 |     |             mstore(0x20, p0)
  3001 |     |             mstore(0x40, p1)
  3002 |     |             mstore(0x60, p2)
  3003 |     |             mstore(0x80, p3)
  3004 |     |         }
  3005 |     |         _sendLogPayload(0x1c, 0x84);
  3006 |     |         /// @solidity memory-safe-assembly
  3007 |     |         assembly {
  3008 |     |             mstore(0x00, m0)
  3009 |     |             mstore(0x20, m1)
  3010 |     |             mstore(0x40, m2)
  3011 |     |             mstore(0x60, m3)
  3012 |     |             mstore(0x80, m4)
  3013 |     |         }
  3014 |     |     }
  3015 |     | 
  3016 |     |     function log(address p0, address p1, address p2, bool p3) internal pure {
  3017 |     |         bytes32 m0;
  3018 |     |         bytes32 m1;
  3019 |     |         bytes32 m2;
  3020 |     |         bytes32 m3;
  3021 |     |         bytes32 m4;
  3022 |     |         /// @solidity memory-safe-assembly
  3023 |     |         assembly {
  3024 |     |             m0 := mload(0x00)
  3025 |     |             m1 := mload(0x20)
  3026 |     |             m2 := mload(0x40)
  3027 |     |             m3 := mload(0x60)
  3028 |     |             m4 := mload(0x80)
  3029 |     |             // Selector of `log(address,address,address,bool)`.
  3030 |     |             mstore(0x00, 0x0e378994)
  3031 |     |             mstore(0x20, p0)
  3032 |     |             mstore(0x40, p1)
  3033 |     |             mstore(0x60, p2)
  3034 |     |             mstore(0x80, p3)
  3035 |     |         }
  3036 |     |         _sendLogPayload(0x1c, 0x84);
  3037 |     |         /// @solidity memory-safe-assembly
  3038 |     |         assembly {
  3039 |     |             mstore(0x00, m0)
  3040 |     |             mstore(0x20, m1)
  3041 |     |             mstore(0x40, m2)
  3042 |     |             mstore(0x60, m3)
  3043 |     |             mstore(0x80, m4)
  3044 |     |         }
  3045 |     |     }
  3046 |     | 
  3047 |     |     function log(address p0, address p1, address p2, uint256 p3) internal pure {
  3048 |     |         bytes32 m0;
  3049 |     |         bytes32 m1;
  3050 |     |         bytes32 m2;
  3051 |     |         bytes32 m3;
  3052 |     |         bytes32 m4;
  3053 |     |         /// @solidity memory-safe-assembly
  3054 |     |         assembly {
  3055 |     |             m0 := mload(0x00)
  3056 |     |             m1 := mload(0x20)
  3057 |     |             m2 := mload(0x40)
  3058 |     |             m3 := mload(0x60)
  3059 |     |             m4 := mload(0x80)
  3060 |     |             // Selector of `log(address,address,address,uint256)`.
  3061 |     |             mstore(0x00, 0x94250d77)
  3062 |     |             mstore(0x20, p0)
  3063 |     |             mstore(0x40, p1)
  3064 |     |             mstore(0x60, p2)
  3065 |     |             mstore(0x80, p3)
  3066 |     |         }
  3067 |     |         _sendLogPayload(0x1c, 0x84);
  3068 |     |         /// @solidity memory-safe-assembly
  3069 |     |         assembly {
  3070 |     |             mstore(0x00, m0)
  3071 |     |             mstore(0x20, m1)
  3072 |     |             mstore(0x40, m2)
  3073 |     |             mstore(0x60, m3)
  3074 |     |             mstore(0x80, m4)
  3075 |     |         }
  3076 |     |     }
  3077 |     | 
  3078 |     |     function log(address p0, address p1, address p2, bytes32 p3) internal pure {
  3079 |     |         bytes32 m0;
  3080 |     |         bytes32 m1;
  3081 |     |         bytes32 m2;
  3082 |     |         bytes32 m3;
  3083 |     |         bytes32 m4;
  3084 |     |         bytes32 m5;
  3085 |     |         bytes32 m6;
  3086 |     |         /// @solidity memory-safe-assembly
  3087 |     |         assembly {
  3088 |     |             function writeString(pos, w) {
  3089 |     |                 let length := 0
  3090 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3091 |     |                 mstore(pos, length)
  3092 |     |                 let shift := sub(256, shl(3, length))
  3093 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3094 |     |             }
  3095 |     |             m0 := mload(0x00)
  3096 |     |             m1 := mload(0x20)
  3097 |     |             m2 := mload(0x40)
  3098 |     |             m3 := mload(0x60)
  3099 |     |             m4 := mload(0x80)
  3100 |     |             m5 := mload(0xa0)
  3101 |     |             m6 := mload(0xc0)
  3102 |     |             // Selector of `log(address,address,address,string)`.
  3103 |     |             mstore(0x00, 0xf808da20)
  3104 |     |             mstore(0x20, p0)
  3105 |     |             mstore(0x40, p1)
  3106 |     |             mstore(0x60, p2)
  3107 |     |             mstore(0x80, 0x80)
  3108 |     |             writeString(0xa0, p3)
  3109 |     |         }
  3110 |     |         _sendLogPayload(0x1c, 0xc4);
  3111 |     |         /// @solidity memory-safe-assembly
  3112 |     |         assembly {
  3113 |     |             mstore(0x00, m0)
  3114 |     |             mstore(0x20, m1)
  3115 |     |             mstore(0x40, m2)
  3116 |     |             mstore(0x60, m3)
  3117 |     |             mstore(0x80, m4)
  3118 |     |             mstore(0xa0, m5)
  3119 |     |             mstore(0xc0, m6)
  3120 |     |         }
  3121 |     |     }
  3122 |     | 
  3123 |     |     function log(address p0, address p1, bool p2, address p3) internal pure {
  3124 |     |         bytes32 m0;
  3125 |     |         bytes32 m1;
  3126 |     |         bytes32 m2;
  3127 |     |         bytes32 m3;
  3128 |     |         bytes32 m4;
  3129 |     |         /// @solidity memory-safe-assembly
  3130 |     |         assembly {
  3131 |     |             m0 := mload(0x00)
  3132 |     |             m1 := mload(0x20)
  3133 |     |             m2 := mload(0x40)
  3134 |     |             m3 := mload(0x60)
  3135 |     |             m4 := mload(0x80)
  3136 |     |             // Selector of `log(address,address,bool,address)`.
  3137 |     |             mstore(0x00, 0x9f1bc36e)
  3138 |     |             mstore(0x20, p0)
  3139 |     |             mstore(0x40, p1)
  3140 |     |             mstore(0x60, p2)
  3141 |     |             mstore(0x80, p3)
  3142 |     |         }
  3143 |     |         _sendLogPayload(0x1c, 0x84);
  3144 |     |         /// @solidity memory-safe-assembly
  3145 |     |         assembly {
  3146 |     |             mstore(0x00, m0)
  3147 |     |             mstore(0x20, m1)
  3148 |     |             mstore(0x40, m2)
  3149 |     |             mstore(0x60, m3)
  3150 |     |             mstore(0x80, m4)
  3151 |     |         }
  3152 |     |     }
  3153 |     | 
  3154 |     |     function log(address p0, address p1, bool p2, bool p3) internal pure {
  3155 |     |         bytes32 m0;
  3156 |     |         bytes32 m1;
  3157 |     |         bytes32 m2;
  3158 |     |         bytes32 m3;
  3159 |     |         bytes32 m4;
  3160 |     |         /// @solidity memory-safe-assembly
  3161 |     |         assembly {
  3162 |     |             m0 := mload(0x00)
  3163 |     |             m1 := mload(0x20)
  3164 |     |             m2 := mload(0x40)
  3165 |     |             m3 := mload(0x60)
  3166 |     |             m4 := mload(0x80)
  3167 |     |             // Selector of `log(address,address,bool,bool)`.
  3168 |     |             mstore(0x00, 0x2cd4134a)
  3169 |     |             mstore(0x20, p0)
  3170 |     |             mstore(0x40, p1)
  3171 |     |             mstore(0x60, p2)
  3172 |     |             mstore(0x80, p3)
  3173 |     |         }
  3174 |     |         _sendLogPayload(0x1c, 0x84);
  3175 |     |         /// @solidity memory-safe-assembly
  3176 |     |         assembly {
  3177 |     |             mstore(0x00, m0)
  3178 |     |             mstore(0x20, m1)
  3179 |     |             mstore(0x40, m2)
  3180 |     |             mstore(0x60, m3)
  3181 |     |             mstore(0x80, m4)
  3182 |     |         }
  3183 |     |     }
  3184 |     | 
  3185 |     |     function log(address p0, address p1, bool p2, uint256 p3) internal pure {
  3186 |     |         bytes32 m0;
  3187 |     |         bytes32 m1;
  3188 |     |         bytes32 m2;
  3189 |     |         bytes32 m3;
  3190 |     |         bytes32 m4;
  3191 |     |         /// @solidity memory-safe-assembly
  3192 |     |         assembly {
  3193 |     |             m0 := mload(0x00)
  3194 |     |             m1 := mload(0x20)
  3195 |     |             m2 := mload(0x40)
  3196 |     |             m3 := mload(0x60)
  3197 |     |             m4 := mload(0x80)
  3198 |     |             // Selector of `log(address,address,bool,uint256)`.
  3199 |     |             mstore(0x00, 0x3971e78c)
  3200 |     |             mstore(0x20, p0)
  3201 |     |             mstore(0x40, p1)
  3202 |     |             mstore(0x60, p2)
  3203 |     |             mstore(0x80, p3)
  3204 |     |         }
  3205 |     |         _sendLogPayload(0x1c, 0x84);
  3206 |     |         /// @solidity memory-safe-assembly
  3207 |     |         assembly {
  3208 |     |             mstore(0x00, m0)
  3209 |     |             mstore(0x20, m1)
  3210 |     |             mstore(0x40, m2)
  3211 |     |             mstore(0x60, m3)
  3212 |     |             mstore(0x80, m4)
  3213 |     |         }
  3214 |     |     }
  3215 |     | 
  3216 |     |     function log(address p0, address p1, bool p2, bytes32 p3) internal pure {
  3217 |     |         bytes32 m0;
  3218 |     |         bytes32 m1;
  3219 |     |         bytes32 m2;
  3220 |     |         bytes32 m3;
  3221 |     |         bytes32 m4;
  3222 |     |         bytes32 m5;
  3223 |     |         bytes32 m6;
  3224 |     |         /// @solidity memory-safe-assembly
  3225 |     |         assembly {
  3226 |     |             function writeString(pos, w) {
  3227 |     |                 let length := 0
  3228 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3229 |     |                 mstore(pos, length)
  3230 |     |                 let shift := sub(256, shl(3, length))
  3231 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3232 |     |             }
  3233 |     |             m0 := mload(0x00)
  3234 |     |             m1 := mload(0x20)
  3235 |     |             m2 := mload(0x40)
  3236 |     |             m3 := mload(0x60)
  3237 |     |             m4 := mload(0x80)
  3238 |     |             m5 := mload(0xa0)
  3239 |     |             m6 := mload(0xc0)
  3240 |     |             // Selector of `log(address,address,bool,string)`.
  3241 |     |             mstore(0x00, 0xaa6540c8)
  3242 |     |             mstore(0x20, p0)
  3243 |     |             mstore(0x40, p1)
  3244 |     |             mstore(0x60, p2)
  3245 |     |             mstore(0x80, 0x80)
  3246 |     |             writeString(0xa0, p3)
  3247 |     |         }
  3248 |     |         _sendLogPayload(0x1c, 0xc4);
  3249 |     |         /// @solidity memory-safe-assembly
  3250 |     |         assembly {
  3251 |     |             mstore(0x00, m0)
  3252 |     |             mstore(0x20, m1)
  3253 |     |             mstore(0x40, m2)
  3254 |     |             mstore(0x60, m3)
  3255 |     |             mstore(0x80, m4)
  3256 |     |             mstore(0xa0, m5)
  3257 |     |             mstore(0xc0, m6)
  3258 |     |         }
  3259 |     |     }
  3260 |     | 
  3261 |     |     function log(address p0, address p1, uint256 p2, address p3) internal pure {
  3262 |     |         bytes32 m0;
  3263 |     |         bytes32 m1;
  3264 |     |         bytes32 m2;
  3265 |     |         bytes32 m3;
  3266 |     |         bytes32 m4;
  3267 |     |         /// @solidity memory-safe-assembly
  3268 |     |         assembly {
  3269 |     |             m0 := mload(0x00)
  3270 |     |             m1 := mload(0x20)
  3271 |     |             m2 := mload(0x40)
  3272 |     |             m3 := mload(0x60)
  3273 |     |             m4 := mload(0x80)
  3274 |     |             // Selector of `log(address,address,uint256,address)`.
  3275 |     |             mstore(0x00, 0x8da6def5)
  3276 |     |             mstore(0x20, p0)
  3277 |     |             mstore(0x40, p1)
  3278 |     |             mstore(0x60, p2)
  3279 |     |             mstore(0x80, p3)
  3280 |     |         }
  3281 |     |         _sendLogPayload(0x1c, 0x84);
  3282 |     |         /// @solidity memory-safe-assembly
  3283 |     |         assembly {
  3284 |     |             mstore(0x00, m0)
  3285 |     |             mstore(0x20, m1)
  3286 |     |             mstore(0x40, m2)
  3287 |     |             mstore(0x60, m3)
  3288 |     |             mstore(0x80, m4)
  3289 |     |         }
  3290 |     |     }
  3291 |     | 
  3292 |     |     function log(address p0, address p1, uint256 p2, bool p3) internal pure {
  3293 |     |         bytes32 m0;
  3294 |     |         bytes32 m1;
  3295 |     |         bytes32 m2;
  3296 |     |         bytes32 m3;
  3297 |     |         bytes32 m4;
  3298 |     |         /// @solidity memory-safe-assembly
  3299 |     |         assembly {
  3300 |     |             m0 := mload(0x00)
  3301 |     |             m1 := mload(0x20)
  3302 |     |             m2 := mload(0x40)
  3303 |     |             m3 := mload(0x60)
  3304 |     |             m4 := mload(0x80)
  3305 |     |             // Selector of `log(address,address,uint256,bool)`.
  3306 |     |             mstore(0x00, 0x9b4254e2)
  3307 |     |             mstore(0x20, p0)
  3308 |     |             mstore(0x40, p1)
  3309 |     |             mstore(0x60, p2)
  3310 |     |             mstore(0x80, p3)
  3311 |     |         }
  3312 |     |         _sendLogPayload(0x1c, 0x84);
  3313 |     |         /// @solidity memory-safe-assembly
  3314 |     |         assembly {
  3315 |     |             mstore(0x00, m0)
  3316 |     |             mstore(0x20, m1)
  3317 |     |             mstore(0x40, m2)
  3318 |     |             mstore(0x60, m3)
  3319 |     |             mstore(0x80, m4)
  3320 |     |         }
  3321 |     |     }
  3322 |     | 
  3323 |     |     function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {
  3324 |     |         bytes32 m0;
  3325 |     |         bytes32 m1;
  3326 |     |         bytes32 m2;
  3327 |     |         bytes32 m3;
  3328 |     |         bytes32 m4;
  3329 |     |         /// @solidity memory-safe-assembly
  3330 |     |         assembly {
  3331 |     |             m0 := mload(0x00)
  3332 |     |             m1 := mload(0x20)
  3333 |     |             m2 := mload(0x40)
  3334 |     |             m3 := mload(0x60)
  3335 |     |             m4 := mload(0x80)
  3336 |     |             // Selector of `log(address,address,uint256,uint256)`.
  3337 |     |             mstore(0x00, 0xbe553481)
  3338 |     |             mstore(0x20, p0)
  3339 |     |             mstore(0x40, p1)
  3340 |     |             mstore(0x60, p2)
  3341 |     |             mstore(0x80, p3)
  3342 |     |         }
  3343 |     |         _sendLogPayload(0x1c, 0x84);
  3344 |     |         /// @solidity memory-safe-assembly
  3345 |     |         assembly {
  3346 |     |             mstore(0x00, m0)
  3347 |     |             mstore(0x20, m1)
  3348 |     |             mstore(0x40, m2)
  3349 |     |             mstore(0x60, m3)
  3350 |     |             mstore(0x80, m4)
  3351 |     |         }
  3352 |     |     }
  3353 |     | 
  3354 |     |     function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {
  3355 |     |         bytes32 m0;
  3356 |     |         bytes32 m1;
  3357 |     |         bytes32 m2;
  3358 |     |         bytes32 m3;
  3359 |     |         bytes32 m4;
  3360 |     |         bytes32 m5;
  3361 |     |         bytes32 m6;
  3362 |     |         /// @solidity memory-safe-assembly
  3363 |     |         assembly {
  3364 |     |             function writeString(pos, w) {
  3365 |     |                 let length := 0
  3366 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3367 |     |                 mstore(pos, length)
  3368 |     |                 let shift := sub(256, shl(3, length))
  3369 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3370 |     |             }
  3371 |     |             m0 := mload(0x00)
  3372 |     |             m1 := mload(0x20)
  3373 |     |             m2 := mload(0x40)
  3374 |     |             m3 := mload(0x60)
  3375 |     |             m4 := mload(0x80)
  3376 |     |             m5 := mload(0xa0)
  3377 |     |             m6 := mload(0xc0)
  3378 |     |             // Selector of `log(address,address,uint256,string)`.
  3379 |     |             mstore(0x00, 0xfdb4f990)
  3380 |     |             mstore(0x20, p0)
  3381 |     |             mstore(0x40, p1)
  3382 |     |             mstore(0x60, p2)
  3383 |     |             mstore(0x80, 0x80)
  3384 |     |             writeString(0xa0, p3)
  3385 |     |         }
  3386 |     |         _sendLogPayload(0x1c, 0xc4);
  3387 |     |         /// @solidity memory-safe-assembly
  3388 |     |         assembly {
  3389 |     |             mstore(0x00, m0)
  3390 |     |             mstore(0x20, m1)
  3391 |     |             mstore(0x40, m2)
  3392 |     |             mstore(0x60, m3)
  3393 |     |             mstore(0x80, m4)
  3394 |     |             mstore(0xa0, m5)
  3395 |     |             mstore(0xc0, m6)
  3396 |     |         }
  3397 |     |     }
  3398 |     | 
  3399 |     |     function log(address p0, address p1, bytes32 p2, address p3) internal pure {
  3400 |     |         bytes32 m0;
  3401 |     |         bytes32 m1;
  3402 |     |         bytes32 m2;
  3403 |     |         bytes32 m3;
  3404 |     |         bytes32 m4;
  3405 |     |         bytes32 m5;
  3406 |     |         bytes32 m6;
  3407 |     |         /// @solidity memory-safe-assembly
  3408 |     |         assembly {
  3409 |     |             function writeString(pos, w) {
  3410 |     |                 let length := 0
  3411 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3412 |     |                 mstore(pos, length)
  3413 |     |                 let shift := sub(256, shl(3, length))
  3414 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3415 |     |             }
  3416 |     |             m0 := mload(0x00)
  3417 |     |             m1 := mload(0x20)
  3418 |     |             m2 := mload(0x40)
  3419 |     |             m3 := mload(0x60)
  3420 |     |             m4 := mload(0x80)
  3421 |     |             m5 := mload(0xa0)
  3422 |     |             m6 := mload(0xc0)
  3423 |     |             // Selector of `log(address,address,string,address)`.
  3424 |     |             mstore(0x00, 0x8f736d16)
  3425 |     |             mstore(0x20, p0)
  3426 |     |             mstore(0x40, p1)
  3427 |     |             mstore(0x60, 0x80)
  3428 |     |             mstore(0x80, p3)
  3429 |     |             writeString(0xa0, p2)
  3430 |     |         }
  3431 |     |         _sendLogPayload(0x1c, 0xc4);
  3432 |     |         /// @solidity memory-safe-assembly
  3433 |     |         assembly {
  3434 |     |             mstore(0x00, m0)
  3435 |     |             mstore(0x20, m1)
  3436 |     |             mstore(0x40, m2)
  3437 |     |             mstore(0x60, m3)
  3438 |     |             mstore(0x80, m4)
  3439 |     |             mstore(0xa0, m5)
  3440 |     |             mstore(0xc0, m6)
  3441 |     |         }
  3442 |     |     }
  3443 |     | 
  3444 |     |     function log(address p0, address p1, bytes32 p2, bool p3) internal pure {
  3445 |     |         bytes32 m0;
  3446 |     |         bytes32 m1;
  3447 |     |         bytes32 m2;
  3448 |     |         bytes32 m3;
  3449 |     |         bytes32 m4;
  3450 |     |         bytes32 m5;
  3451 |     |         bytes32 m6;
  3452 |     |         /// @solidity memory-safe-assembly
  3453 |     |         assembly {
  3454 |     |             function writeString(pos, w) {
  3455 |     |                 let length := 0
  3456 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3457 |     |                 mstore(pos, length)
  3458 |     |                 let shift := sub(256, shl(3, length))
  3459 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3460 |     |             }
  3461 |     |             m0 := mload(0x00)
  3462 |     |             m1 := mload(0x20)
  3463 |     |             m2 := mload(0x40)
  3464 |     |             m3 := mload(0x60)
  3465 |     |             m4 := mload(0x80)
  3466 |     |             m5 := mload(0xa0)
  3467 |     |             m6 := mload(0xc0)
  3468 |     |             // Selector of `log(address,address,string,bool)`.
  3469 |     |             mstore(0x00, 0x6f1a594e)
  3470 |     |             mstore(0x20, p0)
  3471 |     |             mstore(0x40, p1)
  3472 |     |             mstore(0x60, 0x80)
  3473 |     |             mstore(0x80, p3)
  3474 |     |             writeString(0xa0, p2)
  3475 |     |         }
  3476 |     |         _sendLogPayload(0x1c, 0xc4);
  3477 |     |         /// @solidity memory-safe-assembly
  3478 |     |         assembly {
  3479 |     |             mstore(0x00, m0)
  3480 |     |             mstore(0x20, m1)
  3481 |     |             mstore(0x40, m2)
  3482 |     |             mstore(0x60, m3)
  3483 |     |             mstore(0x80, m4)
  3484 |     |             mstore(0xa0, m5)
  3485 |     |             mstore(0xc0, m6)
  3486 |     |         }
  3487 |     |     }
  3488 |     | 
  3489 |     |     function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {
  3490 |     |         bytes32 m0;
  3491 |     |         bytes32 m1;
  3492 |     |         bytes32 m2;
  3493 |     |         bytes32 m3;
  3494 |     |         bytes32 m4;
  3495 |     |         bytes32 m5;
  3496 |     |         bytes32 m6;
  3497 |     |         /// @solidity memory-safe-assembly
  3498 |     |         assembly {
  3499 |     |             function writeString(pos, w) {
  3500 |     |                 let length := 0
  3501 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3502 |     |                 mstore(pos, length)
  3503 |     |                 let shift := sub(256, shl(3, length))
  3504 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3505 |     |             }
  3506 |     |             m0 := mload(0x00)
  3507 |     |             m1 := mload(0x20)
  3508 |     |             m2 := mload(0x40)
  3509 |     |             m3 := mload(0x60)
  3510 |     |             m4 := mload(0x80)
  3511 |     |             m5 := mload(0xa0)
  3512 |     |             m6 := mload(0xc0)
  3513 |     |             // Selector of `log(address,address,string,uint256)`.
  3514 |     |             mstore(0x00, 0xef1cefe7)
  3515 |     |             mstore(0x20, p0)
  3516 |     |             mstore(0x40, p1)
  3517 |     |             mstore(0x60, 0x80)
  3518 |     |             mstore(0x80, p3)
  3519 |     |             writeString(0xa0, p2)
  3520 |     |         }
  3521 |     |         _sendLogPayload(0x1c, 0xc4);
  3522 |     |         /// @solidity memory-safe-assembly
  3523 |     |         assembly {
  3524 |     |             mstore(0x00, m0)
  3525 |     |             mstore(0x20, m1)
  3526 |     |             mstore(0x40, m2)
  3527 |     |             mstore(0x60, m3)
  3528 |     |             mstore(0x80, m4)
  3529 |     |             mstore(0xa0, m5)
  3530 |     |             mstore(0xc0, m6)
  3531 |     |         }
  3532 |     |     }
  3533 |     | 
  3534 |     |     function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {
  3535 |     |         bytes32 m0;
  3536 |     |         bytes32 m1;
  3537 |     |         bytes32 m2;
  3538 |     |         bytes32 m3;
  3539 |     |         bytes32 m4;
  3540 |     |         bytes32 m5;
  3541 |     |         bytes32 m6;
  3542 |     |         bytes32 m7;
  3543 |     |         bytes32 m8;
  3544 |     |         /// @solidity memory-safe-assembly
  3545 |     |         assembly {
  3546 |     |             function writeString(pos, w) {
  3547 |     |                 let length := 0
  3548 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3549 |     |                 mstore(pos, length)
  3550 |     |                 let shift := sub(256, shl(3, length))
  3551 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3552 |     |             }
  3553 |     |             m0 := mload(0x00)
  3554 |     |             m1 := mload(0x20)
  3555 |     |             m2 := mload(0x40)
  3556 |     |             m3 := mload(0x60)
  3557 |     |             m4 := mload(0x80)
  3558 |     |             m5 := mload(0xa0)
  3559 |     |             m6 := mload(0xc0)
  3560 |     |             m7 := mload(0xe0)
  3561 |     |             m8 := mload(0x100)
  3562 |     |             // Selector of `log(address,address,string,string)`.
  3563 |     |             mstore(0x00, 0x21bdaf25)
  3564 |     |             mstore(0x20, p0)
  3565 |     |             mstore(0x40, p1)
  3566 |     |             mstore(0x60, 0x80)
  3567 |     |             mstore(0x80, 0xc0)
  3568 |     |             writeString(0xa0, p2)
  3569 |     |             writeString(0xe0, p3)
  3570 |     |         }
  3571 |     |         _sendLogPayload(0x1c, 0x104);
  3572 |     |         /// @solidity memory-safe-assembly
  3573 |     |         assembly {
  3574 |     |             mstore(0x00, m0)
  3575 |     |             mstore(0x20, m1)
  3576 |     |             mstore(0x40, m2)
  3577 |     |             mstore(0x60, m3)
  3578 |     |             mstore(0x80, m4)
  3579 |     |             mstore(0xa0, m5)
  3580 |     |             mstore(0xc0, m6)
  3581 |     |             mstore(0xe0, m7)
  3582 |     |             mstore(0x100, m8)
  3583 |     |         }
  3584 |     |     }
  3585 |     | 
  3586 |     |     function log(address p0, bool p1, address p2, address p3) internal pure {
  3587 |     |         bytes32 m0;
  3588 |     |         bytes32 m1;
  3589 |     |         bytes32 m2;
  3590 |     |         bytes32 m3;
  3591 |     |         bytes32 m4;
  3592 |     |         /// @solidity memory-safe-assembly
  3593 |     |         assembly {
  3594 |     |             m0 := mload(0x00)
  3595 |     |             m1 := mload(0x20)
  3596 |     |             m2 := mload(0x40)
  3597 |     |             m3 := mload(0x60)
  3598 |     |             m4 := mload(0x80)
  3599 |     |             // Selector of `log(address,bool,address,address)`.
  3600 |     |             mstore(0x00, 0x660375dd)
  3601 |     |             mstore(0x20, p0)
  3602 |     |             mstore(0x40, p1)
  3603 |     |             mstore(0x60, p2)
  3604 |     |             mstore(0x80, p3)
  3605 |     |         }
  3606 |     |         _sendLogPayload(0x1c, 0x84);
  3607 |     |         /// @solidity memory-safe-assembly
  3608 |     |         assembly {
  3609 |     |             mstore(0x00, m0)
  3610 |     |             mstore(0x20, m1)
  3611 |     |             mstore(0x40, m2)
  3612 |     |             mstore(0x60, m3)
  3613 |     |             mstore(0x80, m4)
  3614 |     |         }
  3615 |     |     }
  3616 |     | 
  3617 |     |     function log(address p0, bool p1, address p2, bool p3) internal pure {
  3618 |     |         bytes32 m0;
  3619 |     |         bytes32 m1;
  3620 |     |         bytes32 m2;
  3621 |     |         bytes32 m3;
  3622 |     |         bytes32 m4;
  3623 |     |         /// @solidity memory-safe-assembly
  3624 |     |         assembly {
  3625 |     |             m0 := mload(0x00)
  3626 |     |             m1 := mload(0x20)
  3627 |     |             m2 := mload(0x40)
  3628 |     |             m3 := mload(0x60)
  3629 |     |             m4 := mload(0x80)
  3630 |     |             // Selector of `log(address,bool,address,bool)`.
  3631 |     |             mstore(0x00, 0xa6f50b0f)
  3632 |     |             mstore(0x20, p0)
  3633 |     |             mstore(0x40, p1)
  3634 |     |             mstore(0x60, p2)
  3635 |     |             mstore(0x80, p3)
  3636 |     |         }
  3637 |     |         _sendLogPayload(0x1c, 0x84);
  3638 |     |         /// @solidity memory-safe-assembly
  3639 |     |         assembly {
  3640 |     |             mstore(0x00, m0)
  3641 |     |             mstore(0x20, m1)
  3642 |     |             mstore(0x40, m2)
  3643 |     |             mstore(0x60, m3)
  3644 |     |             mstore(0x80, m4)
  3645 |     |         }
  3646 |     |     }
  3647 |     | 
  3648 |     |     function log(address p0, bool p1, address p2, uint256 p3) internal pure {
  3649 |     |         bytes32 m0;
  3650 |     |         bytes32 m1;
  3651 |     |         bytes32 m2;
  3652 |     |         bytes32 m3;
  3653 |     |         bytes32 m4;
  3654 |     |         /// @solidity memory-safe-assembly
  3655 |     |         assembly {
  3656 |     |             m0 := mload(0x00)
  3657 |     |             m1 := mload(0x20)
  3658 |     |             m2 := mload(0x40)
  3659 |     |             m3 := mload(0x60)
  3660 |     |             m4 := mload(0x80)
  3661 |     |             // Selector of `log(address,bool,address,uint256)`.
  3662 |     |             mstore(0x00, 0xa75c59de)
  3663 |     |             mstore(0x20, p0)
  3664 |     |             mstore(0x40, p1)
  3665 |     |             mstore(0x60, p2)
  3666 |     |             mstore(0x80, p3)
  3667 |     |         }
  3668 |     |         _sendLogPayload(0x1c, 0x84);
  3669 |     |         /// @solidity memory-safe-assembly
  3670 |     |         assembly {
  3671 |     |             mstore(0x00, m0)
  3672 |     |             mstore(0x20, m1)
  3673 |     |             mstore(0x40, m2)
  3674 |     |             mstore(0x60, m3)
  3675 |     |             mstore(0x80, m4)
  3676 |     |         }
  3677 |     |     }
  3678 |     | 
  3679 |     |     function log(address p0, bool p1, address p2, bytes32 p3) internal pure {
  3680 |     |         bytes32 m0;
  3681 |     |         bytes32 m1;
  3682 |     |         bytes32 m2;
  3683 |     |         bytes32 m3;
  3684 |     |         bytes32 m4;
  3685 |     |         bytes32 m5;
  3686 |     |         bytes32 m6;
  3687 |     |         /// @solidity memory-safe-assembly
  3688 |     |         assembly {
  3689 |     |             function writeString(pos, w) {
  3690 |     |                 let length := 0
  3691 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3692 |     |                 mstore(pos, length)
  3693 |     |                 let shift := sub(256, shl(3, length))
  3694 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3695 |     |             }
  3696 |     |             m0 := mload(0x00)
  3697 |     |             m1 := mload(0x20)
  3698 |     |             m2 := mload(0x40)
  3699 |     |             m3 := mload(0x60)
  3700 |     |             m4 := mload(0x80)
  3701 |     |             m5 := mload(0xa0)
  3702 |     |             m6 := mload(0xc0)
  3703 |     |             // Selector of `log(address,bool,address,string)`.
  3704 |     |             mstore(0x00, 0x2dd778e6)
  3705 |     |             mstore(0x20, p0)
  3706 |     |             mstore(0x40, p1)
  3707 |     |             mstore(0x60, p2)
  3708 |     |             mstore(0x80, 0x80)
  3709 |     |             writeString(0xa0, p3)
  3710 |     |         }
  3711 |     |         _sendLogPayload(0x1c, 0xc4);
  3712 |     |         /// @solidity memory-safe-assembly
  3713 |     |         assembly {
  3714 |     |             mstore(0x00, m0)
  3715 |     |             mstore(0x20, m1)
  3716 |     |             mstore(0x40, m2)
  3717 |     |             mstore(0x60, m3)
  3718 |     |             mstore(0x80, m4)
  3719 |     |             mstore(0xa0, m5)
  3720 |     |             mstore(0xc0, m6)
  3721 |     |         }
  3722 |     |     }
  3723 |     | 
  3724 |     |     function log(address p0, bool p1, bool p2, address p3) internal pure {
  3725 |     |         bytes32 m0;
  3726 |     |         bytes32 m1;
  3727 |     |         bytes32 m2;
  3728 |     |         bytes32 m3;
  3729 |     |         bytes32 m4;
  3730 |     |         /// @solidity memory-safe-assembly
  3731 |     |         assembly {
  3732 |     |             m0 := mload(0x00)
  3733 |     |             m1 := mload(0x20)
  3734 |     |             m2 := mload(0x40)
  3735 |     |             m3 := mload(0x60)
  3736 |     |             m4 := mload(0x80)
  3737 |     |             // Selector of `log(address,bool,bool,address)`.
  3738 |     |             mstore(0x00, 0xcf394485)
  3739 |     |             mstore(0x20, p0)
  3740 |     |             mstore(0x40, p1)
  3741 |     |             mstore(0x60, p2)
  3742 |     |             mstore(0x80, p3)
  3743 |     |         }
  3744 |     |         _sendLogPayload(0x1c, 0x84);
  3745 |     |         /// @solidity memory-safe-assembly
  3746 |     |         assembly {
  3747 |     |             mstore(0x00, m0)
  3748 |     |             mstore(0x20, m1)
  3749 |     |             mstore(0x40, m2)
  3750 |     |             mstore(0x60, m3)
  3751 |     |             mstore(0x80, m4)
  3752 |     |         }
  3753 |     |     }
  3754 |     | 
  3755 |     |     function log(address p0, bool p1, bool p2, bool p3) internal pure {
  3756 |     |         bytes32 m0;
  3757 |     |         bytes32 m1;
  3758 |     |         bytes32 m2;
  3759 |     |         bytes32 m3;
  3760 |     |         bytes32 m4;
  3761 |     |         /// @solidity memory-safe-assembly
  3762 |     |         assembly {
  3763 |     |             m0 := mload(0x00)
  3764 |     |             m1 := mload(0x20)
  3765 |     |             m2 := mload(0x40)
  3766 |     |             m3 := mload(0x60)
  3767 |     |             m4 := mload(0x80)
  3768 |     |             // Selector of `log(address,bool,bool,bool)`.
  3769 |     |             mstore(0x00, 0xcac43479)
  3770 |     |             mstore(0x20, p0)
  3771 |     |             mstore(0x40, p1)
  3772 |     |             mstore(0x60, p2)
  3773 |     |             mstore(0x80, p3)
  3774 |     |         }
  3775 |     |         _sendLogPayload(0x1c, 0x84);
  3776 |     |         /// @solidity memory-safe-assembly
  3777 |     |         assembly {
  3778 |     |             mstore(0x00, m0)
  3779 |     |             mstore(0x20, m1)
  3780 |     |             mstore(0x40, m2)
  3781 |     |             mstore(0x60, m3)
  3782 |     |             mstore(0x80, m4)
  3783 |     |         }
  3784 |     |     }
  3785 |     | 
  3786 |     |     function log(address p0, bool p1, bool p2, uint256 p3) internal pure {
  3787 |     |         bytes32 m0;
  3788 |     |         bytes32 m1;
  3789 |     |         bytes32 m2;
  3790 |     |         bytes32 m3;
  3791 |     |         bytes32 m4;
  3792 |     |         /// @solidity memory-safe-assembly
  3793 |     |         assembly {
  3794 |     |             m0 := mload(0x00)
  3795 |     |             m1 := mload(0x20)
  3796 |     |             m2 := mload(0x40)
  3797 |     |             m3 := mload(0x60)
  3798 |     |             m4 := mload(0x80)
  3799 |     |             // Selector of `log(address,bool,bool,uint256)`.
  3800 |     |             mstore(0x00, 0x8c4e5de6)
  3801 |     |             mstore(0x20, p0)
  3802 |     |             mstore(0x40, p1)
  3803 |     |             mstore(0x60, p2)
  3804 |     |             mstore(0x80, p3)
  3805 |     |         }
  3806 |     |         _sendLogPayload(0x1c, 0x84);
  3807 |     |         /// @solidity memory-safe-assembly
  3808 |     |         assembly {
  3809 |     |             mstore(0x00, m0)
  3810 |     |             mstore(0x20, m1)
  3811 |     |             mstore(0x40, m2)
  3812 |     |             mstore(0x60, m3)
  3813 |     |             mstore(0x80, m4)
  3814 |     |         }
  3815 |     |     }
  3816 |     | 
  3817 |     |     function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {
  3818 |     |         bytes32 m0;
  3819 |     |         bytes32 m1;
  3820 |     |         bytes32 m2;
  3821 |     |         bytes32 m3;
  3822 |     |         bytes32 m4;
  3823 |     |         bytes32 m5;
  3824 |     |         bytes32 m6;
  3825 |     |         /// @solidity memory-safe-assembly
  3826 |     |         assembly {
  3827 |     |             function writeString(pos, w) {
  3828 |     |                 let length := 0
  3829 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3830 |     |                 mstore(pos, length)
  3831 |     |                 let shift := sub(256, shl(3, length))
  3832 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3833 |     |             }
  3834 |     |             m0 := mload(0x00)
  3835 |     |             m1 := mload(0x20)
  3836 |     |             m2 := mload(0x40)
  3837 |     |             m3 := mload(0x60)
  3838 |     |             m4 := mload(0x80)
  3839 |     |             m5 := mload(0xa0)
  3840 |     |             m6 := mload(0xc0)
  3841 |     |             // Selector of `log(address,bool,bool,string)`.
  3842 |     |             mstore(0x00, 0xdfc4a2e8)
  3843 |     |             mstore(0x20, p0)
  3844 |     |             mstore(0x40, p1)
  3845 |     |             mstore(0x60, p2)
  3846 |     |             mstore(0x80, 0x80)
  3847 |     |             writeString(0xa0, p3)
  3848 |     |         }
  3849 |     |         _sendLogPayload(0x1c, 0xc4);
  3850 |     |         /// @solidity memory-safe-assembly
  3851 |     |         assembly {
  3852 |     |             mstore(0x00, m0)
  3853 |     |             mstore(0x20, m1)
  3854 |     |             mstore(0x40, m2)
  3855 |     |             mstore(0x60, m3)
  3856 |     |             mstore(0x80, m4)
  3857 |     |             mstore(0xa0, m5)
  3858 |     |             mstore(0xc0, m6)
  3859 |     |         }
  3860 |     |     }
  3861 |     | 
  3862 |     |     function log(address p0, bool p1, uint256 p2, address p3) internal pure {
  3863 |     |         bytes32 m0;
  3864 |     |         bytes32 m1;
  3865 |     |         bytes32 m2;
  3866 |     |         bytes32 m3;
  3867 |     |         bytes32 m4;
  3868 |     |         /// @solidity memory-safe-assembly
  3869 |     |         assembly {
  3870 |     |             m0 := mload(0x00)
  3871 |     |             m1 := mload(0x20)
  3872 |     |             m2 := mload(0x40)
  3873 |     |             m3 := mload(0x60)
  3874 |     |             m4 := mload(0x80)
  3875 |     |             // Selector of `log(address,bool,uint256,address)`.
  3876 |     |             mstore(0x00, 0xccf790a1)
  3877 |     |             mstore(0x20, p0)
  3878 |     |             mstore(0x40, p1)
  3879 |     |             mstore(0x60, p2)
  3880 |     |             mstore(0x80, p3)
  3881 |     |         }
  3882 |     |         _sendLogPayload(0x1c, 0x84);
  3883 |     |         /// @solidity memory-safe-assembly
  3884 |     |         assembly {
  3885 |     |             mstore(0x00, m0)
  3886 |     |             mstore(0x20, m1)
  3887 |     |             mstore(0x40, m2)
  3888 |     |             mstore(0x60, m3)
  3889 |     |             mstore(0x80, m4)
  3890 |     |         }
  3891 |     |     }
  3892 |     | 
  3893 |     |     function log(address p0, bool p1, uint256 p2, bool p3) internal pure {
  3894 |     |         bytes32 m0;
  3895 |     |         bytes32 m1;
  3896 |     |         bytes32 m2;
  3897 |     |         bytes32 m3;
  3898 |     |         bytes32 m4;
  3899 |     |         /// @solidity memory-safe-assembly
  3900 |     |         assembly {
  3901 |     |             m0 := mload(0x00)
  3902 |     |             m1 := mload(0x20)
  3903 |     |             m2 := mload(0x40)
  3904 |     |             m3 := mload(0x60)
  3905 |     |             m4 := mload(0x80)
  3906 |     |             // Selector of `log(address,bool,uint256,bool)`.
  3907 |     |             mstore(0x00, 0xc4643e20)
  3908 |     |             mstore(0x20, p0)
  3909 |     |             mstore(0x40, p1)
  3910 |     |             mstore(0x60, p2)
  3911 |     |             mstore(0x80, p3)
  3912 |     |         }
  3913 |     |         _sendLogPayload(0x1c, 0x84);
  3914 |     |         /// @solidity memory-safe-assembly
  3915 |     |         assembly {
  3916 |     |             mstore(0x00, m0)
  3917 |     |             mstore(0x20, m1)
  3918 |     |             mstore(0x40, m2)
  3919 |     |             mstore(0x60, m3)
  3920 |     |             mstore(0x80, m4)
  3921 |     |         }
  3922 |     |     }
  3923 |     | 
  3924 |     |     function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {
  3925 |     |         bytes32 m0;
  3926 |     |         bytes32 m1;
  3927 |     |         bytes32 m2;
  3928 |     |         bytes32 m3;
  3929 |     |         bytes32 m4;
  3930 |     |         /// @solidity memory-safe-assembly
  3931 |     |         assembly {
  3932 |     |             m0 := mload(0x00)
  3933 |     |             m1 := mload(0x20)
  3934 |     |             m2 := mload(0x40)
  3935 |     |             m3 := mload(0x60)
  3936 |     |             m4 := mload(0x80)
  3937 |     |             // Selector of `log(address,bool,uint256,uint256)`.
  3938 |     |             mstore(0x00, 0x386ff5f4)
  3939 |     |             mstore(0x20, p0)
  3940 |     |             mstore(0x40, p1)
  3941 |     |             mstore(0x60, p2)
  3942 |     |             mstore(0x80, p3)
  3943 |     |         }
  3944 |     |         _sendLogPayload(0x1c, 0x84);
  3945 |     |         /// @solidity memory-safe-assembly
  3946 |     |         assembly {
  3947 |     |             mstore(0x00, m0)
  3948 |     |             mstore(0x20, m1)
  3949 |     |             mstore(0x40, m2)
  3950 |     |             mstore(0x60, m3)
  3951 |     |             mstore(0x80, m4)
  3952 |     |         }
  3953 |     |     }
  3954 |     | 
  3955 |     |     function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {
  3956 |     |         bytes32 m0;
  3957 |     |         bytes32 m1;
  3958 |     |         bytes32 m2;
  3959 |     |         bytes32 m3;
  3960 |     |         bytes32 m4;
  3961 |     |         bytes32 m5;
  3962 |     |         bytes32 m6;
  3963 |     |         /// @solidity memory-safe-assembly
  3964 |     |         assembly {
  3965 |     |             function writeString(pos, w) {
  3966 |     |                 let length := 0
  3967 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3968 |     |                 mstore(pos, length)
  3969 |     |                 let shift := sub(256, shl(3, length))
  3970 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3971 |     |             }
  3972 |     |             m0 := mload(0x00)
  3973 |     |             m1 := mload(0x20)
  3974 |     |             m2 := mload(0x40)
  3975 |     |             m3 := mload(0x60)
  3976 |     |             m4 := mload(0x80)
  3977 |     |             m5 := mload(0xa0)
  3978 |     |             m6 := mload(0xc0)
  3979 |     |             // Selector of `log(address,bool,uint256,string)`.
  3980 |     |             mstore(0x00, 0x0aa6cfad)
  3981 |     |             mstore(0x20, p0)
  3982 |     |             mstore(0x40, p1)
  3983 |     |             mstore(0x60, p2)
  3984 |     |             mstore(0x80, 0x80)
  3985 |     |             writeString(0xa0, p3)
  3986 |     |         }
  3987 |     |         _sendLogPayload(0x1c, 0xc4);
  3988 |     |         /// @solidity memory-safe-assembly
  3989 |     |         assembly {
  3990 |     |             mstore(0x00, m0)
  3991 |     |             mstore(0x20, m1)
  3992 |     |             mstore(0x40, m2)
  3993 |     |             mstore(0x60, m3)
  3994 |     |             mstore(0x80, m4)
  3995 |     |             mstore(0xa0, m5)
  3996 |     |             mstore(0xc0, m6)
  3997 |     |         }
  3998 |     |     }
  3999 |     | 
  4000 |     |     function log(address p0, bool p1, bytes32 p2, address p3) internal pure {
  4001 |     |         bytes32 m0;
  4002 |     |         bytes32 m1;
  4003 |     |         bytes32 m2;
  4004 |     |         bytes32 m3;
  4005 |     |         bytes32 m4;
  4006 |     |         bytes32 m5;
  4007 |     |         bytes32 m6;
  4008 |     |         /// @solidity memory-safe-assembly
  4009 |     |         assembly {
  4010 |     |             function writeString(pos, w) {
  4011 |     |                 let length := 0
  4012 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4013 |     |                 mstore(pos, length)
  4014 |     |                 let shift := sub(256, shl(3, length))
  4015 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4016 |     |             }
  4017 |     |             m0 := mload(0x00)
  4018 |     |             m1 := mload(0x20)
  4019 |     |             m2 := mload(0x40)
  4020 |     |             m3 := mload(0x60)
  4021 |     |             m4 := mload(0x80)
  4022 |     |             m5 := mload(0xa0)
  4023 |     |             m6 := mload(0xc0)
  4024 |     |             // Selector of `log(address,bool,string,address)`.
  4025 |     |             mstore(0x00, 0x19fd4956)
  4026 |     |             mstore(0x20, p0)
  4027 |     |             mstore(0x40, p1)
  4028 |     |             mstore(0x60, 0x80)
  4029 |     |             mstore(0x80, p3)
  4030 |     |             writeString(0xa0, p2)
  4031 |     |         }
  4032 |     |         _sendLogPayload(0x1c, 0xc4);
  4033 |     |         /// @solidity memory-safe-assembly
  4034 |     |         assembly {
  4035 |     |             mstore(0x00, m0)
  4036 |     |             mstore(0x20, m1)
  4037 |     |             mstore(0x40, m2)
  4038 |     |             mstore(0x60, m3)
  4039 |     |             mstore(0x80, m4)
  4040 |     |             mstore(0xa0, m5)
  4041 |     |             mstore(0xc0, m6)
  4042 |     |         }
  4043 |     |     }
  4044 |     | 
  4045 |     |     function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {
  4046 |     |         bytes32 m0;
  4047 |     |         bytes32 m1;
  4048 |     |         bytes32 m2;
  4049 |     |         bytes32 m3;
  4050 |     |         bytes32 m4;
  4051 |     |         bytes32 m5;
  4052 |     |         bytes32 m6;
  4053 |     |         /// @solidity memory-safe-assembly
  4054 |     |         assembly {
  4055 |     |             function writeString(pos, w) {
  4056 |     |                 let length := 0
  4057 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4058 |     |                 mstore(pos, length)
  4059 |     |                 let shift := sub(256, shl(3, length))
  4060 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4061 |     |             }
  4062 |     |             m0 := mload(0x00)
  4063 |     |             m1 := mload(0x20)
  4064 |     |             m2 := mload(0x40)
  4065 |     |             m3 := mload(0x60)
  4066 |     |             m4 := mload(0x80)
  4067 |     |             m5 := mload(0xa0)
  4068 |     |             m6 := mload(0xc0)
  4069 |     |             // Selector of `log(address,bool,string,bool)`.
  4070 |     |             mstore(0x00, 0x50ad461d)
  4071 |     |             mstore(0x20, p0)
  4072 |     |             mstore(0x40, p1)
  4073 |     |             mstore(0x60, 0x80)
  4074 |     |             mstore(0x80, p3)
  4075 |     |             writeString(0xa0, p2)
  4076 |     |         }
  4077 |     |         _sendLogPayload(0x1c, 0xc4);
  4078 |     |         /// @solidity memory-safe-assembly
  4079 |     |         assembly {
  4080 |     |             mstore(0x00, m0)
  4081 |     |             mstore(0x20, m1)
  4082 |     |             mstore(0x40, m2)
  4083 |     |             mstore(0x60, m3)
  4084 |     |             mstore(0x80, m4)
  4085 |     |             mstore(0xa0, m5)
  4086 |     |             mstore(0xc0, m6)
  4087 |     |         }
  4088 |     |     }
  4089 |     | 
  4090 |     |     function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {
  4091 |     |         bytes32 m0;
  4092 |     |         bytes32 m1;
  4093 |     |         bytes32 m2;
  4094 |     |         bytes32 m3;
  4095 |     |         bytes32 m4;
  4096 |     |         bytes32 m5;
  4097 |     |         bytes32 m6;
  4098 |     |         /// @solidity memory-safe-assembly
  4099 |     |         assembly {
  4100 |     |             function writeString(pos, w) {
  4101 |     |                 let length := 0
  4102 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4103 |     |                 mstore(pos, length)
  4104 |     |                 let shift := sub(256, shl(3, length))
  4105 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4106 |     |             }
  4107 |     |             m0 := mload(0x00)
  4108 |     |             m1 := mload(0x20)
  4109 |     |             m2 := mload(0x40)
  4110 |     |             m3 := mload(0x60)
  4111 |     |             m4 := mload(0x80)
  4112 |     |             m5 := mload(0xa0)
  4113 |     |             m6 := mload(0xc0)
  4114 |     |             // Selector of `log(address,bool,string,uint256)`.
  4115 |     |             mstore(0x00, 0x80e6a20b)
  4116 |     |             mstore(0x20, p0)
  4117 |     |             mstore(0x40, p1)
  4118 |     |             mstore(0x60, 0x80)
  4119 |     |             mstore(0x80, p3)
  4120 |     |             writeString(0xa0, p2)
  4121 |     |         }
  4122 |     |         _sendLogPayload(0x1c, 0xc4);
  4123 |     |         /// @solidity memory-safe-assembly
  4124 |     |         assembly {
  4125 |     |             mstore(0x00, m0)
  4126 |     |             mstore(0x20, m1)
  4127 |     |             mstore(0x40, m2)
  4128 |     |             mstore(0x60, m3)
  4129 |     |             mstore(0x80, m4)
  4130 |     |             mstore(0xa0, m5)
  4131 |     |             mstore(0xc0, m6)
  4132 |     |         }
  4133 |     |     }
  4134 |     | 
  4135 |     |     function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
  4136 |     |         bytes32 m0;
  4137 |     |         bytes32 m1;
  4138 |     |         bytes32 m2;
  4139 |     |         bytes32 m3;
  4140 |     |         bytes32 m4;
  4141 |     |         bytes32 m5;
  4142 |     |         bytes32 m6;
  4143 |     |         bytes32 m7;
  4144 |     |         bytes32 m8;
  4145 |     |         /// @solidity memory-safe-assembly
  4146 |     |         assembly {
  4147 |     |             function writeString(pos, w) {
  4148 |     |                 let length := 0
  4149 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4150 |     |                 mstore(pos, length)
  4151 |     |                 let shift := sub(256, shl(3, length))
  4152 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4153 |     |             }
  4154 |     |             m0 := mload(0x00)
  4155 |     |             m1 := mload(0x20)
  4156 |     |             m2 := mload(0x40)
  4157 |     |             m3 := mload(0x60)
  4158 |     |             m4 := mload(0x80)
  4159 |     |             m5 := mload(0xa0)
  4160 |     |             m6 := mload(0xc0)
  4161 |     |             m7 := mload(0xe0)
  4162 |     |             m8 := mload(0x100)
  4163 |     |             // Selector of `log(address,bool,string,string)`.
  4164 |     |             mstore(0x00, 0x475c5c33)
  4165 |     |             mstore(0x20, p0)
  4166 |     |             mstore(0x40, p1)
  4167 |     |             mstore(0x60, 0x80)
  4168 |     |             mstore(0x80, 0xc0)
  4169 |     |             writeString(0xa0, p2)
  4170 |     |             writeString(0xe0, p3)
  4171 |     |         }
  4172 |     |         _sendLogPayload(0x1c, 0x104);
  4173 |     |         /// @solidity memory-safe-assembly
  4174 |     |         assembly {
  4175 |     |             mstore(0x00, m0)
  4176 |     |             mstore(0x20, m1)
  4177 |     |             mstore(0x40, m2)
  4178 |     |             mstore(0x60, m3)
  4179 |     |             mstore(0x80, m4)
  4180 |     |             mstore(0xa0, m5)
  4181 |     |             mstore(0xc0, m6)
  4182 |     |             mstore(0xe0, m7)
  4183 |     |             mstore(0x100, m8)
  4184 |     |         }
  4185 |     |     }
  4186 |     | 
  4187 |     |     function log(address p0, uint256 p1, address p2, address p3) internal pure {
  4188 |     |         bytes32 m0;
  4189 |     |         bytes32 m1;
  4190 |     |         bytes32 m2;
  4191 |     |         bytes32 m3;
  4192 |     |         bytes32 m4;
  4193 |     |         /// @solidity memory-safe-assembly
  4194 |     |         assembly {
  4195 |     |             m0 := mload(0x00)
  4196 |     |             m1 := mload(0x20)
  4197 |     |             m2 := mload(0x40)
  4198 |     |             m3 := mload(0x60)
  4199 |     |             m4 := mload(0x80)
  4200 |     |             // Selector of `log(address,uint256,address,address)`.
  4201 |     |             mstore(0x00, 0x478d1c62)
  4202 |     |             mstore(0x20, p0)
  4203 |     |             mstore(0x40, p1)
  4204 |     |             mstore(0x60, p2)
  4205 |     |             mstore(0x80, p3)
  4206 |     |         }
  4207 |     |         _sendLogPayload(0x1c, 0x84);
  4208 |     |         /// @solidity memory-safe-assembly
  4209 |     |         assembly {
  4210 |     |             mstore(0x00, m0)
  4211 |     |             mstore(0x20, m1)
  4212 |     |             mstore(0x40, m2)
  4213 |     |             mstore(0x60, m3)
  4214 |     |             mstore(0x80, m4)
  4215 |     |         }
  4216 |     |     }
  4217 |     | 
  4218 |     |     function log(address p0, uint256 p1, address p2, bool p3) internal pure {
  4219 |     |         bytes32 m0;
  4220 |     |         bytes32 m1;
  4221 |     |         bytes32 m2;
  4222 |     |         bytes32 m3;
  4223 |     |         bytes32 m4;
  4224 |     |         /// @solidity memory-safe-assembly
  4225 |     |         assembly {
  4226 |     |             m0 := mload(0x00)
  4227 |     |             m1 := mload(0x20)
  4228 |     |             m2 := mload(0x40)
  4229 |     |             m3 := mload(0x60)
  4230 |     |             m4 := mload(0x80)
  4231 |     |             // Selector of `log(address,uint256,address,bool)`.
  4232 |     |             mstore(0x00, 0xa1bcc9b3)
  4233 |     |             mstore(0x20, p0)
  4234 |     |             mstore(0x40, p1)
  4235 |     |             mstore(0x60, p2)
  4236 |     |             mstore(0x80, p3)
  4237 |     |         }
  4238 |     |         _sendLogPayload(0x1c, 0x84);
  4239 |     |         /// @solidity memory-safe-assembly
  4240 |     |         assembly {
  4241 |     |             mstore(0x00, m0)
  4242 |     |             mstore(0x20, m1)
  4243 |     |             mstore(0x40, m2)
  4244 |     |             mstore(0x60, m3)
  4245 |     |             mstore(0x80, m4)
  4246 |     |         }
  4247 |     |     }
  4248 |     | 
  4249 |     |     function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {
  4250 |     |         bytes32 m0;
  4251 |     |         bytes32 m1;
  4252 |     |         bytes32 m2;
  4253 |     |         bytes32 m3;
  4254 |     |         bytes32 m4;
  4255 |     |         /// @solidity memory-safe-assembly
  4256 |     |         assembly {
  4257 |     |             m0 := mload(0x00)
  4258 |     |             m1 := mload(0x20)
  4259 |     |             m2 := mload(0x40)
  4260 |     |             m3 := mload(0x60)
  4261 |     |             m4 := mload(0x80)
  4262 |     |             // Selector of `log(address,uint256,address,uint256)`.
  4263 |     |             mstore(0x00, 0x100f650e)
  4264 |     |             mstore(0x20, p0)
  4265 |     |             mstore(0x40, p1)
  4266 |     |             mstore(0x60, p2)
  4267 |     |             mstore(0x80, p3)
  4268 |     |         }
  4269 |     |         _sendLogPayload(0x1c, 0x84);
  4270 |     |         /// @solidity memory-safe-assembly
  4271 |     |         assembly {
  4272 |     |             mstore(0x00, m0)
  4273 |     |             mstore(0x20, m1)
  4274 |     |             mstore(0x40, m2)
  4275 |     |             mstore(0x60, m3)
  4276 |     |             mstore(0x80, m4)
  4277 |     |         }
  4278 |     |     }
  4279 |     | 
  4280 |     |     function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {
  4281 |     |         bytes32 m0;
  4282 |     |         bytes32 m1;
  4283 |     |         bytes32 m2;
  4284 |     |         bytes32 m3;
  4285 |     |         bytes32 m4;
  4286 |     |         bytes32 m5;
  4287 |     |         bytes32 m6;
  4288 |     |         /// @solidity memory-safe-assembly
  4289 |     |         assembly {
  4290 |     |             function writeString(pos, w) {
  4291 |     |                 let length := 0
  4292 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4293 |     |                 mstore(pos, length)
  4294 |     |                 let shift := sub(256, shl(3, length))
  4295 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4296 |     |             }
  4297 |     |             m0 := mload(0x00)
  4298 |     |             m1 := mload(0x20)
  4299 |     |             m2 := mload(0x40)
  4300 |     |             m3 := mload(0x60)
  4301 |     |             m4 := mload(0x80)
  4302 |     |             m5 := mload(0xa0)
  4303 |     |             m6 := mload(0xc0)
  4304 |     |             // Selector of `log(address,uint256,address,string)`.
  4305 |     |             mstore(0x00, 0x1da986ea)
  4306 |     |             mstore(0x20, p0)
  4307 |     |             mstore(0x40, p1)
  4308 |     |             mstore(0x60, p2)
  4309 |     |             mstore(0x80, 0x80)
  4310 |     |             writeString(0xa0, p3)
  4311 |     |         }
  4312 |     |         _sendLogPayload(0x1c, 0xc4);
  4313 |     |         /// @solidity memory-safe-assembly
  4314 |     |         assembly {
  4315 |     |             mstore(0x00, m0)
  4316 |     |             mstore(0x20, m1)
  4317 |     |             mstore(0x40, m2)
  4318 |     |             mstore(0x60, m3)
  4319 |     |             mstore(0x80, m4)
  4320 |     |             mstore(0xa0, m5)
  4321 |     |             mstore(0xc0, m6)
  4322 |     |         }
  4323 |     |     }
  4324 |     | 
  4325 |     |     function log(address p0, uint256 p1, bool p2, address p3) internal pure {
  4326 |     |         bytes32 m0;
  4327 |     |         bytes32 m1;
  4328 |     |         bytes32 m2;
  4329 |     |         bytes32 m3;
  4330 |     |         bytes32 m4;
  4331 |     |         /// @solidity memory-safe-assembly
  4332 |     |         assembly {
  4333 |     |             m0 := mload(0x00)
  4334 |     |             m1 := mload(0x20)
  4335 |     |             m2 := mload(0x40)
  4336 |     |             m3 := mload(0x60)
  4337 |     |             m4 := mload(0x80)
  4338 |     |             // Selector of `log(address,uint256,bool,address)`.
  4339 |     |             mstore(0x00, 0xa31bfdcc)
  4340 |     |             mstore(0x20, p0)
  4341 |     |             mstore(0x40, p1)
  4342 |     |             mstore(0x60, p2)
  4343 |     |             mstore(0x80, p3)
  4344 |     |         }
  4345 |     |         _sendLogPayload(0x1c, 0x84);
  4346 |     |         /// @solidity memory-safe-assembly
  4347 |     |         assembly {
  4348 |     |             mstore(0x00, m0)
  4349 |     |             mstore(0x20, m1)
  4350 |     |             mstore(0x40, m2)
  4351 |     |             mstore(0x60, m3)
  4352 |     |             mstore(0x80, m4)
  4353 |     |         }
  4354 |     |     }
  4355 |     | 
  4356 |     |     function log(address p0, uint256 p1, bool p2, bool p3) internal pure {
  4357 |     |         bytes32 m0;
  4358 |     |         bytes32 m1;
  4359 |     |         bytes32 m2;
  4360 |     |         bytes32 m3;
  4361 |     |         bytes32 m4;
  4362 |     |         /// @solidity memory-safe-assembly
  4363 |     |         assembly {
  4364 |     |             m0 := mload(0x00)
  4365 |     |             m1 := mload(0x20)
  4366 |     |             m2 := mload(0x40)
  4367 |     |             m3 := mload(0x60)
  4368 |     |             m4 := mload(0x80)
  4369 |     |             // Selector of `log(address,uint256,bool,bool)`.
  4370 |     |             mstore(0x00, 0x3bf5e537)
  4371 |     |             mstore(0x20, p0)
  4372 |     |             mstore(0x40, p1)
  4373 |     |             mstore(0x60, p2)
  4374 |     |             mstore(0x80, p3)
  4375 |     |         }
  4376 |     |         _sendLogPayload(0x1c, 0x84);
  4377 |     |         /// @solidity memory-safe-assembly
  4378 |     |         assembly {
  4379 |     |             mstore(0x00, m0)
  4380 |     |             mstore(0x20, m1)
  4381 |     |             mstore(0x40, m2)
  4382 |     |             mstore(0x60, m3)
  4383 |     |             mstore(0x80, m4)
  4384 |     |         }
  4385 |     |     }
  4386 |     | 
  4387 |     |     function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {
  4388 |     |         bytes32 m0;
  4389 |     |         bytes32 m1;
  4390 |     |         bytes32 m2;
  4391 |     |         bytes32 m3;
  4392 |     |         bytes32 m4;
  4393 |     |         /// @solidity memory-safe-assembly
  4394 |     |         assembly {
  4395 |     |             m0 := mload(0x00)
  4396 |     |             m1 := mload(0x20)
  4397 |     |             m2 := mload(0x40)
  4398 |     |             m3 := mload(0x60)
  4399 |     |             m4 := mload(0x80)
  4400 |     |             // Selector of `log(address,uint256,bool,uint256)`.
  4401 |     |             mstore(0x00, 0x22f6b999)
  4402 |     |             mstore(0x20, p0)
  4403 |     |             mstore(0x40, p1)
  4404 |     |             mstore(0x60, p2)
  4405 |     |             mstore(0x80, p3)
  4406 |     |         }
  4407 |     |         _sendLogPayload(0x1c, 0x84);
  4408 |     |         /// @solidity memory-safe-assembly
  4409 |     |         assembly {
  4410 |     |             mstore(0x00, m0)
  4411 |     |             mstore(0x20, m1)
  4412 |     |             mstore(0x40, m2)
  4413 |     |             mstore(0x60, m3)
  4414 |     |             mstore(0x80, m4)
  4415 |     |         }
  4416 |     |     }
  4417 |     | 
  4418 |     |     function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {
  4419 |     |         bytes32 m0;
  4420 |     |         bytes32 m1;
  4421 |     |         bytes32 m2;
  4422 |     |         bytes32 m3;
  4423 |     |         bytes32 m4;
  4424 |     |         bytes32 m5;
  4425 |     |         bytes32 m6;
  4426 |     |         /// @solidity memory-safe-assembly
  4427 |     |         assembly {
  4428 |     |             function writeString(pos, w) {
  4429 |     |                 let length := 0
  4430 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4431 |     |                 mstore(pos, length)
  4432 |     |                 let shift := sub(256, shl(3, length))
  4433 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4434 |     |             }
  4435 |     |             m0 := mload(0x00)
  4436 |     |             m1 := mload(0x20)
  4437 |     |             m2 := mload(0x40)
  4438 |     |             m3 := mload(0x60)
  4439 |     |             m4 := mload(0x80)
  4440 |     |             m5 := mload(0xa0)
  4441 |     |             m6 := mload(0xc0)
  4442 |     |             // Selector of `log(address,uint256,bool,string)`.
  4443 |     |             mstore(0x00, 0xc5ad85f9)
  4444 |     |             mstore(0x20, p0)
  4445 |     |             mstore(0x40, p1)
  4446 |     |             mstore(0x60, p2)
  4447 |     |             mstore(0x80, 0x80)
  4448 |     |             writeString(0xa0, p3)
  4449 |     |         }
  4450 |     |         _sendLogPayload(0x1c, 0xc4);
  4451 |     |         /// @solidity memory-safe-assembly
  4452 |     |         assembly {
  4453 |     |             mstore(0x00, m0)
  4454 |     |             mstore(0x20, m1)
  4455 |     |             mstore(0x40, m2)
  4456 |     |             mstore(0x60, m3)
  4457 |     |             mstore(0x80, m4)
  4458 |     |             mstore(0xa0, m5)
  4459 |     |             mstore(0xc0, m6)
  4460 |     |         }
  4461 |     |     }
  4462 |     | 
  4463 |     |     function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {
  4464 |     |         bytes32 m0;
  4465 |     |         bytes32 m1;
  4466 |     |         bytes32 m2;
  4467 |     |         bytes32 m3;
  4468 |     |         bytes32 m4;
  4469 |     |         /// @solidity memory-safe-assembly
  4470 |     |         assembly {
  4471 |     |             m0 := mload(0x00)
  4472 |     |             m1 := mload(0x20)
  4473 |     |             m2 := mload(0x40)
  4474 |     |             m3 := mload(0x60)
  4475 |     |             m4 := mload(0x80)
  4476 |     |             // Selector of `log(address,uint256,uint256,address)`.
  4477 |     |             mstore(0x00, 0x20e3984d)
  4478 |     |             mstore(0x20, p0)
  4479 |     |             mstore(0x40, p1)
  4480 |     |             mstore(0x60, p2)
  4481 |     |             mstore(0x80, p3)
  4482 |     |         }
  4483 |     |         _sendLogPayload(0x1c, 0x84);
  4484 |     |         /// @solidity memory-safe-assembly
  4485 |     |         assembly {
  4486 |     |             mstore(0x00, m0)
  4487 |     |             mstore(0x20, m1)
  4488 |     |             mstore(0x40, m2)
  4489 |     |             mstore(0x60, m3)
  4490 |     |             mstore(0x80, m4)
  4491 |     |         }
  4492 |     |     }
  4493 |     | 
  4494 |     |     function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {
  4495 |     |         bytes32 m0;
  4496 |     |         bytes32 m1;
  4497 |     |         bytes32 m2;
  4498 |     |         bytes32 m3;
  4499 |     |         bytes32 m4;
  4500 |     |         /// @solidity memory-safe-assembly
  4501 |     |         assembly {
  4502 |     |             m0 := mload(0x00)
  4503 |     |             m1 := mload(0x20)
  4504 |     |             m2 := mload(0x40)
  4505 |     |             m3 := mload(0x60)
  4506 |     |             m4 := mload(0x80)
  4507 |     |             // Selector of `log(address,uint256,uint256,bool)`.
  4508 |     |             mstore(0x00, 0x66f1bc67)
  4509 |     |             mstore(0x20, p0)
  4510 |     |             mstore(0x40, p1)
  4511 |     |             mstore(0x60, p2)
  4512 |     |             mstore(0x80, p3)
  4513 |     |         }
  4514 |     |         _sendLogPayload(0x1c, 0x84);
  4515 |     |         /// @solidity memory-safe-assembly
  4516 |     |         assembly {
  4517 |     |             mstore(0x00, m0)
  4518 |     |             mstore(0x20, m1)
  4519 |     |             mstore(0x40, m2)
  4520 |     |             mstore(0x60, m3)
  4521 |     |             mstore(0x80, m4)
  4522 |     |         }
  4523 |     |     }
  4524 |     | 
  4525 |     |     function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
  4526 |     |         bytes32 m0;
  4527 |     |         bytes32 m1;
  4528 |     |         bytes32 m2;
  4529 |     |         bytes32 m3;
  4530 |     |         bytes32 m4;
  4531 |     |         /// @solidity memory-safe-assembly
  4532 |     |         assembly {
  4533 |     |             m0 := mload(0x00)
  4534 |     |             m1 := mload(0x20)
  4535 |     |             m2 := mload(0x40)
  4536 |     |             m3 := mload(0x60)
  4537 |     |             m4 := mload(0x80)
  4538 |     |             // Selector of `log(address,uint256,uint256,uint256)`.
  4539 |     |             mstore(0x00, 0x34f0e636)
  4540 |     |             mstore(0x20, p0)
  4541 |     |             mstore(0x40, p1)
  4542 |     |             mstore(0x60, p2)
  4543 |     |             mstore(0x80, p3)
  4544 |     |         }
  4545 |     |         _sendLogPayload(0x1c, 0x84);
  4546 |     |         /// @solidity memory-safe-assembly
  4547 |     |         assembly {
  4548 |     |             mstore(0x00, m0)
  4549 |     |             mstore(0x20, m1)
  4550 |     |             mstore(0x40, m2)
  4551 |     |             mstore(0x60, m3)
  4552 |     |             mstore(0x80, m4)
  4553 |     |         }
  4554 |     |     }
  4555 |     | 
  4556 |     |     function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
  4557 |     |         bytes32 m0;
  4558 |     |         bytes32 m1;
  4559 |     |         bytes32 m2;
  4560 |     |         bytes32 m3;
  4561 |     |         bytes32 m4;
  4562 |     |         bytes32 m5;
  4563 |     |         bytes32 m6;
  4564 |     |         /// @solidity memory-safe-assembly
  4565 |     |         assembly {
  4566 |     |             function writeString(pos, w) {
  4567 |     |                 let length := 0
  4568 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4569 |     |                 mstore(pos, length)
  4570 |     |                 let shift := sub(256, shl(3, length))
  4571 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4572 |     |             }
  4573 |     |             m0 := mload(0x00)
  4574 |     |             m1 := mload(0x20)
  4575 |     |             m2 := mload(0x40)
  4576 |     |             m3 := mload(0x60)
  4577 |     |             m4 := mload(0x80)
  4578 |     |             m5 := mload(0xa0)
  4579 |     |             m6 := mload(0xc0)
  4580 |     |             // Selector of `log(address,uint256,uint256,string)`.
  4581 |     |             mstore(0x00, 0x4a28c017)
  4582 |     |             mstore(0x20, p0)
  4583 |     |             mstore(0x40, p1)
  4584 |     |             mstore(0x60, p2)
  4585 |     |             mstore(0x80, 0x80)
  4586 |     |             writeString(0xa0, p3)
  4587 |     |         }
  4588 |     |         _sendLogPayload(0x1c, 0xc4);
  4589 |     |         /// @solidity memory-safe-assembly
  4590 |     |         assembly {
  4591 |     |             mstore(0x00, m0)
  4592 |     |             mstore(0x20, m1)
  4593 |     |             mstore(0x40, m2)
  4594 |     |             mstore(0x60, m3)
  4595 |     |             mstore(0x80, m4)
  4596 |     |             mstore(0xa0, m5)
  4597 |     |             mstore(0xc0, m6)
  4598 |     |         }
  4599 |     |     }
  4600 |     | 
  4601 |     |     function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {
  4602 |     |         bytes32 m0;
  4603 |     |         bytes32 m1;
  4604 |     |         bytes32 m2;
  4605 |     |         bytes32 m3;
  4606 |     |         bytes32 m4;
  4607 |     |         bytes32 m5;
  4608 |     |         bytes32 m6;
  4609 |     |         /// @solidity memory-safe-assembly
  4610 |     |         assembly {
  4611 |     |             function writeString(pos, w) {
  4612 |     |                 let length := 0
  4613 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4614 |     |                 mstore(pos, length)
  4615 |     |                 let shift := sub(256, shl(3, length))
  4616 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4617 |     |             }
  4618 |     |             m0 := mload(0x00)
  4619 |     |             m1 := mload(0x20)
  4620 |     |             m2 := mload(0x40)
  4621 |     |             m3 := mload(0x60)
  4622 |     |             m4 := mload(0x80)
  4623 |     |             m5 := mload(0xa0)
  4624 |     |             m6 := mload(0xc0)
  4625 |     |             // Selector of `log(address,uint256,string,address)`.
  4626 |     |             mstore(0x00, 0x5c430d47)
  4627 |     |             mstore(0x20, p0)
  4628 |     |             mstore(0x40, p1)
  4629 |     |             mstore(0x60, 0x80)
  4630 |     |             mstore(0x80, p3)
  4631 |     |             writeString(0xa0, p2)
  4632 |     |         }
  4633 |     |         _sendLogPayload(0x1c, 0xc4);
  4634 |     |         /// @solidity memory-safe-assembly
  4635 |     |         assembly {
  4636 |     |             mstore(0x00, m0)
  4637 |     |             mstore(0x20, m1)
  4638 |     |             mstore(0x40, m2)
  4639 |     |             mstore(0x60, m3)
  4640 |     |             mstore(0x80, m4)
  4641 |     |             mstore(0xa0, m5)
  4642 |     |             mstore(0xc0, m6)
  4643 |     |         }
  4644 |     |     }
  4645 |     | 
  4646 |     |     function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {
  4647 |     |         bytes32 m0;
  4648 |     |         bytes32 m1;
  4649 |     |         bytes32 m2;
  4650 |     |         bytes32 m3;
  4651 |     |         bytes32 m4;
  4652 |     |         bytes32 m5;
  4653 |     |         bytes32 m6;
  4654 |     |         /// @solidity memory-safe-assembly
  4655 |     |         assembly {
  4656 |     |             function writeString(pos, w) {
  4657 |     |                 let length := 0
  4658 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4659 |     |                 mstore(pos, length)
  4660 |     |                 let shift := sub(256, shl(3, length))
  4661 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4662 |     |             }
  4663 |     |             m0 := mload(0x00)
  4664 |     |             m1 := mload(0x20)
  4665 |     |             m2 := mload(0x40)
  4666 |     |             m3 := mload(0x60)
  4667 |     |             m4 := mload(0x80)
  4668 |     |             m5 := mload(0xa0)
  4669 |     |             m6 := mload(0xc0)
  4670 |     |             // Selector of `log(address,uint256,string,bool)`.
  4671 |     |             mstore(0x00, 0xcf18105c)
  4672 |     |             mstore(0x20, p0)
  4673 |     |             mstore(0x40, p1)
  4674 |     |             mstore(0x60, 0x80)
  4675 |     |             mstore(0x80, p3)
  4676 |     |             writeString(0xa0, p2)
  4677 |     |         }
  4678 |     |         _sendLogPayload(0x1c, 0xc4);
  4679 |     |         /// @solidity memory-safe-assembly
  4680 |     |         assembly {
  4681 |     |             mstore(0x00, m0)
  4682 |     |             mstore(0x20, m1)
  4683 |     |             mstore(0x40, m2)
  4684 |     |             mstore(0x60, m3)
  4685 |     |             mstore(0x80, m4)
  4686 |     |             mstore(0xa0, m5)
  4687 |     |             mstore(0xc0, m6)
  4688 |     |         }
  4689 |     |     }
  4690 |     | 
  4691 |     |     function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
  4692 |     |         bytes32 m0;
  4693 |     |         bytes32 m1;
  4694 |     |         bytes32 m2;
  4695 |     |         bytes32 m3;
  4696 |     |         bytes32 m4;
  4697 |     |         bytes32 m5;
  4698 |     |         bytes32 m6;
  4699 |     |         /// @solidity memory-safe-assembly
  4700 |     |         assembly {
  4701 |     |             function writeString(pos, w) {
  4702 |     |                 let length := 0
  4703 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4704 |     |                 mstore(pos, length)
  4705 |     |                 let shift := sub(256, shl(3, length))
  4706 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4707 |     |             }
  4708 |     |             m0 := mload(0x00)
  4709 |     |             m1 := mload(0x20)
  4710 |     |             m2 := mload(0x40)
  4711 |     |             m3 := mload(0x60)
  4712 |     |             m4 := mload(0x80)
  4713 |     |             m5 := mload(0xa0)
  4714 |     |             m6 := mload(0xc0)
  4715 |     |             // Selector of `log(address,uint256,string,uint256)`.
  4716 |     |             mstore(0x00, 0xbf01f891)
  4717 |     |             mstore(0x20, p0)
  4718 |     |             mstore(0x40, p1)
  4719 |     |             mstore(0x60, 0x80)
  4720 |     |             mstore(0x80, p3)
  4721 |     |             writeString(0xa0, p2)
  4722 |     |         }
  4723 |     |         _sendLogPayload(0x1c, 0xc4);
  4724 |     |         /// @solidity memory-safe-assembly
  4725 |     |         assembly {
  4726 |     |             mstore(0x00, m0)
  4727 |     |             mstore(0x20, m1)
  4728 |     |             mstore(0x40, m2)
  4729 |     |             mstore(0x60, m3)
  4730 |     |             mstore(0x80, m4)
  4731 |     |             mstore(0xa0, m5)
  4732 |     |             mstore(0xc0, m6)
  4733 |     |         }
  4734 |     |     }
  4735 |     | 
  4736 |     |     function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
  4737 |     |         bytes32 m0;
  4738 |     |         bytes32 m1;
  4739 |     |         bytes32 m2;
  4740 |     |         bytes32 m3;
  4741 |     |         bytes32 m4;
  4742 |     |         bytes32 m5;
  4743 |     |         bytes32 m6;
  4744 |     |         bytes32 m7;
  4745 |     |         bytes32 m8;
  4746 |     |         /// @solidity memory-safe-assembly
  4747 |     |         assembly {
  4748 |     |             function writeString(pos, w) {
  4749 |     |                 let length := 0
  4750 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4751 |     |                 mstore(pos, length)
  4752 |     |                 let shift := sub(256, shl(3, length))
  4753 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4754 |     |             }
  4755 |     |             m0 := mload(0x00)
  4756 |     |             m1 := mload(0x20)
  4757 |     |             m2 := mload(0x40)
  4758 |     |             m3 := mload(0x60)
  4759 |     |             m4 := mload(0x80)
  4760 |     |             m5 := mload(0xa0)
  4761 |     |             m6 := mload(0xc0)
  4762 |     |             m7 := mload(0xe0)
  4763 |     |             m8 := mload(0x100)
  4764 |     |             // Selector of `log(address,uint256,string,string)`.
  4765 |     |             mstore(0x00, 0x88a8c406)
  4766 |     |             mstore(0x20, p0)
  4767 |     |             mstore(0x40, p1)
  4768 |     |             mstore(0x60, 0x80)
  4769 |     |             mstore(0x80, 0xc0)
  4770 |     |             writeString(0xa0, p2)
  4771 |     |             writeString(0xe0, p3)
  4772 |     |         }
  4773 |     |         _sendLogPayload(0x1c, 0x104);
  4774 |     |         /// @solidity memory-safe-assembly
  4775 |     |         assembly {
  4776 |     |             mstore(0x00, m0)
  4777 |     |             mstore(0x20, m1)
  4778 |     |             mstore(0x40, m2)
  4779 |     |             mstore(0x60, m3)
  4780 |     |             mstore(0x80, m4)
  4781 |     |             mstore(0xa0, m5)
  4782 |     |             mstore(0xc0, m6)
  4783 |     |             mstore(0xe0, m7)
  4784 |     |             mstore(0x100, m8)
  4785 |     |         }
  4786 |     |     }
  4787 |     | 
  4788 |     |     function log(address p0, bytes32 p1, address p2, address p3) internal pure {
  4789 |     |         bytes32 m0;
  4790 |     |         bytes32 m1;
  4791 |     |         bytes32 m2;
  4792 |     |         bytes32 m3;
  4793 |     |         bytes32 m4;
  4794 |     |         bytes32 m5;
  4795 |     |         bytes32 m6;
  4796 |     |         /// @solidity memory-safe-assembly
  4797 |     |         assembly {
  4798 |     |             function writeString(pos, w) {
  4799 |     |                 let length := 0
  4800 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4801 |     |                 mstore(pos, length)
  4802 |     |                 let shift := sub(256, shl(3, length))
  4803 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4804 |     |             }
  4805 |     |             m0 := mload(0x00)
  4806 |     |             m1 := mload(0x20)
  4807 |     |             m2 := mload(0x40)
  4808 |     |             m3 := mload(0x60)
  4809 |     |             m4 := mload(0x80)
  4810 |     |             m5 := mload(0xa0)
  4811 |     |             m6 := mload(0xc0)
  4812 |     |             // Selector of `log(address,string,address,address)`.
  4813 |     |             mstore(0x00, 0x0d36fa20)
  4814 |     |             mstore(0x20, p0)
  4815 |     |             mstore(0x40, 0x80)
  4816 |     |             mstore(0x60, p2)
  4817 |     |             mstore(0x80, p3)
  4818 |     |             writeString(0xa0, p1)
  4819 |     |         }
  4820 |     |         _sendLogPayload(0x1c, 0xc4);
  4821 |     |         /// @solidity memory-safe-assembly
  4822 |     |         assembly {
  4823 |     |             mstore(0x00, m0)
  4824 |     |             mstore(0x20, m1)
  4825 |     |             mstore(0x40, m2)
  4826 |     |             mstore(0x60, m3)
  4827 |     |             mstore(0x80, m4)
  4828 |     |             mstore(0xa0, m5)
  4829 |     |             mstore(0xc0, m6)
  4830 |     |         }
  4831 |     |     }
  4832 |     | 
  4833 |     |     function log(address p0, bytes32 p1, address p2, bool p3) internal pure {
  4834 |     |         bytes32 m0;
  4835 |     |         bytes32 m1;
  4836 |     |         bytes32 m2;
  4837 |     |         bytes32 m3;
  4838 |     |         bytes32 m4;
  4839 |     |         bytes32 m5;
  4840 |     |         bytes32 m6;
  4841 |     |         /// @solidity memory-safe-assembly
  4842 |     |         assembly {
  4843 |     |             function writeString(pos, w) {
  4844 |     |                 let length := 0
  4845 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4846 |     |                 mstore(pos, length)
  4847 |     |                 let shift := sub(256, shl(3, length))
  4848 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4849 |     |             }
  4850 |     |             m0 := mload(0x00)
  4851 |     |             m1 := mload(0x20)
  4852 |     |             m2 := mload(0x40)
  4853 |     |             m3 := mload(0x60)
  4854 |     |             m4 := mload(0x80)
  4855 |     |             m5 := mload(0xa0)
  4856 |     |             m6 := mload(0xc0)
  4857 |     |             // Selector of `log(address,string,address,bool)`.
  4858 |     |             mstore(0x00, 0x0df12b76)
  4859 |     |             mstore(0x20, p0)
  4860 |     |             mstore(0x40, 0x80)
  4861 |     |             mstore(0x60, p2)
  4862 |     |             mstore(0x80, p3)
  4863 |     |             writeString(0xa0, p1)
  4864 |     |         }
  4865 |     |         _sendLogPayload(0x1c, 0xc4);
  4866 |     |         /// @solidity memory-safe-assembly
  4867 |     |         assembly {
  4868 |     |             mstore(0x00, m0)
  4869 |     |             mstore(0x20, m1)
  4870 |     |             mstore(0x40, m2)
  4871 |     |             mstore(0x60, m3)
  4872 |     |             mstore(0x80, m4)
  4873 |     |             mstore(0xa0, m5)
  4874 |     |             mstore(0xc0, m6)
  4875 |     |         }
  4876 |     |     }
  4877 |     | 
  4878 |     |     function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {
  4879 |     |         bytes32 m0;
  4880 |     |         bytes32 m1;
  4881 |     |         bytes32 m2;
  4882 |     |         bytes32 m3;
  4883 |     |         bytes32 m4;
  4884 |     |         bytes32 m5;
  4885 |     |         bytes32 m6;
  4886 |     |         /// @solidity memory-safe-assembly
  4887 |     |         assembly {
  4888 |     |             function writeString(pos, w) {
  4889 |     |                 let length := 0
  4890 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4891 |     |                 mstore(pos, length)
  4892 |     |                 let shift := sub(256, shl(3, length))
  4893 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4894 |     |             }
  4895 |     |             m0 := mload(0x00)
  4896 |     |             m1 := mload(0x20)
  4897 |     |             m2 := mload(0x40)
  4898 |     |             m3 := mload(0x60)
  4899 |     |             m4 := mload(0x80)
  4900 |     |             m5 := mload(0xa0)
  4901 |     |             m6 := mload(0xc0)
  4902 |     |             // Selector of `log(address,string,address,uint256)`.
  4903 |     |             mstore(0x00, 0x457fe3cf)
  4904 |     |             mstore(0x20, p0)
  4905 |     |             mstore(0x40, 0x80)
  4906 |     |             mstore(0x60, p2)
  4907 |     |             mstore(0x80, p3)
  4908 |     |             writeString(0xa0, p1)
  4909 |     |         }
  4910 |     |         _sendLogPayload(0x1c, 0xc4);
  4911 |     |         /// @solidity memory-safe-assembly
  4912 |     |         assembly {
  4913 |     |             mstore(0x00, m0)
  4914 |     |             mstore(0x20, m1)
  4915 |     |             mstore(0x40, m2)
  4916 |     |             mstore(0x60, m3)
  4917 |     |             mstore(0x80, m4)
  4918 |     |             mstore(0xa0, m5)
  4919 |     |             mstore(0xc0, m6)
  4920 |     |         }
  4921 |     |     }
  4922 |     | 
  4923 |     |     function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {
  4924 |     |         bytes32 m0;
  4925 |     |         bytes32 m1;
  4926 |     |         bytes32 m2;
  4927 |     |         bytes32 m3;
  4928 |     |         bytes32 m4;
  4929 |     |         bytes32 m5;
  4930 |     |         bytes32 m6;
  4931 |     |         bytes32 m7;
  4932 |     |         bytes32 m8;
  4933 |     |         /// @solidity memory-safe-assembly
  4934 |     |         assembly {
  4935 |     |             function writeString(pos, w) {
  4936 |     |                 let length := 0
  4937 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4938 |     |                 mstore(pos, length)
  4939 |     |                 let shift := sub(256, shl(3, length))
  4940 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4941 |     |             }
  4942 |     |             m0 := mload(0x00)
  4943 |     |             m1 := mload(0x20)
  4944 |     |             m2 := mload(0x40)
  4945 |     |             m3 := mload(0x60)
  4946 |     |             m4 := mload(0x80)
  4947 |     |             m5 := mload(0xa0)
  4948 |     |             m6 := mload(0xc0)
  4949 |     |             m7 := mload(0xe0)
  4950 |     |             m8 := mload(0x100)
  4951 |     |             // Selector of `log(address,string,address,string)`.
  4952 |     |             mstore(0x00, 0xf7e36245)
  4953 |     |             mstore(0x20, p0)
  4954 |     |             mstore(0x40, 0x80)
  4955 |     |             mstore(0x60, p2)
  4956 |     |             mstore(0x80, 0xc0)
  4957 |     |             writeString(0xa0, p1)
  4958 |     |             writeString(0xe0, p3)
  4959 |     |         }
  4960 |     |         _sendLogPayload(0x1c, 0x104);
  4961 |     |         /// @solidity memory-safe-assembly
  4962 |     |         assembly {
  4963 |     |             mstore(0x00, m0)
  4964 |     |             mstore(0x20, m1)
  4965 |     |             mstore(0x40, m2)
  4966 |     |             mstore(0x60, m3)
  4967 |     |             mstore(0x80, m4)
  4968 |     |             mstore(0xa0, m5)
  4969 |     |             mstore(0xc0, m6)
  4970 |     |             mstore(0xe0, m7)
  4971 |     |             mstore(0x100, m8)
  4972 |     |         }
  4973 |     |     }
  4974 |     | 
  4975 |     |     function log(address p0, bytes32 p1, bool p2, address p3) internal pure {
  4976 |     |         bytes32 m0;
  4977 |     |         bytes32 m1;
  4978 |     |         bytes32 m2;
  4979 |     |         bytes32 m3;
  4980 |     |         bytes32 m4;
  4981 |     |         bytes32 m5;
  4982 |     |         bytes32 m6;
  4983 |     |         /// @solidity memory-safe-assembly
  4984 |     |         assembly {
  4985 |     |             function writeString(pos, w) {
  4986 |     |                 let length := 0
  4987 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4988 |     |                 mstore(pos, length)
  4989 |     |                 let shift := sub(256, shl(3, length))
  4990 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4991 |     |             }
  4992 |     |             m0 := mload(0x00)
  4993 |     |             m1 := mload(0x20)
  4994 |     |             m2 := mload(0x40)
  4995 |     |             m3 := mload(0x60)
  4996 |     |             m4 := mload(0x80)
  4997 |     |             m5 := mload(0xa0)
  4998 |     |             m6 := mload(0xc0)
  4999 |     |             // Selector of `log(address,string,bool,address)`.
  5000 |     |             mstore(0x00, 0x205871c2)
  5001 |     |             mstore(0x20, p0)
  5002 |     |             mstore(0x40, 0x80)
  5003 |     |             mstore(0x60, p2)
  5004 |     |             mstore(0x80, p3)
  5005 |     |             writeString(0xa0, p1)
  5006 |     |         }
  5007 |     |         _sendLogPayload(0x1c, 0xc4);
  5008 |     |         /// @solidity memory-safe-assembly
  5009 |     |         assembly {
  5010 |     |             mstore(0x00, m0)
  5011 |     |             mstore(0x20, m1)
  5012 |     |             mstore(0x40, m2)
  5013 |     |             mstore(0x60, m3)
  5014 |     |             mstore(0x80, m4)
  5015 |     |             mstore(0xa0, m5)
  5016 |     |             mstore(0xc0, m6)
  5017 |     |         }
  5018 |     |     }
  5019 |     | 
  5020 |     |     function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {
  5021 |     |         bytes32 m0;
  5022 |     |         bytes32 m1;
  5023 |     |         bytes32 m2;
  5024 |     |         bytes32 m3;
  5025 |     |         bytes32 m4;
  5026 |     |         bytes32 m5;
  5027 |     |         bytes32 m6;
  5028 |     |         /// @solidity memory-safe-assembly
  5029 |     |         assembly {
  5030 |     |             function writeString(pos, w) {
  5031 |     |                 let length := 0
  5032 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5033 |     |                 mstore(pos, length)
  5034 |     |                 let shift := sub(256, shl(3, length))
  5035 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5036 |     |             }
  5037 |     |             m0 := mload(0x00)
  5038 |     |             m1 := mload(0x20)
  5039 |     |             m2 := mload(0x40)
  5040 |     |             m3 := mload(0x60)
  5041 |     |             m4 := mload(0x80)
  5042 |     |             m5 := mload(0xa0)
  5043 |     |             m6 := mload(0xc0)
  5044 |     |             // Selector of `log(address,string,bool,bool)`.
  5045 |     |             mstore(0x00, 0x5f1d5c9f)
  5046 |     |             mstore(0x20, p0)
  5047 |     |             mstore(0x40, 0x80)
  5048 |     |             mstore(0x60, p2)
  5049 |     |             mstore(0x80, p3)
  5050 |     |             writeString(0xa0, p1)
  5051 |     |         }
  5052 |     |         _sendLogPayload(0x1c, 0xc4);
  5053 |     |         /// @solidity memory-safe-assembly
  5054 |     |         assembly {
  5055 |     |             mstore(0x00, m0)
  5056 |     |             mstore(0x20, m1)
  5057 |     |             mstore(0x40, m2)
  5058 |     |             mstore(0x60, m3)
  5059 |     |             mstore(0x80, m4)
  5060 |     |             mstore(0xa0, m5)
  5061 |     |             mstore(0xc0, m6)
  5062 |     |         }
  5063 |     |     }
  5064 |     | 
  5065 |     |     function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {
  5066 |     |         bytes32 m0;
  5067 |     |         bytes32 m1;
  5068 |     |         bytes32 m2;
  5069 |     |         bytes32 m3;
  5070 |     |         bytes32 m4;
  5071 |     |         bytes32 m5;
  5072 |     |         bytes32 m6;
  5073 |     |         /// @solidity memory-safe-assembly
  5074 |     |         assembly {
  5075 |     |             function writeString(pos, w) {
  5076 |     |                 let length := 0
  5077 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5078 |     |                 mstore(pos, length)
  5079 |     |                 let shift := sub(256, shl(3, length))
  5080 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5081 |     |             }
  5082 |     |             m0 := mload(0x00)
  5083 |     |             m1 := mload(0x20)
  5084 |     |             m2 := mload(0x40)
  5085 |     |             m3 := mload(0x60)
  5086 |     |             m4 := mload(0x80)
  5087 |     |             m5 := mload(0xa0)
  5088 |     |             m6 := mload(0xc0)
  5089 |     |             // Selector of `log(address,string,bool,uint256)`.
  5090 |     |             mstore(0x00, 0x515e38b6)
  5091 |     |             mstore(0x20, p0)
  5092 |     |             mstore(0x40, 0x80)
  5093 |     |             mstore(0x60, p2)
  5094 |     |             mstore(0x80, p3)
  5095 |     |             writeString(0xa0, p1)
  5096 |     |         }
  5097 |     |         _sendLogPayload(0x1c, 0xc4);
  5098 |     |         /// @solidity memory-safe-assembly
  5099 |     |         assembly {
  5100 |     |             mstore(0x00, m0)
  5101 |     |             mstore(0x20, m1)
  5102 |     |             mstore(0x40, m2)
  5103 |     |             mstore(0x60, m3)
  5104 |     |             mstore(0x80, m4)
  5105 |     |             mstore(0xa0, m5)
  5106 |     |             mstore(0xc0, m6)
  5107 |     |         }
  5108 |     |     }
  5109 |     | 
  5110 |     |     function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
  5111 |     |         bytes32 m0;
  5112 |     |         bytes32 m1;
  5113 |     |         bytes32 m2;
  5114 |     |         bytes32 m3;
  5115 |     |         bytes32 m4;
  5116 |     |         bytes32 m5;
  5117 |     |         bytes32 m6;
  5118 |     |         bytes32 m7;
  5119 |     |         bytes32 m8;
  5120 |     |         /// @solidity memory-safe-assembly
  5121 |     |         assembly {
  5122 |     |             function writeString(pos, w) {
  5123 |     |                 let length := 0
  5124 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5125 |     |                 mstore(pos, length)
  5126 |     |                 let shift := sub(256, shl(3, length))
  5127 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5128 |     |             }
  5129 |     |             m0 := mload(0x00)
  5130 |     |             m1 := mload(0x20)
  5131 |     |             m2 := mload(0x40)
  5132 |     |             m3 := mload(0x60)
  5133 |     |             m4 := mload(0x80)
  5134 |     |             m5 := mload(0xa0)
  5135 |     |             m6 := mload(0xc0)
  5136 |     |             m7 := mload(0xe0)
  5137 |     |             m8 := mload(0x100)
  5138 |     |             // Selector of `log(address,string,bool,string)`.
  5139 |     |             mstore(0x00, 0xbc0b61fe)
  5140 |     |             mstore(0x20, p0)
  5141 |     |             mstore(0x40, 0x80)
  5142 |     |             mstore(0x60, p2)
  5143 |     |             mstore(0x80, 0xc0)
  5144 |     |             writeString(0xa0, p1)
  5145 |     |             writeString(0xe0, p3)
  5146 |     |         }
  5147 |     |         _sendLogPayload(0x1c, 0x104);
  5148 |     |         /// @solidity memory-safe-assembly
  5149 |     |         assembly {
  5150 |     |             mstore(0x00, m0)
  5151 |     |             mstore(0x20, m1)
  5152 |     |             mstore(0x40, m2)
  5153 |     |             mstore(0x60, m3)
  5154 |     |             mstore(0x80, m4)
  5155 |     |             mstore(0xa0, m5)
  5156 |     |             mstore(0xc0, m6)
  5157 |     |             mstore(0xe0, m7)
  5158 |     |             mstore(0x100, m8)
  5159 |     |         }
  5160 |     |     }
  5161 |     | 
  5162 |     |     function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {
  5163 |     |         bytes32 m0;
  5164 |     |         bytes32 m1;
  5165 |     |         bytes32 m2;
  5166 |     |         bytes32 m3;
  5167 |     |         bytes32 m4;
  5168 |     |         bytes32 m5;
  5169 |     |         bytes32 m6;
  5170 |     |         /// @solidity memory-safe-assembly
  5171 |     |         assembly {
  5172 |     |             function writeString(pos, w) {
  5173 |     |                 let length := 0
  5174 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5175 |     |                 mstore(pos, length)
  5176 |     |                 let shift := sub(256, shl(3, length))
  5177 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5178 |     |             }
  5179 |     |             m0 := mload(0x00)
  5180 |     |             m1 := mload(0x20)
  5181 |     |             m2 := mload(0x40)
  5182 |     |             m3 := mload(0x60)
  5183 |     |             m4 := mload(0x80)
  5184 |     |             m5 := mload(0xa0)
  5185 |     |             m6 := mload(0xc0)
  5186 |     |             // Selector of `log(address,string,uint256,address)`.
  5187 |     |             mstore(0x00, 0x63183678)
  5188 |     |             mstore(0x20, p0)
  5189 |     |             mstore(0x40, 0x80)
  5190 |     |             mstore(0x60, p2)
  5191 |     |             mstore(0x80, p3)
  5192 |     |             writeString(0xa0, p1)
  5193 |     |         }
  5194 |     |         _sendLogPayload(0x1c, 0xc4);
  5195 |     |         /// @solidity memory-safe-assembly
  5196 |     |         assembly {
  5197 |     |             mstore(0x00, m0)
  5198 |     |             mstore(0x20, m1)
  5199 |     |             mstore(0x40, m2)
  5200 |     |             mstore(0x60, m3)
  5201 |     |             mstore(0x80, m4)
  5202 |     |             mstore(0xa0, m5)
  5203 |     |             mstore(0xc0, m6)
  5204 |     |         }
  5205 |     |     }
  5206 |     | 
  5207 |     |     function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {
  5208 |     |         bytes32 m0;
  5209 |     |         bytes32 m1;
  5210 |     |         bytes32 m2;
  5211 |     |         bytes32 m3;
  5212 |     |         bytes32 m4;
  5213 |     |         bytes32 m5;
  5214 |     |         bytes32 m6;
  5215 |     |         /// @solidity memory-safe-assembly
  5216 |     |         assembly {
  5217 |     |             function writeString(pos, w) {
  5218 |     |                 let length := 0
  5219 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5220 |     |                 mstore(pos, length)
  5221 |     |                 let shift := sub(256, shl(3, length))
  5222 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5223 |     |             }
  5224 |     |             m0 := mload(0x00)
  5225 |     |             m1 := mload(0x20)
  5226 |     |             m2 := mload(0x40)
  5227 |     |             m3 := mload(0x60)
  5228 |     |             m4 := mload(0x80)
  5229 |     |             m5 := mload(0xa0)
  5230 |     |             m6 := mload(0xc0)
  5231 |     |             // Selector of `log(address,string,uint256,bool)`.
  5232 |     |             mstore(0x00, 0x0ef7e050)
  5233 |     |             mstore(0x20, p0)
  5234 |     |             mstore(0x40, 0x80)
  5235 |     |             mstore(0x60, p2)
  5236 |     |             mstore(0x80, p3)
  5237 |     |             writeString(0xa0, p1)
  5238 |     |         }
  5239 |     |         _sendLogPayload(0x1c, 0xc4);
  5240 |     |         /// @solidity memory-safe-assembly
  5241 |     |         assembly {
  5242 |     |             mstore(0x00, m0)
  5243 |     |             mstore(0x20, m1)
  5244 |     |             mstore(0x40, m2)
  5245 |     |             mstore(0x60, m3)
  5246 |     |             mstore(0x80, m4)
  5247 |     |             mstore(0xa0, m5)
  5248 |     |             mstore(0xc0, m6)
  5249 |     |         }
  5250 |     |     }
  5251 |     | 
  5252 |     |     function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
  5253 |     |         bytes32 m0;
  5254 |     |         bytes32 m1;
  5255 |     |         bytes32 m2;
  5256 |     |         bytes32 m3;
  5257 |     |         bytes32 m4;
  5258 |     |         bytes32 m5;
  5259 |     |         bytes32 m6;
  5260 |     |         /// @solidity memory-safe-assembly
  5261 |     |         assembly {
  5262 |     |             function writeString(pos, w) {
  5263 |     |                 let length := 0
  5264 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5265 |     |                 mstore(pos, length)
  5266 |     |                 let shift := sub(256, shl(3, length))
  5267 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5268 |     |             }
  5269 |     |             m0 := mload(0x00)
  5270 |     |             m1 := mload(0x20)
  5271 |     |             m2 := mload(0x40)
  5272 |     |             m3 := mload(0x60)
  5273 |     |             m4 := mload(0x80)
  5274 |     |             m5 := mload(0xa0)
  5275 |     |             m6 := mload(0xc0)
  5276 |     |             // Selector of `log(address,string,uint256,uint256)`.
  5277 |     |             mstore(0x00, 0x1dc8e1b8)
  5278 |     |             mstore(0x20, p0)
  5279 |     |             mstore(0x40, 0x80)
  5280 |     |             mstore(0x60, p2)
  5281 |     |             mstore(0x80, p3)
  5282 |     |             writeString(0xa0, p1)
  5283 |     |         }
  5284 |     |         _sendLogPayload(0x1c, 0xc4);
  5285 |     |         /// @solidity memory-safe-assembly
  5286 |     |         assembly {
  5287 |     |             mstore(0x00, m0)
  5288 |     |             mstore(0x20, m1)
  5289 |     |             mstore(0x40, m2)
  5290 |     |             mstore(0x60, m3)
  5291 |     |             mstore(0x80, m4)
  5292 |     |             mstore(0xa0, m5)
  5293 |     |             mstore(0xc0, m6)
  5294 |     |         }
  5295 |     |     }
  5296 |     | 
  5297 |     |     function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
  5298 |     |         bytes32 m0;
  5299 |     |         bytes32 m1;
  5300 |     |         bytes32 m2;
  5301 |     |         bytes32 m3;
  5302 |     |         bytes32 m4;
  5303 |     |         bytes32 m5;
  5304 |     |         bytes32 m6;
  5305 |     |         bytes32 m7;
  5306 |     |         bytes32 m8;
  5307 |     |         /// @solidity memory-safe-assembly
  5308 |     |         assembly {
  5309 |     |             function writeString(pos, w) {
  5310 |     |                 let length := 0
  5311 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5312 |     |                 mstore(pos, length)
  5313 |     |                 let shift := sub(256, shl(3, length))
  5314 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5315 |     |             }
  5316 |     |             m0 := mload(0x00)
  5317 |     |             m1 := mload(0x20)
  5318 |     |             m2 := mload(0x40)
  5319 |     |             m3 := mload(0x60)
  5320 |     |             m4 := mload(0x80)
  5321 |     |             m5 := mload(0xa0)
  5322 |     |             m6 := mload(0xc0)
  5323 |     |             m7 := mload(0xe0)
  5324 |     |             m8 := mload(0x100)
  5325 |     |             // Selector of `log(address,string,uint256,string)`.
  5326 |     |             mstore(0x00, 0x448830a8)
  5327 |     |             mstore(0x20, p0)
  5328 |     |             mstore(0x40, 0x80)
  5329 |     |             mstore(0x60, p2)
  5330 |     |             mstore(0x80, 0xc0)
  5331 |     |             writeString(0xa0, p1)
  5332 |     |             writeString(0xe0, p3)
  5333 |     |         }
  5334 |     |         _sendLogPayload(0x1c, 0x104);
  5335 |     |         /// @solidity memory-safe-assembly
  5336 |     |         assembly {
  5337 |     |             mstore(0x00, m0)
  5338 |     |             mstore(0x20, m1)
  5339 |     |             mstore(0x40, m2)
  5340 |     |             mstore(0x60, m3)
  5341 |     |             mstore(0x80, m4)
  5342 |     |             mstore(0xa0, m5)
  5343 |     |             mstore(0xc0, m6)
  5344 |     |             mstore(0xe0, m7)
  5345 |     |             mstore(0x100, m8)
  5346 |     |         }
  5347 |     |     }
  5348 |     | 
  5349 |     |     function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {
  5350 |     |         bytes32 m0;
  5351 |     |         bytes32 m1;
  5352 |     |         bytes32 m2;
  5353 |     |         bytes32 m3;
  5354 |     |         bytes32 m4;
  5355 |     |         bytes32 m5;
  5356 |     |         bytes32 m6;
  5357 |     |         bytes32 m7;
  5358 |     |         bytes32 m8;
  5359 |     |         /// @solidity memory-safe-assembly
  5360 |     |         assembly {
  5361 |     |             function writeString(pos, w) {
  5362 |     |                 let length := 0
  5363 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5364 |     |                 mstore(pos, length)
  5365 |     |                 let shift := sub(256, shl(3, length))
  5366 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5367 |     |             }
  5368 |     |             m0 := mload(0x00)
  5369 |     |             m1 := mload(0x20)
  5370 |     |             m2 := mload(0x40)
  5371 |     |             m3 := mload(0x60)
  5372 |     |             m4 := mload(0x80)
  5373 |     |             m5 := mload(0xa0)
  5374 |     |             m6 := mload(0xc0)
  5375 |     |             m7 := mload(0xe0)
  5376 |     |             m8 := mload(0x100)
  5377 |     |             // Selector of `log(address,string,string,address)`.
  5378 |     |             mstore(0x00, 0xa04e2f87)
  5379 |     |             mstore(0x20, p0)
  5380 |     |             mstore(0x40, 0x80)
  5381 |     |             mstore(0x60, 0xc0)
  5382 |     |             mstore(0x80, p3)
  5383 |     |             writeString(0xa0, p1)
  5384 |     |             writeString(0xe0, p2)
  5385 |     |         }
  5386 |     |         _sendLogPayload(0x1c, 0x104);
  5387 |     |         /// @solidity memory-safe-assembly
  5388 |     |         assembly {
  5389 |     |             mstore(0x00, m0)
  5390 |     |             mstore(0x20, m1)
  5391 |     |             mstore(0x40, m2)
  5392 |     |             mstore(0x60, m3)
  5393 |     |             mstore(0x80, m4)
  5394 |     |             mstore(0xa0, m5)
  5395 |     |             mstore(0xc0, m6)
  5396 |     |             mstore(0xe0, m7)
  5397 |     |             mstore(0x100, m8)
  5398 |     |         }
  5399 |     |     }
  5400 |     | 
  5401 |     |     function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
  5402 |     |         bytes32 m0;
  5403 |     |         bytes32 m1;
  5404 |     |         bytes32 m2;
  5405 |     |         bytes32 m3;
  5406 |     |         bytes32 m4;
  5407 |     |         bytes32 m5;
  5408 |     |         bytes32 m6;
  5409 |     |         bytes32 m7;
  5410 |     |         bytes32 m8;
  5411 |     |         /// @solidity memory-safe-assembly
  5412 |     |         assembly {
  5413 |     |             function writeString(pos, w) {
  5414 |     |                 let length := 0
  5415 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5416 |     |                 mstore(pos, length)
  5417 |     |                 let shift := sub(256, shl(3, length))
  5418 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5419 |     |             }
  5420 |     |             m0 := mload(0x00)
  5421 |     |             m1 := mload(0x20)
  5422 |     |             m2 := mload(0x40)
  5423 |     |             m3 := mload(0x60)
  5424 |     |             m4 := mload(0x80)
  5425 |     |             m5 := mload(0xa0)
  5426 |     |             m6 := mload(0xc0)
  5427 |     |             m7 := mload(0xe0)
  5428 |     |             m8 := mload(0x100)
  5429 |     |             // Selector of `log(address,string,string,bool)`.
  5430 |     |             mstore(0x00, 0x35a5071f)
  5431 |     |             mstore(0x20, p0)
  5432 |     |             mstore(0x40, 0x80)
  5433 |     |             mstore(0x60, 0xc0)
  5434 |     |             mstore(0x80, p3)
  5435 |     |             writeString(0xa0, p1)
  5436 |     |             writeString(0xe0, p2)
  5437 |     |         }
  5438 |     |         _sendLogPayload(0x1c, 0x104);
  5439 |     |         /// @solidity memory-safe-assembly
  5440 |     |         assembly {
  5441 |     |             mstore(0x00, m0)
  5442 |     |             mstore(0x20, m1)
  5443 |     |             mstore(0x40, m2)
  5444 |     |             mstore(0x60, m3)
  5445 |     |             mstore(0x80, m4)
  5446 |     |             mstore(0xa0, m5)
  5447 |     |             mstore(0xc0, m6)
  5448 |     |             mstore(0xe0, m7)
  5449 |     |             mstore(0x100, m8)
  5450 |     |         }
  5451 |     |     }
  5452 |     | 
  5453 |     |     function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
  5454 |     |         bytes32 m0;
  5455 |     |         bytes32 m1;
  5456 |     |         bytes32 m2;
  5457 |     |         bytes32 m3;
  5458 |     |         bytes32 m4;
  5459 |     |         bytes32 m5;
  5460 |     |         bytes32 m6;
  5461 |     |         bytes32 m7;
  5462 |     |         bytes32 m8;
  5463 |     |         /// @solidity memory-safe-assembly
  5464 |     |         assembly {
  5465 |     |             function writeString(pos, w) {
  5466 |     |                 let length := 0
  5467 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5468 |     |                 mstore(pos, length)
  5469 |     |                 let shift := sub(256, shl(3, length))
  5470 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5471 |     |             }
  5472 |     |             m0 := mload(0x00)
  5473 |     |             m1 := mload(0x20)
  5474 |     |             m2 := mload(0x40)
  5475 |     |             m3 := mload(0x60)
  5476 |     |             m4 := mload(0x80)
  5477 |     |             m5 := mload(0xa0)
  5478 |     |             m6 := mload(0xc0)
  5479 |     |             m7 := mload(0xe0)
  5480 |     |             m8 := mload(0x100)
  5481 |     |             // Selector of `log(address,string,string,uint256)`.
  5482 |     |             mstore(0x00, 0x159f8927)
  5483 |     |             mstore(0x20, p0)
  5484 |     |             mstore(0x40, 0x80)
  5485 |     |             mstore(0x60, 0xc0)
  5486 |     |             mstore(0x80, p3)
  5487 |     |             writeString(0xa0, p1)
  5488 |     |             writeString(0xe0, p2)
  5489 |     |         }
  5490 |     |         _sendLogPayload(0x1c, 0x104);
  5491 |     |         /// @solidity memory-safe-assembly
  5492 |     |         assembly {
  5493 |     |             mstore(0x00, m0)
  5494 |     |             mstore(0x20, m1)
  5495 |     |             mstore(0x40, m2)
  5496 |     |             mstore(0x60, m3)
  5497 |     |             mstore(0x80, m4)
  5498 |     |             mstore(0xa0, m5)
  5499 |     |             mstore(0xc0, m6)
  5500 |     |             mstore(0xe0, m7)
  5501 |     |             mstore(0x100, m8)
  5502 |     |         }
  5503 |     |     }
  5504 |     | 
  5505 |     |     function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
  5506 |     |         bytes32 m0;
  5507 |     |         bytes32 m1;
  5508 |     |         bytes32 m2;
  5509 |     |         bytes32 m3;
  5510 |     |         bytes32 m4;
  5511 |     |         bytes32 m5;
  5512 |     |         bytes32 m6;
  5513 |     |         bytes32 m7;
  5514 |     |         bytes32 m8;
  5515 |     |         bytes32 m9;
  5516 |     |         bytes32 m10;
  5517 |     |         /// @solidity memory-safe-assembly
  5518 |     |         assembly {
  5519 |     |             function writeString(pos, w) {
  5520 |     |                 let length := 0
  5521 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5522 |     |                 mstore(pos, length)
  5523 |     |                 let shift := sub(256, shl(3, length))
  5524 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5525 |     |             }
  5526 |     |             m0 := mload(0x00)
  5527 |     |             m1 := mload(0x20)
  5528 |     |             m2 := mload(0x40)
  5529 |     |             m3 := mload(0x60)
  5530 |     |             m4 := mload(0x80)
  5531 |     |             m5 := mload(0xa0)
  5532 |     |             m6 := mload(0xc0)
  5533 |     |             m7 := mload(0xe0)
  5534 |     |             m8 := mload(0x100)
  5535 |     |             m9 := mload(0x120)
  5536 |     |             m10 := mload(0x140)
  5537 |     |             // Selector of `log(address,string,string,string)`.
  5538 |     |             mstore(0x00, 0x5d02c50b)
  5539 |     |             mstore(0x20, p0)
  5540 |     |             mstore(0x40, 0x80)
  5541 |     |             mstore(0x60, 0xc0)
  5542 |     |             mstore(0x80, 0x100)
  5543 |     |             writeString(0xa0, p1)
  5544 |     |             writeString(0xe0, p2)
  5545 |     |             writeString(0x120, p3)
  5546 |     |         }
  5547 |     |         _sendLogPayload(0x1c, 0x144);
  5548 |     |         /// @solidity memory-safe-assembly
  5549 |     |         assembly {
  5550 |     |             mstore(0x00, m0)
  5551 |     |             mstore(0x20, m1)
  5552 |     |             mstore(0x40, m2)
  5553 |     |             mstore(0x60, m3)
  5554 |     |             mstore(0x80, m4)
  5555 |     |             mstore(0xa0, m5)
  5556 |     |             mstore(0xc0, m6)
  5557 |     |             mstore(0xe0, m7)
  5558 |     |             mstore(0x100, m8)
  5559 |     |             mstore(0x120, m9)
  5560 |     |             mstore(0x140, m10)
  5561 |     |         }
  5562 |     |     }
  5563 |     | 
  5564 |     |     function log(bool p0, address p1, address p2, address p3) internal pure {
  5565 |     |         bytes32 m0;
  5566 |     |         bytes32 m1;
  5567 |     |         bytes32 m2;
  5568 |     |         bytes32 m3;
  5569 |     |         bytes32 m4;
  5570 |     |         /// @solidity memory-safe-assembly
  5571 |     |         assembly {
  5572 |     |             m0 := mload(0x00)
  5573 |     |             m1 := mload(0x20)
  5574 |     |             m2 := mload(0x40)
  5575 |     |             m3 := mload(0x60)
  5576 |     |             m4 := mload(0x80)
  5577 |     |             // Selector of `log(bool,address,address,address)`.
  5578 |     |             mstore(0x00, 0x1d14d001)
  5579 |     |             mstore(0x20, p0)
  5580 |     |             mstore(0x40, p1)
  5581 |     |             mstore(0x60, p2)
  5582 |     |             mstore(0x80, p3)
  5583 |     |         }
  5584 |     |         _sendLogPayload(0x1c, 0x84);
  5585 |     |         /// @solidity memory-safe-assembly
  5586 |     |         assembly {
  5587 |     |             mstore(0x00, m0)
  5588 |     |             mstore(0x20, m1)
  5589 |     |             mstore(0x40, m2)
  5590 |     |             mstore(0x60, m3)
  5591 |     |             mstore(0x80, m4)
  5592 |     |         }
  5593 |     |     }
  5594 |     | 
  5595 |     |     function log(bool p0, address p1, address p2, bool p3) internal pure {
  5596 |     |         bytes32 m0;
  5597 |     |         bytes32 m1;
  5598 |     |         bytes32 m2;
  5599 |     |         bytes32 m3;
  5600 |     |         bytes32 m4;
  5601 |     |         /// @solidity memory-safe-assembly
  5602 |     |         assembly {
  5603 |     |             m0 := mload(0x00)
  5604 |     |             m1 := mload(0x20)
  5605 |     |             m2 := mload(0x40)
  5606 |     |             m3 := mload(0x60)
  5607 |     |             m4 := mload(0x80)
  5608 |     |             // Selector of `log(bool,address,address,bool)`.
  5609 |     |             mstore(0x00, 0x46600be0)
  5610 |     |             mstore(0x20, p0)
  5611 |     |             mstore(0x40, p1)
  5612 |     |             mstore(0x60, p2)
  5613 |     |             mstore(0x80, p3)
  5614 |     |         }
  5615 |     |         _sendLogPayload(0x1c, 0x84);
  5616 |     |         /// @solidity memory-safe-assembly
  5617 |     |         assembly {
  5618 |     |             mstore(0x00, m0)
  5619 |     |             mstore(0x20, m1)
  5620 |     |             mstore(0x40, m2)
  5621 |     |             mstore(0x60, m3)
  5622 |     |             mstore(0x80, m4)
  5623 |     |         }
  5624 |     |     }
  5625 |     | 
  5626 |     |     function log(bool p0, address p1, address p2, uint256 p3) internal pure {
  5627 |     |         bytes32 m0;
  5628 |     |         bytes32 m1;
  5629 |     |         bytes32 m2;
  5630 |     |         bytes32 m3;
  5631 |     |         bytes32 m4;
  5632 |     |         /// @solidity memory-safe-assembly
  5633 |     |         assembly {
  5634 |     |             m0 := mload(0x00)
  5635 |     |             m1 := mload(0x20)
  5636 |     |             m2 := mload(0x40)
  5637 |     |             m3 := mload(0x60)
  5638 |     |             m4 := mload(0x80)
  5639 |     |             // Selector of `log(bool,address,address,uint256)`.
  5640 |     |             mstore(0x00, 0x0c66d1be)
  5641 |     |             mstore(0x20, p0)
  5642 |     |             mstore(0x40, p1)
  5643 |     |             mstore(0x60, p2)
  5644 |     |             mstore(0x80, p3)
  5645 |     |         }
  5646 |     |         _sendLogPayload(0x1c, 0x84);
  5647 |     |         /// @solidity memory-safe-assembly
  5648 |     |         assembly {
  5649 |     |             mstore(0x00, m0)
  5650 |     |             mstore(0x20, m1)
  5651 |     |             mstore(0x40, m2)
  5652 |     |             mstore(0x60, m3)
  5653 |     |             mstore(0x80, m4)
  5654 |     |         }
  5655 |     |     }
  5656 |     | 
  5657 |     |     function log(bool p0, address p1, address p2, bytes32 p3) internal pure {
  5658 |     |         bytes32 m0;
  5659 |     |         bytes32 m1;
  5660 |     |         bytes32 m2;
  5661 |     |         bytes32 m3;
  5662 |     |         bytes32 m4;
  5663 |     |         bytes32 m5;
  5664 |     |         bytes32 m6;
  5665 |     |         /// @solidity memory-safe-assembly
  5666 |     |         assembly {
  5667 |     |             function writeString(pos, w) {
  5668 |     |                 let length := 0
  5669 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5670 |     |                 mstore(pos, length)
  5671 |     |                 let shift := sub(256, shl(3, length))
  5672 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5673 |     |             }
  5674 |     |             m0 := mload(0x00)
  5675 |     |             m1 := mload(0x20)
  5676 |     |             m2 := mload(0x40)
  5677 |     |             m3 := mload(0x60)
  5678 |     |             m4 := mload(0x80)
  5679 |     |             m5 := mload(0xa0)
  5680 |     |             m6 := mload(0xc0)
  5681 |     |             // Selector of `log(bool,address,address,string)`.
  5682 |     |             mstore(0x00, 0xd812a167)
  5683 |     |             mstore(0x20, p0)
  5684 |     |             mstore(0x40, p1)
  5685 |     |             mstore(0x60, p2)
  5686 |     |             mstore(0x80, 0x80)
  5687 |     |             writeString(0xa0, p3)
  5688 |     |         }
  5689 |     |         _sendLogPayload(0x1c, 0xc4);
  5690 |     |         /// @solidity memory-safe-assembly
  5691 |     |         assembly {
  5692 |     |             mstore(0x00, m0)
  5693 |     |             mstore(0x20, m1)
  5694 |     |             mstore(0x40, m2)
  5695 |     |             mstore(0x60, m3)
  5696 |     |             mstore(0x80, m4)
  5697 |     |             mstore(0xa0, m5)
  5698 |     |             mstore(0xc0, m6)
  5699 |     |         }
  5700 |     |     }
  5701 |     | 
  5702 |     |     function log(bool p0, address p1, bool p2, address p3) internal pure {
  5703 |     |         bytes32 m0;
  5704 |     |         bytes32 m1;
  5705 |     |         bytes32 m2;
  5706 |     |         bytes32 m3;
  5707 |     |         bytes32 m4;
  5708 |     |         /// @solidity memory-safe-assembly
  5709 |     |         assembly {
  5710 |     |             m0 := mload(0x00)
  5711 |     |             m1 := mload(0x20)
  5712 |     |             m2 := mload(0x40)
  5713 |     |             m3 := mload(0x60)
  5714 |     |             m4 := mload(0x80)
  5715 |     |             // Selector of `log(bool,address,bool,address)`.
  5716 |     |             mstore(0x00, 0x1c41a336)
  5717 |     |             mstore(0x20, p0)
  5718 |     |             mstore(0x40, p1)
  5719 |     |             mstore(0x60, p2)
  5720 |     |             mstore(0x80, p3)
  5721 |     |         }
  5722 |     |         _sendLogPayload(0x1c, 0x84);
  5723 |     |         /// @solidity memory-safe-assembly
  5724 |     |         assembly {
  5725 |     |             mstore(0x00, m0)
  5726 |     |             mstore(0x20, m1)
  5727 |     |             mstore(0x40, m2)
  5728 |     |             mstore(0x60, m3)
  5729 |     |             mstore(0x80, m4)
  5730 |     |         }
  5731 |     |     }
  5732 |     | 
  5733 |     |     function log(bool p0, address p1, bool p2, bool p3) internal pure {
  5734 |     |         bytes32 m0;
  5735 |     |         bytes32 m1;
  5736 |     |         bytes32 m2;
  5737 |     |         bytes32 m3;
  5738 |     |         bytes32 m4;
  5739 |     |         /// @solidity memory-safe-assembly
  5740 |     |         assembly {
  5741 |     |             m0 := mload(0x00)
  5742 |     |             m1 := mload(0x20)
  5743 |     |             m2 := mload(0x40)
  5744 |     |             m3 := mload(0x60)
  5745 |     |             m4 := mload(0x80)
  5746 |     |             // Selector of `log(bool,address,bool,bool)`.
  5747 |     |             mstore(0x00, 0x6a9c478b)
  5748 |     |             mstore(0x20, p0)
  5749 |     |             mstore(0x40, p1)
  5750 |     |             mstore(0x60, p2)
  5751 |     |             mstore(0x80, p3)
  5752 |     |         }
  5753 |     |         _sendLogPayload(0x1c, 0x84);
  5754 |     |         /// @solidity memory-safe-assembly
  5755 |     |         assembly {
  5756 |     |             mstore(0x00, m0)
  5757 |     |             mstore(0x20, m1)
  5758 |     |             mstore(0x40, m2)
  5759 |     |             mstore(0x60, m3)
  5760 |     |             mstore(0x80, m4)
  5761 |     |         }
  5762 |     |     }
  5763 |     | 
  5764 |     |     function log(bool p0, address p1, bool p2, uint256 p3) internal pure {
  5765 |     |         bytes32 m0;
  5766 |     |         bytes32 m1;
  5767 |     |         bytes32 m2;
  5768 |     |         bytes32 m3;
  5769 |     |         bytes32 m4;
  5770 |     |         /// @solidity memory-safe-assembly
  5771 |     |         assembly {
  5772 |     |             m0 := mload(0x00)
  5773 |     |             m1 := mload(0x20)
  5774 |     |             m2 := mload(0x40)
  5775 |     |             m3 := mload(0x60)
  5776 |     |             m4 := mload(0x80)
  5777 |     |             // Selector of `log(bool,address,bool,uint256)`.
  5778 |     |             mstore(0x00, 0x07831502)
  5779 |     |             mstore(0x20, p0)
  5780 |     |             mstore(0x40, p1)
  5781 |     |             mstore(0x60, p2)
  5782 |     |             mstore(0x80, p3)
  5783 |     |         }
  5784 |     |         _sendLogPayload(0x1c, 0x84);
  5785 |     |         /// @solidity memory-safe-assembly
  5786 |     |         assembly {
  5787 |     |             mstore(0x00, m0)
  5788 |     |             mstore(0x20, m1)
  5789 |     |             mstore(0x40, m2)
  5790 |     |             mstore(0x60, m3)
  5791 |     |             mstore(0x80, m4)
  5792 |     |         }
  5793 |     |     }
  5794 |     | 
  5795 |     |     function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {
  5796 |     |         bytes32 m0;
  5797 |     |         bytes32 m1;
  5798 |     |         bytes32 m2;
  5799 |     |         bytes32 m3;
  5800 |     |         bytes32 m4;
  5801 |     |         bytes32 m5;
  5802 |     |         bytes32 m6;
  5803 |     |         /// @solidity memory-safe-assembly
  5804 |     |         assembly {
  5805 |     |             function writeString(pos, w) {
  5806 |     |                 let length := 0
  5807 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5808 |     |                 mstore(pos, length)
  5809 |     |                 let shift := sub(256, shl(3, length))
  5810 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5811 |     |             }
  5812 |     |             m0 := mload(0x00)
  5813 |     |             m1 := mload(0x20)
  5814 |     |             m2 := mload(0x40)
  5815 |     |             m3 := mload(0x60)
  5816 |     |             m4 := mload(0x80)
  5817 |     |             m5 := mload(0xa0)
  5818 |     |             m6 := mload(0xc0)
  5819 |     |             // Selector of `log(bool,address,bool,string)`.
  5820 |     |             mstore(0x00, 0x4a66cb34)
  5821 |     |             mstore(0x20, p0)
  5822 |     |             mstore(0x40, p1)
  5823 |     |             mstore(0x60, p2)
  5824 |     |             mstore(0x80, 0x80)
  5825 |     |             writeString(0xa0, p3)
  5826 |     |         }
  5827 |     |         _sendLogPayload(0x1c, 0xc4);
  5828 |     |         /// @solidity memory-safe-assembly
  5829 |     |         assembly {
  5830 |     |             mstore(0x00, m0)
  5831 |     |             mstore(0x20, m1)
  5832 |     |             mstore(0x40, m2)
  5833 |     |             mstore(0x60, m3)
  5834 |     |             mstore(0x80, m4)
  5835 |     |             mstore(0xa0, m5)
  5836 |     |             mstore(0xc0, m6)
  5837 |     |         }
  5838 |     |     }
  5839 |     | 
  5840 |     |     function log(bool p0, address p1, uint256 p2, address p3) internal pure {
  5841 |     |         bytes32 m0;
  5842 |     |         bytes32 m1;
  5843 |     |         bytes32 m2;
  5844 |     |         bytes32 m3;
  5845 |     |         bytes32 m4;
  5846 |     |         /// @solidity memory-safe-assembly
  5847 |     |         assembly {
  5848 |     |             m0 := mload(0x00)
  5849 |     |             m1 := mload(0x20)
  5850 |     |             m2 := mload(0x40)
  5851 |     |             m3 := mload(0x60)
  5852 |     |             m4 := mload(0x80)
  5853 |     |             // Selector of `log(bool,address,uint256,address)`.
  5854 |     |             mstore(0x00, 0x136b05dd)
  5855 |     |             mstore(0x20, p0)
  5856 |     |             mstore(0x40, p1)
  5857 |     |             mstore(0x60, p2)
  5858 |     |             mstore(0x80, p3)
  5859 |     |         }
  5860 |     |         _sendLogPayload(0x1c, 0x84);
  5861 |     |         /// @solidity memory-safe-assembly
  5862 |     |         assembly {
  5863 |     |             mstore(0x00, m0)
  5864 |     |             mstore(0x20, m1)
  5865 |     |             mstore(0x40, m2)
  5866 |     |             mstore(0x60, m3)
  5867 |     |             mstore(0x80, m4)
  5868 |     |         }
  5869 |     |     }
  5870 |     | 
  5871 |     |     function log(bool p0, address p1, uint256 p2, bool p3) internal pure {
  5872 |     |         bytes32 m0;
  5873 |     |         bytes32 m1;
  5874 |     |         bytes32 m2;
  5875 |     |         bytes32 m3;
  5876 |     |         bytes32 m4;
  5877 |     |         /// @solidity memory-safe-assembly
  5878 |     |         assembly {
  5879 |     |             m0 := mload(0x00)
  5880 |     |             m1 := mload(0x20)
  5881 |     |             m2 := mload(0x40)
  5882 |     |             m3 := mload(0x60)
  5883 |     |             m4 := mload(0x80)
  5884 |     |             // Selector of `log(bool,address,uint256,bool)`.
  5885 |     |             mstore(0x00, 0xd6019f1c)
  5886 |     |             mstore(0x20, p0)
  5887 |     |             mstore(0x40, p1)
  5888 |     |             mstore(0x60, p2)
  5889 |     |             mstore(0x80, p3)
  5890 |     |         }
  5891 |     |         _sendLogPayload(0x1c, 0x84);
  5892 |     |         /// @solidity memory-safe-assembly
  5893 |     |         assembly {
  5894 |     |             mstore(0x00, m0)
  5895 |     |             mstore(0x20, m1)
  5896 |     |             mstore(0x40, m2)
  5897 |     |             mstore(0x60, m3)
  5898 |     |             mstore(0x80, m4)
  5899 |     |         }
  5900 |     |     }
  5901 |     | 
  5902 |     |     function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {
  5903 |     |         bytes32 m0;
  5904 |     |         bytes32 m1;
  5905 |     |         bytes32 m2;
  5906 |     |         bytes32 m3;
  5907 |     |         bytes32 m4;
  5908 |     |         /// @solidity memory-safe-assembly
  5909 |     |         assembly {
  5910 |     |             m0 := mload(0x00)
  5911 |     |             m1 := mload(0x20)
  5912 |     |             m2 := mload(0x40)
  5913 |     |             m3 := mload(0x60)
  5914 |     |             m4 := mload(0x80)
  5915 |     |             // Selector of `log(bool,address,uint256,uint256)`.
  5916 |     |             mstore(0x00, 0x7bf181a1)
  5917 |     |             mstore(0x20, p0)
  5918 |     |             mstore(0x40, p1)
  5919 |     |             mstore(0x60, p2)
  5920 |     |             mstore(0x80, p3)
  5921 |     |         }
  5922 |     |         _sendLogPayload(0x1c, 0x84);
  5923 |     |         /// @solidity memory-safe-assembly
  5924 |     |         assembly {
  5925 |     |             mstore(0x00, m0)
  5926 |     |             mstore(0x20, m1)
  5927 |     |             mstore(0x40, m2)
  5928 |     |             mstore(0x60, m3)
  5929 |     |             mstore(0x80, m4)
  5930 |     |         }
  5931 |     |     }
  5932 |     | 
  5933 |     |     function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {
  5934 |     |         bytes32 m0;
  5935 |     |         bytes32 m1;
  5936 |     |         bytes32 m2;
  5937 |     |         bytes32 m3;
  5938 |     |         bytes32 m4;
  5939 |     |         bytes32 m5;
  5940 |     |         bytes32 m6;
  5941 |     |         /// @solidity memory-safe-assembly
  5942 |     |         assembly {
  5943 |     |             function writeString(pos, w) {
  5944 |     |                 let length := 0
  5945 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5946 |     |                 mstore(pos, length)
  5947 |     |                 let shift := sub(256, shl(3, length))
  5948 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5949 |     |             }
  5950 |     |             m0 := mload(0x00)
  5951 |     |             m1 := mload(0x20)
  5952 |     |             m2 := mload(0x40)
  5953 |     |             m3 := mload(0x60)
  5954 |     |             m4 := mload(0x80)
  5955 |     |             m5 := mload(0xa0)
  5956 |     |             m6 := mload(0xc0)
  5957 |     |             // Selector of `log(bool,address,uint256,string)`.
  5958 |     |             mstore(0x00, 0x51f09ff8)
  5959 |     |             mstore(0x20, p0)
  5960 |     |             mstore(0x40, p1)
  5961 |     |             mstore(0x60, p2)
  5962 |     |             mstore(0x80, 0x80)
  5963 |     |             writeString(0xa0, p3)
  5964 |     |         }
  5965 |     |         _sendLogPayload(0x1c, 0xc4);
  5966 |     |         /// @solidity memory-safe-assembly
  5967 |     |         assembly {
  5968 |     |             mstore(0x00, m0)
  5969 |     |             mstore(0x20, m1)
  5970 |     |             mstore(0x40, m2)
  5971 |     |             mstore(0x60, m3)
  5972 |     |             mstore(0x80, m4)
  5973 |     |             mstore(0xa0, m5)
  5974 |     |             mstore(0xc0, m6)
  5975 |     |         }
  5976 |     |     }
  5977 |     | 
  5978 |     |     function log(bool p0, address p1, bytes32 p2, address p3) internal pure {
  5979 |     |         bytes32 m0;
  5980 |     |         bytes32 m1;
  5981 |     |         bytes32 m2;
  5982 |     |         bytes32 m3;
  5983 |     |         bytes32 m4;
  5984 |     |         bytes32 m5;
  5985 |     |         bytes32 m6;
  5986 |     |         /// @solidity memory-safe-assembly
  5987 |     |         assembly {
  5988 |     |             function writeString(pos, w) {
  5989 |     |                 let length := 0
  5990 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5991 |     |                 mstore(pos, length)
  5992 |     |                 let shift := sub(256, shl(3, length))
  5993 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5994 |     |             }
  5995 |     |             m0 := mload(0x00)
  5996 |     |             m1 := mload(0x20)
  5997 |     |             m2 := mload(0x40)
  5998 |     |             m3 := mload(0x60)
  5999 |     |             m4 := mload(0x80)
  6000 |     |             m5 := mload(0xa0)
  6001 |     |             m6 := mload(0xc0)
  6002 |     |             // Selector of `log(bool,address,string,address)`.
  6003 |     |             mstore(0x00, 0x6f7c603e)
  6004 |     |             mstore(0x20, p0)
  6005 |     |             mstore(0x40, p1)
  6006 |     |             mstore(0x60, 0x80)
  6007 |     |             mstore(0x80, p3)
  6008 |     |             writeString(0xa0, p2)
  6009 |     |         }
  6010 |     |         _sendLogPayload(0x1c, 0xc4);
  6011 |     |         /// @solidity memory-safe-assembly
  6012 |     |         assembly {
  6013 |     |             mstore(0x00, m0)
  6014 |     |             mstore(0x20, m1)
  6015 |     |             mstore(0x40, m2)
  6016 |     |             mstore(0x60, m3)
  6017 |     |             mstore(0x80, m4)
  6018 |     |             mstore(0xa0, m5)
  6019 |     |             mstore(0xc0, m6)
  6020 |     |         }
  6021 |     |     }
  6022 |     | 
  6023 |     |     function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {
  6024 |     |         bytes32 m0;
  6025 |     |         bytes32 m1;
  6026 |     |         bytes32 m2;
  6027 |     |         bytes32 m3;
  6028 |     |         bytes32 m4;
  6029 |     |         bytes32 m5;
  6030 |     |         bytes32 m6;
  6031 |     |         /// @solidity memory-safe-assembly
  6032 |     |         assembly {
  6033 |     |             function writeString(pos, w) {
  6034 |     |                 let length := 0
  6035 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6036 |     |                 mstore(pos, length)
  6037 |     |                 let shift := sub(256, shl(3, length))
  6038 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6039 |     |             }
  6040 |     |             m0 := mload(0x00)
  6041 |     |             m1 := mload(0x20)
  6042 |     |             m2 := mload(0x40)
  6043 |     |             m3 := mload(0x60)
  6044 |     |             m4 := mload(0x80)
  6045 |     |             m5 := mload(0xa0)
  6046 |     |             m6 := mload(0xc0)
  6047 |     |             // Selector of `log(bool,address,string,bool)`.
  6048 |     |             mstore(0x00, 0xe2bfd60b)
  6049 |     |             mstore(0x20, p0)
  6050 |     |             mstore(0x40, p1)
  6051 |     |             mstore(0x60, 0x80)
  6052 |     |             mstore(0x80, p3)
  6053 |     |             writeString(0xa0, p2)
  6054 |     |         }
  6055 |     |         _sendLogPayload(0x1c, 0xc4);
  6056 |     |         /// @solidity memory-safe-assembly
  6057 |     |         assembly {
  6058 |     |             mstore(0x00, m0)
  6059 |     |             mstore(0x20, m1)
  6060 |     |             mstore(0x40, m2)
  6061 |     |             mstore(0x60, m3)
  6062 |     |             mstore(0x80, m4)
  6063 |     |             mstore(0xa0, m5)
  6064 |     |             mstore(0xc0, m6)
  6065 |     |         }
  6066 |     |     }
  6067 |     | 
  6068 |     |     function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {
  6069 |     |         bytes32 m0;
  6070 |     |         bytes32 m1;
  6071 |     |         bytes32 m2;
  6072 |     |         bytes32 m3;
  6073 |     |         bytes32 m4;
  6074 |     |         bytes32 m5;
  6075 |     |         bytes32 m6;
  6076 |     |         /// @solidity memory-safe-assembly
  6077 |     |         assembly {
  6078 |     |             function writeString(pos, w) {
  6079 |     |                 let length := 0
  6080 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6081 |     |                 mstore(pos, length)
  6082 |     |                 let shift := sub(256, shl(3, length))
  6083 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6084 |     |             }
  6085 |     |             m0 := mload(0x00)
  6086 |     |             m1 := mload(0x20)
  6087 |     |             m2 := mload(0x40)
  6088 |     |             m3 := mload(0x60)
  6089 |     |             m4 := mload(0x80)
  6090 |     |             m5 := mload(0xa0)
  6091 |     |             m6 := mload(0xc0)
  6092 |     |             // Selector of `log(bool,address,string,uint256)`.
  6093 |     |             mstore(0x00, 0xc21f64c7)
  6094 |     |             mstore(0x20, p0)
  6095 |     |             mstore(0x40, p1)
  6096 |     |             mstore(0x60, 0x80)
  6097 |     |             mstore(0x80, p3)
  6098 |     |             writeString(0xa0, p2)
  6099 |     |         }
  6100 |     |         _sendLogPayload(0x1c, 0xc4);
  6101 |     |         /// @solidity memory-safe-assembly
  6102 |     |         assembly {
  6103 |     |             mstore(0x00, m0)
  6104 |     |             mstore(0x20, m1)
  6105 |     |             mstore(0x40, m2)
  6106 |     |             mstore(0x60, m3)
  6107 |     |             mstore(0x80, m4)
  6108 |     |             mstore(0xa0, m5)
  6109 |     |             mstore(0xc0, m6)
  6110 |     |         }
  6111 |     |     }
  6112 |     | 
  6113 |     |     function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {
  6114 |     |         bytes32 m0;
  6115 |     |         bytes32 m1;
  6116 |     |         bytes32 m2;
  6117 |     |         bytes32 m3;
  6118 |     |         bytes32 m4;
  6119 |     |         bytes32 m5;
  6120 |     |         bytes32 m6;
  6121 |     |         bytes32 m7;
  6122 |     |         bytes32 m8;
  6123 |     |         /// @solidity memory-safe-assembly
  6124 |     |         assembly {
  6125 |     |             function writeString(pos, w) {
  6126 |     |                 let length := 0
  6127 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6128 |     |                 mstore(pos, length)
  6129 |     |                 let shift := sub(256, shl(3, length))
  6130 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6131 |     |             }
  6132 |     |             m0 := mload(0x00)
  6133 |     |             m1 := mload(0x20)
  6134 |     |             m2 := mload(0x40)
  6135 |     |             m3 := mload(0x60)
  6136 |     |             m4 := mload(0x80)
  6137 |     |             m5 := mload(0xa0)
  6138 |     |             m6 := mload(0xc0)
  6139 |     |             m7 := mload(0xe0)
  6140 |     |             m8 := mload(0x100)
  6141 |     |             // Selector of `log(bool,address,string,string)`.
  6142 |     |             mstore(0x00, 0xa73c1db6)
  6143 |     |             mstore(0x20, p0)
  6144 |     |             mstore(0x40, p1)
  6145 |     |             mstore(0x60, 0x80)
  6146 |     |             mstore(0x80, 0xc0)
  6147 |     |             writeString(0xa0, p2)
  6148 |     |             writeString(0xe0, p3)
  6149 |     |         }
  6150 |     |         _sendLogPayload(0x1c, 0x104);
  6151 |     |         /// @solidity memory-safe-assembly
  6152 |     |         assembly {
  6153 |     |             mstore(0x00, m0)
  6154 |     |             mstore(0x20, m1)
  6155 |     |             mstore(0x40, m2)
  6156 |     |             mstore(0x60, m3)
  6157 |     |             mstore(0x80, m4)
  6158 |     |             mstore(0xa0, m5)
  6159 |     |             mstore(0xc0, m6)
  6160 |     |             mstore(0xe0, m7)
  6161 |     |             mstore(0x100, m8)
  6162 |     |         }
  6163 |     |     }
  6164 |     | 
  6165 |     |     function log(bool p0, bool p1, address p2, address p3) internal pure {
  6166 |     |         bytes32 m0;
  6167 |     |         bytes32 m1;
  6168 |     |         bytes32 m2;
  6169 |     |         bytes32 m3;
  6170 |     |         bytes32 m4;
  6171 |     |         /// @solidity memory-safe-assembly
  6172 |     |         assembly {
  6173 |     |             m0 := mload(0x00)
  6174 |     |             m1 := mload(0x20)
  6175 |     |             m2 := mload(0x40)
  6176 |     |             m3 := mload(0x60)
  6177 |     |             m4 := mload(0x80)
  6178 |     |             // Selector of `log(bool,bool,address,address)`.
  6179 |     |             mstore(0x00, 0xf4880ea4)
  6180 |     |             mstore(0x20, p0)
  6181 |     |             mstore(0x40, p1)
  6182 |     |             mstore(0x60, p2)
  6183 |     |             mstore(0x80, p3)
  6184 |     |         }
  6185 |     |         _sendLogPayload(0x1c, 0x84);
  6186 |     |         /// @solidity memory-safe-assembly
  6187 |     |         assembly {
  6188 |     |             mstore(0x00, m0)
  6189 |     |             mstore(0x20, m1)
  6190 |     |             mstore(0x40, m2)
  6191 |     |             mstore(0x60, m3)
  6192 |     |             mstore(0x80, m4)
  6193 |     |         }
  6194 |     |     }
  6195 |     | 
  6196 |     |     function log(bool p0, bool p1, address p2, bool p3) internal pure {
  6197 |     |         bytes32 m0;
  6198 |     |         bytes32 m1;
  6199 |     |         bytes32 m2;
  6200 |     |         bytes32 m3;
  6201 |     |         bytes32 m4;
  6202 |     |         /// @solidity memory-safe-assembly
  6203 |     |         assembly {
  6204 |     |             m0 := mload(0x00)
  6205 |     |             m1 := mload(0x20)
  6206 |     |             m2 := mload(0x40)
  6207 |     |             m3 := mload(0x60)
  6208 |     |             m4 := mload(0x80)
  6209 |     |             // Selector of `log(bool,bool,address,bool)`.
  6210 |     |             mstore(0x00, 0xc0a302d8)
  6211 |     |             mstore(0x20, p0)
  6212 |     |             mstore(0x40, p1)
  6213 |     |             mstore(0x60, p2)
  6214 |     |             mstore(0x80, p3)
  6215 |     |         }
  6216 |     |         _sendLogPayload(0x1c, 0x84);
  6217 |     |         /// @solidity memory-safe-assembly
  6218 |     |         assembly {
  6219 |     |             mstore(0x00, m0)
  6220 |     |             mstore(0x20, m1)
  6221 |     |             mstore(0x40, m2)
  6222 |     |             mstore(0x60, m3)
  6223 |     |             mstore(0x80, m4)
  6224 |     |         }
  6225 |     |     }
  6226 |     | 
  6227 |     |     function log(bool p0, bool p1, address p2, uint256 p3) internal pure {
  6228 |     |         bytes32 m0;
  6229 |     |         bytes32 m1;
  6230 |     |         bytes32 m2;
  6231 |     |         bytes32 m3;
  6232 |     |         bytes32 m4;
  6233 |     |         /// @solidity memory-safe-assembly
  6234 |     |         assembly {
  6235 |     |             m0 := mload(0x00)
  6236 |     |             m1 := mload(0x20)
  6237 |     |             m2 := mload(0x40)
  6238 |     |             m3 := mload(0x60)
  6239 |     |             m4 := mload(0x80)
  6240 |     |             // Selector of `log(bool,bool,address,uint256)`.
  6241 |     |             mstore(0x00, 0x4c123d57)
  6242 |     |             mstore(0x20, p0)
  6243 |     |             mstore(0x40, p1)
  6244 |     |             mstore(0x60, p2)
  6245 |     |             mstore(0x80, p3)
  6246 |     |         }
  6247 |     |         _sendLogPayload(0x1c, 0x84);
  6248 |     |         /// @solidity memory-safe-assembly
  6249 |     |         assembly {
  6250 |     |             mstore(0x00, m0)
  6251 |     |             mstore(0x20, m1)
  6252 |     |             mstore(0x40, m2)
  6253 |     |             mstore(0x60, m3)
  6254 |     |             mstore(0x80, m4)
  6255 |     |         }
  6256 |     |     }
  6257 |     | 
  6258 |     |     function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {
  6259 |     |         bytes32 m0;
  6260 |     |         bytes32 m1;
  6261 |     |         bytes32 m2;
  6262 |     |         bytes32 m3;
  6263 |     |         bytes32 m4;
  6264 |     |         bytes32 m5;
  6265 |     |         bytes32 m6;
  6266 |     |         /// @solidity memory-safe-assembly
  6267 |     |         assembly {
  6268 |     |             function writeString(pos, w) {
  6269 |     |                 let length := 0
  6270 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6271 |     |                 mstore(pos, length)
  6272 |     |                 let shift := sub(256, shl(3, length))
  6273 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6274 |     |             }
  6275 |     |             m0 := mload(0x00)
  6276 |     |             m1 := mload(0x20)
  6277 |     |             m2 := mload(0x40)
  6278 |     |             m3 := mload(0x60)
  6279 |     |             m4 := mload(0x80)
  6280 |     |             m5 := mload(0xa0)
  6281 |     |             m6 := mload(0xc0)
  6282 |     |             // Selector of `log(bool,bool,address,string)`.
  6283 |     |             mstore(0x00, 0xa0a47963)
  6284 |     |             mstore(0x20, p0)
  6285 |     |             mstore(0x40, p1)
  6286 |     |             mstore(0x60, p2)
  6287 |     |             mstore(0x80, 0x80)
  6288 |     |             writeString(0xa0, p3)
  6289 |     |         }
  6290 |     |         _sendLogPayload(0x1c, 0xc4);
  6291 |     |         /// @solidity memory-safe-assembly
  6292 |     |         assembly {
  6293 |     |             mstore(0x00, m0)
  6294 |     |             mstore(0x20, m1)
  6295 |     |             mstore(0x40, m2)
  6296 |     |             mstore(0x60, m3)
  6297 |     |             mstore(0x80, m4)
  6298 |     |             mstore(0xa0, m5)
  6299 |     |             mstore(0xc0, m6)
  6300 |     |         }
  6301 |     |     }
  6302 |     | 
  6303 |     |     function log(bool p0, bool p1, bool p2, address p3) internal pure {
  6304 |     |         bytes32 m0;
  6305 |     |         bytes32 m1;
  6306 |     |         bytes32 m2;
  6307 |     |         bytes32 m3;
  6308 |     |         bytes32 m4;
  6309 |     |         /// @solidity memory-safe-assembly
  6310 |     |         assembly {
  6311 |     |             m0 := mload(0x00)
  6312 |     |             m1 := mload(0x20)
  6313 |     |             m2 := mload(0x40)
  6314 |     |             m3 := mload(0x60)
  6315 |     |             m4 := mload(0x80)
  6316 |     |             // Selector of `log(bool,bool,bool,address)`.
  6317 |     |             mstore(0x00, 0x8c329b1a)
  6318 |     |             mstore(0x20, p0)
  6319 |     |             mstore(0x40, p1)
  6320 |     |             mstore(0x60, p2)
  6321 |     |             mstore(0x80, p3)
  6322 |     |         }
  6323 |     |         _sendLogPayload(0x1c, 0x84);
  6324 |     |         /// @solidity memory-safe-assembly
  6325 |     |         assembly {
  6326 |     |             mstore(0x00, m0)
  6327 |     |             mstore(0x20, m1)
  6328 |     |             mstore(0x40, m2)
  6329 |     |             mstore(0x60, m3)
  6330 |     |             mstore(0x80, m4)
  6331 |     |         }
  6332 |     |     }
  6333 |     | 
  6334 |     |     function log(bool p0, bool p1, bool p2, bool p3) internal pure {
  6335 |     |         bytes32 m0;
  6336 |     |         bytes32 m1;
  6337 |     |         bytes32 m2;
  6338 |     |         bytes32 m3;
  6339 |     |         bytes32 m4;
  6340 |     |         /// @solidity memory-safe-assembly
  6341 |     |         assembly {
  6342 |     |             m0 := mload(0x00)
  6343 |     |             m1 := mload(0x20)
  6344 |     |             m2 := mload(0x40)
  6345 |     |             m3 := mload(0x60)
  6346 |     |             m4 := mload(0x80)
  6347 |     |             // Selector of `log(bool,bool,bool,bool)`.
  6348 |     |             mstore(0x00, 0x3b2a5ce0)
  6349 |     |             mstore(0x20, p0)
  6350 |     |             mstore(0x40, p1)
  6351 |     |             mstore(0x60, p2)
  6352 |     |             mstore(0x80, p3)
  6353 |     |         }
  6354 |     |         _sendLogPayload(0x1c, 0x84);
  6355 |     |         /// @solidity memory-safe-assembly
  6356 |     |         assembly {
  6357 |     |             mstore(0x00, m0)
  6358 |     |             mstore(0x20, m1)
  6359 |     |             mstore(0x40, m2)
  6360 |     |             mstore(0x60, m3)
  6361 |     |             mstore(0x80, m4)
  6362 |     |         }
  6363 |     |     }
  6364 |     | 
  6365 |     |     function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {
  6366 |     |         bytes32 m0;
  6367 |     |         bytes32 m1;
  6368 |     |         bytes32 m2;
  6369 |     |         bytes32 m3;
  6370 |     |         bytes32 m4;
  6371 |     |         /// @solidity memory-safe-assembly
  6372 |     |         assembly {
  6373 |     |             m0 := mload(0x00)
  6374 |     |             m1 := mload(0x20)
  6375 |     |             m2 := mload(0x40)
  6376 |     |             m3 := mload(0x60)
  6377 |     |             m4 := mload(0x80)
  6378 |     |             // Selector of `log(bool,bool,bool,uint256)`.
  6379 |     |             mstore(0x00, 0x6d7045c1)
  6380 |     |             mstore(0x20, p0)
  6381 |     |             mstore(0x40, p1)
  6382 |     |             mstore(0x60, p2)
  6383 |     |             mstore(0x80, p3)
  6384 |     |         }
  6385 |     |         _sendLogPayload(0x1c, 0x84);
  6386 |     |         /// @solidity memory-safe-assembly
  6387 |     |         assembly {
  6388 |     |             mstore(0x00, m0)
  6389 |     |             mstore(0x20, m1)
  6390 |     |             mstore(0x40, m2)
  6391 |     |             mstore(0x60, m3)
  6392 |     |             mstore(0x80, m4)
  6393 |     |         }
  6394 |     |     }
  6395 |     | 
  6396 |     |     function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {
  6397 |     |         bytes32 m0;
  6398 |     |         bytes32 m1;
  6399 |     |         bytes32 m2;
  6400 |     |         bytes32 m3;
  6401 |     |         bytes32 m4;
  6402 |     |         bytes32 m5;
  6403 |     |         bytes32 m6;
  6404 |     |         /// @solidity memory-safe-assembly
  6405 |     |         assembly {
  6406 |     |             function writeString(pos, w) {
  6407 |     |                 let length := 0
  6408 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6409 |     |                 mstore(pos, length)
  6410 |     |                 let shift := sub(256, shl(3, length))
  6411 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6412 |     |             }
  6413 |     |             m0 := mload(0x00)
  6414 |     |             m1 := mload(0x20)
  6415 |     |             m2 := mload(0x40)
  6416 |     |             m3 := mload(0x60)
  6417 |     |             m4 := mload(0x80)
  6418 |     |             m5 := mload(0xa0)
  6419 |     |             m6 := mload(0xc0)
  6420 |     |             // Selector of `log(bool,bool,bool,string)`.
  6421 |     |             mstore(0x00, 0x2ae408d4)
  6422 |     |             mstore(0x20, p0)
  6423 |     |             mstore(0x40, p1)
  6424 |     |             mstore(0x60, p2)
  6425 |     |             mstore(0x80, 0x80)
  6426 |     |             writeString(0xa0, p3)
  6427 |     |         }
  6428 |     |         _sendLogPayload(0x1c, 0xc4);
  6429 |     |         /// @solidity memory-safe-assembly
  6430 |     |         assembly {
  6431 |     |             mstore(0x00, m0)
  6432 |     |             mstore(0x20, m1)
  6433 |     |             mstore(0x40, m2)
  6434 |     |             mstore(0x60, m3)
  6435 |     |             mstore(0x80, m4)
  6436 |     |             mstore(0xa0, m5)
  6437 |     |             mstore(0xc0, m6)
  6438 |     |         }
  6439 |     |     }
  6440 |     | 
  6441 |     |     function log(bool p0, bool p1, uint256 p2, address p3) internal pure {
  6442 |     |         bytes32 m0;
  6443 |     |         bytes32 m1;
  6444 |     |         bytes32 m2;
  6445 |     |         bytes32 m3;
  6446 |     |         bytes32 m4;
  6447 |     |         /// @solidity memory-safe-assembly
  6448 |     |         assembly {
  6449 |     |             m0 := mload(0x00)
  6450 |     |             m1 := mload(0x20)
  6451 |     |             m2 := mload(0x40)
  6452 |     |             m3 := mload(0x60)
  6453 |     |             m4 := mload(0x80)
  6454 |     |             // Selector of `log(bool,bool,uint256,address)`.
  6455 |     |             mstore(0x00, 0x54a7a9a0)
  6456 |     |             mstore(0x20, p0)
  6457 |     |             mstore(0x40, p1)
  6458 |     |             mstore(0x60, p2)
  6459 |     |             mstore(0x80, p3)
  6460 |     |         }
  6461 |     |         _sendLogPayload(0x1c, 0x84);
  6462 |     |         /// @solidity memory-safe-assembly
  6463 |     |         assembly {
  6464 |     |             mstore(0x00, m0)
  6465 |     |             mstore(0x20, m1)
  6466 |     |             mstore(0x40, m2)
  6467 |     |             mstore(0x60, m3)
  6468 |     |             mstore(0x80, m4)
  6469 |     |         }
  6470 |     |     }
  6471 |     | 
  6472 |     |     function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {
  6473 |     |         bytes32 m0;
  6474 |     |         bytes32 m1;
  6475 |     |         bytes32 m2;
  6476 |     |         bytes32 m3;
  6477 |     |         bytes32 m4;
  6478 |     |         /// @solidity memory-safe-assembly
  6479 |     |         assembly {
  6480 |     |             m0 := mload(0x00)
  6481 |     |             m1 := mload(0x20)
  6482 |     |             m2 := mload(0x40)
  6483 |     |             m3 := mload(0x60)
  6484 |     |             m4 := mload(0x80)
  6485 |     |             // Selector of `log(bool,bool,uint256,bool)`.
  6486 |     |             mstore(0x00, 0x619e4d0e)
  6487 |     |             mstore(0x20, p0)
  6488 |     |             mstore(0x40, p1)
  6489 |     |             mstore(0x60, p2)
  6490 |     |             mstore(0x80, p3)
  6491 |     |         }
  6492 |     |         _sendLogPayload(0x1c, 0x84);
  6493 |     |         /// @solidity memory-safe-assembly
  6494 |     |         assembly {
  6495 |     |             mstore(0x00, m0)
  6496 |     |             mstore(0x20, m1)
  6497 |     |             mstore(0x40, m2)
  6498 |     |             mstore(0x60, m3)
  6499 |     |             mstore(0x80, m4)
  6500 |     |         }
  6501 |     |     }
  6502 |     | 
  6503 |     |     function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {
  6504 |     |         bytes32 m0;
  6505 |     |         bytes32 m1;
  6506 |     |         bytes32 m2;
  6507 |     |         bytes32 m3;
  6508 |     |         bytes32 m4;
  6509 |     |         /// @solidity memory-safe-assembly
  6510 |     |         assembly {
  6511 |     |             m0 := mload(0x00)
  6512 |     |             m1 := mload(0x20)
  6513 |     |             m2 := mload(0x40)
  6514 |     |             m3 := mload(0x60)
  6515 |     |             m4 := mload(0x80)
  6516 |     |             // Selector of `log(bool,bool,uint256,uint256)`.
  6517 |     |             mstore(0x00, 0x0bb00eab)
  6518 |     |             mstore(0x20, p0)
  6519 |     |             mstore(0x40, p1)
  6520 |     |             mstore(0x60, p2)
  6521 |     |             mstore(0x80, p3)
  6522 |     |         }
  6523 |     |         _sendLogPayload(0x1c, 0x84);
  6524 |     |         /// @solidity memory-safe-assembly
  6525 |     |         assembly {
  6526 |     |             mstore(0x00, m0)
  6527 |     |             mstore(0x20, m1)
  6528 |     |             mstore(0x40, m2)
  6529 |     |             mstore(0x60, m3)
  6530 |     |             mstore(0x80, m4)
  6531 |     |         }
  6532 |     |     }
  6533 |     | 
  6534 |     |     function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {
  6535 |     |         bytes32 m0;
  6536 |     |         bytes32 m1;
  6537 |     |         bytes32 m2;
  6538 |     |         bytes32 m3;
  6539 |     |         bytes32 m4;
  6540 |     |         bytes32 m5;
  6541 |     |         bytes32 m6;
  6542 |     |         /// @solidity memory-safe-assembly
  6543 |     |         assembly {
  6544 |     |             function writeString(pos, w) {
  6545 |     |                 let length := 0
  6546 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6547 |     |                 mstore(pos, length)
  6548 |     |                 let shift := sub(256, shl(3, length))
  6549 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6550 |     |             }
  6551 |     |             m0 := mload(0x00)
  6552 |     |             m1 := mload(0x20)
  6553 |     |             m2 := mload(0x40)
  6554 |     |             m3 := mload(0x60)
  6555 |     |             m4 := mload(0x80)
  6556 |     |             m5 := mload(0xa0)
  6557 |     |             m6 := mload(0xc0)
  6558 |     |             // Selector of `log(bool,bool,uint256,string)`.
  6559 |     |             mstore(0x00, 0x7dd4d0e0)
  6560 |     |             mstore(0x20, p0)
  6561 |     |             mstore(0x40, p1)
  6562 |     |             mstore(0x60, p2)
  6563 |     |             mstore(0x80, 0x80)
  6564 |     |             writeString(0xa0, p3)
  6565 |     |         }
  6566 |     |         _sendLogPayload(0x1c, 0xc4);
  6567 |     |         /// @solidity memory-safe-assembly
  6568 |     |         assembly {
  6569 |     |             mstore(0x00, m0)
  6570 |     |             mstore(0x20, m1)
  6571 |     |             mstore(0x40, m2)
  6572 |     |             mstore(0x60, m3)
  6573 |     |             mstore(0x80, m4)
  6574 |     |             mstore(0xa0, m5)
  6575 |     |             mstore(0xc0, m6)
  6576 |     |         }
  6577 |     |     }
  6578 |     | 
  6579 |     |     function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {
  6580 |     |         bytes32 m0;
  6581 |     |         bytes32 m1;
  6582 |     |         bytes32 m2;
  6583 |     |         bytes32 m3;
  6584 |     |         bytes32 m4;
  6585 |     |         bytes32 m5;
  6586 |     |         bytes32 m6;
  6587 |     |         /// @solidity memory-safe-assembly
  6588 |     |         assembly {
  6589 |     |             function writeString(pos, w) {
  6590 |     |                 let length := 0
  6591 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6592 |     |                 mstore(pos, length)
  6593 |     |                 let shift := sub(256, shl(3, length))
  6594 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6595 |     |             }
  6596 |     |             m0 := mload(0x00)
  6597 |     |             m1 := mload(0x20)
  6598 |     |             m2 := mload(0x40)
  6599 |     |             m3 := mload(0x60)
  6600 |     |             m4 := mload(0x80)
  6601 |     |             m5 := mload(0xa0)
  6602 |     |             m6 := mload(0xc0)
  6603 |     |             // Selector of `log(bool,bool,string,address)`.
  6604 |     |             mstore(0x00, 0xf9ad2b89)
  6605 |     |             mstore(0x20, p0)
  6606 |     |             mstore(0x40, p1)
  6607 |     |             mstore(0x60, 0x80)
  6608 |     |             mstore(0x80, p3)
  6609 |     |             writeString(0xa0, p2)
  6610 |     |         }
  6611 |     |         _sendLogPayload(0x1c, 0xc4);
  6612 |     |         /// @solidity memory-safe-assembly
  6613 |     |         assembly {
  6614 |     |             mstore(0x00, m0)
  6615 |     |             mstore(0x20, m1)
  6616 |     |             mstore(0x40, m2)
  6617 |     |             mstore(0x60, m3)
  6618 |     |             mstore(0x80, m4)
  6619 |     |             mstore(0xa0, m5)
  6620 |     |             mstore(0xc0, m6)
  6621 |     |         }
  6622 |     |     }
  6623 |     | 
  6624 |     |     function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {
  6625 |     |         bytes32 m0;
  6626 |     |         bytes32 m1;
  6627 |     |         bytes32 m2;
  6628 |     |         bytes32 m3;
  6629 |     |         bytes32 m4;
  6630 |     |         bytes32 m5;
  6631 |     |         bytes32 m6;
  6632 |     |         /// @solidity memory-safe-assembly
  6633 |     |         assembly {
  6634 |     |             function writeString(pos, w) {
  6635 |     |                 let length := 0
  6636 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6637 |     |                 mstore(pos, length)
  6638 |     |                 let shift := sub(256, shl(3, length))
  6639 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6640 |     |             }
  6641 |     |             m0 := mload(0x00)
  6642 |     |             m1 := mload(0x20)
  6643 |     |             m2 := mload(0x40)
  6644 |     |             m3 := mload(0x60)
  6645 |     |             m4 := mload(0x80)
  6646 |     |             m5 := mload(0xa0)
  6647 |     |             m6 := mload(0xc0)
  6648 |     |             // Selector of `log(bool,bool,string,bool)`.
  6649 |     |             mstore(0x00, 0xb857163a)
  6650 |     |             mstore(0x20, p0)
  6651 |     |             mstore(0x40, p1)
  6652 |     |             mstore(0x60, 0x80)
  6653 |     |             mstore(0x80, p3)
  6654 |     |             writeString(0xa0, p2)
  6655 |     |         }
  6656 |     |         _sendLogPayload(0x1c, 0xc4);
  6657 |     |         /// @solidity memory-safe-assembly
  6658 |     |         assembly {
  6659 |     |             mstore(0x00, m0)
  6660 |     |             mstore(0x20, m1)
  6661 |     |             mstore(0x40, m2)
  6662 |     |             mstore(0x60, m3)
  6663 |     |             mstore(0x80, m4)
  6664 |     |             mstore(0xa0, m5)
  6665 |     |             mstore(0xc0, m6)
  6666 |     |         }
  6667 |     |     }
  6668 |     | 
  6669 |     |     function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {
  6670 |     |         bytes32 m0;
  6671 |     |         bytes32 m1;
  6672 |     |         bytes32 m2;
  6673 |     |         bytes32 m3;
  6674 |     |         bytes32 m4;
  6675 |     |         bytes32 m5;
  6676 |     |         bytes32 m6;
  6677 |     |         /// @solidity memory-safe-assembly
  6678 |     |         assembly {
  6679 |     |             function writeString(pos, w) {
  6680 |     |                 let length := 0
  6681 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6682 |     |                 mstore(pos, length)
  6683 |     |                 let shift := sub(256, shl(3, length))
  6684 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6685 |     |             }
  6686 |     |             m0 := mload(0x00)
  6687 |     |             m1 := mload(0x20)
  6688 |     |             m2 := mload(0x40)
  6689 |     |             m3 := mload(0x60)
  6690 |     |             m4 := mload(0x80)
  6691 |     |             m5 := mload(0xa0)
  6692 |     |             m6 := mload(0xc0)
  6693 |     |             // Selector of `log(bool,bool,string,uint256)`.
  6694 |     |             mstore(0x00, 0xe3a9ca2f)
  6695 |     |             mstore(0x20, p0)
  6696 |     |             mstore(0x40, p1)
  6697 |     |             mstore(0x60, 0x80)
  6698 |     |             mstore(0x80, p3)
  6699 |     |             writeString(0xa0, p2)
  6700 |     |         }
  6701 |     |         _sendLogPayload(0x1c, 0xc4);
  6702 |     |         /// @solidity memory-safe-assembly
  6703 |     |         assembly {
  6704 |     |             mstore(0x00, m0)
  6705 |     |             mstore(0x20, m1)
  6706 |     |             mstore(0x40, m2)
  6707 |     |             mstore(0x60, m3)
  6708 |     |             mstore(0x80, m4)
  6709 |     |             mstore(0xa0, m5)
  6710 |     |             mstore(0xc0, m6)
  6711 |     |         }
  6712 |     |     }
  6713 |     | 
  6714 |     |     function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
  6715 |     |         bytes32 m0;
  6716 |     |         bytes32 m1;
  6717 |     |         bytes32 m2;
  6718 |     |         bytes32 m3;
  6719 |     |         bytes32 m4;
  6720 |     |         bytes32 m5;
  6721 |     |         bytes32 m6;
  6722 |     |         bytes32 m7;
  6723 |     |         bytes32 m8;
  6724 |     |         /// @solidity memory-safe-assembly
  6725 |     |         assembly {
  6726 |     |             function writeString(pos, w) {
  6727 |     |                 let length := 0
  6728 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6729 |     |                 mstore(pos, length)
  6730 |     |                 let shift := sub(256, shl(3, length))
  6731 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6732 |     |             }
  6733 |     |             m0 := mload(0x00)
  6734 |     |             m1 := mload(0x20)
  6735 |     |             m2 := mload(0x40)
  6736 |     |             m3 := mload(0x60)
  6737 |     |             m4 := mload(0x80)
  6738 |     |             m5 := mload(0xa0)
  6739 |     |             m6 := mload(0xc0)
  6740 |     |             m7 := mload(0xe0)
  6741 |     |             m8 := mload(0x100)
  6742 |     |             // Selector of `log(bool,bool,string,string)`.
  6743 |     |             mstore(0x00, 0x6d1e8751)
  6744 |     |             mstore(0x20, p0)
  6745 |     |             mstore(0x40, p1)
  6746 |     |             mstore(0x60, 0x80)
  6747 |     |             mstore(0x80, 0xc0)
  6748 |     |             writeString(0xa0, p2)
  6749 |     |             writeString(0xe0, p3)
  6750 |     |         }
  6751 |     |         _sendLogPayload(0x1c, 0x104);
  6752 |     |         /// @solidity memory-safe-assembly
  6753 |     |         assembly {
  6754 |     |             mstore(0x00, m0)
  6755 |     |             mstore(0x20, m1)
  6756 |     |             mstore(0x40, m2)
  6757 |     |             mstore(0x60, m3)
  6758 |     |             mstore(0x80, m4)
  6759 |     |             mstore(0xa0, m5)
  6760 |     |             mstore(0xc0, m6)
  6761 |     |             mstore(0xe0, m7)
  6762 |     |             mstore(0x100, m8)
  6763 |     |         }
  6764 |     |     }
  6765 |     | 
  6766 |     |     function log(bool p0, uint256 p1, address p2, address p3) internal pure {
  6767 |     |         bytes32 m0;
  6768 |     |         bytes32 m1;
  6769 |     |         bytes32 m2;
  6770 |     |         bytes32 m3;
  6771 |     |         bytes32 m4;
  6772 |     |         /// @solidity memory-safe-assembly
  6773 |     |         assembly {
  6774 |     |             m0 := mload(0x00)
  6775 |     |             m1 := mload(0x20)
  6776 |     |             m2 := mload(0x40)
  6777 |     |             m3 := mload(0x60)
  6778 |     |             m4 := mload(0x80)
  6779 |     |             // Selector of `log(bool,uint256,address,address)`.
  6780 |     |             mstore(0x00, 0x26f560a8)
  6781 |     |             mstore(0x20, p0)
  6782 |     |             mstore(0x40, p1)
  6783 |     |             mstore(0x60, p2)
  6784 |     |             mstore(0x80, p3)
  6785 |     |         }
  6786 |     |         _sendLogPayload(0x1c, 0x84);
  6787 |     |         /// @solidity memory-safe-assembly
  6788 |     |         assembly {
  6789 |     |             mstore(0x00, m0)
  6790 |     |             mstore(0x20, m1)
  6791 |     |             mstore(0x40, m2)
  6792 |     |             mstore(0x60, m3)
  6793 |     |             mstore(0x80, m4)
  6794 |     |         }
  6795 |     |     }
  6796 |     | 
  6797 |     |     function log(bool p0, uint256 p1, address p2, bool p3) internal pure {
  6798 |     |         bytes32 m0;
  6799 |     |         bytes32 m1;
  6800 |     |         bytes32 m2;
  6801 |     |         bytes32 m3;
  6802 |     |         bytes32 m4;
  6803 |     |         /// @solidity memory-safe-assembly
  6804 |     |         assembly {
  6805 |     |             m0 := mload(0x00)
  6806 |     |             m1 := mload(0x20)
  6807 |     |             m2 := mload(0x40)
  6808 |     |             m3 := mload(0x60)
  6809 |     |             m4 := mload(0x80)
  6810 |     |             // Selector of `log(bool,uint256,address,bool)`.
  6811 |     |             mstore(0x00, 0xb4c314ff)
  6812 |     |             mstore(0x20, p0)
  6813 |     |             mstore(0x40, p1)
  6814 |     |             mstore(0x60, p2)
  6815 |     |             mstore(0x80, p3)
  6816 |     |         }
  6817 |     |         _sendLogPayload(0x1c, 0x84);
  6818 |     |         /// @solidity memory-safe-assembly
  6819 |     |         assembly {
  6820 |     |             mstore(0x00, m0)
  6821 |     |             mstore(0x20, m1)
  6822 |     |             mstore(0x40, m2)
  6823 |     |             mstore(0x60, m3)
  6824 |     |             mstore(0x80, m4)
  6825 |     |         }
  6826 |     |     }
  6827 |     | 
  6828 |     |     function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {
  6829 |     |         bytes32 m0;
  6830 |     |         bytes32 m1;
  6831 |     |         bytes32 m2;
  6832 |     |         bytes32 m3;
  6833 |     |         bytes32 m4;
  6834 |     |         /// @solidity memory-safe-assembly
  6835 |     |         assembly {
  6836 |     |             m0 := mload(0x00)
  6837 |     |             m1 := mload(0x20)
  6838 |     |             m2 := mload(0x40)
  6839 |     |             m3 := mload(0x60)
  6840 |     |             m4 := mload(0x80)
  6841 |     |             // Selector of `log(bool,uint256,address,uint256)`.
  6842 |     |             mstore(0x00, 0x1537dc87)
  6843 |     |             mstore(0x20, p0)
  6844 |     |             mstore(0x40, p1)
  6845 |     |             mstore(0x60, p2)
  6846 |     |             mstore(0x80, p3)
  6847 |     |         }
  6848 |     |         _sendLogPayload(0x1c, 0x84);
  6849 |     |         /// @solidity memory-safe-assembly
  6850 |     |         assembly {
  6851 |     |             mstore(0x00, m0)
  6852 |     |             mstore(0x20, m1)
  6853 |     |             mstore(0x40, m2)
  6854 |     |             mstore(0x60, m3)
  6855 |     |             mstore(0x80, m4)
  6856 |     |         }
  6857 |     |     }
  6858 |     | 
  6859 |     |     function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {
  6860 |     |         bytes32 m0;
  6861 |     |         bytes32 m1;
  6862 |     |         bytes32 m2;
  6863 |     |         bytes32 m3;
  6864 |     |         bytes32 m4;
  6865 |     |         bytes32 m5;
  6866 |     |         bytes32 m6;
  6867 |     |         /// @solidity memory-safe-assembly
  6868 |     |         assembly {
  6869 |     |             function writeString(pos, w) {
  6870 |     |                 let length := 0
  6871 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6872 |     |                 mstore(pos, length)
  6873 |     |                 let shift := sub(256, shl(3, length))
  6874 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6875 |     |             }
  6876 |     |             m0 := mload(0x00)
  6877 |     |             m1 := mload(0x20)
  6878 |     |             m2 := mload(0x40)
  6879 |     |             m3 := mload(0x60)
  6880 |     |             m4 := mload(0x80)
  6881 |     |             m5 := mload(0xa0)
  6882 |     |             m6 := mload(0xc0)
  6883 |     |             // Selector of `log(bool,uint256,address,string)`.
  6884 |     |             mstore(0x00, 0x1bb3b09a)
  6885 |     |             mstore(0x20, p0)
  6886 |     |             mstore(0x40, p1)
  6887 |     |             mstore(0x60, p2)
  6888 |     |             mstore(0x80, 0x80)
  6889 |     |             writeString(0xa0, p3)
  6890 |     |         }
  6891 |     |         _sendLogPayload(0x1c, 0xc4);
  6892 |     |         /// @solidity memory-safe-assembly
  6893 |     |         assembly {
  6894 |     |             mstore(0x00, m0)
  6895 |     |             mstore(0x20, m1)
  6896 |     |             mstore(0x40, m2)
  6897 |     |             mstore(0x60, m3)
  6898 |     |             mstore(0x80, m4)
  6899 |     |             mstore(0xa0, m5)
  6900 |     |             mstore(0xc0, m6)
  6901 |     |         }
  6902 |     |     }
  6903 |     | 
  6904 |     |     function log(bool p0, uint256 p1, bool p2, address p3) internal pure {
  6905 |     |         bytes32 m0;
  6906 |     |         bytes32 m1;
  6907 |     |         bytes32 m2;
  6908 |     |         bytes32 m3;
  6909 |     |         bytes32 m4;
  6910 |     |         /// @solidity memory-safe-assembly
  6911 |     |         assembly {
  6912 |     |             m0 := mload(0x00)
  6913 |     |             m1 := mload(0x20)
  6914 |     |             m2 := mload(0x40)
  6915 |     |             m3 := mload(0x60)
  6916 |     |             m4 := mload(0x80)
  6917 |     |             // Selector of `log(bool,uint256,bool,address)`.
  6918 |     |             mstore(0x00, 0x9acd3616)
  6919 |     |             mstore(0x20, p0)
  6920 |     |             mstore(0x40, p1)
  6921 |     |             mstore(0x60, p2)
  6922 |     |             mstore(0x80, p3)
  6923 |     |         }
  6924 |     |         _sendLogPayload(0x1c, 0x84);
  6925 |     |         /// @solidity memory-safe-assembly
  6926 |     |         assembly {
  6927 |     |             mstore(0x00, m0)
  6928 |     |             mstore(0x20, m1)
  6929 |     |             mstore(0x40, m2)
  6930 |     |             mstore(0x60, m3)
  6931 |     |             mstore(0x80, m4)
  6932 |     |         }
  6933 |     |     }
  6934 |     | 
  6935 |     |     function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {
  6936 |     |         bytes32 m0;
  6937 |     |         bytes32 m1;
  6938 |     |         bytes32 m2;
  6939 |     |         bytes32 m3;
  6940 |     |         bytes32 m4;
  6941 |     |         /// @solidity memory-safe-assembly
  6942 |     |         assembly {
  6943 |     |             m0 := mload(0x00)
  6944 |     |             m1 := mload(0x20)
  6945 |     |             m2 := mload(0x40)
  6946 |     |             m3 := mload(0x60)
  6947 |     |             m4 := mload(0x80)
  6948 |     |             // Selector of `log(bool,uint256,bool,bool)`.
  6949 |     |             mstore(0x00, 0xceb5f4d7)
  6950 |     |             mstore(0x20, p0)
  6951 |     |             mstore(0x40, p1)
  6952 |     |             mstore(0x60, p2)
  6953 |     |             mstore(0x80, p3)
  6954 |     |         }
  6955 |     |         _sendLogPayload(0x1c, 0x84);
  6956 |     |         /// @solidity memory-safe-assembly
  6957 |     |         assembly {
  6958 |     |             mstore(0x00, m0)
  6959 |     |             mstore(0x20, m1)
  6960 |     |             mstore(0x40, m2)
  6961 |     |             mstore(0x60, m3)
  6962 |     |             mstore(0x80, m4)
  6963 |     |         }
  6964 |     |     }
  6965 |     | 
  6966 |     |     function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {
  6967 |     |         bytes32 m0;
  6968 |     |         bytes32 m1;
  6969 |     |         bytes32 m2;
  6970 |     |         bytes32 m3;
  6971 |     |         bytes32 m4;
  6972 |     |         /// @solidity memory-safe-assembly
  6973 |     |         assembly {
  6974 |     |             m0 := mload(0x00)
  6975 |     |             m1 := mload(0x20)
  6976 |     |             m2 := mload(0x40)
  6977 |     |             m3 := mload(0x60)
  6978 |     |             m4 := mload(0x80)
  6979 |     |             // Selector of `log(bool,uint256,bool,uint256)`.
  6980 |     |             mstore(0x00, 0x7f9bbca2)
  6981 |     |             mstore(0x20, p0)
  6982 |     |             mstore(0x40, p1)
  6983 |     |             mstore(0x60, p2)
  6984 |     |             mstore(0x80, p3)
  6985 |     |         }
  6986 |     |         _sendLogPayload(0x1c, 0x84);
  6987 |     |         /// @solidity memory-safe-assembly
  6988 |     |         assembly {
  6989 |     |             mstore(0x00, m0)
  6990 |     |             mstore(0x20, m1)
  6991 |     |             mstore(0x40, m2)
  6992 |     |             mstore(0x60, m3)
  6993 |     |             mstore(0x80, m4)
  6994 |     |         }
  6995 |     |     }
  6996 |     | 
  6997 |     |     function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {
  6998 |     |         bytes32 m0;
  6999 |     |         bytes32 m1;
  7000 |     |         bytes32 m2;
  7001 |     |         bytes32 m3;
  7002 |     |         bytes32 m4;
  7003 |     |         bytes32 m5;
  7004 |     |         bytes32 m6;
  7005 |     |         /// @solidity memory-safe-assembly
  7006 |     |         assembly {
  7007 |     |             function writeString(pos, w) {
  7008 |     |                 let length := 0
  7009 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7010 |     |                 mstore(pos, length)
  7011 |     |                 let shift := sub(256, shl(3, length))
  7012 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7013 |     |             }
  7014 |     |             m0 := mload(0x00)
  7015 |     |             m1 := mload(0x20)
  7016 |     |             m2 := mload(0x40)
  7017 |     |             m3 := mload(0x60)
  7018 |     |             m4 := mload(0x80)
  7019 |     |             m5 := mload(0xa0)
  7020 |     |             m6 := mload(0xc0)
  7021 |     |             // Selector of `log(bool,uint256,bool,string)`.
  7022 |     |             mstore(0x00, 0x9143dbb1)
  7023 |     |             mstore(0x20, p0)
  7024 |     |             mstore(0x40, p1)
  7025 |     |             mstore(0x60, p2)
  7026 |     |             mstore(0x80, 0x80)
  7027 |     |             writeString(0xa0, p3)
  7028 |     |         }
  7029 |     |         _sendLogPayload(0x1c, 0xc4);
  7030 |     |         /// @solidity memory-safe-assembly
  7031 |     |         assembly {
  7032 |     |             mstore(0x00, m0)
  7033 |     |             mstore(0x20, m1)
  7034 |     |             mstore(0x40, m2)
  7035 |     |             mstore(0x60, m3)
  7036 |     |             mstore(0x80, m4)
  7037 |     |             mstore(0xa0, m5)
  7038 |     |             mstore(0xc0, m6)
  7039 |     |         }
  7040 |     |     }
  7041 |     | 
  7042 |     |     function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {
  7043 |     |         bytes32 m0;
  7044 |     |         bytes32 m1;
  7045 |     |         bytes32 m2;
  7046 |     |         bytes32 m3;
  7047 |     |         bytes32 m4;
  7048 |     |         /// @solidity memory-safe-assembly
  7049 |     |         assembly {
  7050 |     |             m0 := mload(0x00)
  7051 |     |             m1 := mload(0x20)
  7052 |     |             m2 := mload(0x40)
  7053 |     |             m3 := mload(0x60)
  7054 |     |             m4 := mload(0x80)
  7055 |     |             // Selector of `log(bool,uint256,uint256,address)`.
  7056 |     |             mstore(0x00, 0x00dd87b9)
  7057 |     |             mstore(0x20, p0)
  7058 |     |             mstore(0x40, p1)
  7059 |     |             mstore(0x60, p2)
  7060 |     |             mstore(0x80, p3)
  7061 |     |         }
  7062 |     |         _sendLogPayload(0x1c, 0x84);
  7063 |     |         /// @solidity memory-safe-assembly
  7064 |     |         assembly {
  7065 |     |             mstore(0x00, m0)
  7066 |     |             mstore(0x20, m1)
  7067 |     |             mstore(0x40, m2)
  7068 |     |             mstore(0x60, m3)
  7069 |     |             mstore(0x80, m4)
  7070 |     |         }
  7071 |     |     }
  7072 |     | 
  7073 |     |     function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {
  7074 |     |         bytes32 m0;
  7075 |     |         bytes32 m1;
  7076 |     |         bytes32 m2;
  7077 |     |         bytes32 m3;
  7078 |     |         bytes32 m4;
  7079 |     |         /// @solidity memory-safe-assembly
  7080 |     |         assembly {
  7081 |     |             m0 := mload(0x00)
  7082 |     |             m1 := mload(0x20)
  7083 |     |             m2 := mload(0x40)
  7084 |     |             m3 := mload(0x60)
  7085 |     |             m4 := mload(0x80)
  7086 |     |             // Selector of `log(bool,uint256,uint256,bool)`.
  7087 |     |             mstore(0x00, 0xbe984353)
  7088 |     |             mstore(0x20, p0)
  7089 |     |             mstore(0x40, p1)
  7090 |     |             mstore(0x60, p2)
  7091 |     |             mstore(0x80, p3)
  7092 |     |         }
  7093 |     |         _sendLogPayload(0x1c, 0x84);
  7094 |     |         /// @solidity memory-safe-assembly
  7095 |     |         assembly {
  7096 |     |             mstore(0x00, m0)
  7097 |     |             mstore(0x20, m1)
  7098 |     |             mstore(0x40, m2)
  7099 |     |             mstore(0x60, m3)
  7100 |     |             mstore(0x80, m4)
  7101 |     |         }
  7102 |     |     }
  7103 |     | 
  7104 |     |     function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
  7105 |     |         bytes32 m0;
  7106 |     |         bytes32 m1;
  7107 |     |         bytes32 m2;
  7108 |     |         bytes32 m3;
  7109 |     |         bytes32 m4;
  7110 |     |         /// @solidity memory-safe-assembly
  7111 |     |         assembly {
  7112 |     |             m0 := mload(0x00)
  7113 |     |             m1 := mload(0x20)
  7114 |     |             m2 := mload(0x40)
  7115 |     |             m3 := mload(0x60)
  7116 |     |             m4 := mload(0x80)
  7117 |     |             // Selector of `log(bool,uint256,uint256,uint256)`.
  7118 |     |             mstore(0x00, 0x374bb4b2)
  7119 |     |             mstore(0x20, p0)
  7120 |     |             mstore(0x40, p1)
  7121 |     |             mstore(0x60, p2)
  7122 |     |             mstore(0x80, p3)
  7123 |     |         }
  7124 |     |         _sendLogPayload(0x1c, 0x84);
  7125 |     |         /// @solidity memory-safe-assembly
  7126 |     |         assembly {
  7127 |     |             mstore(0x00, m0)
  7128 |     |             mstore(0x20, m1)
  7129 |     |             mstore(0x40, m2)
  7130 |     |             mstore(0x60, m3)
  7131 |     |             mstore(0x80, m4)
  7132 |     |         }
  7133 |     |     }
  7134 |     | 
  7135 |     |     function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
  7136 |     |         bytes32 m0;
  7137 |     |         bytes32 m1;
  7138 |     |         bytes32 m2;
  7139 |     |         bytes32 m3;
  7140 |     |         bytes32 m4;
  7141 |     |         bytes32 m5;
  7142 |     |         bytes32 m6;
  7143 |     |         /// @solidity memory-safe-assembly
  7144 |     |         assembly {
  7145 |     |             function writeString(pos, w) {
  7146 |     |                 let length := 0
  7147 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7148 |     |                 mstore(pos, length)
  7149 |     |                 let shift := sub(256, shl(3, length))
  7150 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7151 |     |             }
  7152 |     |             m0 := mload(0x00)
  7153 |     |             m1 := mload(0x20)
  7154 |     |             m2 := mload(0x40)
  7155 |     |             m3 := mload(0x60)
  7156 |     |             m4 := mload(0x80)
  7157 |     |             m5 := mload(0xa0)
  7158 |     |             m6 := mload(0xc0)
  7159 |     |             // Selector of `log(bool,uint256,uint256,string)`.
  7160 |     |             mstore(0x00, 0x8e69fb5d)
  7161 |     |             mstore(0x20, p0)
  7162 |     |             mstore(0x40, p1)
  7163 |     |             mstore(0x60, p2)
  7164 |     |             mstore(0x80, 0x80)
  7165 |     |             writeString(0xa0, p3)
  7166 |     |         }
  7167 |     |         _sendLogPayload(0x1c, 0xc4);
  7168 |     |         /// @solidity memory-safe-assembly
  7169 |     |         assembly {
  7170 |     |             mstore(0x00, m0)
  7171 |     |             mstore(0x20, m1)
  7172 |     |             mstore(0x40, m2)
  7173 |     |             mstore(0x60, m3)
  7174 |     |             mstore(0x80, m4)
  7175 |     |             mstore(0xa0, m5)
  7176 |     |             mstore(0xc0, m6)
  7177 |     |         }
  7178 |     |     }
  7179 |     | 
  7180 |     |     function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {
  7181 |     |         bytes32 m0;
  7182 |     |         bytes32 m1;
  7183 |     |         bytes32 m2;
  7184 |     |         bytes32 m3;
  7185 |     |         bytes32 m4;
  7186 |     |         bytes32 m5;
  7187 |     |         bytes32 m6;
  7188 |     |         /// @solidity memory-safe-assembly
  7189 |     |         assembly {
  7190 |     |             function writeString(pos, w) {
  7191 |     |                 let length := 0
  7192 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7193 |     |                 mstore(pos, length)
  7194 |     |                 let shift := sub(256, shl(3, length))
  7195 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7196 |     |             }
  7197 |     |             m0 := mload(0x00)
  7198 |     |             m1 := mload(0x20)
  7199 |     |             m2 := mload(0x40)
  7200 |     |             m3 := mload(0x60)
  7201 |     |             m4 := mload(0x80)
  7202 |     |             m5 := mload(0xa0)
  7203 |     |             m6 := mload(0xc0)
  7204 |     |             // Selector of `log(bool,uint256,string,address)`.
  7205 |     |             mstore(0x00, 0xfedd1fff)
  7206 |     |             mstore(0x20, p0)
  7207 |     |             mstore(0x40, p1)
  7208 |     |             mstore(0x60, 0x80)
  7209 |     |             mstore(0x80, p3)
  7210 |     |             writeString(0xa0, p2)
  7211 |     |         }
  7212 |     |         _sendLogPayload(0x1c, 0xc4);
  7213 |     |         /// @solidity memory-safe-assembly
  7214 |     |         assembly {
  7215 |     |             mstore(0x00, m0)
  7216 |     |             mstore(0x20, m1)
  7217 |     |             mstore(0x40, m2)
  7218 |     |             mstore(0x60, m3)
  7219 |     |             mstore(0x80, m4)
  7220 |     |             mstore(0xa0, m5)
  7221 |     |             mstore(0xc0, m6)
  7222 |     |         }
  7223 |     |     }
  7224 |     | 
  7225 |     |     function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {
  7226 |     |         bytes32 m0;
  7227 |     |         bytes32 m1;
  7228 |     |         bytes32 m2;
  7229 |     |         bytes32 m3;
  7230 |     |         bytes32 m4;
  7231 |     |         bytes32 m5;
  7232 |     |         bytes32 m6;
  7233 |     |         /// @solidity memory-safe-assembly
  7234 |     |         assembly {
  7235 |     |             function writeString(pos, w) {
  7236 |     |                 let length := 0
  7237 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7238 |     |                 mstore(pos, length)
  7239 |     |                 let shift := sub(256, shl(3, length))
  7240 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7241 |     |             }
  7242 |     |             m0 := mload(0x00)
  7243 |     |             m1 := mload(0x20)
  7244 |     |             m2 := mload(0x40)
  7245 |     |             m3 := mload(0x60)
  7246 |     |             m4 := mload(0x80)
  7247 |     |             m5 := mload(0xa0)
  7248 |     |             m6 := mload(0xc0)
  7249 |     |             // Selector of `log(bool,uint256,string,bool)`.
  7250 |     |             mstore(0x00, 0xe5e70b2b)
  7251 |     |             mstore(0x20, p0)
  7252 |     |             mstore(0x40, p1)
  7253 |     |             mstore(0x60, 0x80)
  7254 |     |             mstore(0x80, p3)
  7255 |     |             writeString(0xa0, p2)
  7256 |     |         }
  7257 |     |         _sendLogPayload(0x1c, 0xc4);
  7258 |     |         /// @solidity memory-safe-assembly
  7259 |     |         assembly {
  7260 |     |             mstore(0x00, m0)
  7261 |     |             mstore(0x20, m1)
  7262 |     |             mstore(0x40, m2)
  7263 |     |             mstore(0x60, m3)
  7264 |     |             mstore(0x80, m4)
  7265 |     |             mstore(0xa0, m5)
  7266 |     |             mstore(0xc0, m6)
  7267 |     |         }
  7268 |     |     }
  7269 |     | 
  7270 |     |     function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
  7271 |     |         bytes32 m0;
  7272 |     |         bytes32 m1;
  7273 |     |         bytes32 m2;
  7274 |     |         bytes32 m3;
  7275 |     |         bytes32 m4;
  7276 |     |         bytes32 m5;
  7277 |     |         bytes32 m6;
  7278 |     |         /// @solidity memory-safe-assembly
  7279 |     |         assembly {
  7280 |     |             function writeString(pos, w) {
  7281 |     |                 let length := 0
  7282 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7283 |     |                 mstore(pos, length)
  7284 |     |                 let shift := sub(256, shl(3, length))
  7285 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7286 |     |             }
  7287 |     |             m0 := mload(0x00)
  7288 |     |             m1 := mload(0x20)
  7289 |     |             m2 := mload(0x40)
  7290 |     |             m3 := mload(0x60)
  7291 |     |             m4 := mload(0x80)
  7292 |     |             m5 := mload(0xa0)
  7293 |     |             m6 := mload(0xc0)
  7294 |     |             // Selector of `log(bool,uint256,string,uint256)`.
  7295 |     |             mstore(0x00, 0x6a1199e2)
  7296 |     |             mstore(0x20, p0)
  7297 |     |             mstore(0x40, p1)
  7298 |     |             mstore(0x60, 0x80)
  7299 |     |             mstore(0x80, p3)
  7300 |     |             writeString(0xa0, p2)
  7301 |     |         }
  7302 |     |         _sendLogPayload(0x1c, 0xc4);
  7303 |     |         /// @solidity memory-safe-assembly
  7304 |     |         assembly {
  7305 |     |             mstore(0x00, m0)
  7306 |     |             mstore(0x20, m1)
  7307 |     |             mstore(0x40, m2)
  7308 |     |             mstore(0x60, m3)
  7309 |     |             mstore(0x80, m4)
  7310 |     |             mstore(0xa0, m5)
  7311 |     |             mstore(0xc0, m6)
  7312 |     |         }
  7313 |     |     }
  7314 |     | 
  7315 |     |     function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
  7316 |     |         bytes32 m0;
  7317 |     |         bytes32 m1;
  7318 |     |         bytes32 m2;
  7319 |     |         bytes32 m3;
  7320 |     |         bytes32 m4;
  7321 |     |         bytes32 m5;
  7322 |     |         bytes32 m6;
  7323 |     |         bytes32 m7;
  7324 |     |         bytes32 m8;
  7325 |     |         /// @solidity memory-safe-assembly
  7326 |     |         assembly {
  7327 |     |             function writeString(pos, w) {
  7328 |     |                 let length := 0
  7329 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7330 |     |                 mstore(pos, length)
  7331 |     |                 let shift := sub(256, shl(3, length))
  7332 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7333 |     |             }
  7334 |     |             m0 := mload(0x00)
  7335 |     |             m1 := mload(0x20)
  7336 |     |             m2 := mload(0x40)
  7337 |     |             m3 := mload(0x60)
  7338 |     |             m4 := mload(0x80)
  7339 |     |             m5 := mload(0xa0)
  7340 |     |             m6 := mload(0xc0)
  7341 |     |             m7 := mload(0xe0)
  7342 |     |             m8 := mload(0x100)
  7343 |     |             // Selector of `log(bool,uint256,string,string)`.
  7344 |     |             mstore(0x00, 0xf5bc2249)
  7345 |     |             mstore(0x20, p0)
  7346 |     |             mstore(0x40, p1)
  7347 |     |             mstore(0x60, 0x80)
  7348 |     |             mstore(0x80, 0xc0)
  7349 |     |             writeString(0xa0, p2)
  7350 |     |             writeString(0xe0, p3)
  7351 |     |         }
  7352 |     |         _sendLogPayload(0x1c, 0x104);
  7353 |     |         /// @solidity memory-safe-assembly
  7354 |     |         assembly {
  7355 |     |             mstore(0x00, m0)
  7356 |     |             mstore(0x20, m1)
  7357 |     |             mstore(0x40, m2)
  7358 |     |             mstore(0x60, m3)
  7359 |     |             mstore(0x80, m4)
  7360 |     |             mstore(0xa0, m5)
  7361 |     |             mstore(0xc0, m6)
  7362 |     |             mstore(0xe0, m7)
  7363 |     |             mstore(0x100, m8)
  7364 |     |         }
  7365 |     |     }
  7366 |     | 
  7367 |     |     function log(bool p0, bytes32 p1, address p2, address p3) internal pure {
  7368 |     |         bytes32 m0;
  7369 |     |         bytes32 m1;
  7370 |     |         bytes32 m2;
  7371 |     |         bytes32 m3;
  7372 |     |         bytes32 m4;
  7373 |     |         bytes32 m5;
  7374 |     |         bytes32 m6;
  7375 |     |         /// @solidity memory-safe-assembly
  7376 |     |         assembly {
  7377 |     |             function writeString(pos, w) {
  7378 |     |                 let length := 0
  7379 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7380 |     |                 mstore(pos, length)
  7381 |     |                 let shift := sub(256, shl(3, length))
  7382 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7383 |     |             }
  7384 |     |             m0 := mload(0x00)
  7385 |     |             m1 := mload(0x20)
  7386 |     |             m2 := mload(0x40)
  7387 |     |             m3 := mload(0x60)
  7388 |     |             m4 := mload(0x80)
  7389 |     |             m5 := mload(0xa0)
  7390 |     |             m6 := mload(0xc0)
  7391 |     |             // Selector of `log(bool,string,address,address)`.
  7392 |     |             mstore(0x00, 0x2b2b18dc)
  7393 |     |             mstore(0x20, p0)
  7394 |     |             mstore(0x40, 0x80)
  7395 |     |             mstore(0x60, p2)
  7396 |     |             mstore(0x80, p3)
  7397 |     |             writeString(0xa0, p1)
  7398 |     |         }
  7399 |     |         _sendLogPayload(0x1c, 0xc4);
  7400 |     |         /// @solidity memory-safe-assembly
  7401 |     |         assembly {
  7402 |     |             mstore(0x00, m0)
  7403 |     |             mstore(0x20, m1)
  7404 |     |             mstore(0x40, m2)
  7405 |     |             mstore(0x60, m3)
  7406 |     |             mstore(0x80, m4)
  7407 |     |             mstore(0xa0, m5)
  7408 |     |             mstore(0xc0, m6)
  7409 |     |         }
  7410 |     |     }
  7411 |     | 
  7412 |     |     function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {
  7413 |     |         bytes32 m0;
  7414 |     |         bytes32 m1;
  7415 |     |         bytes32 m2;
  7416 |     |         bytes32 m3;
  7417 |     |         bytes32 m4;
  7418 |     |         bytes32 m5;
  7419 |     |         bytes32 m6;
  7420 |     |         /// @solidity memory-safe-assembly
  7421 |     |         assembly {
  7422 |     |             function writeString(pos, w) {
  7423 |     |                 let length := 0
  7424 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7425 |     |                 mstore(pos, length)
  7426 |     |                 let shift := sub(256, shl(3, length))
  7427 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7428 |     |             }
  7429 |     |             m0 := mload(0x00)
  7430 |     |             m1 := mload(0x20)
  7431 |     |             m2 := mload(0x40)
  7432 |     |             m3 := mload(0x60)
  7433 |     |             m4 := mload(0x80)
  7434 |     |             m5 := mload(0xa0)
  7435 |     |             m6 := mload(0xc0)
  7436 |     |             // Selector of `log(bool,string,address,bool)`.
  7437 |     |             mstore(0x00, 0x6dd434ca)
  7438 |     |             mstore(0x20, p0)
  7439 |     |             mstore(0x40, 0x80)
  7440 |     |             mstore(0x60, p2)
  7441 |     |             mstore(0x80, p3)
  7442 |     |             writeString(0xa0, p1)
  7443 |     |         }
  7444 |     |         _sendLogPayload(0x1c, 0xc4);
  7445 |     |         /// @solidity memory-safe-assembly
  7446 |     |         assembly {
  7447 |     |             mstore(0x00, m0)
  7448 |     |             mstore(0x20, m1)
  7449 |     |             mstore(0x40, m2)
  7450 |     |             mstore(0x60, m3)
  7451 |     |             mstore(0x80, m4)
  7452 |     |             mstore(0xa0, m5)
  7453 |     |             mstore(0xc0, m6)
  7454 |     |         }
  7455 |     |     }
  7456 |     | 
  7457 |     |     function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {
  7458 |     |         bytes32 m0;
  7459 |     |         bytes32 m1;
  7460 |     |         bytes32 m2;
  7461 |     |         bytes32 m3;
  7462 |     |         bytes32 m4;
  7463 |     |         bytes32 m5;
  7464 |     |         bytes32 m6;
  7465 |     |         /// @solidity memory-safe-assembly
  7466 |     |         assembly {
  7467 |     |             function writeString(pos, w) {
  7468 |     |                 let length := 0
  7469 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7470 |     |                 mstore(pos, length)
  7471 |     |                 let shift := sub(256, shl(3, length))
  7472 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7473 |     |             }
  7474 |     |             m0 := mload(0x00)
  7475 |     |             m1 := mload(0x20)
  7476 |     |             m2 := mload(0x40)
  7477 |     |             m3 := mload(0x60)
  7478 |     |             m4 := mload(0x80)
  7479 |     |             m5 := mload(0xa0)
  7480 |     |             m6 := mload(0xc0)
  7481 |     |             // Selector of `log(bool,string,address,uint256)`.
  7482 |     |             mstore(0x00, 0xa5cada94)
  7483 |     |             mstore(0x20, p0)
  7484 |     |             mstore(0x40, 0x80)
  7485 |     |             mstore(0x60, p2)
  7486 |     |             mstore(0x80, p3)
  7487 |     |             writeString(0xa0, p1)
  7488 |     |         }
  7489 |     |         _sendLogPayload(0x1c, 0xc4);
  7490 |     |         /// @solidity memory-safe-assembly
  7491 |     |         assembly {
  7492 |     |             mstore(0x00, m0)
  7493 |     |             mstore(0x20, m1)
  7494 |     |             mstore(0x40, m2)
  7495 |     |             mstore(0x60, m3)
  7496 |     |             mstore(0x80, m4)
  7497 |     |             mstore(0xa0, m5)
  7498 |     |             mstore(0xc0, m6)
  7499 |     |         }
  7500 |     |     }
  7501 |     | 
  7502 |     |     function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {
  7503 |     |         bytes32 m0;
  7504 |     |         bytes32 m1;
  7505 |     |         bytes32 m2;
  7506 |     |         bytes32 m3;
  7507 |     |         bytes32 m4;
  7508 |     |         bytes32 m5;
  7509 |     |         bytes32 m6;
  7510 |     |         bytes32 m7;
  7511 |     |         bytes32 m8;
  7512 |     |         /// @solidity memory-safe-assembly
  7513 |     |         assembly {
  7514 |     |             function writeString(pos, w) {
  7515 |     |                 let length := 0
  7516 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7517 |     |                 mstore(pos, length)
  7518 |     |                 let shift := sub(256, shl(3, length))
  7519 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7520 |     |             }
  7521 |     |             m0 := mload(0x00)
  7522 |     |             m1 := mload(0x20)
  7523 |     |             m2 := mload(0x40)
  7524 |     |             m3 := mload(0x60)
  7525 |     |             m4 := mload(0x80)
  7526 |     |             m5 := mload(0xa0)
  7527 |     |             m6 := mload(0xc0)
  7528 |     |             m7 := mload(0xe0)
  7529 |     |             m8 := mload(0x100)
  7530 |     |             // Selector of `log(bool,string,address,string)`.
  7531 |     |             mstore(0x00, 0x12d6c788)
  7532 |     |             mstore(0x20, p0)
  7533 |     |             mstore(0x40, 0x80)
  7534 |     |             mstore(0x60, p2)
  7535 |     |             mstore(0x80, 0xc0)
  7536 |     |             writeString(0xa0, p1)
  7537 |     |             writeString(0xe0, p3)
  7538 |     |         }
  7539 |     |         _sendLogPayload(0x1c, 0x104);
  7540 |     |         /// @solidity memory-safe-assembly
  7541 |     |         assembly {
  7542 |     |             mstore(0x00, m0)
  7543 |     |             mstore(0x20, m1)
  7544 |     |             mstore(0x40, m2)
  7545 |     |             mstore(0x60, m3)
  7546 |     |             mstore(0x80, m4)
  7547 |     |             mstore(0xa0, m5)
  7548 |     |             mstore(0xc0, m6)
  7549 |     |             mstore(0xe0, m7)
  7550 |     |             mstore(0x100, m8)
  7551 |     |         }
  7552 |     |     }
  7553 |     | 
  7554 |     |     function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {
  7555 |     |         bytes32 m0;
  7556 |     |         bytes32 m1;
  7557 |     |         bytes32 m2;
  7558 |     |         bytes32 m3;
  7559 |     |         bytes32 m4;
  7560 |     |         bytes32 m5;
  7561 |     |         bytes32 m6;
  7562 |     |         /// @solidity memory-safe-assembly
  7563 |     |         assembly {
  7564 |     |             function writeString(pos, w) {
  7565 |     |                 let length := 0
  7566 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7567 |     |                 mstore(pos, length)
  7568 |     |                 let shift := sub(256, shl(3, length))
  7569 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7570 |     |             }
  7571 |     |             m0 := mload(0x00)
  7572 |     |             m1 := mload(0x20)
  7573 |     |             m2 := mload(0x40)
  7574 |     |             m3 := mload(0x60)
  7575 |     |             m4 := mload(0x80)
  7576 |     |             m5 := mload(0xa0)
  7577 |     |             m6 := mload(0xc0)
  7578 |     |             // Selector of `log(bool,string,bool,address)`.
  7579 |     |             mstore(0x00, 0x538e06ab)
  7580 |     |             mstore(0x20, p0)
  7581 |     |             mstore(0x40, 0x80)
  7582 |     |             mstore(0x60, p2)
  7583 |     |             mstore(0x80, p3)
  7584 |     |             writeString(0xa0, p1)
  7585 |     |         }
  7586 |     |         _sendLogPayload(0x1c, 0xc4);
  7587 |     |         /// @solidity memory-safe-assembly
  7588 |     |         assembly {
  7589 |     |             mstore(0x00, m0)
  7590 |     |             mstore(0x20, m1)
  7591 |     |             mstore(0x40, m2)
  7592 |     |             mstore(0x60, m3)
  7593 |     |             mstore(0x80, m4)
  7594 |     |             mstore(0xa0, m5)
  7595 |     |             mstore(0xc0, m6)
  7596 |     |         }
  7597 |     |     }
  7598 |     | 
  7599 |     |     function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {
  7600 |     |         bytes32 m0;
  7601 |     |         bytes32 m1;
  7602 |     |         bytes32 m2;
  7603 |     |         bytes32 m3;
  7604 |     |         bytes32 m4;
  7605 |     |         bytes32 m5;
  7606 |     |         bytes32 m6;
  7607 |     |         /// @solidity memory-safe-assembly
  7608 |     |         assembly {
  7609 |     |             function writeString(pos, w) {
  7610 |     |                 let length := 0
  7611 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7612 |     |                 mstore(pos, length)
  7613 |     |                 let shift := sub(256, shl(3, length))
  7614 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7615 |     |             }
  7616 |     |             m0 := mload(0x00)
  7617 |     |             m1 := mload(0x20)
  7618 |     |             m2 := mload(0x40)
  7619 |     |             m3 := mload(0x60)
  7620 |     |             m4 := mload(0x80)
  7621 |     |             m5 := mload(0xa0)
  7622 |     |             m6 := mload(0xc0)
  7623 |     |             // Selector of `log(bool,string,bool,bool)`.
  7624 |     |             mstore(0x00, 0xdc5e935b)
  7625 |     |             mstore(0x20, p0)
  7626 |     |             mstore(0x40, 0x80)
  7627 |     |             mstore(0x60, p2)
  7628 |     |             mstore(0x80, p3)
  7629 |     |             writeString(0xa0, p1)
  7630 |     |         }
  7631 |     |         _sendLogPayload(0x1c, 0xc4);
  7632 |     |         /// @solidity memory-safe-assembly
  7633 |     |         assembly {
  7634 |     |             mstore(0x00, m0)
  7635 |     |             mstore(0x20, m1)
  7636 |     |             mstore(0x40, m2)
  7637 |     |             mstore(0x60, m3)
  7638 |     |             mstore(0x80, m4)
  7639 |     |             mstore(0xa0, m5)
  7640 |     |             mstore(0xc0, m6)
  7641 |     |         }
  7642 |     |     }
  7643 |     | 
  7644 |     |     function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {
  7645 |     |         bytes32 m0;
  7646 |     |         bytes32 m1;
  7647 |     |         bytes32 m2;
  7648 |     |         bytes32 m3;
  7649 |     |         bytes32 m4;
  7650 |     |         bytes32 m5;
  7651 |     |         bytes32 m6;
  7652 |     |         /// @solidity memory-safe-assembly
  7653 |     |         assembly {
  7654 |     |             function writeString(pos, w) {
  7655 |     |                 let length := 0
  7656 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7657 |     |                 mstore(pos, length)
  7658 |     |                 let shift := sub(256, shl(3, length))
  7659 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7660 |     |             }
  7661 |     |             m0 := mload(0x00)
  7662 |     |             m1 := mload(0x20)
  7663 |     |             m2 := mload(0x40)
  7664 |     |             m3 := mload(0x60)
  7665 |     |             m4 := mload(0x80)
  7666 |     |             m5 := mload(0xa0)
  7667 |     |             m6 := mload(0xc0)
  7668 |     |             // Selector of `log(bool,string,bool,uint256)`.
  7669 |     |             mstore(0x00, 0x1606a393)
  7670 |     |             mstore(0x20, p0)
  7671 |     |             mstore(0x40, 0x80)
  7672 |     |             mstore(0x60, p2)
  7673 |     |             mstore(0x80, p3)
  7674 |     |             writeString(0xa0, p1)
  7675 |     |         }
  7676 |     |         _sendLogPayload(0x1c, 0xc4);
  7677 |     |         /// @solidity memory-safe-assembly
  7678 |     |         assembly {
  7679 |     |             mstore(0x00, m0)
  7680 |     |             mstore(0x20, m1)
  7681 |     |             mstore(0x40, m2)
  7682 |     |             mstore(0x60, m3)
  7683 |     |             mstore(0x80, m4)
  7684 |     |             mstore(0xa0, m5)
  7685 |     |             mstore(0xc0, m6)
  7686 |     |         }
  7687 |     |     }
  7688 |     | 
  7689 |     |     function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
  7690 |     |         bytes32 m0;
  7691 |     |         bytes32 m1;
  7692 |     |         bytes32 m2;
  7693 |     |         bytes32 m3;
  7694 |     |         bytes32 m4;
  7695 |     |         bytes32 m5;
  7696 |     |         bytes32 m6;
  7697 |     |         bytes32 m7;
  7698 |     |         bytes32 m8;
  7699 |     |         /// @solidity memory-safe-assembly
  7700 |     |         assembly {
  7701 |     |             function writeString(pos, w) {
  7702 |     |                 let length := 0
  7703 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7704 |     |                 mstore(pos, length)
  7705 |     |                 let shift := sub(256, shl(3, length))
  7706 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7707 |     |             }
  7708 |     |             m0 := mload(0x00)
  7709 |     |             m1 := mload(0x20)
  7710 |     |             m2 := mload(0x40)
  7711 |     |             m3 := mload(0x60)
  7712 |     |             m4 := mload(0x80)
  7713 |     |             m5 := mload(0xa0)
  7714 |     |             m6 := mload(0xc0)
  7715 |     |             m7 := mload(0xe0)
  7716 |     |             m8 := mload(0x100)
  7717 |     |             // Selector of `log(bool,string,bool,string)`.
  7718 |     |             mstore(0x00, 0x483d0416)
  7719 |     |             mstore(0x20, p0)
  7720 |     |             mstore(0x40, 0x80)
  7721 |     |             mstore(0x60, p2)
  7722 |     |             mstore(0x80, 0xc0)
  7723 |     |             writeString(0xa0, p1)
  7724 |     |             writeString(0xe0, p3)
  7725 |     |         }
  7726 |     |         _sendLogPayload(0x1c, 0x104);
  7727 |     |         /// @solidity memory-safe-assembly
  7728 |     |         assembly {
  7729 |     |             mstore(0x00, m0)
  7730 |     |             mstore(0x20, m1)
  7731 |     |             mstore(0x40, m2)
  7732 |     |             mstore(0x60, m3)
  7733 |     |             mstore(0x80, m4)
  7734 |     |             mstore(0xa0, m5)
  7735 |     |             mstore(0xc0, m6)
  7736 |     |             mstore(0xe0, m7)
  7737 |     |             mstore(0x100, m8)
  7738 |     |         }
  7739 |     |     }
  7740 |     | 
  7741 |     |     function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {
  7742 |     |         bytes32 m0;
  7743 |     |         bytes32 m1;
  7744 |     |         bytes32 m2;
  7745 |     |         bytes32 m3;
  7746 |     |         bytes32 m4;
  7747 |     |         bytes32 m5;
  7748 |     |         bytes32 m6;
  7749 |     |         /// @solidity memory-safe-assembly
  7750 |     |         assembly {
  7751 |     |             function writeString(pos, w) {
  7752 |     |                 let length := 0
  7753 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7754 |     |                 mstore(pos, length)
  7755 |     |                 let shift := sub(256, shl(3, length))
  7756 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7757 |     |             }
  7758 |     |             m0 := mload(0x00)
  7759 |     |             m1 := mload(0x20)
  7760 |     |             m2 := mload(0x40)
  7761 |     |             m3 := mload(0x60)
  7762 |     |             m4 := mload(0x80)
  7763 |     |             m5 := mload(0xa0)
  7764 |     |             m6 := mload(0xc0)
  7765 |     |             // Selector of `log(bool,string,uint256,address)`.
  7766 |     |             mstore(0x00, 0x1596a1ce)
  7767 |     |             mstore(0x20, p0)
  7768 |     |             mstore(0x40, 0x80)
  7769 |     |             mstore(0x60, p2)
  7770 |     |             mstore(0x80, p3)
  7771 |     |             writeString(0xa0, p1)
  7772 |     |         }
  7773 |     |         _sendLogPayload(0x1c, 0xc4);
  7774 |     |         /// @solidity memory-safe-assembly
  7775 |     |         assembly {
  7776 |     |             mstore(0x00, m0)
  7777 |     |             mstore(0x20, m1)
  7778 |     |             mstore(0x40, m2)
  7779 |     |             mstore(0x60, m3)
  7780 |     |             mstore(0x80, m4)
  7781 |     |             mstore(0xa0, m5)
  7782 |     |             mstore(0xc0, m6)
  7783 |     |         }
  7784 |     |     }
  7785 |     | 
  7786 |     |     function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {
  7787 |     |         bytes32 m0;
  7788 |     |         bytes32 m1;
  7789 |     |         bytes32 m2;
  7790 |     |         bytes32 m3;
  7791 |     |         bytes32 m4;
  7792 |     |         bytes32 m5;
  7793 |     |         bytes32 m6;
  7794 |     |         /// @solidity memory-safe-assembly
  7795 |     |         assembly {
  7796 |     |             function writeString(pos, w) {
  7797 |     |                 let length := 0
  7798 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7799 |     |                 mstore(pos, length)
  7800 |     |                 let shift := sub(256, shl(3, length))
  7801 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7802 |     |             }
  7803 |     |             m0 := mload(0x00)
  7804 |     |             m1 := mload(0x20)
  7805 |     |             m2 := mload(0x40)
  7806 |     |             m3 := mload(0x60)
  7807 |     |             m4 := mload(0x80)
  7808 |     |             m5 := mload(0xa0)
  7809 |     |             m6 := mload(0xc0)
  7810 |     |             // Selector of `log(bool,string,uint256,bool)`.
  7811 |     |             mstore(0x00, 0x6b0e5d53)
  7812 |     |             mstore(0x20, p0)
  7813 |     |             mstore(0x40, 0x80)
  7814 |     |             mstore(0x60, p2)
  7815 |     |             mstore(0x80, p3)
  7816 |     |             writeString(0xa0, p1)
  7817 |     |         }
  7818 |     |         _sendLogPayload(0x1c, 0xc4);
  7819 |     |         /// @solidity memory-safe-assembly
  7820 |     |         assembly {
  7821 |     |             mstore(0x00, m0)
  7822 |     |             mstore(0x20, m1)
  7823 |     |             mstore(0x40, m2)
  7824 |     |             mstore(0x60, m3)
  7825 |     |             mstore(0x80, m4)
  7826 |     |             mstore(0xa0, m5)
  7827 |     |             mstore(0xc0, m6)
  7828 |     |         }
  7829 |     |     }
  7830 |     | 
  7831 |     |     function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
  7832 |     |         bytes32 m0;
  7833 |     |         bytes32 m1;
  7834 |     |         bytes32 m2;
  7835 |     |         bytes32 m3;
  7836 |     |         bytes32 m4;
  7837 |     |         bytes32 m5;
  7838 |     |         bytes32 m6;
  7839 |     |         /// @solidity memory-safe-assembly
  7840 |     |         assembly {
  7841 |     |             function writeString(pos, w) {
  7842 |     |                 let length := 0
  7843 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7844 |     |                 mstore(pos, length)
  7845 |     |                 let shift := sub(256, shl(3, length))
  7846 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7847 |     |             }
  7848 |     |             m0 := mload(0x00)
  7849 |     |             m1 := mload(0x20)
  7850 |     |             m2 := mload(0x40)
  7851 |     |             m3 := mload(0x60)
  7852 |     |             m4 := mload(0x80)
  7853 |     |             m5 := mload(0xa0)
  7854 |     |             m6 := mload(0xc0)
  7855 |     |             // Selector of `log(bool,string,uint256,uint256)`.
  7856 |     |             mstore(0x00, 0x28863fcb)
  7857 |     |             mstore(0x20, p0)
  7858 |     |             mstore(0x40, 0x80)
  7859 |     |             mstore(0x60, p2)
  7860 |     |             mstore(0x80, p3)
  7861 |     |             writeString(0xa0, p1)
  7862 |     |         }
  7863 |     |         _sendLogPayload(0x1c, 0xc4);
  7864 |     |         /// @solidity memory-safe-assembly
  7865 |     |         assembly {
  7866 |     |             mstore(0x00, m0)
  7867 |     |             mstore(0x20, m1)
  7868 |     |             mstore(0x40, m2)
  7869 |     |             mstore(0x60, m3)
  7870 |     |             mstore(0x80, m4)
  7871 |     |             mstore(0xa0, m5)
  7872 |     |             mstore(0xc0, m6)
  7873 |     |         }
  7874 |     |     }
  7875 |     | 
  7876 |     |     function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
  7877 |     |         bytes32 m0;
  7878 |     |         bytes32 m1;
  7879 |     |         bytes32 m2;
  7880 |     |         bytes32 m3;
  7881 |     |         bytes32 m4;
  7882 |     |         bytes32 m5;
  7883 |     |         bytes32 m6;
  7884 |     |         bytes32 m7;
  7885 |     |         bytes32 m8;
  7886 |     |         /// @solidity memory-safe-assembly
  7887 |     |         assembly {
  7888 |     |             function writeString(pos, w) {
  7889 |     |                 let length := 0
  7890 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7891 |     |                 mstore(pos, length)
  7892 |     |                 let shift := sub(256, shl(3, length))
  7893 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7894 |     |             }
  7895 |     |             m0 := mload(0x00)
  7896 |     |             m1 := mload(0x20)
  7897 |     |             m2 := mload(0x40)
  7898 |     |             m3 := mload(0x60)
  7899 |     |             m4 := mload(0x80)
  7900 |     |             m5 := mload(0xa0)
  7901 |     |             m6 := mload(0xc0)
  7902 |     |             m7 := mload(0xe0)
  7903 |     |             m8 := mload(0x100)
  7904 |     |             // Selector of `log(bool,string,uint256,string)`.
  7905 |     |             mstore(0x00, 0x1ad96de6)
  7906 |     |             mstore(0x20, p0)
  7907 |     |             mstore(0x40, 0x80)
  7908 |     |             mstore(0x60, p2)
  7909 |     |             mstore(0x80, 0xc0)
  7910 |     |             writeString(0xa0, p1)
  7911 |     |             writeString(0xe0, p3)
  7912 |     |         }
  7913 |     |         _sendLogPayload(0x1c, 0x104);
  7914 |     |         /// @solidity memory-safe-assembly
  7915 |     |         assembly {
  7916 |     |             mstore(0x00, m0)
  7917 |     |             mstore(0x20, m1)
  7918 |     |             mstore(0x40, m2)
  7919 |     |             mstore(0x60, m3)
  7920 |     |             mstore(0x80, m4)
  7921 |     |             mstore(0xa0, m5)
  7922 |     |             mstore(0xc0, m6)
  7923 |     |             mstore(0xe0, m7)
  7924 |     |             mstore(0x100, m8)
  7925 |     |         }
  7926 |     |     }
  7927 |     | 
  7928 |     |     function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {
  7929 |     |         bytes32 m0;
  7930 |     |         bytes32 m1;
  7931 |     |         bytes32 m2;
  7932 |     |         bytes32 m3;
  7933 |     |         bytes32 m4;
  7934 |     |         bytes32 m5;
  7935 |     |         bytes32 m6;
  7936 |     |         bytes32 m7;
  7937 |     |         bytes32 m8;
  7938 |     |         /// @solidity memory-safe-assembly
  7939 |     |         assembly {
  7940 |     |             function writeString(pos, w) {
  7941 |     |                 let length := 0
  7942 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7943 |     |                 mstore(pos, length)
  7944 |     |                 let shift := sub(256, shl(3, length))
  7945 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7946 |     |             }
  7947 |     |             m0 := mload(0x00)
  7948 |     |             m1 := mload(0x20)
  7949 |     |             m2 := mload(0x40)
  7950 |     |             m3 := mload(0x60)
  7951 |     |             m4 := mload(0x80)
  7952 |     |             m5 := mload(0xa0)
  7953 |     |             m6 := mload(0xc0)
  7954 |     |             m7 := mload(0xe0)
  7955 |     |             m8 := mload(0x100)
  7956 |     |             // Selector of `log(bool,string,string,address)`.
  7957 |     |             mstore(0x00, 0x97d394d8)
  7958 |     |             mstore(0x20, p0)
  7959 |     |             mstore(0x40, 0x80)
  7960 |     |             mstore(0x60, 0xc0)
  7961 |     |             mstore(0x80, p3)
  7962 |     |             writeString(0xa0, p1)
  7963 |     |             writeString(0xe0, p2)
  7964 |     |         }
  7965 |     |         _sendLogPayload(0x1c, 0x104);
  7966 |     |         /// @solidity memory-safe-assembly
  7967 |     |         assembly {
  7968 |     |             mstore(0x00, m0)
  7969 |     |             mstore(0x20, m1)
  7970 |     |             mstore(0x40, m2)
  7971 |     |             mstore(0x60, m3)
  7972 |     |             mstore(0x80, m4)
  7973 |     |             mstore(0xa0, m5)
  7974 |     |             mstore(0xc0, m6)
  7975 |     |             mstore(0xe0, m7)
  7976 |     |             mstore(0x100, m8)
  7977 |     |         }
  7978 |     |     }
  7979 |     | 
  7980 |     |     function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
  7981 |     |         bytes32 m0;
  7982 |     |         bytes32 m1;
  7983 |     |         bytes32 m2;
  7984 |     |         bytes32 m3;
  7985 |     |         bytes32 m4;
  7986 |     |         bytes32 m5;
  7987 |     |         bytes32 m6;
  7988 |     |         bytes32 m7;
  7989 |     |         bytes32 m8;
  7990 |     |         /// @solidity memory-safe-assembly
  7991 |     |         assembly {
  7992 |     |             function writeString(pos, w) {
  7993 |     |                 let length := 0
  7994 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7995 |     |                 mstore(pos, length)
  7996 |     |                 let shift := sub(256, shl(3, length))
  7997 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7998 |     |             }
  7999 |     |             m0 := mload(0x00)
  8000 |     |             m1 := mload(0x20)
  8001 |     |             m2 := mload(0x40)
  8002 |     |             m3 := mload(0x60)
  8003 |     |             m4 := mload(0x80)
  8004 |     |             m5 := mload(0xa0)
  8005 |     |             m6 := mload(0xc0)
  8006 |     |             m7 := mload(0xe0)
  8007 |     |             m8 := mload(0x100)
  8008 |     |             // Selector of `log(bool,string,string,bool)`.
  8009 |     |             mstore(0x00, 0x1e4b87e5)
  8010 |     |             mstore(0x20, p0)
  8011 |     |             mstore(0x40, 0x80)
  8012 |     |             mstore(0x60, 0xc0)
  8013 |     |             mstore(0x80, p3)
  8014 |     |             writeString(0xa0, p1)
  8015 |     |             writeString(0xe0, p2)
  8016 |     |         }
  8017 |     |         _sendLogPayload(0x1c, 0x104);
  8018 |     |         /// @solidity memory-safe-assembly
  8019 |     |         assembly {
  8020 |     |             mstore(0x00, m0)
  8021 |     |             mstore(0x20, m1)
  8022 |     |             mstore(0x40, m2)
  8023 |     |             mstore(0x60, m3)
  8024 |     |             mstore(0x80, m4)
  8025 |     |             mstore(0xa0, m5)
  8026 |     |             mstore(0xc0, m6)
  8027 |     |             mstore(0xe0, m7)
  8028 |     |             mstore(0x100, m8)
  8029 |     |         }
  8030 |     |     }
  8031 |     | 
  8032 |     |     function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
  8033 |     |         bytes32 m0;
  8034 |     |         bytes32 m1;
  8035 |     |         bytes32 m2;
  8036 |     |         bytes32 m3;
  8037 |     |         bytes32 m4;
  8038 |     |         bytes32 m5;
  8039 |     |         bytes32 m6;
  8040 |     |         bytes32 m7;
  8041 |     |         bytes32 m8;
  8042 |     |         /// @solidity memory-safe-assembly
  8043 |     |         assembly {
  8044 |     |             function writeString(pos, w) {
  8045 |     |                 let length := 0
  8046 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8047 |     |                 mstore(pos, length)
  8048 |     |                 let shift := sub(256, shl(3, length))
  8049 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8050 |     |             }
  8051 |     |             m0 := mload(0x00)
  8052 |     |             m1 := mload(0x20)
  8053 |     |             m2 := mload(0x40)
  8054 |     |             m3 := mload(0x60)
  8055 |     |             m4 := mload(0x80)
  8056 |     |             m5 := mload(0xa0)
  8057 |     |             m6 := mload(0xc0)
  8058 |     |             m7 := mload(0xe0)
  8059 |     |             m8 := mload(0x100)
  8060 |     |             // Selector of `log(bool,string,string,uint256)`.
  8061 |     |             mstore(0x00, 0x7be0c3eb)
  8062 |     |             mstore(0x20, p0)
  8063 |     |             mstore(0x40, 0x80)
  8064 |     |             mstore(0x60, 0xc0)
  8065 |     |             mstore(0x80, p3)
  8066 |     |             writeString(0xa0, p1)
  8067 |     |             writeString(0xe0, p2)
  8068 |     |         }
  8069 |     |         _sendLogPayload(0x1c, 0x104);
  8070 |     |         /// @solidity memory-safe-assembly
  8071 |     |         assembly {
  8072 |     |             mstore(0x00, m0)
  8073 |     |             mstore(0x20, m1)
  8074 |     |             mstore(0x40, m2)
  8075 |     |             mstore(0x60, m3)
  8076 |     |             mstore(0x80, m4)
  8077 |     |             mstore(0xa0, m5)
  8078 |     |             mstore(0xc0, m6)
  8079 |     |             mstore(0xe0, m7)
  8080 |     |             mstore(0x100, m8)
  8081 |     |         }
  8082 |     |     }
  8083 |     | 
  8084 |     |     function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
  8085 |     |         bytes32 m0;
  8086 |     |         bytes32 m1;
  8087 |     |         bytes32 m2;
  8088 |     |         bytes32 m3;
  8089 |     |         bytes32 m4;
  8090 |     |         bytes32 m5;
  8091 |     |         bytes32 m6;
  8092 |     |         bytes32 m7;
  8093 |     |         bytes32 m8;
  8094 |     |         bytes32 m9;
  8095 |     |         bytes32 m10;
  8096 |     |         /// @solidity memory-safe-assembly
  8097 |     |         assembly {
  8098 |     |             function writeString(pos, w) {
  8099 |     |                 let length := 0
  8100 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8101 |     |                 mstore(pos, length)
  8102 |     |                 let shift := sub(256, shl(3, length))
  8103 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8104 |     |             }
  8105 |     |             m0 := mload(0x00)
  8106 |     |             m1 := mload(0x20)
  8107 |     |             m2 := mload(0x40)
  8108 |     |             m3 := mload(0x60)
  8109 |     |             m4 := mload(0x80)
  8110 |     |             m5 := mload(0xa0)
  8111 |     |             m6 := mload(0xc0)
  8112 |     |             m7 := mload(0xe0)
  8113 |     |             m8 := mload(0x100)
  8114 |     |             m9 := mload(0x120)
  8115 |     |             m10 := mload(0x140)
  8116 |     |             // Selector of `log(bool,string,string,string)`.
  8117 |     |             mstore(0x00, 0x1762e32a)
  8118 |     |             mstore(0x20, p0)
  8119 |     |             mstore(0x40, 0x80)
  8120 |     |             mstore(0x60, 0xc0)
  8121 |     |             mstore(0x80, 0x100)
  8122 |     |             writeString(0xa0, p1)
  8123 |     |             writeString(0xe0, p2)
  8124 |     |             writeString(0x120, p3)
  8125 |     |         }
  8126 |     |         _sendLogPayload(0x1c, 0x144);
  8127 |     |         /// @solidity memory-safe-assembly
  8128 |     |         assembly {
  8129 |     |             mstore(0x00, m0)
  8130 |     |             mstore(0x20, m1)
  8131 |     |             mstore(0x40, m2)
  8132 |     |             mstore(0x60, m3)
  8133 |     |             mstore(0x80, m4)
  8134 |     |             mstore(0xa0, m5)
  8135 |     |             mstore(0xc0, m6)
  8136 |     |             mstore(0xe0, m7)
  8137 |     |             mstore(0x100, m8)
  8138 |     |             mstore(0x120, m9)
  8139 |     |             mstore(0x140, m10)
  8140 |     |         }
  8141 |     |     }
  8142 |     | 
  8143 |     |     function log(uint256 p0, address p1, address p2, address p3) internal pure {
  8144 |     |         bytes32 m0;
  8145 |     |         bytes32 m1;
  8146 |     |         bytes32 m2;
  8147 |     |         bytes32 m3;
  8148 |     |         bytes32 m4;
  8149 |     |         /// @solidity memory-safe-assembly
  8150 |     |         assembly {
  8151 |     |             m0 := mload(0x00)
  8152 |     |             m1 := mload(0x20)
  8153 |     |             m2 := mload(0x40)
  8154 |     |             m3 := mload(0x60)
  8155 |     |             m4 := mload(0x80)
  8156 |     |             // Selector of `log(uint256,address,address,address)`.
  8157 |     |             mstore(0x00, 0x2488b414)
  8158 |     |             mstore(0x20, p0)
  8159 |     |             mstore(0x40, p1)
  8160 |     |             mstore(0x60, p2)
  8161 |     |             mstore(0x80, p3)
  8162 |     |         }
  8163 |     |         _sendLogPayload(0x1c, 0x84);
  8164 |     |         /// @solidity memory-safe-assembly
  8165 |     |         assembly {
  8166 |     |             mstore(0x00, m0)
  8167 |     |             mstore(0x20, m1)
  8168 |     |             mstore(0x40, m2)
  8169 |     |             mstore(0x60, m3)
  8170 |     |             mstore(0x80, m4)
  8171 |     |         }
  8172 |     |     }
  8173 |     | 
  8174 |     |     function log(uint256 p0, address p1, address p2, bool p3) internal pure {
  8175 |     |         bytes32 m0;
  8176 |     |         bytes32 m1;
  8177 |     |         bytes32 m2;
  8178 |     |         bytes32 m3;
  8179 |     |         bytes32 m4;
  8180 |     |         /// @solidity memory-safe-assembly
  8181 |     |         assembly {
  8182 |     |             m0 := mload(0x00)
  8183 |     |             m1 := mload(0x20)
  8184 |     |             m2 := mload(0x40)
  8185 |     |             m3 := mload(0x60)
  8186 |     |             m4 := mload(0x80)
  8187 |     |             // Selector of `log(uint256,address,address,bool)`.
  8188 |     |             mstore(0x00, 0x091ffaf5)
  8189 |     |             mstore(0x20, p0)
  8190 |     |             mstore(0x40, p1)
  8191 |     |             mstore(0x60, p2)
  8192 |     |             mstore(0x80, p3)
  8193 |     |         }
  8194 |     |         _sendLogPayload(0x1c, 0x84);
  8195 |     |         /// @solidity memory-safe-assembly
  8196 |     |         assembly {
  8197 |     |             mstore(0x00, m0)
  8198 |     |             mstore(0x20, m1)
  8199 |     |             mstore(0x40, m2)
  8200 |     |             mstore(0x60, m3)
  8201 |     |             mstore(0x80, m4)
  8202 |     |         }
  8203 |     |     }
  8204 |     | 
  8205 |     |     function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {
  8206 |     |         bytes32 m0;
  8207 |     |         bytes32 m1;
  8208 |     |         bytes32 m2;
  8209 |     |         bytes32 m3;
  8210 |     |         bytes32 m4;
  8211 |     |         /// @solidity memory-safe-assembly
  8212 |     |         assembly {
  8213 |     |             m0 := mload(0x00)
  8214 |     |             m1 := mload(0x20)
  8215 |     |             m2 := mload(0x40)
  8216 |     |             m3 := mload(0x60)
  8217 |     |             m4 := mload(0x80)
  8218 |     |             // Selector of `log(uint256,address,address,uint256)`.
  8219 |     |             mstore(0x00, 0x736efbb6)
  8220 |     |             mstore(0x20, p0)
  8221 |     |             mstore(0x40, p1)
  8222 |     |             mstore(0x60, p2)
  8223 |     |             mstore(0x80, p3)
  8224 |     |         }
  8225 |     |         _sendLogPayload(0x1c, 0x84);
  8226 |     |         /// @solidity memory-safe-assembly
  8227 |     |         assembly {
  8228 |     |             mstore(0x00, m0)
  8229 |     |             mstore(0x20, m1)
  8230 |     |             mstore(0x40, m2)
  8231 |     |             mstore(0x60, m3)
  8232 |     |             mstore(0x80, m4)
  8233 |     |         }
  8234 |     |     }
  8235 |     | 
  8236 |     |     function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {
  8237 |     |         bytes32 m0;
  8238 |     |         bytes32 m1;
  8239 |     |         bytes32 m2;
  8240 |     |         bytes32 m3;
  8241 |     |         bytes32 m4;
  8242 |     |         bytes32 m5;
  8243 |     |         bytes32 m6;
  8244 |     |         /// @solidity memory-safe-assembly
  8245 |     |         assembly {
  8246 |     |             function writeString(pos, w) {
  8247 |     |                 let length := 0
  8248 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8249 |     |                 mstore(pos, length)
  8250 |     |                 let shift := sub(256, shl(3, length))
  8251 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8252 |     |             }
  8253 |     |             m0 := mload(0x00)
  8254 |     |             m1 := mload(0x20)
  8255 |     |             m2 := mload(0x40)
  8256 |     |             m3 := mload(0x60)
  8257 |     |             m4 := mload(0x80)
  8258 |     |             m5 := mload(0xa0)
  8259 |     |             m6 := mload(0xc0)
  8260 |     |             // Selector of `log(uint256,address,address,string)`.
  8261 |     |             mstore(0x00, 0x031c6f73)
  8262 |     |             mstore(0x20, p0)
  8263 |     |             mstore(0x40, p1)
  8264 |     |             mstore(0x60, p2)
  8265 |     |             mstore(0x80, 0x80)
  8266 |     |             writeString(0xa0, p3)
  8267 |     |         }
  8268 |     |         _sendLogPayload(0x1c, 0xc4);
  8269 |     |         /// @solidity memory-safe-assembly
  8270 |     |         assembly {
  8271 |     |             mstore(0x00, m0)
  8272 |     |             mstore(0x20, m1)
  8273 |     |             mstore(0x40, m2)
  8274 |     |             mstore(0x60, m3)
  8275 |     |             mstore(0x80, m4)
  8276 |     |             mstore(0xa0, m5)
  8277 |     |             mstore(0xc0, m6)
  8278 |     |         }
  8279 |     |     }
  8280 |     | 
  8281 |     |     function log(uint256 p0, address p1, bool p2, address p3) internal pure {
  8282 |     |         bytes32 m0;
  8283 |     |         bytes32 m1;
  8284 |     |         bytes32 m2;
  8285 |     |         bytes32 m3;
  8286 |     |         bytes32 m4;
  8287 |     |         /// @solidity memory-safe-assembly
  8288 |     |         assembly {
  8289 |     |             m0 := mload(0x00)
  8290 |     |             m1 := mload(0x20)
  8291 |     |             m2 := mload(0x40)
  8292 |     |             m3 := mload(0x60)
  8293 |     |             m4 := mload(0x80)
  8294 |     |             // Selector of `log(uint256,address,bool,address)`.
  8295 |     |             mstore(0x00, 0xef72c513)
  8296 |     |             mstore(0x20, p0)
  8297 |     |             mstore(0x40, p1)
  8298 |     |             mstore(0x60, p2)
  8299 |     |             mstore(0x80, p3)
  8300 |     |         }
  8301 |     |         _sendLogPayload(0x1c, 0x84);
  8302 |     |         /// @solidity memory-safe-assembly
  8303 |     |         assembly {
  8304 |     |             mstore(0x00, m0)
  8305 |     |             mstore(0x20, m1)
  8306 |     |             mstore(0x40, m2)
  8307 |     |             mstore(0x60, m3)
  8308 |     |             mstore(0x80, m4)
  8309 |     |         }
  8310 |     |     }
  8311 |     | 
  8312 |     |     function log(uint256 p0, address p1, bool p2, bool p3) internal pure {
  8313 |     |         bytes32 m0;
  8314 |     |         bytes32 m1;
  8315 |     |         bytes32 m2;
  8316 |     |         bytes32 m3;
  8317 |     |         bytes32 m4;
  8318 |     |         /// @solidity memory-safe-assembly
  8319 |     |         assembly {
  8320 |     |             m0 := mload(0x00)
  8321 |     |             m1 := mload(0x20)
  8322 |     |             m2 := mload(0x40)
  8323 |     |             m3 := mload(0x60)
  8324 |     |             m4 := mload(0x80)
  8325 |     |             // Selector of `log(uint256,address,bool,bool)`.
  8326 |     |             mstore(0x00, 0xe351140f)
  8327 |     |             mstore(0x20, p0)
  8328 |     |             mstore(0x40, p1)
  8329 |     |             mstore(0x60, p2)
  8330 |     |             mstore(0x80, p3)
  8331 |     |         }
  8332 |     |         _sendLogPayload(0x1c, 0x84);
  8333 |     |         /// @solidity memory-safe-assembly
  8334 |     |         assembly {
  8335 |     |             mstore(0x00, m0)
  8336 |     |             mstore(0x20, m1)
  8337 |     |             mstore(0x40, m2)
  8338 |     |             mstore(0x60, m3)
  8339 |     |             mstore(0x80, m4)
  8340 |     |         }
  8341 |     |     }
  8342 |     | 
  8343 |     |     function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {
  8344 |     |         bytes32 m0;
  8345 |     |         bytes32 m1;
  8346 |     |         bytes32 m2;
  8347 |     |         bytes32 m3;
  8348 |     |         bytes32 m4;
  8349 |     |         /// @solidity memory-safe-assembly
  8350 |     |         assembly {
  8351 |     |             m0 := mload(0x00)
  8352 |     |             m1 := mload(0x20)
  8353 |     |             m2 := mload(0x40)
  8354 |     |             m3 := mload(0x60)
  8355 |     |             m4 := mload(0x80)
  8356 |     |             // Selector of `log(uint256,address,bool,uint256)`.
  8357 |     |             mstore(0x00, 0x5abd992a)
  8358 |     |             mstore(0x20, p0)
  8359 |     |             mstore(0x40, p1)
  8360 |     |             mstore(0x60, p2)
  8361 |     |             mstore(0x80, p3)
  8362 |     |         }
  8363 |     |         _sendLogPayload(0x1c, 0x84);
  8364 |     |         /// @solidity memory-safe-assembly
  8365 |     |         assembly {
  8366 |     |             mstore(0x00, m0)
  8367 |     |             mstore(0x20, m1)
  8368 |     |             mstore(0x40, m2)
  8369 |     |             mstore(0x60, m3)
  8370 |     |             mstore(0x80, m4)
  8371 |     |         }
  8372 |     |     }
  8373 |     | 
  8374 |     |     function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {
  8375 |     |         bytes32 m0;
  8376 |     |         bytes32 m1;
  8377 |     |         bytes32 m2;
  8378 |     |         bytes32 m3;
  8379 |     |         bytes32 m4;
  8380 |     |         bytes32 m5;
  8381 |     |         bytes32 m6;
  8382 |     |         /// @solidity memory-safe-assembly
  8383 |     |         assembly {
  8384 |     |             function writeString(pos, w) {
  8385 |     |                 let length := 0
  8386 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8387 |     |                 mstore(pos, length)
  8388 |     |                 let shift := sub(256, shl(3, length))
  8389 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8390 |     |             }
  8391 |     |             m0 := mload(0x00)
  8392 |     |             m1 := mload(0x20)
  8393 |     |             m2 := mload(0x40)
  8394 |     |             m3 := mload(0x60)
  8395 |     |             m4 := mload(0x80)
  8396 |     |             m5 := mload(0xa0)
  8397 |     |             m6 := mload(0xc0)
  8398 |     |             // Selector of `log(uint256,address,bool,string)`.
  8399 |     |             mstore(0x00, 0x90fb06aa)
  8400 |     |             mstore(0x20, p0)
  8401 |     |             mstore(0x40, p1)
  8402 |     |             mstore(0x60, p2)
  8403 |     |             mstore(0x80, 0x80)
  8404 |     |             writeString(0xa0, p3)
  8405 |     |         }
  8406 |     |         _sendLogPayload(0x1c, 0xc4);
  8407 |     |         /// @solidity memory-safe-assembly
  8408 |     |         assembly {
  8409 |     |             mstore(0x00, m0)
  8410 |     |             mstore(0x20, m1)
  8411 |     |             mstore(0x40, m2)
  8412 |     |             mstore(0x60, m3)
  8413 |     |             mstore(0x80, m4)
  8414 |     |             mstore(0xa0, m5)
  8415 |     |             mstore(0xc0, m6)
  8416 |     |         }
  8417 |     |     }
  8418 |     | 
  8419 |     |     function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {
  8420 |     |         bytes32 m0;
  8421 |     |         bytes32 m1;
  8422 |     |         bytes32 m2;
  8423 |     |         bytes32 m3;
  8424 |     |         bytes32 m4;
  8425 |     |         /// @solidity memory-safe-assembly
  8426 |     |         assembly {
  8427 |     |             m0 := mload(0x00)
  8428 |     |             m1 := mload(0x20)
  8429 |     |             m2 := mload(0x40)
  8430 |     |             m3 := mload(0x60)
  8431 |     |             m4 := mload(0x80)
  8432 |     |             // Selector of `log(uint256,address,uint256,address)`.
  8433 |     |             mstore(0x00, 0x15c127b5)
  8434 |     |             mstore(0x20, p0)
  8435 |     |             mstore(0x40, p1)
  8436 |     |             mstore(0x60, p2)
  8437 |     |             mstore(0x80, p3)
  8438 |     |         }
  8439 |     |         _sendLogPayload(0x1c, 0x84);
  8440 |     |         /// @solidity memory-safe-assembly
  8441 |     |         assembly {
  8442 |     |             mstore(0x00, m0)
  8443 |     |             mstore(0x20, m1)
  8444 |     |             mstore(0x40, m2)
  8445 |     |             mstore(0x60, m3)
  8446 |     |             mstore(0x80, m4)
  8447 |     |         }
  8448 |     |     }
  8449 |     | 
  8450 |     |     function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {
  8451 |     |         bytes32 m0;
  8452 |     |         bytes32 m1;
  8453 |     |         bytes32 m2;
  8454 |     |         bytes32 m3;
  8455 |     |         bytes32 m4;
  8456 |     |         /// @solidity memory-safe-assembly
  8457 |     |         assembly {
  8458 |     |             m0 := mload(0x00)
  8459 |     |             m1 := mload(0x20)
  8460 |     |             m2 := mload(0x40)
  8461 |     |             m3 := mload(0x60)
  8462 |     |             m4 := mload(0x80)
  8463 |     |             // Selector of `log(uint256,address,uint256,bool)`.
  8464 |     |             mstore(0x00, 0x5f743a7c)
  8465 |     |             mstore(0x20, p0)
  8466 |     |             mstore(0x40, p1)
  8467 |     |             mstore(0x60, p2)
  8468 |     |             mstore(0x80, p3)
  8469 |     |         }
  8470 |     |         _sendLogPayload(0x1c, 0x84);
  8471 |     |         /// @solidity memory-safe-assembly
  8472 |     |         assembly {
  8473 |     |             mstore(0x00, m0)
  8474 |     |             mstore(0x20, m1)
  8475 |     |             mstore(0x40, m2)
  8476 |     |             mstore(0x60, m3)
  8477 |     |             mstore(0x80, m4)
  8478 |     |         }
  8479 |     |     }
  8480 |     | 
  8481 |     |     function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {
  8482 |     |         bytes32 m0;
  8483 |     |         bytes32 m1;
  8484 |     |         bytes32 m2;
  8485 |     |         bytes32 m3;
  8486 |     |         bytes32 m4;
  8487 |     |         /// @solidity memory-safe-assembly
  8488 |     |         assembly {
  8489 |     |             m0 := mload(0x00)
  8490 |     |             m1 := mload(0x20)
  8491 |     |             m2 := mload(0x40)
  8492 |     |             m3 := mload(0x60)
  8493 |     |             m4 := mload(0x80)
  8494 |     |             // Selector of `log(uint256,address,uint256,uint256)`.
  8495 |     |             mstore(0x00, 0x0c9cd9c1)
  8496 |     |             mstore(0x20, p0)
  8497 |     |             mstore(0x40, p1)
  8498 |     |             mstore(0x60, p2)
  8499 |     |             mstore(0x80, p3)
  8500 |     |         }
  8501 |     |         _sendLogPayload(0x1c, 0x84);
  8502 |     |         /// @solidity memory-safe-assembly
  8503 |     |         assembly {
  8504 |     |             mstore(0x00, m0)
  8505 |     |             mstore(0x20, m1)
  8506 |     |             mstore(0x40, m2)
  8507 |     |             mstore(0x60, m3)
  8508 |     |             mstore(0x80, m4)
  8509 |     |         }
  8510 |     |     }
  8511 |     | 
  8512 |     |     function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {
  8513 |     |         bytes32 m0;
  8514 |     |         bytes32 m1;
  8515 |     |         bytes32 m2;
  8516 |     |         bytes32 m3;
  8517 |     |         bytes32 m4;
  8518 |     |         bytes32 m5;
  8519 |     |         bytes32 m6;
  8520 |     |         /// @solidity memory-safe-assembly
  8521 |     |         assembly {
  8522 |     |             function writeString(pos, w) {
  8523 |     |                 let length := 0
  8524 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8525 |     |                 mstore(pos, length)
  8526 |     |                 let shift := sub(256, shl(3, length))
  8527 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8528 |     |             }
  8529 |     |             m0 := mload(0x00)
  8530 |     |             m1 := mload(0x20)
  8531 |     |             m2 := mload(0x40)
  8532 |     |             m3 := mload(0x60)
  8533 |     |             m4 := mload(0x80)
  8534 |     |             m5 := mload(0xa0)
  8535 |     |             m6 := mload(0xc0)
  8536 |     |             // Selector of `log(uint256,address,uint256,string)`.
  8537 |     |             mstore(0x00, 0xddb06521)
  8538 |     |             mstore(0x20, p0)
  8539 |     |             mstore(0x40, p1)
  8540 |     |             mstore(0x60, p2)
  8541 |     |             mstore(0x80, 0x80)
  8542 |     |             writeString(0xa0, p3)
  8543 |     |         }
  8544 |     |         _sendLogPayload(0x1c, 0xc4);
  8545 |     |         /// @solidity memory-safe-assembly
  8546 |     |         assembly {
  8547 |     |             mstore(0x00, m0)
  8548 |     |             mstore(0x20, m1)
  8549 |     |             mstore(0x40, m2)
  8550 |     |             mstore(0x60, m3)
  8551 |     |             mstore(0x80, m4)
  8552 |     |             mstore(0xa0, m5)
  8553 |     |             mstore(0xc0, m6)
  8554 |     |         }
  8555 |     |     }
  8556 |     | 
  8557 |     |     function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {
  8558 |     |         bytes32 m0;
  8559 |     |         bytes32 m1;
  8560 |     |         bytes32 m2;
  8561 |     |         bytes32 m3;
  8562 |     |         bytes32 m4;
  8563 |     |         bytes32 m5;
  8564 |     |         bytes32 m6;
  8565 |     |         /// @solidity memory-safe-assembly
  8566 |     |         assembly {
  8567 |     |             function writeString(pos, w) {
  8568 |     |                 let length := 0
  8569 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8570 |     |                 mstore(pos, length)
  8571 |     |                 let shift := sub(256, shl(3, length))
  8572 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8573 |     |             }
  8574 |     |             m0 := mload(0x00)
  8575 |     |             m1 := mload(0x20)
  8576 |     |             m2 := mload(0x40)
  8577 |     |             m3 := mload(0x60)
  8578 |     |             m4 := mload(0x80)
  8579 |     |             m5 := mload(0xa0)
  8580 |     |             m6 := mload(0xc0)
  8581 |     |             // Selector of `log(uint256,address,string,address)`.
  8582 |     |             mstore(0x00, 0x9cba8fff)
  8583 |     |             mstore(0x20, p0)
  8584 |     |             mstore(0x40, p1)
  8585 |     |             mstore(0x60, 0x80)
  8586 |     |             mstore(0x80, p3)
  8587 |     |             writeString(0xa0, p2)
  8588 |     |         }
  8589 |     |         _sendLogPayload(0x1c, 0xc4);
  8590 |     |         /// @solidity memory-safe-assembly
  8591 |     |         assembly {
  8592 |     |             mstore(0x00, m0)
  8593 |     |             mstore(0x20, m1)
  8594 |     |             mstore(0x40, m2)
  8595 |     |             mstore(0x60, m3)
  8596 |     |             mstore(0x80, m4)
  8597 |     |             mstore(0xa0, m5)
  8598 |     |             mstore(0xc0, m6)
  8599 |     |         }
  8600 |     |     }
  8601 |     | 
  8602 |     |     function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {
  8603 |     |         bytes32 m0;
  8604 |     |         bytes32 m1;
  8605 |     |         bytes32 m2;
  8606 |     |         bytes32 m3;
  8607 |     |         bytes32 m4;
  8608 |     |         bytes32 m5;
  8609 |     |         bytes32 m6;
  8610 |     |         /// @solidity memory-safe-assembly
  8611 |     |         assembly {
  8612 |     |             function writeString(pos, w) {
  8613 |     |                 let length := 0
  8614 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8615 |     |                 mstore(pos, length)
  8616 |     |                 let shift := sub(256, shl(3, length))
  8617 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8618 |     |             }
  8619 |     |             m0 := mload(0x00)
  8620 |     |             m1 := mload(0x20)
  8621 |     |             m2 := mload(0x40)
  8622 |     |             m3 := mload(0x60)
  8623 |     |             m4 := mload(0x80)
  8624 |     |             m5 := mload(0xa0)
  8625 |     |             m6 := mload(0xc0)
  8626 |     |             // Selector of `log(uint256,address,string,bool)`.
  8627 |     |             mstore(0x00, 0xcc32ab07)
  8628 |     |             mstore(0x20, p0)
  8629 |     |             mstore(0x40, p1)
  8630 |     |             mstore(0x60, 0x80)
  8631 |     |             mstore(0x80, p3)
  8632 |     |             writeString(0xa0, p2)
  8633 |     |         }
  8634 |     |         _sendLogPayload(0x1c, 0xc4);
  8635 |     |         /// @solidity memory-safe-assembly
  8636 |     |         assembly {
  8637 |     |             mstore(0x00, m0)
  8638 |     |             mstore(0x20, m1)
  8639 |     |             mstore(0x40, m2)
  8640 |     |             mstore(0x60, m3)
  8641 |     |             mstore(0x80, m4)
  8642 |     |             mstore(0xa0, m5)
  8643 |     |             mstore(0xc0, m6)
  8644 |     |         }
  8645 |     |     }
  8646 |     | 
  8647 |     |     function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {
  8648 |     |         bytes32 m0;
  8649 |     |         bytes32 m1;
  8650 |     |         bytes32 m2;
  8651 |     |         bytes32 m3;
  8652 |     |         bytes32 m4;
  8653 |     |         bytes32 m5;
  8654 |     |         bytes32 m6;
  8655 |     |         /// @solidity memory-safe-assembly
  8656 |     |         assembly {
  8657 |     |             function writeString(pos, w) {
  8658 |     |                 let length := 0
  8659 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8660 |     |                 mstore(pos, length)
  8661 |     |                 let shift := sub(256, shl(3, length))
  8662 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8663 |     |             }
  8664 |     |             m0 := mload(0x00)
  8665 |     |             m1 := mload(0x20)
  8666 |     |             m2 := mload(0x40)
  8667 |     |             m3 := mload(0x60)
  8668 |     |             m4 := mload(0x80)
  8669 |     |             m5 := mload(0xa0)
  8670 |     |             m6 := mload(0xc0)
  8671 |     |             // Selector of `log(uint256,address,string,uint256)`.
  8672 |     |             mstore(0x00, 0x46826b5d)
  8673 |     |             mstore(0x20, p0)
  8674 |     |             mstore(0x40, p1)
  8675 |     |             mstore(0x60, 0x80)
  8676 |     |             mstore(0x80, p3)
  8677 |     |             writeString(0xa0, p2)
  8678 |     |         }
  8679 |     |         _sendLogPayload(0x1c, 0xc4);
  8680 |     |         /// @solidity memory-safe-assembly
  8681 |     |         assembly {
  8682 |     |             mstore(0x00, m0)
  8683 |     |             mstore(0x20, m1)
  8684 |     |             mstore(0x40, m2)
  8685 |     |             mstore(0x60, m3)
  8686 |     |             mstore(0x80, m4)
  8687 |     |             mstore(0xa0, m5)
  8688 |     |             mstore(0xc0, m6)
  8689 |     |         }
  8690 |     |     }
  8691 |     | 
  8692 |     |     function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {
  8693 |     |         bytes32 m0;
  8694 |     |         bytes32 m1;
  8695 |     |         bytes32 m2;
  8696 |     |         bytes32 m3;
  8697 |     |         bytes32 m4;
  8698 |     |         bytes32 m5;
  8699 |     |         bytes32 m6;
  8700 |     |         bytes32 m7;
  8701 |     |         bytes32 m8;
  8702 |     |         /// @solidity memory-safe-assembly
  8703 |     |         assembly {
  8704 |     |             function writeString(pos, w) {
  8705 |     |                 let length := 0
  8706 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8707 |     |                 mstore(pos, length)
  8708 |     |                 let shift := sub(256, shl(3, length))
  8709 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8710 |     |             }
  8711 |     |             m0 := mload(0x00)
  8712 |     |             m1 := mload(0x20)
  8713 |     |             m2 := mload(0x40)
  8714 |     |             m3 := mload(0x60)
  8715 |     |             m4 := mload(0x80)
  8716 |     |             m5 := mload(0xa0)
  8717 |     |             m6 := mload(0xc0)
  8718 |     |             m7 := mload(0xe0)
  8719 |     |             m8 := mload(0x100)
  8720 |     |             // Selector of `log(uint256,address,string,string)`.
  8721 |     |             mstore(0x00, 0x3e128ca3)
  8722 |     |             mstore(0x20, p0)
  8723 |     |             mstore(0x40, p1)
  8724 |     |             mstore(0x60, 0x80)
  8725 |     |             mstore(0x80, 0xc0)
  8726 |     |             writeString(0xa0, p2)
  8727 |     |             writeString(0xe0, p3)
  8728 |     |         }
  8729 |     |         _sendLogPayload(0x1c, 0x104);
  8730 |     |         /// @solidity memory-safe-assembly
  8731 |     |         assembly {
  8732 |     |             mstore(0x00, m0)
  8733 |     |             mstore(0x20, m1)
  8734 |     |             mstore(0x40, m2)
  8735 |     |             mstore(0x60, m3)
  8736 |     |             mstore(0x80, m4)
  8737 |     |             mstore(0xa0, m5)
  8738 |     |             mstore(0xc0, m6)
  8739 |     |             mstore(0xe0, m7)
  8740 |     |             mstore(0x100, m8)
  8741 |     |         }
  8742 |     |     }
  8743 |     | 
  8744 |     |     function log(uint256 p0, bool p1, address p2, address p3) internal pure {
  8745 |     |         bytes32 m0;
  8746 |     |         bytes32 m1;
  8747 |     |         bytes32 m2;
  8748 |     |         bytes32 m3;
  8749 |     |         bytes32 m4;
  8750 |     |         /// @solidity memory-safe-assembly
  8751 |     |         assembly {
  8752 |     |             m0 := mload(0x00)
  8753 |     |             m1 := mload(0x20)
  8754 |     |             m2 := mload(0x40)
  8755 |     |             m3 := mload(0x60)
  8756 |     |             m4 := mload(0x80)
  8757 |     |             // Selector of `log(uint256,bool,address,address)`.
  8758 |     |             mstore(0x00, 0xa1ef4cbb)
  8759 |     |             mstore(0x20, p0)
  8760 |     |             mstore(0x40, p1)
  8761 |     |             mstore(0x60, p2)
  8762 |     |             mstore(0x80, p3)
  8763 |     |         }
  8764 |     |         _sendLogPayload(0x1c, 0x84);
  8765 |     |         /// @solidity memory-safe-assembly
  8766 |     |         assembly {
  8767 |     |             mstore(0x00, m0)
  8768 |     |             mstore(0x20, m1)
  8769 |     |             mstore(0x40, m2)
  8770 |     |             mstore(0x60, m3)
  8771 |     |             mstore(0x80, m4)
  8772 |     |         }
  8773 |     |     }
  8774 |     | 
  8775 |     |     function log(uint256 p0, bool p1, address p2, bool p3) internal pure {
  8776 |     |         bytes32 m0;
  8777 |     |         bytes32 m1;
  8778 |     |         bytes32 m2;
  8779 |     |         bytes32 m3;
  8780 |     |         bytes32 m4;
  8781 |     |         /// @solidity memory-safe-assembly
  8782 |     |         assembly {
  8783 |     |             m0 := mload(0x00)
  8784 |     |             m1 := mload(0x20)
  8785 |     |             m2 := mload(0x40)
  8786 |     |             m3 := mload(0x60)
  8787 |     |             m4 := mload(0x80)
  8788 |     |             // Selector of `log(uint256,bool,address,bool)`.
  8789 |     |             mstore(0x00, 0x454d54a5)
  8790 |     |             mstore(0x20, p0)
  8791 |     |             mstore(0x40, p1)
  8792 |     |             mstore(0x60, p2)
  8793 |     |             mstore(0x80, p3)
  8794 |     |         }
  8795 |     |         _sendLogPayload(0x1c, 0x84);
  8796 |     |         /// @solidity memory-safe-assembly
  8797 |     |         assembly {
  8798 |     |             mstore(0x00, m0)
  8799 |     |             mstore(0x20, m1)
  8800 |     |             mstore(0x40, m2)
  8801 |     |             mstore(0x60, m3)
  8802 |     |             mstore(0x80, m4)
  8803 |     |         }
  8804 |     |     }
  8805 |     | 
  8806 |     |     function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {
  8807 |     |         bytes32 m0;
  8808 |     |         bytes32 m1;
  8809 |     |         bytes32 m2;
  8810 |     |         bytes32 m3;
  8811 |     |         bytes32 m4;
  8812 |     |         /// @solidity memory-safe-assembly
  8813 |     |         assembly {
  8814 |     |             m0 := mload(0x00)
  8815 |     |             m1 := mload(0x20)
  8816 |     |             m2 := mload(0x40)
  8817 |     |             m3 := mload(0x60)
  8818 |     |             m4 := mload(0x80)
  8819 |     |             // Selector of `log(uint256,bool,address,uint256)`.
  8820 |     |             mstore(0x00, 0x078287f5)
  8821 |     |             mstore(0x20, p0)
  8822 |     |             mstore(0x40, p1)
  8823 |     |             mstore(0x60, p2)
  8824 |     |             mstore(0x80, p3)
  8825 |     |         }
  8826 |     |         _sendLogPayload(0x1c, 0x84);
  8827 |     |         /// @solidity memory-safe-assembly
  8828 |     |         assembly {
  8829 |     |             mstore(0x00, m0)
  8830 |     |             mstore(0x20, m1)
  8831 |     |             mstore(0x40, m2)
  8832 |     |             mstore(0x60, m3)
  8833 |     |             mstore(0x80, m4)
  8834 |     |         }
  8835 |     |     }
  8836 |     | 
  8837 |     |     function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {
  8838 |     |         bytes32 m0;
  8839 |     |         bytes32 m1;
  8840 |     |         bytes32 m2;
  8841 |     |         bytes32 m3;
  8842 |     |         bytes32 m4;
  8843 |     |         bytes32 m5;
  8844 |     |         bytes32 m6;
  8845 |     |         /// @solidity memory-safe-assembly
  8846 |     |         assembly {
  8847 |     |             function writeString(pos, w) {
  8848 |     |                 let length := 0
  8849 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8850 |     |                 mstore(pos, length)
  8851 |     |                 let shift := sub(256, shl(3, length))
  8852 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8853 |     |             }
  8854 |     |             m0 := mload(0x00)
  8855 |     |             m1 := mload(0x20)
  8856 |     |             m2 := mload(0x40)
  8857 |     |             m3 := mload(0x60)
  8858 |     |             m4 := mload(0x80)
  8859 |     |             m5 := mload(0xa0)
  8860 |     |             m6 := mload(0xc0)
  8861 |     |             // Selector of `log(uint256,bool,address,string)`.
  8862 |     |             mstore(0x00, 0xade052c7)
  8863 |     |             mstore(0x20, p0)
  8864 |     |             mstore(0x40, p1)
  8865 |     |             mstore(0x60, p2)
  8866 |     |             mstore(0x80, 0x80)
  8867 |     |             writeString(0xa0, p3)
  8868 |     |         }
  8869 |     |         _sendLogPayload(0x1c, 0xc4);
  8870 |     |         /// @solidity memory-safe-assembly
  8871 |     |         assembly {
  8872 |     |             mstore(0x00, m0)
  8873 |     |             mstore(0x20, m1)
  8874 |     |             mstore(0x40, m2)
  8875 |     |             mstore(0x60, m3)
  8876 |     |             mstore(0x80, m4)
  8877 |     |             mstore(0xa0, m5)
  8878 |     |             mstore(0xc0, m6)
  8879 |     |         }
  8880 |     |     }
  8881 |     | 
  8882 |     |     function log(uint256 p0, bool p1, bool p2, address p3) internal pure {
  8883 |     |         bytes32 m0;
  8884 |     |         bytes32 m1;
  8885 |     |         bytes32 m2;
  8886 |     |         bytes32 m3;
  8887 |     |         bytes32 m4;
  8888 |     |         /// @solidity memory-safe-assembly
  8889 |     |         assembly {
  8890 |     |             m0 := mload(0x00)
  8891 |     |             m1 := mload(0x20)
  8892 |     |             m2 := mload(0x40)
  8893 |     |             m3 := mload(0x60)
  8894 |     |             m4 := mload(0x80)
  8895 |     |             // Selector of `log(uint256,bool,bool,address)`.
  8896 |     |             mstore(0x00, 0x69640b59)
  8897 |     |             mstore(0x20, p0)
  8898 |     |             mstore(0x40, p1)
  8899 |     |             mstore(0x60, p2)
  8900 |     |             mstore(0x80, p3)
  8901 |     |         }
  8902 |     |         _sendLogPayload(0x1c, 0x84);
  8903 |     |         /// @solidity memory-safe-assembly
  8904 |     |         assembly {
  8905 |     |             mstore(0x00, m0)
  8906 |     |             mstore(0x20, m1)
  8907 |     |             mstore(0x40, m2)
  8908 |     |             mstore(0x60, m3)
  8909 |     |             mstore(0x80, m4)
  8910 |     |         }
  8911 |     |     }
  8912 |     | 
  8913 |     |     function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {
  8914 |     |         bytes32 m0;
  8915 |     |         bytes32 m1;
  8916 |     |         bytes32 m2;
  8917 |     |         bytes32 m3;
  8918 |     |         bytes32 m4;
  8919 |     |         /// @solidity memory-safe-assembly
  8920 |     |         assembly {
  8921 |     |             m0 := mload(0x00)
  8922 |     |             m1 := mload(0x20)
  8923 |     |             m2 := mload(0x40)
  8924 |     |             m3 := mload(0x60)
  8925 |     |             m4 := mload(0x80)
  8926 |     |             // Selector of `log(uint256,bool,bool,bool)`.
  8927 |     |             mstore(0x00, 0xb6f577a1)
  8928 |     |             mstore(0x20, p0)
  8929 |     |             mstore(0x40, p1)
  8930 |     |             mstore(0x60, p2)
  8931 |     |             mstore(0x80, p3)
  8932 |     |         }
  8933 |     |         _sendLogPayload(0x1c, 0x84);
  8934 |     |         /// @solidity memory-safe-assembly
  8935 |     |         assembly {
  8936 |     |             mstore(0x00, m0)
  8937 |     |             mstore(0x20, m1)
  8938 |     |             mstore(0x40, m2)
  8939 |     |             mstore(0x60, m3)
  8940 |     |             mstore(0x80, m4)
  8941 |     |         }
  8942 |     |     }
  8943 |     | 
  8944 |     |     function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {
  8945 |     |         bytes32 m0;
  8946 |     |         bytes32 m1;
  8947 |     |         bytes32 m2;
  8948 |     |         bytes32 m3;
  8949 |     |         bytes32 m4;
  8950 |     |         /// @solidity memory-safe-assembly
  8951 |     |         assembly {
  8952 |     |             m0 := mload(0x00)
  8953 |     |             m1 := mload(0x20)
  8954 |     |             m2 := mload(0x40)
  8955 |     |             m3 := mload(0x60)
  8956 |     |             m4 := mload(0x80)
  8957 |     |             // Selector of `log(uint256,bool,bool,uint256)`.
  8958 |     |             mstore(0x00, 0x7464ce23)
  8959 |     |             mstore(0x20, p0)
  8960 |     |             mstore(0x40, p1)
  8961 |     |             mstore(0x60, p2)
  8962 |     |             mstore(0x80, p3)
  8963 |     |         }
  8964 |     |         _sendLogPayload(0x1c, 0x84);
  8965 |     |         /// @solidity memory-safe-assembly
  8966 |     |         assembly {
  8967 |     |             mstore(0x00, m0)
  8968 |     |             mstore(0x20, m1)
  8969 |     |             mstore(0x40, m2)
  8970 |     |             mstore(0x60, m3)
  8971 |     |             mstore(0x80, m4)
  8972 |     |         }
  8973 |     |     }
  8974 |     | 
  8975 |     |     function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {
  8976 |     |         bytes32 m0;
  8977 |     |         bytes32 m1;
  8978 |     |         bytes32 m2;
  8979 |     |         bytes32 m3;
  8980 |     |         bytes32 m4;
  8981 |     |         bytes32 m5;
  8982 |     |         bytes32 m6;
  8983 |     |         /// @solidity memory-safe-assembly
  8984 |     |         assembly {
  8985 |     |             function writeString(pos, w) {
  8986 |     |                 let length := 0
  8987 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8988 |     |                 mstore(pos, length)
  8989 |     |                 let shift := sub(256, shl(3, length))
  8990 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8991 |     |             }
  8992 |     |             m0 := mload(0x00)
  8993 |     |             m1 := mload(0x20)
  8994 |     |             m2 := mload(0x40)
  8995 |     |             m3 := mload(0x60)
  8996 |     |             m4 := mload(0x80)
  8997 |     |             m5 := mload(0xa0)
  8998 |     |             m6 := mload(0xc0)
  8999 |     |             // Selector of `log(uint256,bool,bool,string)`.
  9000 |     |             mstore(0x00, 0xdddb9561)
  9001 |     |             mstore(0x20, p0)
  9002 |     |             mstore(0x40, p1)
  9003 |     |             mstore(0x60, p2)
  9004 |     |             mstore(0x80, 0x80)
  9005 |     |             writeString(0xa0, p3)
  9006 |     |         }
  9007 |     |         _sendLogPayload(0x1c, 0xc4);
  9008 |     |         /// @solidity memory-safe-assembly
  9009 |     |         assembly {
  9010 |     |             mstore(0x00, m0)
  9011 |     |             mstore(0x20, m1)
  9012 |     |             mstore(0x40, m2)
  9013 |     |             mstore(0x60, m3)
  9014 |     |             mstore(0x80, m4)
  9015 |     |             mstore(0xa0, m5)
  9016 |     |             mstore(0xc0, m6)
  9017 |     |         }
  9018 |     |     }
  9019 |     | 
  9020 |     |     function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {
  9021 |     |         bytes32 m0;
  9022 |     |         bytes32 m1;
  9023 |     |         bytes32 m2;
  9024 |     |         bytes32 m3;
  9025 |     |         bytes32 m4;
  9026 |     |         /// @solidity memory-safe-assembly
  9027 |     |         assembly {
  9028 |     |             m0 := mload(0x00)
  9029 |     |             m1 := mload(0x20)
  9030 |     |             m2 := mload(0x40)
  9031 |     |             m3 := mload(0x60)
  9032 |     |             m4 := mload(0x80)
  9033 |     |             // Selector of `log(uint256,bool,uint256,address)`.
  9034 |     |             mstore(0x00, 0x88cb6041)
  9035 |     |             mstore(0x20, p0)
  9036 |     |             mstore(0x40, p1)
  9037 |     |             mstore(0x60, p2)
  9038 |     |             mstore(0x80, p3)
  9039 |     |         }
  9040 |     |         _sendLogPayload(0x1c, 0x84);
  9041 |     |         /// @solidity memory-safe-assembly
  9042 |     |         assembly {
  9043 |     |             mstore(0x00, m0)
  9044 |     |             mstore(0x20, m1)
  9045 |     |             mstore(0x40, m2)
  9046 |     |             mstore(0x60, m3)
  9047 |     |             mstore(0x80, m4)
  9048 |     |         }
  9049 |     |     }
  9050 |     | 
  9051 |     |     function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {
  9052 |     |         bytes32 m0;
  9053 |     |         bytes32 m1;
  9054 |     |         bytes32 m2;
  9055 |     |         bytes32 m3;
  9056 |     |         bytes32 m4;
  9057 |     |         /// @solidity memory-safe-assembly
  9058 |     |         assembly {
  9059 |     |             m0 := mload(0x00)
  9060 |     |             m1 := mload(0x20)
  9061 |     |             m2 := mload(0x40)
  9062 |     |             m3 := mload(0x60)
  9063 |     |             m4 := mload(0x80)
  9064 |     |             // Selector of `log(uint256,bool,uint256,bool)`.
  9065 |     |             mstore(0x00, 0x91a02e2a)
  9066 |     |             mstore(0x20, p0)
  9067 |     |             mstore(0x40, p1)
  9068 |     |             mstore(0x60, p2)
  9069 |     |             mstore(0x80, p3)
  9070 |     |         }
  9071 |     |         _sendLogPayload(0x1c, 0x84);
  9072 |     |         /// @solidity memory-safe-assembly
  9073 |     |         assembly {
  9074 |     |             mstore(0x00, m0)
  9075 |     |             mstore(0x20, m1)
  9076 |     |             mstore(0x40, m2)
  9077 |     |             mstore(0x60, m3)
  9078 |     |             mstore(0x80, m4)
  9079 |     |         }
  9080 |     |     }
  9081 |     | 
  9082 |     |     function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {
  9083 |     |         bytes32 m0;
  9084 |     |         bytes32 m1;
  9085 |     |         bytes32 m2;
  9086 |     |         bytes32 m3;
  9087 |     |         bytes32 m4;
  9088 |     |         /// @solidity memory-safe-assembly
  9089 |     |         assembly {
  9090 |     |             m0 := mload(0x00)
  9091 |     |             m1 := mload(0x20)
  9092 |     |             m2 := mload(0x40)
  9093 |     |             m3 := mload(0x60)
  9094 |     |             m4 := mload(0x80)
  9095 |     |             // Selector of `log(uint256,bool,uint256,uint256)`.
  9096 |     |             mstore(0x00, 0xc6acc7a8)
  9097 |     |             mstore(0x20, p0)
  9098 |     |             mstore(0x40, p1)
  9099 |     |             mstore(0x60, p2)
  9100 |     |             mstore(0x80, p3)
  9101 |     |         }
  9102 |     |         _sendLogPayload(0x1c, 0x84);
  9103 |     |         /// @solidity memory-safe-assembly
  9104 |     |         assembly {
  9105 |     |             mstore(0x00, m0)
  9106 |     |             mstore(0x20, m1)
  9107 |     |             mstore(0x40, m2)
  9108 |     |             mstore(0x60, m3)
  9109 |     |             mstore(0x80, m4)
  9110 |     |         }
  9111 |     |     }
  9112 |     | 
  9113 |     |     function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {
  9114 |     |         bytes32 m0;
  9115 |     |         bytes32 m1;
  9116 |     |         bytes32 m2;
  9117 |     |         bytes32 m3;
  9118 |     |         bytes32 m4;
  9119 |     |         bytes32 m5;
  9120 |     |         bytes32 m6;
  9121 |     |         /// @solidity memory-safe-assembly
  9122 |     |         assembly {
  9123 |     |             function writeString(pos, w) {
  9124 |     |                 let length := 0
  9125 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9126 |     |                 mstore(pos, length)
  9127 |     |                 let shift := sub(256, shl(3, length))
  9128 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9129 |     |             }
  9130 |     |             m0 := mload(0x00)
  9131 |     |             m1 := mload(0x20)
  9132 |     |             m2 := mload(0x40)
  9133 |     |             m3 := mload(0x60)
  9134 |     |             m4 := mload(0x80)
  9135 |     |             m5 := mload(0xa0)
  9136 |     |             m6 := mload(0xc0)
  9137 |     |             // Selector of `log(uint256,bool,uint256,string)`.
  9138 |     |             mstore(0x00, 0xde03e774)
  9139 |     |             mstore(0x20, p0)
  9140 |     |             mstore(0x40, p1)
  9141 |     |             mstore(0x60, p2)
  9142 |     |             mstore(0x80, 0x80)
  9143 |     |             writeString(0xa0, p3)
  9144 |     |         }
  9145 |     |         _sendLogPayload(0x1c, 0xc4);
  9146 |     |         /// @solidity memory-safe-assembly
  9147 |     |         assembly {
  9148 |     |             mstore(0x00, m0)
  9149 |     |             mstore(0x20, m1)
  9150 |     |             mstore(0x40, m2)
  9151 |     |             mstore(0x60, m3)
  9152 |     |             mstore(0x80, m4)
  9153 |     |             mstore(0xa0, m5)
  9154 |     |             mstore(0xc0, m6)
  9155 |     |         }
  9156 |     |     }
  9157 |     | 
  9158 |     |     function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {
  9159 |     |         bytes32 m0;
  9160 |     |         bytes32 m1;
  9161 |     |         bytes32 m2;
  9162 |     |         bytes32 m3;
  9163 |     |         bytes32 m4;
  9164 |     |         bytes32 m5;
  9165 |     |         bytes32 m6;
  9166 |     |         /// @solidity memory-safe-assembly
  9167 |     |         assembly {
  9168 |     |             function writeString(pos, w) {
  9169 |     |                 let length := 0
  9170 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9171 |     |                 mstore(pos, length)
  9172 |     |                 let shift := sub(256, shl(3, length))
  9173 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9174 |     |             }
  9175 |     |             m0 := mload(0x00)
  9176 |     |             m1 := mload(0x20)
  9177 |     |             m2 := mload(0x40)
  9178 |     |             m3 := mload(0x60)
  9179 |     |             m4 := mload(0x80)
  9180 |     |             m5 := mload(0xa0)
  9181 |     |             m6 := mload(0xc0)
  9182 |     |             // Selector of `log(uint256,bool,string,address)`.
  9183 |     |             mstore(0x00, 0xef529018)
  9184 |     |             mstore(0x20, p0)
  9185 |     |             mstore(0x40, p1)
  9186 |     |             mstore(0x60, 0x80)
  9187 |     |             mstore(0x80, p3)
  9188 |     |             writeString(0xa0, p2)
  9189 |     |         }
  9190 |     |         _sendLogPayload(0x1c, 0xc4);
  9191 |     |         /// @solidity memory-safe-assembly
  9192 |     |         assembly {
  9193 |     |             mstore(0x00, m0)
  9194 |     |             mstore(0x20, m1)
  9195 |     |             mstore(0x40, m2)
  9196 |     |             mstore(0x60, m3)
  9197 |     |             mstore(0x80, m4)
  9198 |     |             mstore(0xa0, m5)
  9199 |     |             mstore(0xc0, m6)
  9200 |     |         }
  9201 |     |     }
  9202 |     | 
  9203 |     |     function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {
  9204 |     |         bytes32 m0;
  9205 |     |         bytes32 m1;
  9206 |     |         bytes32 m2;
  9207 |     |         bytes32 m3;
  9208 |     |         bytes32 m4;
  9209 |     |         bytes32 m5;
  9210 |     |         bytes32 m6;
  9211 |     |         /// @solidity memory-safe-assembly
  9212 |     |         assembly {
  9213 |     |             function writeString(pos, w) {
  9214 |     |                 let length := 0
  9215 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9216 |     |                 mstore(pos, length)
  9217 |     |                 let shift := sub(256, shl(3, length))
  9218 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9219 |     |             }
  9220 |     |             m0 := mload(0x00)
  9221 |     |             m1 := mload(0x20)
  9222 |     |             m2 := mload(0x40)
  9223 |     |             m3 := mload(0x60)
  9224 |     |             m4 := mload(0x80)
  9225 |     |             m5 := mload(0xa0)
  9226 |     |             m6 := mload(0xc0)
  9227 |     |             // Selector of `log(uint256,bool,string,bool)`.
  9228 |     |             mstore(0x00, 0xeb928d7f)
  9229 |     |             mstore(0x20, p0)
  9230 |     |             mstore(0x40, p1)
  9231 |     |             mstore(0x60, 0x80)
  9232 |     |             mstore(0x80, p3)
  9233 |     |             writeString(0xa0, p2)
  9234 |     |         }
  9235 |     |         _sendLogPayload(0x1c, 0xc4);
  9236 |     |         /// @solidity memory-safe-assembly
  9237 |     |         assembly {
  9238 |     |             mstore(0x00, m0)
  9239 |     |             mstore(0x20, m1)
  9240 |     |             mstore(0x40, m2)
  9241 |     |             mstore(0x60, m3)
  9242 |     |             mstore(0x80, m4)
  9243 |     |             mstore(0xa0, m5)
  9244 |     |             mstore(0xc0, m6)
  9245 |     |         }
  9246 |     |     }
  9247 |     | 
  9248 |     |     function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {
  9249 |     |         bytes32 m0;
  9250 |     |         bytes32 m1;
  9251 |     |         bytes32 m2;
  9252 |     |         bytes32 m3;
  9253 |     |         bytes32 m4;
  9254 |     |         bytes32 m5;
  9255 |     |         bytes32 m6;
  9256 |     |         /// @solidity memory-safe-assembly
  9257 |     |         assembly {
  9258 |     |             function writeString(pos, w) {
  9259 |     |                 let length := 0
  9260 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9261 |     |                 mstore(pos, length)
  9262 |     |                 let shift := sub(256, shl(3, length))
  9263 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9264 |     |             }
  9265 |     |             m0 := mload(0x00)
  9266 |     |             m1 := mload(0x20)
  9267 |     |             m2 := mload(0x40)
  9268 |     |             m3 := mload(0x60)
  9269 |     |             m4 := mload(0x80)
  9270 |     |             m5 := mload(0xa0)
  9271 |     |             m6 := mload(0xc0)
  9272 |     |             // Selector of `log(uint256,bool,string,uint256)`.
  9273 |     |             mstore(0x00, 0x2c1d0746)
  9274 |     |             mstore(0x20, p0)
  9275 |     |             mstore(0x40, p1)
  9276 |     |             mstore(0x60, 0x80)
  9277 |     |             mstore(0x80, p3)
  9278 |     |             writeString(0xa0, p2)
  9279 |     |         }
  9280 |     |         _sendLogPayload(0x1c, 0xc4);
  9281 |     |         /// @solidity memory-safe-assembly
  9282 |     |         assembly {
  9283 |     |             mstore(0x00, m0)
  9284 |     |             mstore(0x20, m1)
  9285 |     |             mstore(0x40, m2)
  9286 |     |             mstore(0x60, m3)
  9287 |     |             mstore(0x80, m4)
  9288 |     |             mstore(0xa0, m5)
  9289 |     |             mstore(0xc0, m6)
  9290 |     |         }
  9291 |     |     }
  9292 |     | 
  9293 |     |     function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
  9294 |     |         bytes32 m0;
  9295 |     |         bytes32 m1;
  9296 |     |         bytes32 m2;
  9297 |     |         bytes32 m3;
  9298 |     |         bytes32 m4;
  9299 |     |         bytes32 m5;
  9300 |     |         bytes32 m6;
  9301 |     |         bytes32 m7;
  9302 |     |         bytes32 m8;
  9303 |     |         /// @solidity memory-safe-assembly
  9304 |     |         assembly {
  9305 |     |             function writeString(pos, w) {
  9306 |     |                 let length := 0
  9307 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9308 |     |                 mstore(pos, length)
  9309 |     |                 let shift := sub(256, shl(3, length))
  9310 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9311 |     |             }
  9312 |     |             m0 := mload(0x00)
  9313 |     |             m1 := mload(0x20)
  9314 |     |             m2 := mload(0x40)
  9315 |     |             m3 := mload(0x60)
  9316 |     |             m4 := mload(0x80)
  9317 |     |             m5 := mload(0xa0)
  9318 |     |             m6 := mload(0xc0)
  9319 |     |             m7 := mload(0xe0)
  9320 |     |             m8 := mload(0x100)
  9321 |     |             // Selector of `log(uint256,bool,string,string)`.
  9322 |     |             mstore(0x00, 0x68c8b8bd)
  9323 |     |             mstore(0x20, p0)
  9324 |     |             mstore(0x40, p1)
  9325 |     |             mstore(0x60, 0x80)
  9326 |     |             mstore(0x80, 0xc0)
  9327 |     |             writeString(0xa0, p2)
  9328 |     |             writeString(0xe0, p3)
  9329 |     |         }
  9330 |     |         _sendLogPayload(0x1c, 0x104);
  9331 |     |         /// @solidity memory-safe-assembly
  9332 |     |         assembly {
  9333 |     |             mstore(0x00, m0)
  9334 |     |             mstore(0x20, m1)
  9335 |     |             mstore(0x40, m2)
  9336 |     |             mstore(0x60, m3)
  9337 |     |             mstore(0x80, m4)
  9338 |     |             mstore(0xa0, m5)
  9339 |     |             mstore(0xc0, m6)
  9340 |     |             mstore(0xe0, m7)
  9341 |     |             mstore(0x100, m8)
  9342 |     |         }
  9343 |     |     }
  9344 |     | 
  9345 |     |     function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {
  9346 |     |         bytes32 m0;
  9347 |     |         bytes32 m1;
  9348 |     |         bytes32 m2;
  9349 |     |         bytes32 m3;
  9350 |     |         bytes32 m4;
  9351 |     |         /// @solidity memory-safe-assembly
  9352 |     |         assembly {
  9353 |     |             m0 := mload(0x00)
  9354 |     |             m1 := mload(0x20)
  9355 |     |             m2 := mload(0x40)
  9356 |     |             m3 := mload(0x60)
  9357 |     |             m4 := mload(0x80)
  9358 |     |             // Selector of `log(uint256,uint256,address,address)`.
  9359 |     |             mstore(0x00, 0x56a5d1b1)
  9360 |     |             mstore(0x20, p0)
  9361 |     |             mstore(0x40, p1)
  9362 |     |             mstore(0x60, p2)
  9363 |     |             mstore(0x80, p3)
  9364 |     |         }
  9365 |     |         _sendLogPayload(0x1c, 0x84);
  9366 |     |         /// @solidity memory-safe-assembly
  9367 |     |         assembly {
  9368 |     |             mstore(0x00, m0)
  9369 |     |             mstore(0x20, m1)
  9370 |     |             mstore(0x40, m2)
  9371 |     |             mstore(0x60, m3)
  9372 |     |             mstore(0x80, m4)
  9373 |     |         }
  9374 |     |     }
  9375 |     | 
  9376 |     |     function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {
  9377 |     |         bytes32 m0;
  9378 |     |         bytes32 m1;
  9379 |     |         bytes32 m2;
  9380 |     |         bytes32 m3;
  9381 |     |         bytes32 m4;
  9382 |     |         /// @solidity memory-safe-assembly
  9383 |     |         assembly {
  9384 |     |             m0 := mload(0x00)
  9385 |     |             m1 := mload(0x20)
  9386 |     |             m2 := mload(0x40)
  9387 |     |             m3 := mload(0x60)
  9388 |     |             m4 := mload(0x80)
  9389 |     |             // Selector of `log(uint256,uint256,address,bool)`.
  9390 |     |             mstore(0x00, 0x15cac476)
  9391 |     |             mstore(0x20, p0)
  9392 |     |             mstore(0x40, p1)
  9393 |     |             mstore(0x60, p2)
  9394 |     |             mstore(0x80, p3)
  9395 |     |         }
  9396 |     |         _sendLogPayload(0x1c, 0x84);
  9397 |     |         /// @solidity memory-safe-assembly
  9398 |     |         assembly {
  9399 |     |             mstore(0x00, m0)
  9400 |     |             mstore(0x20, m1)
  9401 |     |             mstore(0x40, m2)
  9402 |     |             mstore(0x60, m3)
  9403 |     |             mstore(0x80, m4)
  9404 |     |         }
  9405 |     |     }
  9406 |     | 
  9407 |     |     function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {
  9408 |     |         bytes32 m0;
  9409 |     |         bytes32 m1;
  9410 |     |         bytes32 m2;
  9411 |     |         bytes32 m3;
  9412 |     |         bytes32 m4;
  9413 |     |         /// @solidity memory-safe-assembly
  9414 |     |         assembly {
  9415 |     |             m0 := mload(0x00)
  9416 |     |             m1 := mload(0x20)
  9417 |     |             m2 := mload(0x40)
  9418 |     |             m3 := mload(0x60)
  9419 |     |             m4 := mload(0x80)
  9420 |     |             // Selector of `log(uint256,uint256,address,uint256)`.
  9421 |     |             mstore(0x00, 0x88f6e4b2)
  9422 |     |             mstore(0x20, p0)
  9423 |     |             mstore(0x40, p1)
  9424 |     |             mstore(0x60, p2)
  9425 |     |             mstore(0x80, p3)
  9426 |     |         }
  9427 |     |         _sendLogPayload(0x1c, 0x84);
  9428 |     |         /// @solidity memory-safe-assembly
  9429 |     |         assembly {
  9430 |     |             mstore(0x00, m0)
  9431 |     |             mstore(0x20, m1)
  9432 |     |             mstore(0x40, m2)
  9433 |     |             mstore(0x60, m3)
  9434 |     |             mstore(0x80, m4)
  9435 |     |         }
  9436 |     |     }
  9437 |     | 
  9438 |     |     function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {
  9439 |     |         bytes32 m0;
  9440 |     |         bytes32 m1;
  9441 |     |         bytes32 m2;
  9442 |     |         bytes32 m3;
  9443 |     |         bytes32 m4;
  9444 |     |         bytes32 m5;
  9445 |     |         bytes32 m6;
  9446 |     |         /// @solidity memory-safe-assembly
  9447 |     |         assembly {
  9448 |     |             function writeString(pos, w) {
  9449 |     |                 let length := 0
  9450 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9451 |     |                 mstore(pos, length)
  9452 |     |                 let shift := sub(256, shl(3, length))
  9453 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9454 |     |             }
  9455 |     |             m0 := mload(0x00)
  9456 |     |             m1 := mload(0x20)
  9457 |     |             m2 := mload(0x40)
  9458 |     |             m3 := mload(0x60)
  9459 |     |             m4 := mload(0x80)
  9460 |     |             m5 := mload(0xa0)
  9461 |     |             m6 := mload(0xc0)
  9462 |     |             // Selector of `log(uint256,uint256,address,string)`.
  9463 |     |             mstore(0x00, 0x6cde40b8)
  9464 |     |             mstore(0x20, p0)
  9465 |     |             mstore(0x40, p1)
  9466 |     |             mstore(0x60, p2)
  9467 |     |             mstore(0x80, 0x80)
  9468 |     |             writeString(0xa0, p3)
  9469 |     |         }
  9470 |     |         _sendLogPayload(0x1c, 0xc4);
  9471 |     |         /// @solidity memory-safe-assembly
  9472 |     |         assembly {
  9473 |     |             mstore(0x00, m0)
  9474 |     |             mstore(0x20, m1)
  9475 |     |             mstore(0x40, m2)
  9476 |     |             mstore(0x60, m3)
  9477 |     |             mstore(0x80, m4)
  9478 |     |             mstore(0xa0, m5)
  9479 |     |             mstore(0xc0, m6)
  9480 |     |         }
  9481 |     |     }
  9482 |     | 
  9483 |     |     function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {
  9484 |     |         bytes32 m0;
  9485 |     |         bytes32 m1;
  9486 |     |         bytes32 m2;
  9487 |     |         bytes32 m3;
  9488 |     |         bytes32 m4;
  9489 |     |         /// @solidity memory-safe-assembly
  9490 |     |         assembly {
  9491 |     |             m0 := mload(0x00)
  9492 |     |             m1 := mload(0x20)
  9493 |     |             m2 := mload(0x40)
  9494 |     |             m3 := mload(0x60)
  9495 |     |             m4 := mload(0x80)
  9496 |     |             // Selector of `log(uint256,uint256,bool,address)`.
  9497 |     |             mstore(0x00, 0x9a816a83)
  9498 |     |             mstore(0x20, p0)
  9499 |     |             mstore(0x40, p1)
  9500 |     |             mstore(0x60, p2)
  9501 |     |             mstore(0x80, p3)
  9502 |     |         }
  9503 |     |         _sendLogPayload(0x1c, 0x84);
  9504 |     |         /// @solidity memory-safe-assembly
  9505 |     |         assembly {
  9506 |     |             mstore(0x00, m0)
  9507 |     |             mstore(0x20, m1)
  9508 |     |             mstore(0x40, m2)
  9509 |     |             mstore(0x60, m3)
  9510 |     |             mstore(0x80, m4)
  9511 |     |         }
  9512 |     |     }
  9513 |     | 
  9514 |     |     function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {
  9515 |     |         bytes32 m0;
  9516 |     |         bytes32 m1;
  9517 |     |         bytes32 m2;
  9518 |     |         bytes32 m3;
  9519 |     |         bytes32 m4;
  9520 |     |         /// @solidity memory-safe-assembly
  9521 |     |         assembly {
  9522 |     |             m0 := mload(0x00)
  9523 |     |             m1 := mload(0x20)
  9524 |     |             m2 := mload(0x40)
  9525 |     |             m3 := mload(0x60)
  9526 |     |             m4 := mload(0x80)
  9527 |     |             // Selector of `log(uint256,uint256,bool,bool)`.
  9528 |     |             mstore(0x00, 0xab085ae6)
  9529 |     |             mstore(0x20, p0)
  9530 |     |             mstore(0x40, p1)
  9531 |     |             mstore(0x60, p2)
  9532 |     |             mstore(0x80, p3)
  9533 |     |         }
  9534 |     |         _sendLogPayload(0x1c, 0x84);
  9535 |     |         /// @solidity memory-safe-assembly
  9536 |     |         assembly {
  9537 |     |             mstore(0x00, m0)
  9538 |     |             mstore(0x20, m1)
  9539 |     |             mstore(0x40, m2)
  9540 |     |             mstore(0x60, m3)
  9541 |     |             mstore(0x80, m4)
  9542 |     |         }
  9543 |     |     }
  9544 |     | 
  9545 |     |     function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {
  9546 |     |         bytes32 m0;
  9547 |     |         bytes32 m1;
  9548 |     |         bytes32 m2;
  9549 |     |         bytes32 m3;
  9550 |     |         bytes32 m4;
  9551 |     |         /// @solidity memory-safe-assembly
  9552 |     |         assembly {
  9553 |     |             m0 := mload(0x00)
  9554 |     |             m1 := mload(0x20)
  9555 |     |             m2 := mload(0x40)
  9556 |     |             m3 := mload(0x60)
  9557 |     |             m4 := mload(0x80)
  9558 |     |             // Selector of `log(uint256,uint256,bool,uint256)`.
  9559 |     |             mstore(0x00, 0xeb7f6fd2)
  9560 |     |             mstore(0x20, p0)
  9561 |     |             mstore(0x40, p1)
  9562 |     |             mstore(0x60, p2)
  9563 |     |             mstore(0x80, p3)
  9564 |     |         }
  9565 |     |         _sendLogPayload(0x1c, 0x84);
  9566 |     |         /// @solidity memory-safe-assembly
  9567 |     |         assembly {
  9568 |     |             mstore(0x00, m0)
  9569 |     |             mstore(0x20, m1)
  9570 |     |             mstore(0x40, m2)
  9571 |     |             mstore(0x60, m3)
  9572 |     |             mstore(0x80, m4)
  9573 |     |         }
  9574 |     |     }
  9575 |     | 
  9576 |     |     function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {
  9577 |     |         bytes32 m0;
  9578 |     |         bytes32 m1;
  9579 |     |         bytes32 m2;
  9580 |     |         bytes32 m3;
  9581 |     |         bytes32 m4;
  9582 |     |         bytes32 m5;
  9583 |     |         bytes32 m6;
  9584 |     |         /// @solidity memory-safe-assembly
  9585 |     |         assembly {
  9586 |     |             function writeString(pos, w) {
  9587 |     |                 let length := 0
  9588 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9589 |     |                 mstore(pos, length)
  9590 |     |                 let shift := sub(256, shl(3, length))
  9591 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9592 |     |             }
  9593 |     |             m0 := mload(0x00)
  9594 |     |             m1 := mload(0x20)
  9595 |     |             m2 := mload(0x40)
  9596 |     |             m3 := mload(0x60)
  9597 |     |             m4 := mload(0x80)
  9598 |     |             m5 := mload(0xa0)
  9599 |     |             m6 := mload(0xc0)
  9600 |     |             // Selector of `log(uint256,uint256,bool,string)`.
  9601 |     |             mstore(0x00, 0xa5b4fc99)
  9602 |     |             mstore(0x20, p0)
  9603 |     |             mstore(0x40, p1)
  9604 |     |             mstore(0x60, p2)
  9605 |     |             mstore(0x80, 0x80)
  9606 |     |             writeString(0xa0, p3)
  9607 |     |         }
  9608 |     |         _sendLogPayload(0x1c, 0xc4);
  9609 |     |         /// @solidity memory-safe-assembly
  9610 |     |         assembly {
  9611 |     |             mstore(0x00, m0)
  9612 |     |             mstore(0x20, m1)
  9613 |     |             mstore(0x40, m2)
  9614 |     |             mstore(0x60, m3)
  9615 |     |             mstore(0x80, m4)
  9616 |     |             mstore(0xa0, m5)
  9617 |     |             mstore(0xc0, m6)
  9618 |     |         }
  9619 |     |     }
  9620 |     | 
  9621 |     |     function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {
  9622 |     |         bytes32 m0;
  9623 |     |         bytes32 m1;
  9624 |     |         bytes32 m2;
  9625 |     |         bytes32 m3;
  9626 |     |         bytes32 m4;
  9627 |     |         /// @solidity memory-safe-assembly
  9628 |     |         assembly {
  9629 |     |             m0 := mload(0x00)
  9630 |     |             m1 := mload(0x20)
  9631 |     |             m2 := mload(0x40)
  9632 |     |             m3 := mload(0x60)
  9633 |     |             m4 := mload(0x80)
  9634 |     |             // Selector of `log(uint256,uint256,uint256,address)`.
  9635 |     |             mstore(0x00, 0xfa8185af)
  9636 |     |             mstore(0x20, p0)
  9637 |     |             mstore(0x40, p1)
  9638 |     |             mstore(0x60, p2)
  9639 |     |             mstore(0x80, p3)
  9640 |     |         }
  9641 |     |         _sendLogPayload(0x1c, 0x84);
  9642 |     |         /// @solidity memory-safe-assembly
  9643 |     |         assembly {
  9644 |     |             mstore(0x00, m0)
  9645 |     |             mstore(0x20, m1)
  9646 |     |             mstore(0x40, m2)
  9647 |     |             mstore(0x60, m3)
  9648 |     |             mstore(0x80, m4)
  9649 |     |         }
  9650 |     |     }
  9651 |     | 
  9652 |     |     function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {
  9653 |     |         bytes32 m0;
  9654 |     |         bytes32 m1;
  9655 |     |         bytes32 m2;
  9656 |     |         bytes32 m3;
  9657 |     |         bytes32 m4;
  9658 |     |         /// @solidity memory-safe-assembly
  9659 |     |         assembly {
  9660 |     |             m0 := mload(0x00)
  9661 |     |             m1 := mload(0x20)
  9662 |     |             m2 := mload(0x40)
  9663 |     |             m3 := mload(0x60)
  9664 |     |             m4 := mload(0x80)
  9665 |     |             // Selector of `log(uint256,uint256,uint256,bool)`.
  9666 |     |             mstore(0x00, 0xc598d185)
  9667 |     |             mstore(0x20, p0)
  9668 |     |             mstore(0x40, p1)
  9669 |     |             mstore(0x60, p2)
  9670 |     |             mstore(0x80, p3)
  9671 |     |         }
  9672 |     |         _sendLogPayload(0x1c, 0x84);
  9673 |     |         /// @solidity memory-safe-assembly
  9674 |     |         assembly {
  9675 |     |             mstore(0x00, m0)
  9676 |     |             mstore(0x20, m1)
  9677 |     |             mstore(0x40, m2)
  9678 |     |             mstore(0x60, m3)
  9679 |     |             mstore(0x80, m4)
  9680 |     |         }
  9681 |     |     }
  9682 |     | 
  9683 |     |     function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
  9684 |     |         bytes32 m0;
  9685 |     |         bytes32 m1;
  9686 |     |         bytes32 m2;
  9687 |     |         bytes32 m3;
  9688 |     |         bytes32 m4;
  9689 |     |         /// @solidity memory-safe-assembly
  9690 |     |         assembly {
  9691 |     |             m0 := mload(0x00)
  9692 |     |             m1 := mload(0x20)
  9693 |     |             m2 := mload(0x40)
  9694 |     |             m3 := mload(0x60)
  9695 |     |             m4 := mload(0x80)
  9696 |     |             // Selector of `log(uint256,uint256,uint256,uint256)`.
  9697 |     |             mstore(0x00, 0x193fb800)
  9698 |     |             mstore(0x20, p0)
  9699 |     |             mstore(0x40, p1)
  9700 |     |             mstore(0x60, p2)
  9701 |     |             mstore(0x80, p3)
  9702 |     |         }
  9703 |     |         _sendLogPayload(0x1c, 0x84);
  9704 |     |         /// @solidity memory-safe-assembly
  9705 |     |         assembly {
  9706 |     |             mstore(0x00, m0)
  9707 |     |             mstore(0x20, m1)
  9708 |     |             mstore(0x40, m2)
  9709 |     |             mstore(0x60, m3)
  9710 |     |             mstore(0x80, m4)
  9711 |     |         }
  9712 |     |     }
  9713 |     | 
  9714 |     |     function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
  9715 |     |         bytes32 m0;
  9716 |     |         bytes32 m1;
  9717 |     |         bytes32 m2;
  9718 |     |         bytes32 m3;
  9719 |     |         bytes32 m4;
  9720 |     |         bytes32 m5;
  9721 |     |         bytes32 m6;
  9722 |     |         /// @solidity memory-safe-assembly
  9723 |     |         assembly {
  9724 |     |             function writeString(pos, w) {
  9725 |     |                 let length := 0
  9726 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9727 |     |                 mstore(pos, length)
  9728 |     |                 let shift := sub(256, shl(3, length))
  9729 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9730 |     |             }
  9731 |     |             m0 := mload(0x00)
  9732 |     |             m1 := mload(0x20)
  9733 |     |             m2 := mload(0x40)
  9734 |     |             m3 := mload(0x60)
  9735 |     |             m4 := mload(0x80)
  9736 |     |             m5 := mload(0xa0)
  9737 |     |             m6 := mload(0xc0)
  9738 |     |             // Selector of `log(uint256,uint256,uint256,string)`.
  9739 |     |             mstore(0x00, 0x59cfcbe3)
  9740 |     |             mstore(0x20, p0)
  9741 |     |             mstore(0x40, p1)
  9742 |     |             mstore(0x60, p2)
  9743 |     |             mstore(0x80, 0x80)
  9744 |     |             writeString(0xa0, p3)
  9745 |     |         }
  9746 |     |         _sendLogPayload(0x1c, 0xc4);
  9747 |     |         /// @solidity memory-safe-assembly
  9748 |     |         assembly {
  9749 |     |             mstore(0x00, m0)
  9750 |     |             mstore(0x20, m1)
  9751 |     |             mstore(0x40, m2)
  9752 |     |             mstore(0x60, m3)
  9753 |     |             mstore(0x80, m4)
  9754 |     |             mstore(0xa0, m5)
  9755 |     |             mstore(0xc0, m6)
  9756 |     |         }
  9757 |     |     }
  9758 |     | 
  9759 |     |     function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {
  9760 |     |         bytes32 m0;
  9761 |     |         bytes32 m1;
  9762 |     |         bytes32 m2;
  9763 |     |         bytes32 m3;
  9764 |     |         bytes32 m4;
  9765 |     |         bytes32 m5;
  9766 |     |         bytes32 m6;
  9767 |     |         /// @solidity memory-safe-assembly
  9768 |     |         assembly {
  9769 |     |             function writeString(pos, w) {
  9770 |     |                 let length := 0
  9771 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9772 |     |                 mstore(pos, length)
  9773 |     |                 let shift := sub(256, shl(3, length))
  9774 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9775 |     |             }
  9776 |     |             m0 := mload(0x00)
  9777 |     |             m1 := mload(0x20)
  9778 |     |             m2 := mload(0x40)
  9779 |     |             m3 := mload(0x60)
  9780 |     |             m4 := mload(0x80)
  9781 |     |             m5 := mload(0xa0)
  9782 |     |             m6 := mload(0xc0)
  9783 |     |             // Selector of `log(uint256,uint256,string,address)`.
  9784 |     |             mstore(0x00, 0x42d21db7)
  9785 |     |             mstore(0x20, p0)
  9786 |     |             mstore(0x40, p1)
  9787 |     |             mstore(0x60, 0x80)
  9788 |     |             mstore(0x80, p3)
  9789 |     |             writeString(0xa0, p2)
  9790 |     |         }
  9791 |     |         _sendLogPayload(0x1c, 0xc4);
  9792 |     |         /// @solidity memory-safe-assembly
  9793 |     |         assembly {
  9794 |     |             mstore(0x00, m0)
  9795 |     |             mstore(0x20, m1)
  9796 |     |             mstore(0x40, m2)
  9797 |     |             mstore(0x60, m3)
  9798 |     |             mstore(0x80, m4)
  9799 |     |             mstore(0xa0, m5)
  9800 |     |             mstore(0xc0, m6)
  9801 |     |         }
  9802 |     |     }
  9803 |     | 
  9804 |     |     function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {
  9805 |     |         bytes32 m0;
  9806 |     |         bytes32 m1;
  9807 |     |         bytes32 m2;
  9808 |     |         bytes32 m3;
  9809 |     |         bytes32 m4;
  9810 |     |         bytes32 m5;
  9811 |     |         bytes32 m6;
  9812 |     |         /// @solidity memory-safe-assembly
  9813 |     |         assembly {
  9814 |     |             function writeString(pos, w) {
  9815 |     |                 let length := 0
  9816 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9817 |     |                 mstore(pos, length)
  9818 |     |                 let shift := sub(256, shl(3, length))
  9819 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9820 |     |             }
  9821 |     |             m0 := mload(0x00)
  9822 |     |             m1 := mload(0x20)
  9823 |     |             m2 := mload(0x40)
  9824 |     |             m3 := mload(0x60)
  9825 |     |             m4 := mload(0x80)
  9826 |     |             m5 := mload(0xa0)
  9827 |     |             m6 := mload(0xc0)
  9828 |     |             // Selector of `log(uint256,uint256,string,bool)`.
  9829 |     |             mstore(0x00, 0x7af6ab25)
  9830 |     |             mstore(0x20, p0)
  9831 |     |             mstore(0x40, p1)
  9832 |     |             mstore(0x60, 0x80)
  9833 |     |             mstore(0x80, p3)
  9834 |     |             writeString(0xa0, p2)
  9835 |     |         }
  9836 |     |         _sendLogPayload(0x1c, 0xc4);
  9837 |     |         /// @solidity memory-safe-assembly
  9838 |     |         assembly {
  9839 |     |             mstore(0x00, m0)
  9840 |     |             mstore(0x20, m1)
  9841 |     |             mstore(0x40, m2)
  9842 |     |             mstore(0x60, m3)
  9843 |     |             mstore(0x80, m4)
  9844 |     |             mstore(0xa0, m5)
  9845 |     |             mstore(0xc0, m6)
  9846 |     |         }
  9847 |     |     }
  9848 |     | 
  9849 |     |     function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
  9850 |     |         bytes32 m0;
  9851 |     |         bytes32 m1;
  9852 |     |         bytes32 m2;
  9853 |     |         bytes32 m3;
  9854 |     |         bytes32 m4;
  9855 |     |         bytes32 m5;
  9856 |     |         bytes32 m6;
  9857 |     |         /// @solidity memory-safe-assembly
  9858 |     |         assembly {
  9859 |     |             function writeString(pos, w) {
  9860 |     |                 let length := 0
  9861 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9862 |     |                 mstore(pos, length)
  9863 |     |                 let shift := sub(256, shl(3, length))
  9864 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9865 |     |             }
  9866 |     |             m0 := mload(0x00)
  9867 |     |             m1 := mload(0x20)
  9868 |     |             m2 := mload(0x40)
  9869 |     |             m3 := mload(0x60)
  9870 |     |             m4 := mload(0x80)
  9871 |     |             m5 := mload(0xa0)
  9872 |     |             m6 := mload(0xc0)
  9873 |     |             // Selector of `log(uint256,uint256,string,uint256)`.
  9874 |     |             mstore(0x00, 0x5da297eb)
  9875 |     |             mstore(0x20, p0)
  9876 |     |             mstore(0x40, p1)
  9877 |     |             mstore(0x60, 0x80)
  9878 |     |             mstore(0x80, p3)
  9879 |     |             writeString(0xa0, p2)
  9880 |     |         }
  9881 |     |         _sendLogPayload(0x1c, 0xc4);
  9882 |     |         /// @solidity memory-safe-assembly
  9883 |     |         assembly {
  9884 |     |             mstore(0x00, m0)
  9885 |     |             mstore(0x20, m1)
  9886 |     |             mstore(0x40, m2)
  9887 |     |             mstore(0x60, m3)
  9888 |     |             mstore(0x80, m4)
  9889 |     |             mstore(0xa0, m5)
  9890 |     |             mstore(0xc0, m6)
  9891 |     |         }
  9892 |     |     }
  9893 |     | 
  9894 |     |     function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
  9895 |     |         bytes32 m0;
  9896 |     |         bytes32 m1;
  9897 |     |         bytes32 m2;
  9898 |     |         bytes32 m3;
  9899 |     |         bytes32 m4;
  9900 |     |         bytes32 m5;
  9901 |     |         bytes32 m6;
  9902 |     |         bytes32 m7;
  9903 |     |         bytes32 m8;
  9904 |     |         /// @solidity memory-safe-assembly
  9905 |     |         assembly {
  9906 |     |             function writeString(pos, w) {
  9907 |     |                 let length := 0
  9908 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9909 |     |                 mstore(pos, length)
  9910 |     |                 let shift := sub(256, shl(3, length))
  9911 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9912 |     |             }
  9913 |     |             m0 := mload(0x00)
  9914 |     |             m1 := mload(0x20)
  9915 |     |             m2 := mload(0x40)
  9916 |     |             m3 := mload(0x60)
  9917 |     |             m4 := mload(0x80)
  9918 |     |             m5 := mload(0xa0)
  9919 |     |             m6 := mload(0xc0)
  9920 |     |             m7 := mload(0xe0)
  9921 |     |             m8 := mload(0x100)
  9922 |     |             // Selector of `log(uint256,uint256,string,string)`.
  9923 |     |             mstore(0x00, 0x27d8afd2)
  9924 |     |             mstore(0x20, p0)
  9925 |     |             mstore(0x40, p1)
  9926 |     |             mstore(0x60, 0x80)
  9927 |     |             mstore(0x80, 0xc0)
  9928 |     |             writeString(0xa0, p2)
  9929 |     |             writeString(0xe0, p3)
  9930 |     |         }
  9931 |     |         _sendLogPayload(0x1c, 0x104);
  9932 |     |         /// @solidity memory-safe-assembly
  9933 |     |         assembly {
  9934 |     |             mstore(0x00, m0)
  9935 |     |             mstore(0x20, m1)
  9936 |     |             mstore(0x40, m2)
  9937 |     |             mstore(0x60, m3)
  9938 |     |             mstore(0x80, m4)
  9939 |     |             mstore(0xa0, m5)
  9940 |     |             mstore(0xc0, m6)
  9941 |     |             mstore(0xe0, m7)
  9942 |     |             mstore(0x100, m8)
  9943 |     |         }
  9944 |     |     }
  9945 |     | 
  9946 |     |     function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {
  9947 |     |         bytes32 m0;
  9948 |     |         bytes32 m1;
  9949 |     |         bytes32 m2;
  9950 |     |         bytes32 m3;
  9951 |     |         bytes32 m4;
  9952 |     |         bytes32 m5;
  9953 |     |         bytes32 m6;
  9954 |     |         /// @solidity memory-safe-assembly
  9955 |     |         assembly {
  9956 |     |             function writeString(pos, w) {
  9957 |     |                 let length := 0
  9958 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9959 |     |                 mstore(pos, length)
  9960 |     |                 let shift := sub(256, shl(3, length))
  9961 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9962 |     |             }
  9963 |     |             m0 := mload(0x00)
  9964 |     |             m1 := mload(0x20)
  9965 |     |             m2 := mload(0x40)
  9966 |     |             m3 := mload(0x60)
  9967 |     |             m4 := mload(0x80)
  9968 |     |             m5 := mload(0xa0)
  9969 |     |             m6 := mload(0xc0)
  9970 |     |             // Selector of `log(uint256,string,address,address)`.
  9971 |     |             mstore(0x00, 0x6168ed61)
  9972 |     |             mstore(0x20, p0)
  9973 |     |             mstore(0x40, 0x80)
  9974 |     |             mstore(0x60, p2)
  9975 |     |             mstore(0x80, p3)
  9976 |     |             writeString(0xa0, p1)
  9977 |     |         }
  9978 |     |         _sendLogPayload(0x1c, 0xc4);
  9979 |     |         /// @solidity memory-safe-assembly
  9980 |     |         assembly {
  9981 |     |             mstore(0x00, m0)
  9982 |     |             mstore(0x20, m1)
  9983 |     |             mstore(0x40, m2)
  9984 |     |             mstore(0x60, m3)
  9985 |     |             mstore(0x80, m4)
  9986 |     |             mstore(0xa0, m5)
  9987 |     |             mstore(0xc0, m6)
  9988 |     |         }
  9989 |     |     }
  9990 |     | 
  9991 |     |     function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {
  9992 |     |         bytes32 m0;
  9993 |     |         bytes32 m1;
  9994 |     |         bytes32 m2;
  9995 |     |         bytes32 m3;
  9996 |     |         bytes32 m4;
  9997 |     |         bytes32 m5;
  9998 |     |         bytes32 m6;
  9999 |     |         /// @solidity memory-safe-assembly
 10000 |     |         assembly {
 10001 |     |             function writeString(pos, w) {
 10002 |     |                 let length := 0
 10003 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10004 |     |                 mstore(pos, length)
 10005 |     |                 let shift := sub(256, shl(3, length))
 10006 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10007 |     |             }
 10008 |     |             m0 := mload(0x00)
 10009 |     |             m1 := mload(0x20)
 10010 |     |             m2 := mload(0x40)
 10011 |     |             m3 := mload(0x60)
 10012 |     |             m4 := mload(0x80)
 10013 |     |             m5 := mload(0xa0)
 10014 |     |             m6 := mload(0xc0)
 10015 |     |             // Selector of `log(uint256,string,address,bool)`.
 10016 |     |             mstore(0x00, 0x90c30a56)
 10017 |     |             mstore(0x20, p0)
 10018 |     |             mstore(0x40, 0x80)
 10019 |     |             mstore(0x60, p2)
 10020 |     |             mstore(0x80, p3)
 10021 |     |             writeString(0xa0, p1)
 10022 |     |         }
 10023 |     |         _sendLogPayload(0x1c, 0xc4);
 10024 |     |         /// @solidity memory-safe-assembly
 10025 |     |         assembly {
 10026 |     |             mstore(0x00, m0)
 10027 |     |             mstore(0x20, m1)
 10028 |     |             mstore(0x40, m2)
 10029 |     |             mstore(0x60, m3)
 10030 |     |             mstore(0x80, m4)
 10031 |     |             mstore(0xa0, m5)
 10032 |     |             mstore(0xc0, m6)
 10033 |     |         }
 10034 |     |     }
 10035 |     | 
 10036 |     |     function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {
 10037 |     |         bytes32 m0;
 10038 |     |         bytes32 m1;
 10039 |     |         bytes32 m2;
 10040 |     |         bytes32 m3;
 10041 |     |         bytes32 m4;
 10042 |     |         bytes32 m5;
 10043 |     |         bytes32 m6;
 10044 |     |         /// @solidity memory-safe-assembly
 10045 |     |         assembly {
 10046 |     |             function writeString(pos, w) {
 10047 |     |                 let length := 0
 10048 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10049 |     |                 mstore(pos, length)
 10050 |     |                 let shift := sub(256, shl(3, length))
 10051 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10052 |     |             }
 10053 |     |             m0 := mload(0x00)
 10054 |     |             m1 := mload(0x20)
 10055 |     |             m2 := mload(0x40)
 10056 |     |             m3 := mload(0x60)
 10057 |     |             m4 := mload(0x80)
 10058 |     |             m5 := mload(0xa0)
 10059 |     |             m6 := mload(0xc0)
 10060 |     |             // Selector of `log(uint256,string,address,uint256)`.
 10061 |     |             mstore(0x00, 0xe8d3018d)
 10062 |     |             mstore(0x20, p0)
 10063 |     |             mstore(0x40, 0x80)
 10064 |     |             mstore(0x60, p2)
 10065 |     |             mstore(0x80, p3)
 10066 |     |             writeString(0xa0, p1)
 10067 |     |         }
 10068 |     |         _sendLogPayload(0x1c, 0xc4);
 10069 |     |         /// @solidity memory-safe-assembly
 10070 |     |         assembly {
 10071 |     |             mstore(0x00, m0)
 10072 |     |             mstore(0x20, m1)
 10073 |     |             mstore(0x40, m2)
 10074 |     |             mstore(0x60, m3)
 10075 |     |             mstore(0x80, m4)
 10076 |     |             mstore(0xa0, m5)
 10077 |     |             mstore(0xc0, m6)
 10078 |     |         }
 10079 |     |     }
 10080 |     | 
 10081 |     |     function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {
 10082 |     |         bytes32 m0;
 10083 |     |         bytes32 m1;
 10084 |     |         bytes32 m2;
 10085 |     |         bytes32 m3;
 10086 |     |         bytes32 m4;
 10087 |     |         bytes32 m5;
 10088 |     |         bytes32 m6;
 10089 |     |         bytes32 m7;
 10090 |     |         bytes32 m8;
 10091 |     |         /// @solidity memory-safe-assembly
 10092 |     |         assembly {
 10093 |     |             function writeString(pos, w) {
 10094 |     |                 let length := 0
 10095 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10096 |     |                 mstore(pos, length)
 10097 |     |                 let shift := sub(256, shl(3, length))
 10098 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10099 |     |             }
 10100 |     |             m0 := mload(0x00)
 10101 |     |             m1 := mload(0x20)
 10102 |     |             m2 := mload(0x40)
 10103 |     |             m3 := mload(0x60)
 10104 |     |             m4 := mload(0x80)
 10105 |     |             m5 := mload(0xa0)
 10106 |     |             m6 := mload(0xc0)
 10107 |     |             m7 := mload(0xe0)
 10108 |     |             m8 := mload(0x100)
 10109 |     |             // Selector of `log(uint256,string,address,string)`.
 10110 |     |             mstore(0x00, 0x9c3adfa1)
 10111 |     |             mstore(0x20, p0)
 10112 |     |             mstore(0x40, 0x80)
 10113 |     |             mstore(0x60, p2)
 10114 |     |             mstore(0x80, 0xc0)
 10115 |     |             writeString(0xa0, p1)
 10116 |     |             writeString(0xe0, p3)
 10117 |     |         }
 10118 |     |         _sendLogPayload(0x1c, 0x104);
 10119 |     |         /// @solidity memory-safe-assembly
 10120 |     |         assembly {
 10121 |     |             mstore(0x00, m0)
 10122 |     |             mstore(0x20, m1)
 10123 |     |             mstore(0x40, m2)
 10124 |     |             mstore(0x60, m3)
 10125 |     |             mstore(0x80, m4)
 10126 |     |             mstore(0xa0, m5)
 10127 |     |             mstore(0xc0, m6)
 10128 |     |             mstore(0xe0, m7)
 10129 |     |             mstore(0x100, m8)
 10130 |     |         }
 10131 |     |     }
 10132 |     | 
 10133 |     |     function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {
 10134 |     |         bytes32 m0;
 10135 |     |         bytes32 m1;
 10136 |     |         bytes32 m2;
 10137 |     |         bytes32 m3;
 10138 |     |         bytes32 m4;
 10139 |     |         bytes32 m5;
 10140 |     |         bytes32 m6;
 10141 |     |         /// @solidity memory-safe-assembly
 10142 |     |         assembly {
 10143 |     |             function writeString(pos, w) {
 10144 |     |                 let length := 0
 10145 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10146 |     |                 mstore(pos, length)
 10147 |     |                 let shift := sub(256, shl(3, length))
 10148 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10149 |     |             }
 10150 |     |             m0 := mload(0x00)
 10151 |     |             m1 := mload(0x20)
 10152 |     |             m2 := mload(0x40)
 10153 |     |             m3 := mload(0x60)
 10154 |     |             m4 := mload(0x80)
 10155 |     |             m5 := mload(0xa0)
 10156 |     |             m6 := mload(0xc0)
 10157 |     |             // Selector of `log(uint256,string,bool,address)`.
 10158 |     |             mstore(0x00, 0xae2ec581)
 10159 |     |             mstore(0x20, p0)
 10160 |     |             mstore(0x40, 0x80)
 10161 |     |             mstore(0x60, p2)
 10162 |     |             mstore(0x80, p3)
 10163 |     |             writeString(0xa0, p1)
 10164 |     |         }
 10165 |     |         _sendLogPayload(0x1c, 0xc4);
 10166 |     |         /// @solidity memory-safe-assembly
 10167 |     |         assembly {
 10168 |     |             mstore(0x00, m0)
 10169 |     |             mstore(0x20, m1)
 10170 |     |             mstore(0x40, m2)
 10171 |     |             mstore(0x60, m3)
 10172 |     |             mstore(0x80, m4)
 10173 |     |             mstore(0xa0, m5)
 10174 |     |             mstore(0xc0, m6)
 10175 |     |         }
 10176 |     |     }
 10177 |     | 
 10178 |     |     function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {
 10179 |     |         bytes32 m0;
 10180 |     |         bytes32 m1;
 10181 |     |         bytes32 m2;
 10182 |     |         bytes32 m3;
 10183 |     |         bytes32 m4;
 10184 |     |         bytes32 m5;
 10185 |     |         bytes32 m6;
 10186 |     |         /// @solidity memory-safe-assembly
 10187 |     |         assembly {
 10188 |     |             function writeString(pos, w) {
 10189 |     |                 let length := 0
 10190 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10191 |     |                 mstore(pos, length)
 10192 |     |                 let shift := sub(256, shl(3, length))
 10193 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10194 |     |             }
 10195 |     |             m0 := mload(0x00)
 10196 |     |             m1 := mload(0x20)
 10197 |     |             m2 := mload(0x40)
 10198 |     |             m3 := mload(0x60)
 10199 |     |             m4 := mload(0x80)
 10200 |     |             m5 := mload(0xa0)
 10201 |     |             m6 := mload(0xc0)
 10202 |     |             // Selector of `log(uint256,string,bool,bool)`.
 10203 |     |             mstore(0x00, 0xba535d9c)
 10204 |     |             mstore(0x20, p0)
 10205 |     |             mstore(0x40, 0x80)
 10206 |     |             mstore(0x60, p2)
 10207 |     |             mstore(0x80, p3)
 10208 |     |             writeString(0xa0, p1)
 10209 |     |         }
 10210 |     |         _sendLogPayload(0x1c, 0xc4);
 10211 |     |         /// @solidity memory-safe-assembly
 10212 |     |         assembly {
 10213 |     |             mstore(0x00, m0)
 10214 |     |             mstore(0x20, m1)
 10215 |     |             mstore(0x40, m2)
 10216 |     |             mstore(0x60, m3)
 10217 |     |             mstore(0x80, m4)
 10218 |     |             mstore(0xa0, m5)
 10219 |     |             mstore(0xc0, m6)
 10220 |     |         }
 10221 |     |     }
 10222 |     | 
 10223 |     |     function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {
 10224 |     |         bytes32 m0;
 10225 |     |         bytes32 m1;
 10226 |     |         bytes32 m2;
 10227 |     |         bytes32 m3;
 10228 |     |         bytes32 m4;
 10229 |     |         bytes32 m5;
 10230 |     |         bytes32 m6;
 10231 |     |         /// @solidity memory-safe-assembly
 10232 |     |         assembly {
 10233 |     |             function writeString(pos, w) {
 10234 |     |                 let length := 0
 10235 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10236 |     |                 mstore(pos, length)
 10237 |     |                 let shift := sub(256, shl(3, length))
 10238 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10239 |     |             }
 10240 |     |             m0 := mload(0x00)
 10241 |     |             m1 := mload(0x20)
 10242 |     |             m2 := mload(0x40)
 10243 |     |             m3 := mload(0x60)
 10244 |     |             m4 := mload(0x80)
 10245 |     |             m5 := mload(0xa0)
 10246 |     |             m6 := mload(0xc0)
 10247 |     |             // Selector of `log(uint256,string,bool,uint256)`.
 10248 |     |             mstore(0x00, 0xcf009880)
 10249 |     |             mstore(0x20, p0)
 10250 |     |             mstore(0x40, 0x80)
 10251 |     |             mstore(0x60, p2)
 10252 |     |             mstore(0x80, p3)
 10253 |     |             writeString(0xa0, p1)
 10254 |     |         }
 10255 |     |         _sendLogPayload(0x1c, 0xc4);
 10256 |     |         /// @solidity memory-safe-assembly
 10257 |     |         assembly {
 10258 |     |             mstore(0x00, m0)
 10259 |     |             mstore(0x20, m1)
 10260 |     |             mstore(0x40, m2)
 10261 |     |             mstore(0x60, m3)
 10262 |     |             mstore(0x80, m4)
 10263 |     |             mstore(0xa0, m5)
 10264 |     |             mstore(0xc0, m6)
 10265 |     |         }
 10266 |     |     }
 10267 |     | 
 10268 |     |     function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
 10269 |     |         bytes32 m0;
 10270 |     |         bytes32 m1;
 10271 |     |         bytes32 m2;
 10272 |     |         bytes32 m3;
 10273 |     |         bytes32 m4;
 10274 |     |         bytes32 m5;
 10275 |     |         bytes32 m6;
 10276 |     |         bytes32 m7;
 10277 |     |         bytes32 m8;
 10278 |     |         /// @solidity memory-safe-assembly
 10279 |     |         assembly {
 10280 |     |             function writeString(pos, w) {
 10281 |     |                 let length := 0
 10282 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10283 |     |                 mstore(pos, length)
 10284 |     |                 let shift := sub(256, shl(3, length))
 10285 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10286 |     |             }
 10287 |     |             m0 := mload(0x00)
 10288 |     |             m1 := mload(0x20)
 10289 |     |             m2 := mload(0x40)
 10290 |     |             m3 := mload(0x60)
 10291 |     |             m4 := mload(0x80)
 10292 |     |             m5 := mload(0xa0)
 10293 |     |             m6 := mload(0xc0)
 10294 |     |             m7 := mload(0xe0)
 10295 |     |             m8 := mload(0x100)
 10296 |     |             // Selector of `log(uint256,string,bool,string)`.
 10297 |     |             mstore(0x00, 0xd2d423cd)
 10298 |     |             mstore(0x20, p0)
 10299 |     |             mstore(0x40, 0x80)
 10300 |     |             mstore(0x60, p2)
 10301 |     |             mstore(0x80, 0xc0)
 10302 |     |             writeString(0xa0, p1)
 10303 |     |             writeString(0xe0, p3)
 10304 |     |         }
 10305 |     |         _sendLogPayload(0x1c, 0x104);
 10306 |     |         /// @solidity memory-safe-assembly
 10307 |     |         assembly {
 10308 |     |             mstore(0x00, m0)
 10309 |     |             mstore(0x20, m1)
 10310 |     |             mstore(0x40, m2)
 10311 |     |             mstore(0x60, m3)
 10312 |     |             mstore(0x80, m4)
 10313 |     |             mstore(0xa0, m5)
 10314 |     |             mstore(0xc0, m6)
 10315 |     |             mstore(0xe0, m7)
 10316 |     |             mstore(0x100, m8)
 10317 |     |         }
 10318 |     |     }
 10319 |     | 
 10320 |     |     function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {
 10321 |     |         bytes32 m0;
 10322 |     |         bytes32 m1;
 10323 |     |         bytes32 m2;
 10324 |     |         bytes32 m3;
 10325 |     |         bytes32 m4;
 10326 |     |         bytes32 m5;
 10327 |     |         bytes32 m6;
 10328 |     |         /// @solidity memory-safe-assembly
 10329 |     |         assembly {
 10330 |     |             function writeString(pos, w) {
 10331 |     |                 let length := 0
 10332 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10333 |     |                 mstore(pos, length)
 10334 |     |                 let shift := sub(256, shl(3, length))
 10335 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10336 |     |             }
 10337 |     |             m0 := mload(0x00)
 10338 |     |             m1 := mload(0x20)
 10339 |     |             m2 := mload(0x40)
 10340 |     |             m3 := mload(0x60)
 10341 |     |             m4 := mload(0x80)
 10342 |     |             m5 := mload(0xa0)
 10343 |     |             m6 := mload(0xc0)
 10344 |     |             // Selector of `log(uint256,string,uint256,address)`.
 10345 |     |             mstore(0x00, 0x3b2279b4)
 10346 |     |             mstore(0x20, p0)
 10347 |     |             mstore(0x40, 0x80)
 10348 |     |             mstore(0x60, p2)
 10349 |     |             mstore(0x80, p3)
 10350 |     |             writeString(0xa0, p1)
 10351 |     |         }
 10352 |     |         _sendLogPayload(0x1c, 0xc4);
 10353 |     |         /// @solidity memory-safe-assembly
 10354 |     |         assembly {
 10355 |     |             mstore(0x00, m0)
 10356 |     |             mstore(0x20, m1)
 10357 |     |             mstore(0x40, m2)
 10358 |     |             mstore(0x60, m3)
 10359 |     |             mstore(0x80, m4)
 10360 |     |             mstore(0xa0, m5)
 10361 |     |             mstore(0xc0, m6)
 10362 |     |         }
 10363 |     |     }
 10364 |     | 
 10365 |     |     function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {
 10366 |     |         bytes32 m0;
 10367 |     |         bytes32 m1;
 10368 |     |         bytes32 m2;
 10369 |     |         bytes32 m3;
 10370 |     |         bytes32 m4;
 10371 |     |         bytes32 m5;
 10372 |     |         bytes32 m6;
 10373 |     |         /// @solidity memory-safe-assembly
 10374 |     |         assembly {
 10375 |     |             function writeString(pos, w) {
 10376 |     |                 let length := 0
 10377 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10378 |     |                 mstore(pos, length)
 10379 |     |                 let shift := sub(256, shl(3, length))
 10380 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10381 |     |             }
 10382 |     |             m0 := mload(0x00)
 10383 |     |             m1 := mload(0x20)
 10384 |     |             m2 := mload(0x40)
 10385 |     |             m3 := mload(0x60)
 10386 |     |             m4 := mload(0x80)
 10387 |     |             m5 := mload(0xa0)
 10388 |     |             m6 := mload(0xc0)
 10389 |     |             // Selector of `log(uint256,string,uint256,bool)`.
 10390 |     |             mstore(0x00, 0x691a8f74)
 10391 |     |             mstore(0x20, p0)
 10392 |     |             mstore(0x40, 0x80)
 10393 |     |             mstore(0x60, p2)
 10394 |     |             mstore(0x80, p3)
 10395 |     |             writeString(0xa0, p1)
 10396 |     |         }
 10397 |     |         _sendLogPayload(0x1c, 0xc4);
 10398 |     |         /// @solidity memory-safe-assembly
 10399 |     |         assembly {
 10400 |     |             mstore(0x00, m0)
 10401 |     |             mstore(0x20, m1)
 10402 |     |             mstore(0x40, m2)
 10403 |     |             mstore(0x60, m3)
 10404 |     |             mstore(0x80, m4)
 10405 |     |             mstore(0xa0, m5)
 10406 |     |             mstore(0xc0, m6)
 10407 |     |         }
 10408 |     |     }
 10409 |     | 
 10410 |     |     function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
 10411 |     |         bytes32 m0;
 10412 |     |         bytes32 m1;
 10413 |     |         bytes32 m2;
 10414 |     |         bytes32 m3;
 10415 |     |         bytes32 m4;
 10416 |     |         bytes32 m5;
 10417 |     |         bytes32 m6;
 10418 |     |         /// @solidity memory-safe-assembly
 10419 |     |         assembly {
 10420 |     |             function writeString(pos, w) {
 10421 |     |                 let length := 0
 10422 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10423 |     |                 mstore(pos, length)
 10424 |     |                 let shift := sub(256, shl(3, length))
 10425 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10426 |     |             }
 10427 |     |             m0 := mload(0x00)
 10428 |     |             m1 := mload(0x20)
 10429 |     |             m2 := mload(0x40)
 10430 |     |             m3 := mload(0x60)
 10431 |     |             m4 := mload(0x80)
 10432 |     |             m5 := mload(0xa0)
 10433 |     |             m6 := mload(0xc0)
 10434 |     |             // Selector of `log(uint256,string,uint256,uint256)`.
 10435 |     |             mstore(0x00, 0x82c25b74)
 10436 |     |             mstore(0x20, p0)
 10437 |     |             mstore(0x40, 0x80)
 10438 |     |             mstore(0x60, p2)
 10439 |     |             mstore(0x80, p3)
 10440 |     |             writeString(0xa0, p1)
 10441 |     |         }
 10442 |     |         _sendLogPayload(0x1c, 0xc4);
 10443 |     |         /// @solidity memory-safe-assembly
 10444 |     |         assembly {
 10445 |     |             mstore(0x00, m0)
 10446 |     |             mstore(0x20, m1)
 10447 |     |             mstore(0x40, m2)
 10448 |     |             mstore(0x60, m3)
 10449 |     |             mstore(0x80, m4)
 10450 |     |             mstore(0xa0, m5)
 10451 |     |             mstore(0xc0, m6)
 10452 |     |         }
 10453 |     |     }
 10454 |     | 
 10455 |     |     function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
 10456 |     |         bytes32 m0;
 10457 |     |         bytes32 m1;
 10458 |     |         bytes32 m2;
 10459 |     |         bytes32 m3;
 10460 |     |         bytes32 m4;
 10461 |     |         bytes32 m5;
 10462 |     |         bytes32 m6;
 10463 |     |         bytes32 m7;
 10464 |     |         bytes32 m8;
 10465 |     |         /// @solidity memory-safe-assembly
 10466 |     |         assembly {
 10467 |     |             function writeString(pos, w) {
 10468 |     |                 let length := 0
 10469 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10470 |     |                 mstore(pos, length)
 10471 |     |                 let shift := sub(256, shl(3, length))
 10472 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10473 |     |             }
 10474 |     |             m0 := mload(0x00)
 10475 |     |             m1 := mload(0x20)
 10476 |     |             m2 := mload(0x40)
 10477 |     |             m3 := mload(0x60)
 10478 |     |             m4 := mload(0x80)
 10479 |     |             m5 := mload(0xa0)
 10480 |     |             m6 := mload(0xc0)
 10481 |     |             m7 := mload(0xe0)
 10482 |     |             m8 := mload(0x100)
 10483 |     |             // Selector of `log(uint256,string,uint256,string)`.
 10484 |     |             mstore(0x00, 0xb7b914ca)
 10485 |     |             mstore(0x20, p0)
 10486 |     |             mstore(0x40, 0x80)
 10487 |     |             mstore(0x60, p2)
 10488 |     |             mstore(0x80, 0xc0)
 10489 |     |             writeString(0xa0, p1)
 10490 |     |             writeString(0xe0, p3)
 10491 |     |         }
 10492 |     |         _sendLogPayload(0x1c, 0x104);
 10493 |     |         /// @solidity memory-safe-assembly
 10494 |     |         assembly {
 10495 |     |             mstore(0x00, m0)
 10496 |     |             mstore(0x20, m1)
 10497 |     |             mstore(0x40, m2)
 10498 |     |             mstore(0x60, m3)
 10499 |     |             mstore(0x80, m4)
 10500 |     |             mstore(0xa0, m5)
 10501 |     |             mstore(0xc0, m6)
 10502 |     |             mstore(0xe0, m7)
 10503 |     |             mstore(0x100, m8)
 10504 |     |         }
 10505 |     |     }
 10506 |     | 
 10507 |     |     function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {
 10508 |     |         bytes32 m0;
 10509 |     |         bytes32 m1;
 10510 |     |         bytes32 m2;
 10511 |     |         bytes32 m3;
 10512 |     |         bytes32 m4;
 10513 |     |         bytes32 m5;
 10514 |     |         bytes32 m6;
 10515 |     |         bytes32 m7;
 10516 |     |         bytes32 m8;
 10517 |     |         /// @solidity memory-safe-assembly
 10518 |     |         assembly {
 10519 |     |             function writeString(pos, w) {
 10520 |     |                 let length := 0
 10521 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10522 |     |                 mstore(pos, length)
 10523 |     |                 let shift := sub(256, shl(3, length))
 10524 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10525 |     |             }
 10526 |     |             m0 := mload(0x00)
 10527 |     |             m1 := mload(0x20)
 10528 |     |             m2 := mload(0x40)
 10529 |     |             m3 := mload(0x60)
 10530 |     |             m4 := mload(0x80)
 10531 |     |             m5 := mload(0xa0)
 10532 |     |             m6 := mload(0xc0)
 10533 |     |             m7 := mload(0xe0)
 10534 |     |             m8 := mload(0x100)
 10535 |     |             // Selector of `log(uint256,string,string,address)`.
 10536 |     |             mstore(0x00, 0xd583c602)
 10537 |     |             mstore(0x20, p0)
 10538 |     |             mstore(0x40, 0x80)
 10539 |     |             mstore(0x60, 0xc0)
 10540 |     |             mstore(0x80, p3)
 10541 |     |             writeString(0xa0, p1)
 10542 |     |             writeString(0xe0, p2)
 10543 |     |         }
 10544 |     |         _sendLogPayload(0x1c, 0x104);
 10545 |     |         /// @solidity memory-safe-assembly
 10546 |     |         assembly {
 10547 |     |             mstore(0x00, m0)
 10548 |     |             mstore(0x20, m1)
 10549 |     |             mstore(0x40, m2)
 10550 |     |             mstore(0x60, m3)
 10551 |     |             mstore(0x80, m4)
 10552 |     |             mstore(0xa0, m5)
 10553 |     |             mstore(0xc0, m6)
 10554 |     |             mstore(0xe0, m7)
 10555 |     |             mstore(0x100, m8)
 10556 |     |         }
 10557 |     |     }
 10558 |     | 
 10559 |     |     function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
 10560 |     |         bytes32 m0;
 10561 |     |         bytes32 m1;
 10562 |     |         bytes32 m2;
 10563 |     |         bytes32 m3;
 10564 |     |         bytes32 m4;
 10565 |     |         bytes32 m5;
 10566 |     |         bytes32 m6;
 10567 |     |         bytes32 m7;
 10568 |     |         bytes32 m8;
 10569 |     |         /// @solidity memory-safe-assembly
 10570 |     |         assembly {
 10571 |     |             function writeString(pos, w) {
 10572 |     |                 let length := 0
 10573 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10574 |     |                 mstore(pos, length)
 10575 |     |                 let shift := sub(256, shl(3, length))
 10576 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10577 |     |             }
 10578 |     |             m0 := mload(0x00)
 10579 |     |             m1 := mload(0x20)
 10580 |     |             m2 := mload(0x40)
 10581 |     |             m3 := mload(0x60)
 10582 |     |             m4 := mload(0x80)
 10583 |     |             m5 := mload(0xa0)
 10584 |     |             m6 := mload(0xc0)
 10585 |     |             m7 := mload(0xe0)
 10586 |     |             m8 := mload(0x100)
 10587 |     |             // Selector of `log(uint256,string,string,bool)`.
 10588 |     |             mstore(0x00, 0xb3a6b6bd)
 10589 |     |             mstore(0x20, p0)
 10590 |     |             mstore(0x40, 0x80)
 10591 |     |             mstore(0x60, 0xc0)
 10592 |     |             mstore(0x80, p3)
 10593 |     |             writeString(0xa0, p1)
 10594 |     |             writeString(0xe0, p2)
 10595 |     |         }
 10596 |     |         _sendLogPayload(0x1c, 0x104);
 10597 |     |         /// @solidity memory-safe-assembly
 10598 |     |         assembly {
 10599 |     |             mstore(0x00, m0)
 10600 |     |             mstore(0x20, m1)
 10601 |     |             mstore(0x40, m2)
 10602 |     |             mstore(0x60, m3)
 10603 |     |             mstore(0x80, m4)
 10604 |     |             mstore(0xa0, m5)
 10605 |     |             mstore(0xc0, m6)
 10606 |     |             mstore(0xe0, m7)
 10607 |     |             mstore(0x100, m8)
 10608 |     |         }
 10609 |     |     }
 10610 |     | 
 10611 |     |     function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
 10612 |     |         bytes32 m0;
 10613 |     |         bytes32 m1;
 10614 |     |         bytes32 m2;
 10615 |     |         bytes32 m3;
 10616 |     |         bytes32 m4;
 10617 |     |         bytes32 m5;
 10618 |     |         bytes32 m6;
 10619 |     |         bytes32 m7;
 10620 |     |         bytes32 m8;
 10621 |     |         /// @solidity memory-safe-assembly
 10622 |     |         assembly {
 10623 |     |             function writeString(pos, w) {
 10624 |     |                 let length := 0
 10625 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10626 |     |                 mstore(pos, length)
 10627 |     |                 let shift := sub(256, shl(3, length))
 10628 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10629 |     |             }
 10630 |     |             m0 := mload(0x00)
 10631 |     |             m1 := mload(0x20)
 10632 |     |             m2 := mload(0x40)
 10633 |     |             m3 := mload(0x60)
 10634 |     |             m4 := mload(0x80)
 10635 |     |             m5 := mload(0xa0)
 10636 |     |             m6 := mload(0xc0)
 10637 |     |             m7 := mload(0xe0)
 10638 |     |             m8 := mload(0x100)
 10639 |     |             // Selector of `log(uint256,string,string,uint256)`.
 10640 |     |             mstore(0x00, 0xb028c9bd)
 10641 |     |             mstore(0x20, p0)
 10642 |     |             mstore(0x40, 0x80)
 10643 |     |             mstore(0x60, 0xc0)
 10644 |     |             mstore(0x80, p3)
 10645 |     |             writeString(0xa0, p1)
 10646 |     |             writeString(0xe0, p2)
 10647 |     |         }
 10648 |     |         _sendLogPayload(0x1c, 0x104);
 10649 |     |         /// @solidity memory-safe-assembly
 10650 |     |         assembly {
 10651 |     |             mstore(0x00, m0)
 10652 |     |             mstore(0x20, m1)
 10653 |     |             mstore(0x40, m2)
 10654 |     |             mstore(0x60, m3)
 10655 |     |             mstore(0x80, m4)
 10656 |     |             mstore(0xa0, m5)
 10657 |     |             mstore(0xc0, m6)
 10658 |     |             mstore(0xe0, m7)
 10659 |     |             mstore(0x100, m8)
 10660 |     |         }
 10661 |     |     }
 10662 |     | 
 10663 |     |     function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
 10664 |     |         bytes32 m0;
 10665 |     |         bytes32 m1;
 10666 |     |         bytes32 m2;
 10667 |     |         bytes32 m3;
 10668 |     |         bytes32 m4;
 10669 |     |         bytes32 m5;
 10670 |     |         bytes32 m6;
 10671 |     |         bytes32 m7;
 10672 |     |         bytes32 m8;
 10673 |     |         bytes32 m9;
 10674 |     |         bytes32 m10;
 10675 |     |         /// @solidity memory-safe-assembly
 10676 |     |         assembly {
 10677 |     |             function writeString(pos, w) {
 10678 |     |                 let length := 0
 10679 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10680 |     |                 mstore(pos, length)
 10681 |     |                 let shift := sub(256, shl(3, length))
 10682 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10683 |     |             }
 10684 |     |             m0 := mload(0x00)
 10685 |     |             m1 := mload(0x20)
 10686 |     |             m2 := mload(0x40)
 10687 |     |             m3 := mload(0x60)
 10688 |     |             m4 := mload(0x80)
 10689 |     |             m5 := mload(0xa0)
 10690 |     |             m6 := mload(0xc0)
 10691 |     |             m7 := mload(0xe0)
 10692 |     |             m8 := mload(0x100)
 10693 |     |             m9 := mload(0x120)
 10694 |     |             m10 := mload(0x140)
 10695 |     |             // Selector of `log(uint256,string,string,string)`.
 10696 |     |             mstore(0x00, 0x21ad0683)
 10697 |     |             mstore(0x20, p0)
 10698 |     |             mstore(0x40, 0x80)
 10699 |     |             mstore(0x60, 0xc0)
 10700 |     |             mstore(0x80, 0x100)
 10701 |     |             writeString(0xa0, p1)
 10702 |     |             writeString(0xe0, p2)
 10703 |     |             writeString(0x120, p3)
 10704 |     |         }
 10705 |     |         _sendLogPayload(0x1c, 0x144);
 10706 |     |         /// @solidity memory-safe-assembly
 10707 |     |         assembly {
 10708 |     |             mstore(0x00, m0)
 10709 |     |             mstore(0x20, m1)
 10710 |     |             mstore(0x40, m2)
 10711 |     |             mstore(0x60, m3)
 10712 |     |             mstore(0x80, m4)
 10713 |     |             mstore(0xa0, m5)
 10714 |     |             mstore(0xc0, m6)
 10715 |     |             mstore(0xe0, m7)
 10716 |     |             mstore(0x100, m8)
 10717 |     |             mstore(0x120, m9)
 10718 |     |             mstore(0x140, m10)
 10719 |     |         }
 10720 |     |     }
 10721 |     | 
 10722 |     |     function log(bytes32 p0, address p1, address p2, address p3) internal pure {
 10723 |     |         bytes32 m0;
 10724 |     |         bytes32 m1;
 10725 |     |         bytes32 m2;
 10726 |     |         bytes32 m3;
 10727 |     |         bytes32 m4;
 10728 |     |         bytes32 m5;
 10729 |     |         bytes32 m6;
 10730 |     |         /// @solidity memory-safe-assembly
 10731 |     |         assembly {
 10732 |     |             function writeString(pos, w) {
 10733 |     |                 let length := 0
 10734 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10735 |     |                 mstore(pos, length)
 10736 |     |                 let shift := sub(256, shl(3, length))
 10737 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10738 |     |             }
 10739 |     |             m0 := mload(0x00)
 10740 |     |             m1 := mload(0x20)
 10741 |     |             m2 := mload(0x40)
 10742 |     |             m3 := mload(0x60)
 10743 |     |             m4 := mload(0x80)
 10744 |     |             m5 := mload(0xa0)
 10745 |     |             m6 := mload(0xc0)
 10746 |     |             // Selector of `log(string,address,address,address)`.
 10747 |     |             mstore(0x00, 0xed8f28f6)
 10748 |     |             mstore(0x20, 0x80)
 10749 |     |             mstore(0x40, p1)
 10750 |     |             mstore(0x60, p2)
 10751 |     |             mstore(0x80, p3)
 10752 |     |             writeString(0xa0, p0)
 10753 |     |         }
 10754 |     |         _sendLogPayload(0x1c, 0xc4);
 10755 |     |         /// @solidity memory-safe-assembly
 10756 |     |         assembly {
 10757 |     |             mstore(0x00, m0)
 10758 |     |             mstore(0x20, m1)
 10759 |     |             mstore(0x40, m2)
 10760 |     |             mstore(0x60, m3)
 10761 |     |             mstore(0x80, m4)
 10762 |     |             mstore(0xa0, m5)
 10763 |     |             mstore(0xc0, m6)
 10764 |     |         }
 10765 |     |     }
 10766 |     | 
 10767 |     |     function log(bytes32 p0, address p1, address p2, bool p3) internal pure {
 10768 |     |         bytes32 m0;
 10769 |     |         bytes32 m1;
 10770 |     |         bytes32 m2;
 10771 |     |         bytes32 m3;
 10772 |     |         bytes32 m4;
 10773 |     |         bytes32 m5;
 10774 |     |         bytes32 m6;
 10775 |     |         /// @solidity memory-safe-assembly
 10776 |     |         assembly {
 10777 |     |             function writeString(pos, w) {
 10778 |     |                 let length := 0
 10779 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10780 |     |                 mstore(pos, length)
 10781 |     |                 let shift := sub(256, shl(3, length))
 10782 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10783 |     |             }
 10784 |     |             m0 := mload(0x00)
 10785 |     |             m1 := mload(0x20)
 10786 |     |             m2 := mload(0x40)
 10787 |     |             m3 := mload(0x60)
 10788 |     |             m4 := mload(0x80)
 10789 |     |             m5 := mload(0xa0)
 10790 |     |             m6 := mload(0xc0)
 10791 |     |             // Selector of `log(string,address,address,bool)`.
 10792 |     |             mstore(0x00, 0xb59dbd60)
 10793 |     |             mstore(0x20, 0x80)
 10794 |     |             mstore(0x40, p1)
 10795 |     |             mstore(0x60, p2)
 10796 |     |             mstore(0x80, p3)
 10797 |     |             writeString(0xa0, p0)
 10798 |     |         }
 10799 |     |         _sendLogPayload(0x1c, 0xc4);
 10800 |     |         /// @solidity memory-safe-assembly
 10801 |     |         assembly {
 10802 |     |             mstore(0x00, m0)
 10803 |     |             mstore(0x20, m1)
 10804 |     |             mstore(0x40, m2)
 10805 |     |             mstore(0x60, m3)
 10806 |     |             mstore(0x80, m4)
 10807 |     |             mstore(0xa0, m5)
 10808 |     |             mstore(0xc0, m6)
 10809 |     |         }
 10810 |     |     }
 10811 |     | 
 10812 |     |     function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {
 10813 |     |         bytes32 m0;
 10814 |     |         bytes32 m1;
 10815 |     |         bytes32 m2;
 10816 |     |         bytes32 m3;
 10817 |     |         bytes32 m4;
 10818 |     |         bytes32 m5;
 10819 |     |         bytes32 m6;
 10820 |     |         /// @solidity memory-safe-assembly
 10821 |     |         assembly {
 10822 |     |             function writeString(pos, w) {
 10823 |     |                 let length := 0
 10824 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10825 |     |                 mstore(pos, length)
 10826 |     |                 let shift := sub(256, shl(3, length))
 10827 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10828 |     |             }
 10829 |     |             m0 := mload(0x00)
 10830 |     |             m1 := mload(0x20)
 10831 |     |             m2 := mload(0x40)
 10832 |     |             m3 := mload(0x60)
 10833 |     |             m4 := mload(0x80)
 10834 |     |             m5 := mload(0xa0)
 10835 |     |             m6 := mload(0xc0)
 10836 |     |             // Selector of `log(string,address,address,uint256)`.
 10837 |     |             mstore(0x00, 0x8ef3f399)
 10838 |     |             mstore(0x20, 0x80)
 10839 |     |             mstore(0x40, p1)
 10840 |     |             mstore(0x60, p2)
 10841 |     |             mstore(0x80, p3)
 10842 |     |             writeString(0xa0, p0)
 10843 |     |         }
 10844 |     |         _sendLogPayload(0x1c, 0xc4);
 10845 |     |         /// @solidity memory-safe-assembly
 10846 |     |         assembly {
 10847 |     |             mstore(0x00, m0)
 10848 |     |             mstore(0x20, m1)
 10849 |     |             mstore(0x40, m2)
 10850 |     |             mstore(0x60, m3)
 10851 |     |             mstore(0x80, m4)
 10852 |     |             mstore(0xa0, m5)
 10853 |     |             mstore(0xc0, m6)
 10854 |     |         }
 10855 |     |     }
 10856 |     | 
 10857 |     |     function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {
 10858 |     |         bytes32 m0;
 10859 |     |         bytes32 m1;
 10860 |     |         bytes32 m2;
 10861 |     |         bytes32 m3;
 10862 |     |         bytes32 m4;
 10863 |     |         bytes32 m5;
 10864 |     |         bytes32 m6;
 10865 |     |         bytes32 m7;
 10866 |     |         bytes32 m8;
 10867 |     |         /// @solidity memory-safe-assembly
 10868 |     |         assembly {
 10869 |     |             function writeString(pos, w) {
 10870 |     |                 let length := 0
 10871 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10872 |     |                 mstore(pos, length)
 10873 |     |                 let shift := sub(256, shl(3, length))
 10874 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10875 |     |             }
 10876 |     |             m0 := mload(0x00)
 10877 |     |             m1 := mload(0x20)
 10878 |     |             m2 := mload(0x40)
 10879 |     |             m3 := mload(0x60)
 10880 |     |             m4 := mload(0x80)
 10881 |     |             m5 := mload(0xa0)
 10882 |     |             m6 := mload(0xc0)
 10883 |     |             m7 := mload(0xe0)
 10884 |     |             m8 := mload(0x100)
 10885 |     |             // Selector of `log(string,address,address,string)`.
 10886 |     |             mstore(0x00, 0x800a1c67)
 10887 |     |             mstore(0x20, 0x80)
 10888 |     |             mstore(0x40, p1)
 10889 |     |             mstore(0x60, p2)
 10890 |     |             mstore(0x80, 0xc0)
 10891 |     |             writeString(0xa0, p0)
 10892 |     |             writeString(0xe0, p3)
 10893 |     |         }
 10894 |     |         _sendLogPayload(0x1c, 0x104);
 10895 |     |         /// @solidity memory-safe-assembly
 10896 |     |         assembly {
 10897 |     |             mstore(0x00, m0)
 10898 |     |             mstore(0x20, m1)
 10899 |     |             mstore(0x40, m2)
 10900 |     |             mstore(0x60, m3)
 10901 |     |             mstore(0x80, m4)
 10902 |     |             mstore(0xa0, m5)
 10903 |     |             mstore(0xc0, m6)
 10904 |     |             mstore(0xe0, m7)
 10905 |     |             mstore(0x100, m8)
 10906 |     |         }
 10907 |     |     }
 10908 |     | 
 10909 |     |     function log(bytes32 p0, address p1, bool p2, address p3) internal pure {
 10910 |     |         bytes32 m0;
 10911 |     |         bytes32 m1;
 10912 |     |         bytes32 m2;
 10913 |     |         bytes32 m3;
 10914 |     |         bytes32 m4;
 10915 |     |         bytes32 m5;
 10916 |     |         bytes32 m6;
 10917 |     |         /// @solidity memory-safe-assembly
 10918 |     |         assembly {
 10919 |     |             function writeString(pos, w) {
 10920 |     |                 let length := 0
 10921 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10922 |     |                 mstore(pos, length)
 10923 |     |                 let shift := sub(256, shl(3, length))
 10924 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10925 |     |             }
 10926 |     |             m0 := mload(0x00)
 10927 |     |             m1 := mload(0x20)
 10928 |     |             m2 := mload(0x40)
 10929 |     |             m3 := mload(0x60)
 10930 |     |             m4 := mload(0x80)
 10931 |     |             m5 := mload(0xa0)
 10932 |     |             m6 := mload(0xc0)
 10933 |     |             // Selector of `log(string,address,bool,address)`.
 10934 |     |             mstore(0x00, 0x223603bd)
 10935 |     |             mstore(0x20, 0x80)
 10936 |     |             mstore(0x40, p1)
 10937 |     |             mstore(0x60, p2)
 10938 |     |             mstore(0x80, p3)
 10939 |     |             writeString(0xa0, p0)
 10940 |     |         }
 10941 |     |         _sendLogPayload(0x1c, 0xc4);
 10942 |     |         /// @solidity memory-safe-assembly
 10943 |     |         assembly {
 10944 |     |             mstore(0x00, m0)
 10945 |     |             mstore(0x20, m1)
 10946 |     |             mstore(0x40, m2)
 10947 |     |             mstore(0x60, m3)
 10948 |     |             mstore(0x80, m4)
 10949 |     |             mstore(0xa0, m5)
 10950 |     |             mstore(0xc0, m6)
 10951 |     |         }
 10952 |     |     }
 10953 |     | 
 10954 |     |     function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {
 10955 |     |         bytes32 m0;
 10956 |     |         bytes32 m1;
 10957 |     |         bytes32 m2;
 10958 |     |         bytes32 m3;
 10959 |     |         bytes32 m4;
 10960 |     |         bytes32 m5;
 10961 |     |         bytes32 m6;
 10962 |     |         /// @solidity memory-safe-assembly
 10963 |     |         assembly {
 10964 |     |             function writeString(pos, w) {
 10965 |     |                 let length := 0
 10966 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10967 |     |                 mstore(pos, length)
 10968 |     |                 let shift := sub(256, shl(3, length))
 10969 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10970 |     |             }
 10971 |     |             m0 := mload(0x00)
 10972 |     |             m1 := mload(0x20)
 10973 |     |             m2 := mload(0x40)
 10974 |     |             m3 := mload(0x60)
 10975 |     |             m4 := mload(0x80)
 10976 |     |             m5 := mload(0xa0)
 10977 |     |             m6 := mload(0xc0)
 10978 |     |             // Selector of `log(string,address,bool,bool)`.
 10979 |     |             mstore(0x00, 0x79884c2b)
 10980 |     |             mstore(0x20, 0x80)
 10981 |     |             mstore(0x40, p1)
 10982 |     |             mstore(0x60, p2)
 10983 |     |             mstore(0x80, p3)
 10984 |     |             writeString(0xa0, p0)
 10985 |     |         }
 10986 |     |         _sendLogPayload(0x1c, 0xc4);
 10987 |     |         /// @solidity memory-safe-assembly
 10988 |     |         assembly {
 10989 |     |             mstore(0x00, m0)
 10990 |     |             mstore(0x20, m1)
 10991 |     |             mstore(0x40, m2)
 10992 |     |             mstore(0x60, m3)
 10993 |     |             mstore(0x80, m4)
 10994 |     |             mstore(0xa0, m5)
 10995 |     |             mstore(0xc0, m6)
 10996 |     |         }
 10997 |     |     }
 10998 |     | 
 10999 |     |     function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {
 11000 |     |         bytes32 m0;
 11001 |     |         bytes32 m1;
 11002 |     |         bytes32 m2;
 11003 |     |         bytes32 m3;
 11004 |     |         bytes32 m4;
 11005 |     |         bytes32 m5;
 11006 |     |         bytes32 m6;
 11007 |     |         /// @solidity memory-safe-assembly
 11008 |     |         assembly {
 11009 |     |             function writeString(pos, w) {
 11010 |     |                 let length := 0
 11011 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11012 |     |                 mstore(pos, length)
 11013 |     |                 let shift := sub(256, shl(3, length))
 11014 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11015 |     |             }
 11016 |     |             m0 := mload(0x00)
 11017 |     |             m1 := mload(0x20)
 11018 |     |             m2 := mload(0x40)
 11019 |     |             m3 := mload(0x60)
 11020 |     |             m4 := mload(0x80)
 11021 |     |             m5 := mload(0xa0)
 11022 |     |             m6 := mload(0xc0)
 11023 |     |             // Selector of `log(string,address,bool,uint256)`.
 11024 |     |             mstore(0x00, 0x3e9f866a)
 11025 |     |             mstore(0x20, 0x80)
 11026 |     |             mstore(0x40, p1)
 11027 |     |             mstore(0x60, p2)
 11028 |     |             mstore(0x80, p3)
 11029 |     |             writeString(0xa0, p0)
 11030 |     |         }
 11031 |     |         _sendLogPayload(0x1c, 0xc4);
 11032 |     |         /// @solidity memory-safe-assembly
 11033 |     |         assembly {
 11034 |     |             mstore(0x00, m0)
 11035 |     |             mstore(0x20, m1)
 11036 |     |             mstore(0x40, m2)
 11037 |     |             mstore(0x60, m3)
 11038 |     |             mstore(0x80, m4)
 11039 |     |             mstore(0xa0, m5)
 11040 |     |             mstore(0xc0, m6)
 11041 |     |         }
 11042 |     |     }
 11043 |     | 
 11044 |     |     function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {
 11045 |     |         bytes32 m0;
 11046 |     |         bytes32 m1;
 11047 |     |         bytes32 m2;
 11048 |     |         bytes32 m3;
 11049 |     |         bytes32 m4;
 11050 |     |         bytes32 m5;
 11051 |     |         bytes32 m6;
 11052 |     |         bytes32 m7;
 11053 |     |         bytes32 m8;
 11054 |     |         /// @solidity memory-safe-assembly
 11055 |     |         assembly {
 11056 |     |             function writeString(pos, w) {
 11057 |     |                 let length := 0
 11058 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11059 |     |                 mstore(pos, length)
 11060 |     |                 let shift := sub(256, shl(3, length))
 11061 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11062 |     |             }
 11063 |     |             m0 := mload(0x00)
 11064 |     |             m1 := mload(0x20)
 11065 |     |             m2 := mload(0x40)
 11066 |     |             m3 := mload(0x60)
 11067 |     |             m4 := mload(0x80)
 11068 |     |             m5 := mload(0xa0)
 11069 |     |             m6 := mload(0xc0)
 11070 |     |             m7 := mload(0xe0)
 11071 |     |             m8 := mload(0x100)
 11072 |     |             // Selector of `log(string,address,bool,string)`.
 11073 |     |             mstore(0x00, 0x0454c079)
 11074 |     |             mstore(0x20, 0x80)
 11075 |     |             mstore(0x40, p1)
 11076 |     |             mstore(0x60, p2)
 11077 |     |             mstore(0x80, 0xc0)
 11078 |     |             writeString(0xa0, p0)
 11079 |     |             writeString(0xe0, p3)
 11080 |     |         }
 11081 |     |         _sendLogPayload(0x1c, 0x104);
 11082 |     |         /// @solidity memory-safe-assembly
 11083 |     |         assembly {
 11084 |     |             mstore(0x00, m0)
 11085 |     |             mstore(0x20, m1)
 11086 |     |             mstore(0x40, m2)
 11087 |     |             mstore(0x60, m3)
 11088 |     |             mstore(0x80, m4)
 11089 |     |             mstore(0xa0, m5)
 11090 |     |             mstore(0xc0, m6)
 11091 |     |             mstore(0xe0, m7)
 11092 |     |             mstore(0x100, m8)
 11093 |     |         }
 11094 |     |     }
 11095 |     | 
 11096 |     |     function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {
 11097 |     |         bytes32 m0;
 11098 |     |         bytes32 m1;
 11099 |     |         bytes32 m2;
 11100 |     |         bytes32 m3;
 11101 |     |         bytes32 m4;
 11102 |     |         bytes32 m5;
 11103 |     |         bytes32 m6;
 11104 |     |         /// @solidity memory-safe-assembly
 11105 |     |         assembly {
 11106 |     |             function writeString(pos, w) {
 11107 |     |                 let length := 0
 11108 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11109 |     |                 mstore(pos, length)
 11110 |     |                 let shift := sub(256, shl(3, length))
 11111 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11112 |     |             }
 11113 |     |             m0 := mload(0x00)
 11114 |     |             m1 := mload(0x20)
 11115 |     |             m2 := mload(0x40)
 11116 |     |             m3 := mload(0x60)
 11117 |     |             m4 := mload(0x80)
 11118 |     |             m5 := mload(0xa0)
 11119 |     |             m6 := mload(0xc0)
 11120 |     |             // Selector of `log(string,address,uint256,address)`.
 11121 |     |             mstore(0x00, 0x63fb8bc5)
 11122 |     |             mstore(0x20, 0x80)
 11123 |     |             mstore(0x40, p1)
 11124 |     |             mstore(0x60, p2)
 11125 |     |             mstore(0x80, p3)
 11126 |     |             writeString(0xa0, p0)
 11127 |     |         }
 11128 |     |         _sendLogPayload(0x1c, 0xc4);
 11129 |     |         /// @solidity memory-safe-assembly
 11130 |     |         assembly {
 11131 |     |             mstore(0x00, m0)
 11132 |     |             mstore(0x20, m1)
 11133 |     |             mstore(0x40, m2)
 11134 |     |             mstore(0x60, m3)
 11135 |     |             mstore(0x80, m4)
 11136 |     |             mstore(0xa0, m5)
 11137 |     |             mstore(0xc0, m6)
 11138 |     |         }
 11139 |     |     }
 11140 |     | 
 11141 |     |     function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {
 11142 |     |         bytes32 m0;
 11143 |     |         bytes32 m1;
 11144 |     |         bytes32 m2;
 11145 |     |         bytes32 m3;
 11146 |     |         bytes32 m4;
 11147 |     |         bytes32 m5;
 11148 |     |         bytes32 m6;
 11149 |     |         /// @solidity memory-safe-assembly
 11150 |     |         assembly {
 11151 |     |             function writeString(pos, w) {
 11152 |     |                 let length := 0
 11153 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11154 |     |                 mstore(pos, length)
 11155 |     |                 let shift := sub(256, shl(3, length))
 11156 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11157 |     |             }
 11158 |     |             m0 := mload(0x00)
 11159 |     |             m1 := mload(0x20)
 11160 |     |             m2 := mload(0x40)
 11161 |     |             m3 := mload(0x60)
 11162 |     |             m4 := mload(0x80)
 11163 |     |             m5 := mload(0xa0)
 11164 |     |             m6 := mload(0xc0)
 11165 |     |             // Selector of `log(string,address,uint256,bool)`.
 11166 |     |             mstore(0x00, 0xfc4845f0)
 11167 |     |             mstore(0x20, 0x80)
 11168 |     |             mstore(0x40, p1)
 11169 |     |             mstore(0x60, p2)
 11170 |     |             mstore(0x80, p3)
 11171 |     |             writeString(0xa0, p0)
 11172 |     |         }
 11173 |     |         _sendLogPayload(0x1c, 0xc4);
 11174 |     |         /// @solidity memory-safe-assembly
 11175 |     |         assembly {
 11176 |     |             mstore(0x00, m0)
 11177 |     |             mstore(0x20, m1)
 11178 |     |             mstore(0x40, m2)
 11179 |     |             mstore(0x60, m3)
 11180 |     |             mstore(0x80, m4)
 11181 |     |             mstore(0xa0, m5)
 11182 |     |             mstore(0xc0, m6)
 11183 |     |         }
 11184 |     |     }
 11185 |     | 
 11186 |     |     function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {
 11187 |     |         bytes32 m0;
 11188 |     |         bytes32 m1;
 11189 |     |         bytes32 m2;
 11190 |     |         bytes32 m3;
 11191 |     |         bytes32 m4;
 11192 |     |         bytes32 m5;
 11193 |     |         bytes32 m6;
 11194 |     |         /// @solidity memory-safe-assembly
 11195 |     |         assembly {
 11196 |     |             function writeString(pos, w) {
 11197 |     |                 let length := 0
 11198 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11199 |     |                 mstore(pos, length)
 11200 |     |                 let shift := sub(256, shl(3, length))
 11201 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11202 |     |             }
 11203 |     |             m0 := mload(0x00)
 11204 |     |             m1 := mload(0x20)
 11205 |     |             m2 := mload(0x40)
 11206 |     |             m3 := mload(0x60)
 11207 |     |             m4 := mload(0x80)
 11208 |     |             m5 := mload(0xa0)
 11209 |     |             m6 := mload(0xc0)
 11210 |     |             // Selector of `log(string,address,uint256,uint256)`.
 11211 |     |             mstore(0x00, 0xf8f51b1e)
 11212 |     |             mstore(0x20, 0x80)
 11213 |     |             mstore(0x40, p1)
 11214 |     |             mstore(0x60, p2)
 11215 |     |             mstore(0x80, p3)
 11216 |     |             writeString(0xa0, p0)
 11217 |     |         }
 11218 |     |         _sendLogPayload(0x1c, 0xc4);
 11219 |     |         /// @solidity memory-safe-assembly
 11220 |     |         assembly {
 11221 |     |             mstore(0x00, m0)
 11222 |     |             mstore(0x20, m1)
 11223 |     |             mstore(0x40, m2)
 11224 |     |             mstore(0x60, m3)
 11225 |     |             mstore(0x80, m4)
 11226 |     |             mstore(0xa0, m5)
 11227 |     |             mstore(0xc0, m6)
 11228 |     |         }
 11229 |     |     }
 11230 |     | 
 11231 |     |     function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {
 11232 |     |         bytes32 m0;
 11233 |     |         bytes32 m1;
 11234 |     |         bytes32 m2;
 11235 |     |         bytes32 m3;
 11236 |     |         bytes32 m4;
 11237 |     |         bytes32 m5;
 11238 |     |         bytes32 m6;
 11239 |     |         bytes32 m7;
 11240 |     |         bytes32 m8;
 11241 |     |         /// @solidity memory-safe-assembly
 11242 |     |         assembly {
 11243 |     |             function writeString(pos, w) {
 11244 |     |                 let length := 0
 11245 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11246 |     |                 mstore(pos, length)
 11247 |     |                 let shift := sub(256, shl(3, length))
 11248 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11249 |     |             }
 11250 |     |             m0 := mload(0x00)
 11251 |     |             m1 := mload(0x20)
 11252 |     |             m2 := mload(0x40)
 11253 |     |             m3 := mload(0x60)
 11254 |     |             m4 := mload(0x80)
 11255 |     |             m5 := mload(0xa0)
 11256 |     |             m6 := mload(0xc0)
 11257 |     |             m7 := mload(0xe0)
 11258 |     |             m8 := mload(0x100)
 11259 |     |             // Selector of `log(string,address,uint256,string)`.
 11260 |     |             mstore(0x00, 0x5a477632)
 11261 |     |             mstore(0x20, 0x80)
 11262 |     |             mstore(0x40, p1)
 11263 |     |             mstore(0x60, p2)
 11264 |     |             mstore(0x80, 0xc0)
 11265 |     |             writeString(0xa0, p0)
 11266 |     |             writeString(0xe0, p3)
 11267 |     |         }
 11268 |     |         _sendLogPayload(0x1c, 0x104);
 11269 |     |         /// @solidity memory-safe-assembly
 11270 |     |         assembly {
 11271 |     |             mstore(0x00, m0)
 11272 |     |             mstore(0x20, m1)
 11273 |     |             mstore(0x40, m2)
 11274 |     |             mstore(0x60, m3)
 11275 |     |             mstore(0x80, m4)
 11276 |     |             mstore(0xa0, m5)
 11277 |     |             mstore(0xc0, m6)
 11278 |     |             mstore(0xe0, m7)
 11279 |     |             mstore(0x100, m8)
 11280 |     |         }
 11281 |     |     }
 11282 |     | 
 11283 |     |     function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {
 11284 |     |         bytes32 m0;
 11285 |     |         bytes32 m1;
 11286 |     |         bytes32 m2;
 11287 |     |         bytes32 m3;
 11288 |     |         bytes32 m4;
 11289 |     |         bytes32 m5;
 11290 |     |         bytes32 m6;
 11291 |     |         bytes32 m7;
 11292 |     |         bytes32 m8;
 11293 |     |         /// @solidity memory-safe-assembly
 11294 |     |         assembly {
 11295 |     |             function writeString(pos, w) {
 11296 |     |                 let length := 0
 11297 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11298 |     |                 mstore(pos, length)
 11299 |     |                 let shift := sub(256, shl(3, length))
 11300 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11301 |     |             }
 11302 |     |             m0 := mload(0x00)
 11303 |     |             m1 := mload(0x20)
 11304 |     |             m2 := mload(0x40)
 11305 |     |             m3 := mload(0x60)
 11306 |     |             m4 := mload(0x80)
 11307 |     |             m5 := mload(0xa0)
 11308 |     |             m6 := mload(0xc0)
 11309 |     |             m7 := mload(0xe0)
 11310 |     |             m8 := mload(0x100)
 11311 |     |             // Selector of `log(string,address,string,address)`.
 11312 |     |             mstore(0x00, 0xaabc9a31)
 11313 |     |             mstore(0x20, 0x80)
 11314 |     |             mstore(0x40, p1)
 11315 |     |             mstore(0x60, 0xc0)
 11316 |     |             mstore(0x80, p3)
 11317 |     |             writeString(0xa0, p0)
 11318 |     |             writeString(0xe0, p2)
 11319 |     |         }
 11320 |     |         _sendLogPayload(0x1c, 0x104);
 11321 |     |         /// @solidity memory-safe-assembly
 11322 |     |         assembly {
 11323 |     |             mstore(0x00, m0)
 11324 |     |             mstore(0x20, m1)
 11325 |     |             mstore(0x40, m2)
 11326 |     |             mstore(0x60, m3)
 11327 |     |             mstore(0x80, m4)
 11328 |     |             mstore(0xa0, m5)
 11329 |     |             mstore(0xc0, m6)
 11330 |     |             mstore(0xe0, m7)
 11331 |     |             mstore(0x100, m8)
 11332 |     |         }
 11333 |     |     }
 11334 |     | 
 11335 |     |     function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {
 11336 |     |         bytes32 m0;
 11337 |     |         bytes32 m1;
 11338 |     |         bytes32 m2;
 11339 |     |         bytes32 m3;
 11340 |     |         bytes32 m4;
 11341 |     |         bytes32 m5;
 11342 |     |         bytes32 m6;
 11343 |     |         bytes32 m7;
 11344 |     |         bytes32 m8;
 11345 |     |         /// @solidity memory-safe-assembly
 11346 |     |         assembly {
 11347 |     |             function writeString(pos, w) {
 11348 |     |                 let length := 0
 11349 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11350 |     |                 mstore(pos, length)
 11351 |     |                 let shift := sub(256, shl(3, length))
 11352 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11353 |     |             }
 11354 |     |             m0 := mload(0x00)
 11355 |     |             m1 := mload(0x20)
 11356 |     |             m2 := mload(0x40)
 11357 |     |             m3 := mload(0x60)
 11358 |     |             m4 := mload(0x80)
 11359 |     |             m5 := mload(0xa0)
 11360 |     |             m6 := mload(0xc0)
 11361 |     |             m7 := mload(0xe0)
 11362 |     |             m8 := mload(0x100)
 11363 |     |             // Selector of `log(string,address,string,bool)`.
 11364 |     |             mstore(0x00, 0x5f15d28c)
 11365 |     |             mstore(0x20, 0x80)
 11366 |     |             mstore(0x40, p1)
 11367 |     |             mstore(0x60, 0xc0)
 11368 |     |             mstore(0x80, p3)
 11369 |     |             writeString(0xa0, p0)
 11370 |     |             writeString(0xe0, p2)
 11371 |     |         }
 11372 |     |         _sendLogPayload(0x1c, 0x104);
 11373 |     |         /// @solidity memory-safe-assembly
 11374 |     |         assembly {
 11375 |     |             mstore(0x00, m0)
 11376 |     |             mstore(0x20, m1)
 11377 |     |             mstore(0x40, m2)
 11378 |     |             mstore(0x60, m3)
 11379 |     |             mstore(0x80, m4)
 11380 |     |             mstore(0xa0, m5)
 11381 |     |             mstore(0xc0, m6)
 11382 |     |             mstore(0xe0, m7)
 11383 |     |             mstore(0x100, m8)
 11384 |     |         }
 11385 |     |     }
 11386 |     | 
 11387 |     |     function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {
 11388 |     |         bytes32 m0;
 11389 |     |         bytes32 m1;
 11390 |     |         bytes32 m2;
 11391 |     |         bytes32 m3;
 11392 |     |         bytes32 m4;
 11393 |     |         bytes32 m5;
 11394 |     |         bytes32 m6;
 11395 |     |         bytes32 m7;
 11396 |     |         bytes32 m8;
 11397 |     |         /// @solidity memory-safe-assembly
 11398 |     |         assembly {
 11399 |     |             function writeString(pos, w) {
 11400 |     |                 let length := 0
 11401 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11402 |     |                 mstore(pos, length)
 11403 |     |                 let shift := sub(256, shl(3, length))
 11404 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11405 |     |             }
 11406 |     |             m0 := mload(0x00)
 11407 |     |             m1 := mload(0x20)
 11408 |     |             m2 := mload(0x40)
 11409 |     |             m3 := mload(0x60)
 11410 |     |             m4 := mload(0x80)
 11411 |     |             m5 := mload(0xa0)
 11412 |     |             m6 := mload(0xc0)
 11413 |     |             m7 := mload(0xe0)
 11414 |     |             m8 := mload(0x100)
 11415 |     |             // Selector of `log(string,address,string,uint256)`.
 11416 |     |             mstore(0x00, 0x91d1112e)
 11417 |     |             mstore(0x20, 0x80)
 11418 |     |             mstore(0x40, p1)
 11419 |     |             mstore(0x60, 0xc0)
 11420 |     |             mstore(0x80, p3)
 11421 |     |             writeString(0xa0, p0)
 11422 |     |             writeString(0xe0, p2)
 11423 |     |         }
 11424 |     |         _sendLogPayload(0x1c, 0x104);
 11425 |     |         /// @solidity memory-safe-assembly
 11426 |     |         assembly {
 11427 |     |             mstore(0x00, m0)
 11428 |     |             mstore(0x20, m1)
 11429 |     |             mstore(0x40, m2)
 11430 |     |             mstore(0x60, m3)
 11431 |     |             mstore(0x80, m4)
 11432 |     |             mstore(0xa0, m5)
 11433 |     |             mstore(0xc0, m6)
 11434 |     |             mstore(0xe0, m7)
 11435 |     |             mstore(0x100, m8)
 11436 |     |         }
 11437 |     |     }
 11438 |     | 
 11439 |     |     function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {
 11440 |     |         bytes32 m0;
 11441 |     |         bytes32 m1;
 11442 |     |         bytes32 m2;
 11443 |     |         bytes32 m3;
 11444 |     |         bytes32 m4;
 11445 |     |         bytes32 m5;
 11446 |     |         bytes32 m6;
 11447 |     |         bytes32 m7;
 11448 |     |         bytes32 m8;
 11449 |     |         bytes32 m9;
 11450 |     |         bytes32 m10;
 11451 |     |         /// @solidity memory-safe-assembly
 11452 |     |         assembly {
 11453 |     |             function writeString(pos, w) {
 11454 |     |                 let length := 0
 11455 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11456 |     |                 mstore(pos, length)
 11457 |     |                 let shift := sub(256, shl(3, length))
 11458 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11459 |     |             }
 11460 |     |             m0 := mload(0x00)
 11461 |     |             m1 := mload(0x20)
 11462 |     |             m2 := mload(0x40)
 11463 |     |             m3 := mload(0x60)
 11464 |     |             m4 := mload(0x80)
 11465 |     |             m5 := mload(0xa0)
 11466 |     |             m6 := mload(0xc0)
 11467 |     |             m7 := mload(0xe0)
 11468 |     |             m8 := mload(0x100)
 11469 |     |             m9 := mload(0x120)
 11470 |     |             m10 := mload(0x140)
 11471 |     |             // Selector of `log(string,address,string,string)`.
 11472 |     |             mstore(0x00, 0x245986f2)
 11473 |     |             mstore(0x20, 0x80)
 11474 |     |             mstore(0x40, p1)
 11475 |     |             mstore(0x60, 0xc0)
 11476 |     |             mstore(0x80, 0x100)
 11477 |     |             writeString(0xa0, p0)
 11478 |     |             writeString(0xe0, p2)
 11479 |     |             writeString(0x120, p3)
 11480 |     |         }
 11481 |     |         _sendLogPayload(0x1c, 0x144);
 11482 |     |         /// @solidity memory-safe-assembly
 11483 |     |         assembly {
 11484 |     |             mstore(0x00, m0)
 11485 |     |             mstore(0x20, m1)
 11486 |     |             mstore(0x40, m2)
 11487 |     |             mstore(0x60, m3)
 11488 |     |             mstore(0x80, m4)
 11489 |     |             mstore(0xa0, m5)
 11490 |     |             mstore(0xc0, m6)
 11491 |     |             mstore(0xe0, m7)
 11492 |     |             mstore(0x100, m8)
 11493 |     |             mstore(0x120, m9)
 11494 |     |             mstore(0x140, m10)
 11495 |     |         }
 11496 |     |     }
 11497 |     | 
 11498 |     |     function log(bytes32 p0, bool p1, address p2, address p3) internal pure {
 11499 |     |         bytes32 m0;
 11500 |     |         bytes32 m1;
 11501 |     |         bytes32 m2;
 11502 |     |         bytes32 m3;
 11503 |     |         bytes32 m4;
 11504 |     |         bytes32 m5;
 11505 |     |         bytes32 m6;
 11506 |     |         /// @solidity memory-safe-assembly
 11507 |     |         assembly {
 11508 |     |             function writeString(pos, w) {
 11509 |     |                 let length := 0
 11510 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11511 |     |                 mstore(pos, length)
 11512 |     |                 let shift := sub(256, shl(3, length))
 11513 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11514 |     |             }
 11515 |     |             m0 := mload(0x00)
 11516 |     |             m1 := mload(0x20)
 11517 |     |             m2 := mload(0x40)
 11518 |     |             m3 := mload(0x60)
 11519 |     |             m4 := mload(0x80)
 11520 |     |             m5 := mload(0xa0)
 11521 |     |             m6 := mload(0xc0)
 11522 |     |             // Selector of `log(string,bool,address,address)`.
 11523 |     |             mstore(0x00, 0x33e9dd1d)
 11524 |     |             mstore(0x20, 0x80)
 11525 |     |             mstore(0x40, p1)
 11526 |     |             mstore(0x60, p2)
 11527 |     |             mstore(0x80, p3)
 11528 |     |             writeString(0xa0, p0)
 11529 |     |         }
 11530 |     |         _sendLogPayload(0x1c, 0xc4);
 11531 |     |         /// @solidity memory-safe-assembly
 11532 |     |         assembly {
 11533 |     |             mstore(0x00, m0)
 11534 |     |             mstore(0x20, m1)
 11535 |     |             mstore(0x40, m2)
 11536 |     |             mstore(0x60, m3)
 11537 |     |             mstore(0x80, m4)
 11538 |     |             mstore(0xa0, m5)
 11539 |     |             mstore(0xc0, m6)
 11540 |     |         }
 11541 |     |     }
 11542 |     | 
 11543 |     |     function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {
 11544 |     |         bytes32 m0;
 11545 |     |         bytes32 m1;
 11546 |     |         bytes32 m2;
 11547 |     |         bytes32 m3;
 11548 |     |         bytes32 m4;
 11549 |     |         bytes32 m5;
 11550 |     |         bytes32 m6;
 11551 |     |         /// @solidity memory-safe-assembly
 11552 |     |         assembly {
 11553 |     |             function writeString(pos, w) {
 11554 |     |                 let length := 0
 11555 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11556 |     |                 mstore(pos, length)
 11557 |     |                 let shift := sub(256, shl(3, length))
 11558 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11559 |     |             }
 11560 |     |             m0 := mload(0x00)
 11561 |     |             m1 := mload(0x20)
 11562 |     |             m2 := mload(0x40)
 11563 |     |             m3 := mload(0x60)
 11564 |     |             m4 := mload(0x80)
 11565 |     |             m5 := mload(0xa0)
 11566 |     |             m6 := mload(0xc0)
 11567 |     |             // Selector of `log(string,bool,address,bool)`.
 11568 |     |             mstore(0x00, 0x958c28c6)
 11569 |     |             mstore(0x20, 0x80)
 11570 |     |             mstore(0x40, p1)
 11571 |     |             mstore(0x60, p2)
 11572 |     |             mstore(0x80, p3)
 11573 |     |             writeString(0xa0, p0)
 11574 |     |         }
 11575 |     |         _sendLogPayload(0x1c, 0xc4);
 11576 |     |         /// @solidity memory-safe-assembly
 11577 |     |         assembly {
 11578 |     |             mstore(0x00, m0)
 11579 |     |             mstore(0x20, m1)
 11580 |     |             mstore(0x40, m2)
 11581 |     |             mstore(0x60, m3)
 11582 |     |             mstore(0x80, m4)
 11583 |     |             mstore(0xa0, m5)
 11584 |     |             mstore(0xc0, m6)
 11585 |     |         }
 11586 |     |     }
 11587 |     | 
 11588 |     |     function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {
 11589 |     |         bytes32 m0;
 11590 |     |         bytes32 m1;
 11591 |     |         bytes32 m2;
 11592 |     |         bytes32 m3;
 11593 |     |         bytes32 m4;
 11594 |     |         bytes32 m5;
 11595 |     |         bytes32 m6;
 11596 |     |         /// @solidity memory-safe-assembly
 11597 |     |         assembly {
 11598 |     |             function writeString(pos, w) {
 11599 |     |                 let length := 0
 11600 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11601 |     |                 mstore(pos, length)
 11602 |     |                 let shift := sub(256, shl(3, length))
 11603 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11604 |     |             }
 11605 |     |             m0 := mload(0x00)
 11606 |     |             m1 := mload(0x20)
 11607 |     |             m2 := mload(0x40)
 11608 |     |             m3 := mload(0x60)
 11609 |     |             m4 := mload(0x80)
 11610 |     |             m5 := mload(0xa0)
 11611 |     |             m6 := mload(0xc0)
 11612 |     |             // Selector of `log(string,bool,address,uint256)`.
 11613 |     |             mstore(0x00, 0x5d08bb05)
 11614 |     |             mstore(0x20, 0x80)
 11615 |     |             mstore(0x40, p1)
 11616 |     |             mstore(0x60, p2)
 11617 |     |             mstore(0x80, p3)
 11618 |     |             writeString(0xa0, p0)
 11619 |     |         }
 11620 |     |         _sendLogPayload(0x1c, 0xc4);
 11621 |     |         /// @solidity memory-safe-assembly
 11622 |     |         assembly {
 11623 |     |             mstore(0x00, m0)
 11624 |     |             mstore(0x20, m1)
 11625 |     |             mstore(0x40, m2)
 11626 |     |             mstore(0x60, m3)
 11627 |     |             mstore(0x80, m4)
 11628 |     |             mstore(0xa0, m5)
 11629 |     |             mstore(0xc0, m6)
 11630 |     |         }
 11631 |     |     }
 11632 |     | 
 11633 |     |     function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {
 11634 |     |         bytes32 m0;
 11635 |     |         bytes32 m1;
 11636 |     |         bytes32 m2;
 11637 |     |         bytes32 m3;
 11638 |     |         bytes32 m4;
 11639 |     |         bytes32 m5;
 11640 |     |         bytes32 m6;
 11641 |     |         bytes32 m7;
 11642 |     |         bytes32 m8;
 11643 |     |         /// @solidity memory-safe-assembly
 11644 |     |         assembly {
 11645 |     |             function writeString(pos, w) {
 11646 |     |                 let length := 0
 11647 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11648 |     |                 mstore(pos, length)
 11649 |     |                 let shift := sub(256, shl(3, length))
 11650 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11651 |     |             }
 11652 |     |             m0 := mload(0x00)
 11653 |     |             m1 := mload(0x20)
 11654 |     |             m2 := mload(0x40)
 11655 |     |             m3 := mload(0x60)
 11656 |     |             m4 := mload(0x80)
 11657 |     |             m5 := mload(0xa0)
 11658 |     |             m6 := mload(0xc0)
 11659 |     |             m7 := mload(0xe0)
 11660 |     |             m8 := mload(0x100)
 11661 |     |             // Selector of `log(string,bool,address,string)`.
 11662 |     |             mstore(0x00, 0x2d8e33a4)
 11663 |     |             mstore(0x20, 0x80)
 11664 |     |             mstore(0x40, p1)
 11665 |     |             mstore(0x60, p2)
 11666 |     |             mstore(0x80, 0xc0)
 11667 |     |             writeString(0xa0, p0)
 11668 |     |             writeString(0xe0, p3)
 11669 |     |         }
 11670 |     |         _sendLogPayload(0x1c, 0x104);
 11671 |     |         /// @solidity memory-safe-assembly
 11672 |     |         assembly {
 11673 |     |             mstore(0x00, m0)
 11674 |     |             mstore(0x20, m1)
 11675 |     |             mstore(0x40, m2)
 11676 |     |             mstore(0x60, m3)
 11677 |     |             mstore(0x80, m4)
 11678 |     |             mstore(0xa0, m5)
 11679 |     |             mstore(0xc0, m6)
 11680 |     |             mstore(0xe0, m7)
 11681 |     |             mstore(0x100, m8)
 11682 |     |         }
 11683 |     |     }
 11684 |     | 
 11685 |     |     function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {
 11686 |     |         bytes32 m0;
 11687 |     |         bytes32 m1;
 11688 |     |         bytes32 m2;
 11689 |     |         bytes32 m3;
 11690 |     |         bytes32 m4;
 11691 |     |         bytes32 m5;
 11692 |     |         bytes32 m6;
 11693 |     |         /// @solidity memory-safe-assembly
 11694 |     |         assembly {
 11695 |     |             function writeString(pos, w) {
 11696 |     |                 let length := 0
 11697 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11698 |     |                 mstore(pos, length)
 11699 |     |                 let shift := sub(256, shl(3, length))
 11700 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11701 |     |             }
 11702 |     |             m0 := mload(0x00)
 11703 |     |             m1 := mload(0x20)
 11704 |     |             m2 := mload(0x40)
 11705 |     |             m3 := mload(0x60)
 11706 |     |             m4 := mload(0x80)
 11707 |     |             m5 := mload(0xa0)
 11708 |     |             m6 := mload(0xc0)
 11709 |     |             // Selector of `log(string,bool,bool,address)`.
 11710 |     |             mstore(0x00, 0x7190a529)
 11711 |     |             mstore(0x20, 0x80)
 11712 |     |             mstore(0x40, p1)
 11713 |     |             mstore(0x60, p2)
 11714 |     |             mstore(0x80, p3)
 11715 |     |             writeString(0xa0, p0)
 11716 |     |         }
 11717 |     |         _sendLogPayload(0x1c, 0xc4);
 11718 |     |         /// @solidity memory-safe-assembly
 11719 |     |         assembly {
 11720 |     |             mstore(0x00, m0)
 11721 |     |             mstore(0x20, m1)
 11722 |     |             mstore(0x40, m2)
 11723 |     |             mstore(0x60, m3)
 11724 |     |             mstore(0x80, m4)
 11725 |     |             mstore(0xa0, m5)
 11726 |     |             mstore(0xc0, m6)
 11727 |     |         }
 11728 |     |     }
 11729 |     | 
 11730 |     |     function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {
 11731 |     |         bytes32 m0;
 11732 |     |         bytes32 m1;
 11733 |     |         bytes32 m2;
 11734 |     |         bytes32 m3;
 11735 |     |         bytes32 m4;
 11736 |     |         bytes32 m5;
 11737 |     |         bytes32 m6;
 11738 |     |         /// @solidity memory-safe-assembly
 11739 |     |         assembly {
 11740 |     |             function writeString(pos, w) {
 11741 |     |                 let length := 0
 11742 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11743 |     |                 mstore(pos, length)
 11744 |     |                 let shift := sub(256, shl(3, length))
 11745 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11746 |     |             }
 11747 |     |             m0 := mload(0x00)
 11748 |     |             m1 := mload(0x20)
 11749 |     |             m2 := mload(0x40)
 11750 |     |             m3 := mload(0x60)
 11751 |     |             m4 := mload(0x80)
 11752 |     |             m5 := mload(0xa0)
 11753 |     |             m6 := mload(0xc0)
 11754 |     |             // Selector of `log(string,bool,bool,bool)`.
 11755 |     |             mstore(0x00, 0x895af8c5)
 11756 |     |             mstore(0x20, 0x80)
 11757 |     |             mstore(0x40, p1)
 11758 |     |             mstore(0x60, p2)
 11759 |     |             mstore(0x80, p3)
 11760 |     |             writeString(0xa0, p0)
 11761 |     |         }
 11762 |     |         _sendLogPayload(0x1c, 0xc4);
 11763 |     |         /// @solidity memory-safe-assembly
 11764 |     |         assembly {
 11765 |     |             mstore(0x00, m0)
 11766 |     |             mstore(0x20, m1)
 11767 |     |             mstore(0x40, m2)
 11768 |     |             mstore(0x60, m3)
 11769 |     |             mstore(0x80, m4)
 11770 |     |             mstore(0xa0, m5)
 11771 |     |             mstore(0xc0, m6)
 11772 |     |         }
 11773 |     |     }
 11774 |     | 
 11775 |     |     function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {
 11776 |     |         bytes32 m0;
 11777 |     |         bytes32 m1;
 11778 |     |         bytes32 m2;
 11779 |     |         bytes32 m3;
 11780 |     |         bytes32 m4;
 11781 |     |         bytes32 m5;
 11782 |     |         bytes32 m6;
 11783 |     |         /// @solidity memory-safe-assembly
 11784 |     |         assembly {
 11785 |     |             function writeString(pos, w) {
 11786 |     |                 let length := 0
 11787 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11788 |     |                 mstore(pos, length)
 11789 |     |                 let shift := sub(256, shl(3, length))
 11790 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11791 |     |             }
 11792 |     |             m0 := mload(0x00)
 11793 |     |             m1 := mload(0x20)
 11794 |     |             m2 := mload(0x40)
 11795 |     |             m3 := mload(0x60)
 11796 |     |             m4 := mload(0x80)
 11797 |     |             m5 := mload(0xa0)
 11798 |     |             m6 := mload(0xc0)
 11799 |     |             // Selector of `log(string,bool,bool,uint256)`.
 11800 |     |             mstore(0x00, 0x8e3f78a9)
 11801 |     |             mstore(0x20, 0x80)
 11802 |     |             mstore(0x40, p1)
 11803 |     |             mstore(0x60, p2)
 11804 |     |             mstore(0x80, p3)
 11805 |     |             writeString(0xa0, p0)
 11806 |     |         }
 11807 |     |         _sendLogPayload(0x1c, 0xc4);
 11808 |     |         /// @solidity memory-safe-assembly
 11809 |     |         assembly {
 11810 |     |             mstore(0x00, m0)
 11811 |     |             mstore(0x20, m1)
 11812 |     |             mstore(0x40, m2)
 11813 |     |             mstore(0x60, m3)
 11814 |     |             mstore(0x80, m4)
 11815 |     |             mstore(0xa0, m5)
 11816 |     |             mstore(0xc0, m6)
 11817 |     |         }
 11818 |     |     }
 11819 |     | 
 11820 |     |     function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {
 11821 |     |         bytes32 m0;
 11822 |     |         bytes32 m1;
 11823 |     |         bytes32 m2;
 11824 |     |         bytes32 m3;
 11825 |     |         bytes32 m4;
 11826 |     |         bytes32 m5;
 11827 |     |         bytes32 m6;
 11828 |     |         bytes32 m7;
 11829 |     |         bytes32 m8;
 11830 |     |         /// @solidity memory-safe-assembly
 11831 |     |         assembly {
 11832 |     |             function writeString(pos, w) {
 11833 |     |                 let length := 0
 11834 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11835 |     |                 mstore(pos, length)
 11836 |     |                 let shift := sub(256, shl(3, length))
 11837 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11838 |     |             }
 11839 |     |             m0 := mload(0x00)
 11840 |     |             m1 := mload(0x20)
 11841 |     |             m2 := mload(0x40)
 11842 |     |             m3 := mload(0x60)
 11843 |     |             m4 := mload(0x80)
 11844 |     |             m5 := mload(0xa0)
 11845 |     |             m6 := mload(0xc0)
 11846 |     |             m7 := mload(0xe0)
 11847 |     |             m8 := mload(0x100)
 11848 |     |             // Selector of `log(string,bool,bool,string)`.
 11849 |     |             mstore(0x00, 0x9d22d5dd)
 11850 |     |             mstore(0x20, 0x80)
 11851 |     |             mstore(0x40, p1)
 11852 |     |             mstore(0x60, p2)
 11853 |     |             mstore(0x80, 0xc0)
 11854 |     |             writeString(0xa0, p0)
 11855 |     |             writeString(0xe0, p3)
 11856 |     |         }
 11857 |     |         _sendLogPayload(0x1c, 0x104);
 11858 |     |         /// @solidity memory-safe-assembly
 11859 |     |         assembly {
 11860 |     |             mstore(0x00, m0)
 11861 |     |             mstore(0x20, m1)
 11862 |     |             mstore(0x40, m2)
 11863 |     |             mstore(0x60, m3)
 11864 |     |             mstore(0x80, m4)
 11865 |     |             mstore(0xa0, m5)
 11866 |     |             mstore(0xc0, m6)
 11867 |     |             mstore(0xe0, m7)
 11868 |     |             mstore(0x100, m8)
 11869 |     |         }
 11870 |     |     }
 11871 |     | 
 11872 |     |     function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {
 11873 |     |         bytes32 m0;
 11874 |     |         bytes32 m1;
 11875 |     |         bytes32 m2;
 11876 |     |         bytes32 m3;
 11877 |     |         bytes32 m4;
 11878 |     |         bytes32 m5;
 11879 |     |         bytes32 m6;
 11880 |     |         /// @solidity memory-safe-assembly
 11881 |     |         assembly {
 11882 |     |             function writeString(pos, w) {
 11883 |     |                 let length := 0
 11884 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11885 |     |                 mstore(pos, length)
 11886 |     |                 let shift := sub(256, shl(3, length))
 11887 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11888 |     |             }
 11889 |     |             m0 := mload(0x00)
 11890 |     |             m1 := mload(0x20)
 11891 |     |             m2 := mload(0x40)
 11892 |     |             m3 := mload(0x60)
 11893 |     |             m4 := mload(0x80)
 11894 |     |             m5 := mload(0xa0)
 11895 |     |             m6 := mload(0xc0)
 11896 |     |             // Selector of `log(string,bool,uint256,address)`.
 11897 |     |             mstore(0x00, 0x935e09bf)
 11898 |     |             mstore(0x20, 0x80)
 11899 |     |             mstore(0x40, p1)
 11900 |     |             mstore(0x60, p2)
 11901 |     |             mstore(0x80, p3)
 11902 |     |             writeString(0xa0, p0)
 11903 |     |         }
 11904 |     |         _sendLogPayload(0x1c, 0xc4);
 11905 |     |         /// @solidity memory-safe-assembly
 11906 |     |         assembly {
 11907 |     |             mstore(0x00, m0)
 11908 |     |             mstore(0x20, m1)
 11909 |     |             mstore(0x40, m2)
 11910 |     |             mstore(0x60, m3)
 11911 |     |             mstore(0x80, m4)
 11912 |     |             mstore(0xa0, m5)
 11913 |     |             mstore(0xc0, m6)
 11914 |     |         }
 11915 |     |     }
 11916 |     | 
 11917 |     |     function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {
 11918 |     |         bytes32 m0;
 11919 |     |         bytes32 m1;
 11920 |     |         bytes32 m2;
 11921 |     |         bytes32 m3;
 11922 |     |         bytes32 m4;
 11923 |     |         bytes32 m5;
 11924 |     |         bytes32 m6;
 11925 |     |         /// @solidity memory-safe-assembly
 11926 |     |         assembly {
 11927 |     |             function writeString(pos, w) {
 11928 |     |                 let length := 0
 11929 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11930 |     |                 mstore(pos, length)
 11931 |     |                 let shift := sub(256, shl(3, length))
 11932 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11933 |     |             }
 11934 |     |             m0 := mload(0x00)
 11935 |     |             m1 := mload(0x20)
 11936 |     |             m2 := mload(0x40)
 11937 |     |             m3 := mload(0x60)
 11938 |     |             m4 := mload(0x80)
 11939 |     |             m5 := mload(0xa0)
 11940 |     |             m6 := mload(0xc0)
 11941 |     |             // Selector of `log(string,bool,uint256,bool)`.
 11942 |     |             mstore(0x00, 0x8af7cf8a)
 11943 |     |             mstore(0x20, 0x80)
 11944 |     |             mstore(0x40, p1)
 11945 |     |             mstore(0x60, p2)
 11946 |     |             mstore(0x80, p3)
 11947 |     |             writeString(0xa0, p0)
 11948 |     |         }
 11949 |     |         _sendLogPayload(0x1c, 0xc4);
 11950 |     |         /// @solidity memory-safe-assembly
 11951 |     |         assembly {
 11952 |     |             mstore(0x00, m0)
 11953 |     |             mstore(0x20, m1)
 11954 |     |             mstore(0x40, m2)
 11955 |     |             mstore(0x60, m3)
 11956 |     |             mstore(0x80, m4)
 11957 |     |             mstore(0xa0, m5)
 11958 |     |             mstore(0xc0, m6)
 11959 |     |         }
 11960 |     |     }
 11961 |     | 
 11962 |     |     function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {
 11963 |     |         bytes32 m0;
 11964 |     |         bytes32 m1;
 11965 |     |         bytes32 m2;
 11966 |     |         bytes32 m3;
 11967 |     |         bytes32 m4;
 11968 |     |         bytes32 m5;
 11969 |     |         bytes32 m6;
 11970 |     |         /// @solidity memory-safe-assembly
 11971 |     |         assembly {
 11972 |     |             function writeString(pos, w) {
 11973 |     |                 let length := 0
 11974 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11975 |     |                 mstore(pos, length)
 11976 |     |                 let shift := sub(256, shl(3, length))
 11977 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11978 |     |             }
 11979 |     |             m0 := mload(0x00)
 11980 |     |             m1 := mload(0x20)
 11981 |     |             m2 := mload(0x40)
 11982 |     |             m3 := mload(0x60)
 11983 |     |             m4 := mload(0x80)
 11984 |     |             m5 := mload(0xa0)
 11985 |     |             m6 := mload(0xc0)
 11986 |     |             // Selector of `log(string,bool,uint256,uint256)`.
 11987 |     |             mstore(0x00, 0x64b5bb67)
 11988 |     |             mstore(0x20, 0x80)
 11989 |     |             mstore(0x40, p1)
 11990 |     |             mstore(0x60, p2)
 11991 |     |             mstore(0x80, p3)
 11992 |     |             writeString(0xa0, p0)
 11993 |     |         }
 11994 |     |         _sendLogPayload(0x1c, 0xc4);
 11995 |     |         /// @solidity memory-safe-assembly
 11996 |     |         assembly {
 11997 |     |             mstore(0x00, m0)
 11998 |     |             mstore(0x20, m1)
 11999 |     |             mstore(0x40, m2)
 12000 |     |             mstore(0x60, m3)
 12001 |     |             mstore(0x80, m4)
 12002 |     |             mstore(0xa0, m5)
 12003 |     |             mstore(0xc0, m6)
 12004 |     |         }
 12005 |     |     }
 12006 |     | 
 12007 |     |     function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {
 12008 |     |         bytes32 m0;
 12009 |     |         bytes32 m1;
 12010 |     |         bytes32 m2;
 12011 |     |         bytes32 m3;
 12012 |     |         bytes32 m4;
 12013 |     |         bytes32 m5;
 12014 |     |         bytes32 m6;
 12015 |     |         bytes32 m7;
 12016 |     |         bytes32 m8;
 12017 |     |         /// @solidity memory-safe-assembly
 12018 |     |         assembly {
 12019 |     |             function writeString(pos, w) {
 12020 |     |                 let length := 0
 12021 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12022 |     |                 mstore(pos, length)
 12023 |     |                 let shift := sub(256, shl(3, length))
 12024 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12025 |     |             }
 12026 |     |             m0 := mload(0x00)
 12027 |     |             m1 := mload(0x20)
 12028 |     |             m2 := mload(0x40)
 12029 |     |             m3 := mload(0x60)
 12030 |     |             m4 := mload(0x80)
 12031 |     |             m5 := mload(0xa0)
 12032 |     |             m6 := mload(0xc0)
 12033 |     |             m7 := mload(0xe0)
 12034 |     |             m8 := mload(0x100)
 12035 |     |             // Selector of `log(string,bool,uint256,string)`.
 12036 |     |             mstore(0x00, 0x742d6ee7)
 12037 |     |             mstore(0x20, 0x80)
 12038 |     |             mstore(0x40, p1)
 12039 |     |             mstore(0x60, p2)
 12040 |     |             mstore(0x80, 0xc0)
 12041 |     |             writeString(0xa0, p0)
 12042 |     |             writeString(0xe0, p3)
 12043 |     |         }
 12044 |     |         _sendLogPayload(0x1c, 0x104);
 12045 |     |         /// @solidity memory-safe-assembly
 12046 |     |         assembly {
 12047 |     |             mstore(0x00, m0)
 12048 |     |             mstore(0x20, m1)
 12049 |     |             mstore(0x40, m2)
 12050 |     |             mstore(0x60, m3)
 12051 |     |             mstore(0x80, m4)
 12052 |     |             mstore(0xa0, m5)
 12053 |     |             mstore(0xc0, m6)
 12054 |     |             mstore(0xe0, m7)
 12055 |     |             mstore(0x100, m8)
 12056 |     |         }
 12057 |     |     }
 12058 |     | 
 12059 |     |     function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {
 12060 |     |         bytes32 m0;
 12061 |     |         bytes32 m1;
 12062 |     |         bytes32 m2;
 12063 |     |         bytes32 m3;
 12064 |     |         bytes32 m4;
 12065 |     |         bytes32 m5;
 12066 |     |         bytes32 m6;
 12067 |     |         bytes32 m7;
 12068 |     |         bytes32 m8;
 12069 |     |         /// @solidity memory-safe-assembly
 12070 |     |         assembly {
 12071 |     |             function writeString(pos, w) {
 12072 |     |                 let length := 0
 12073 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12074 |     |                 mstore(pos, length)
 12075 |     |                 let shift := sub(256, shl(3, length))
 12076 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12077 |     |             }
 12078 |     |             m0 := mload(0x00)
 12079 |     |             m1 := mload(0x20)
 12080 |     |             m2 := mload(0x40)
 12081 |     |             m3 := mload(0x60)
 12082 |     |             m4 := mload(0x80)
 12083 |     |             m5 := mload(0xa0)
 12084 |     |             m6 := mload(0xc0)
 12085 |     |             m7 := mload(0xe0)
 12086 |     |             m8 := mload(0x100)
 12087 |     |             // Selector of `log(string,bool,string,address)`.
 12088 |     |             mstore(0x00, 0xe0625b29)
 12089 |     |             mstore(0x20, 0x80)
 12090 |     |             mstore(0x40, p1)
 12091 |     |             mstore(0x60, 0xc0)
 12092 |     |             mstore(0x80, p3)
 12093 |     |             writeString(0xa0, p0)
 12094 |     |             writeString(0xe0, p2)
 12095 |     |         }
 12096 |     |         _sendLogPayload(0x1c, 0x104);
 12097 |     |         /// @solidity memory-safe-assembly
 12098 |     |         assembly {
 12099 |     |             mstore(0x00, m0)
 12100 |     |             mstore(0x20, m1)
 12101 |     |             mstore(0x40, m2)
 12102 |     |             mstore(0x60, m3)
 12103 |     |             mstore(0x80, m4)
 12104 |     |             mstore(0xa0, m5)
 12105 |     |             mstore(0xc0, m6)
 12106 |     |             mstore(0xe0, m7)
 12107 |     |             mstore(0x100, m8)
 12108 |     |         }
 12109 |     |     }
 12110 |     | 
 12111 |     |     function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {
 12112 |     |         bytes32 m0;
 12113 |     |         bytes32 m1;
 12114 |     |         bytes32 m2;
 12115 |     |         bytes32 m3;
 12116 |     |         bytes32 m4;
 12117 |     |         bytes32 m5;
 12118 |     |         bytes32 m6;
 12119 |     |         bytes32 m7;
 12120 |     |         bytes32 m8;
 12121 |     |         /// @solidity memory-safe-assembly
 12122 |     |         assembly {
 12123 |     |             function writeString(pos, w) {
 12124 |     |                 let length := 0
 12125 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12126 |     |                 mstore(pos, length)
 12127 |     |                 let shift := sub(256, shl(3, length))
 12128 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12129 |     |             }
 12130 |     |             m0 := mload(0x00)
 12131 |     |             m1 := mload(0x20)
 12132 |     |             m2 := mload(0x40)
 12133 |     |             m3 := mload(0x60)
 12134 |     |             m4 := mload(0x80)
 12135 |     |             m5 := mload(0xa0)
 12136 |     |             m6 := mload(0xc0)
 12137 |     |             m7 := mload(0xe0)
 12138 |     |             m8 := mload(0x100)
 12139 |     |             // Selector of `log(string,bool,string,bool)`.
 12140 |     |             mstore(0x00, 0x3f8a701d)
 12141 |     |             mstore(0x20, 0x80)
 12142 |     |             mstore(0x40, p1)
 12143 |     |             mstore(0x60, 0xc0)
 12144 |     |             mstore(0x80, p3)
 12145 |     |             writeString(0xa0, p0)
 12146 |     |             writeString(0xe0, p2)
 12147 |     |         }
 12148 |     |         _sendLogPayload(0x1c, 0x104);
 12149 |     |         /// @solidity memory-safe-assembly
 12150 |     |         assembly {
 12151 |     |             mstore(0x00, m0)
 12152 |     |             mstore(0x20, m1)
 12153 |     |             mstore(0x40, m2)
 12154 |     |             mstore(0x60, m3)
 12155 |     |             mstore(0x80, m4)
 12156 |     |             mstore(0xa0, m5)
 12157 |     |             mstore(0xc0, m6)
 12158 |     |             mstore(0xe0, m7)
 12159 |     |             mstore(0x100, m8)
 12160 |     |         }
 12161 |     |     }
 12162 |     | 
 12163 |     |     function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {
 12164 |     |         bytes32 m0;
 12165 |     |         bytes32 m1;
 12166 |     |         bytes32 m2;
 12167 |     |         bytes32 m3;
 12168 |     |         bytes32 m4;
 12169 |     |         bytes32 m5;
 12170 |     |         bytes32 m6;
 12171 |     |         bytes32 m7;
 12172 |     |         bytes32 m8;
 12173 |     |         /// @solidity memory-safe-assembly
 12174 |     |         assembly {
 12175 |     |             function writeString(pos, w) {
 12176 |     |                 let length := 0
 12177 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12178 |     |                 mstore(pos, length)
 12179 |     |                 let shift := sub(256, shl(3, length))
 12180 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12181 |     |             }
 12182 |     |             m0 := mload(0x00)
 12183 |     |             m1 := mload(0x20)
 12184 |     |             m2 := mload(0x40)
 12185 |     |             m3 := mload(0x60)
 12186 |     |             m4 := mload(0x80)
 12187 |     |             m5 := mload(0xa0)
 12188 |     |             m6 := mload(0xc0)
 12189 |     |             m7 := mload(0xe0)
 12190 |     |             m8 := mload(0x100)
 12191 |     |             // Selector of `log(string,bool,string,uint256)`.
 12192 |     |             mstore(0x00, 0x24f91465)
 12193 |     |             mstore(0x20, 0x80)
 12194 |     |             mstore(0x40, p1)
 12195 |     |             mstore(0x60, 0xc0)
 12196 |     |             mstore(0x80, p3)
 12197 |     |             writeString(0xa0, p0)
 12198 |     |             writeString(0xe0, p2)
 12199 |     |         }
 12200 |     |         _sendLogPayload(0x1c, 0x104);
 12201 |     |         /// @solidity memory-safe-assembly
 12202 |     |         assembly {
 12203 |     |             mstore(0x00, m0)
 12204 |     |             mstore(0x20, m1)
 12205 |     |             mstore(0x40, m2)
 12206 |     |             mstore(0x60, m3)
 12207 |     |             mstore(0x80, m4)
 12208 |     |             mstore(0xa0, m5)
 12209 |     |             mstore(0xc0, m6)
 12210 |     |             mstore(0xe0, m7)
 12211 |     |             mstore(0x100, m8)
 12212 |     |         }
 12213 |     |     }
 12214 |     | 
 12215 |     |     function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
 12216 |     |         bytes32 m0;
 12217 |     |         bytes32 m1;
 12218 |     |         bytes32 m2;
 12219 |     |         bytes32 m3;
 12220 |     |         bytes32 m4;
 12221 |     |         bytes32 m5;
 12222 |     |         bytes32 m6;
 12223 |     |         bytes32 m7;
 12224 |     |         bytes32 m8;
 12225 |     |         bytes32 m9;
 12226 |     |         bytes32 m10;
 12227 |     |         /// @solidity memory-safe-assembly
 12228 |     |         assembly {
 12229 |     |             function writeString(pos, w) {
 12230 |     |                 let length := 0
 12231 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12232 |     |                 mstore(pos, length)
 12233 |     |                 let shift := sub(256, shl(3, length))
 12234 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12235 |     |             }
 12236 |     |             m0 := mload(0x00)
 12237 |     |             m1 := mload(0x20)
 12238 |     |             m2 := mload(0x40)
 12239 |     |             m3 := mload(0x60)
 12240 |     |             m4 := mload(0x80)
 12241 |     |             m5 := mload(0xa0)
 12242 |     |             m6 := mload(0xc0)
 12243 |     |             m7 := mload(0xe0)
 12244 |     |             m8 := mload(0x100)
 12245 |     |             m9 := mload(0x120)
 12246 |     |             m10 := mload(0x140)
 12247 |     |             // Selector of `log(string,bool,string,string)`.
 12248 |     |             mstore(0x00, 0xa826caeb)
 12249 |     |             mstore(0x20, 0x80)
 12250 |     |             mstore(0x40, p1)
 12251 |     |             mstore(0x60, 0xc0)
 12252 |     |             mstore(0x80, 0x100)
 12253 |     |             writeString(0xa0, p0)
 12254 |     |             writeString(0xe0, p2)
 12255 |     |             writeString(0x120, p3)
 12256 |     |         }
 12257 |     |         _sendLogPayload(0x1c, 0x144);
 12258 |     |         /// @solidity memory-safe-assembly
 12259 |     |         assembly {
 12260 |     |             mstore(0x00, m0)
 12261 |     |             mstore(0x20, m1)
 12262 |     |             mstore(0x40, m2)
 12263 |     |             mstore(0x60, m3)
 12264 |     |             mstore(0x80, m4)
 12265 |     |             mstore(0xa0, m5)
 12266 |     |             mstore(0xc0, m6)
 12267 |     |             mstore(0xe0, m7)
 12268 |     |             mstore(0x100, m8)
 12269 |     |             mstore(0x120, m9)
 12270 |     |             mstore(0x140, m10)
 12271 |     |         }
 12272 |     |     }
 12273 |     | 
 12274 |     |     function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {
 12275 |     |         bytes32 m0;
 12276 |     |         bytes32 m1;
 12277 |     |         bytes32 m2;
 12278 |     |         bytes32 m3;
 12279 |     |         bytes32 m4;
 12280 |     |         bytes32 m5;
 12281 |     |         bytes32 m6;
 12282 |     |         /// @solidity memory-safe-assembly
 12283 |     |         assembly {
 12284 |     |             function writeString(pos, w) {
 12285 |     |                 let length := 0
 12286 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12287 |     |                 mstore(pos, length)
 12288 |     |                 let shift := sub(256, shl(3, length))
 12289 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12290 |     |             }
 12291 |     |             m0 := mload(0x00)
 12292 |     |             m1 := mload(0x20)
 12293 |     |             m2 := mload(0x40)
 12294 |     |             m3 := mload(0x60)
 12295 |     |             m4 := mload(0x80)
 12296 |     |             m5 := mload(0xa0)
 12297 |     |             m6 := mload(0xc0)
 12298 |     |             // Selector of `log(string,uint256,address,address)`.
 12299 |     |             mstore(0x00, 0x5ea2b7ae)
 12300 |     |             mstore(0x20, 0x80)
 12301 |     |             mstore(0x40, p1)
 12302 |     |             mstore(0x60, p2)
 12303 |     |             mstore(0x80, p3)
 12304 |     |             writeString(0xa0, p0)
 12305 |     |         }
 12306 |     |         _sendLogPayload(0x1c, 0xc4);
 12307 |     |         /// @solidity memory-safe-assembly
 12308 |     |         assembly {
 12309 |     |             mstore(0x00, m0)
 12310 |     |             mstore(0x20, m1)
 12311 |     |             mstore(0x40, m2)
 12312 |     |             mstore(0x60, m3)
 12313 |     |             mstore(0x80, m4)
 12314 |     |             mstore(0xa0, m5)
 12315 |     |             mstore(0xc0, m6)
 12316 |     |         }
 12317 |     |     }
 12318 |     | 
 12319 |     |     function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {
 12320 |     |         bytes32 m0;
 12321 |     |         bytes32 m1;
 12322 |     |         bytes32 m2;
 12323 |     |         bytes32 m3;
 12324 |     |         bytes32 m4;
 12325 |     |         bytes32 m5;
 12326 |     |         bytes32 m6;
 12327 |     |         /// @solidity memory-safe-assembly
 12328 |     |         assembly {
 12329 |     |             function writeString(pos, w) {
 12330 |     |                 let length := 0
 12331 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12332 |     |                 mstore(pos, length)
 12333 |     |                 let shift := sub(256, shl(3, length))
 12334 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12335 |     |             }
 12336 |     |             m0 := mload(0x00)
 12337 |     |             m1 := mload(0x20)
 12338 |     |             m2 := mload(0x40)
 12339 |     |             m3 := mload(0x60)
 12340 |     |             m4 := mload(0x80)
 12341 |     |             m5 := mload(0xa0)
 12342 |     |             m6 := mload(0xc0)
 12343 |     |             // Selector of `log(string,uint256,address,bool)`.
 12344 |     |             mstore(0x00, 0x82112a42)
 12345 |     |             mstore(0x20, 0x80)
 12346 |     |             mstore(0x40, p1)
 12347 |     |             mstore(0x60, p2)
 12348 |     |             mstore(0x80, p3)
 12349 |     |             writeString(0xa0, p0)
 12350 |     |         }
 12351 |     |         _sendLogPayload(0x1c, 0xc4);
 12352 |     |         /// @solidity memory-safe-assembly
 12353 |     |         assembly {
 12354 |     |             mstore(0x00, m0)
 12355 |     |             mstore(0x20, m1)
 12356 |     |             mstore(0x40, m2)
 12357 |     |             mstore(0x60, m3)
 12358 |     |             mstore(0x80, m4)
 12359 |     |             mstore(0xa0, m5)
 12360 |     |             mstore(0xc0, m6)
 12361 |     |         }
 12362 |     |     }
 12363 |     | 
 12364 |     |     function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {
 12365 |     |         bytes32 m0;
 12366 |     |         bytes32 m1;
 12367 |     |         bytes32 m2;
 12368 |     |         bytes32 m3;
 12369 |     |         bytes32 m4;
 12370 |     |         bytes32 m5;
 12371 |     |         bytes32 m6;
 12372 |     |         /// @solidity memory-safe-assembly
 12373 |     |         assembly {
 12374 |     |             function writeString(pos, w) {
 12375 |     |                 let length := 0
 12376 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12377 |     |                 mstore(pos, length)
 12378 |     |                 let shift := sub(256, shl(3, length))
 12379 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12380 |     |             }
 12381 |     |             m0 := mload(0x00)
 12382 |     |             m1 := mload(0x20)
 12383 |     |             m2 := mload(0x40)
 12384 |     |             m3 := mload(0x60)
 12385 |     |             m4 := mload(0x80)
 12386 |     |             m5 := mload(0xa0)
 12387 |     |             m6 := mload(0xc0)
 12388 |     |             // Selector of `log(string,uint256,address,uint256)`.
 12389 |     |             mstore(0x00, 0x4f04fdc6)
 12390 |     |             mstore(0x20, 0x80)
 12391 |     |             mstore(0x40, p1)
 12392 |     |             mstore(0x60, p2)
 12393 |     |             mstore(0x80, p3)
 12394 |     |             writeString(0xa0, p0)
 12395 |     |         }
 12396 |     |         _sendLogPayload(0x1c, 0xc4);
 12397 |     |         /// @solidity memory-safe-assembly
 12398 |     |         assembly {
 12399 |     |             mstore(0x00, m0)
 12400 |     |             mstore(0x20, m1)
 12401 |     |             mstore(0x40, m2)
 12402 |     |             mstore(0x60, m3)
 12403 |     |             mstore(0x80, m4)
 12404 |     |             mstore(0xa0, m5)
 12405 |     |             mstore(0xc0, m6)
 12406 |     |         }
 12407 |     |     }
 12408 |     | 
 12409 |     |     function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {
 12410 |     |         bytes32 m0;
 12411 |     |         bytes32 m1;
 12412 |     |         bytes32 m2;
 12413 |     |         bytes32 m3;
 12414 |     |         bytes32 m4;
 12415 |     |         bytes32 m5;
 12416 |     |         bytes32 m6;
 12417 |     |         bytes32 m7;
 12418 |     |         bytes32 m8;
 12419 |     |         /// @solidity memory-safe-assembly
 12420 |     |         assembly {
 12421 |     |             function writeString(pos, w) {
 12422 |     |                 let length := 0
 12423 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12424 |     |                 mstore(pos, length)
 12425 |     |                 let shift := sub(256, shl(3, length))
 12426 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12427 |     |             }
 12428 |     |             m0 := mload(0x00)
 12429 |     |             m1 := mload(0x20)
 12430 |     |             m2 := mload(0x40)
 12431 |     |             m3 := mload(0x60)
 12432 |     |             m4 := mload(0x80)
 12433 |     |             m5 := mload(0xa0)
 12434 |     |             m6 := mload(0xc0)
 12435 |     |             m7 := mload(0xe0)
 12436 |     |             m8 := mload(0x100)
 12437 |     |             // Selector of `log(string,uint256,address,string)`.
 12438 |     |             mstore(0x00, 0x9ffb2f93)
 12439 |     |             mstore(0x20, 0x80)
 12440 |     |             mstore(0x40, p1)
 12441 |     |             mstore(0x60, p2)
 12442 |     |             mstore(0x80, 0xc0)
 12443 |     |             writeString(0xa0, p0)
 12444 |     |             writeString(0xe0, p3)
 12445 |     |         }
 12446 |     |         _sendLogPayload(0x1c, 0x104);
 12447 |     |         /// @solidity memory-safe-assembly
 12448 |     |         assembly {
 12449 |     |             mstore(0x00, m0)
 12450 |     |             mstore(0x20, m1)
 12451 |     |             mstore(0x40, m2)
 12452 |     |             mstore(0x60, m3)
 12453 |     |             mstore(0x80, m4)
 12454 |     |             mstore(0xa0, m5)
 12455 |     |             mstore(0xc0, m6)
 12456 |     |             mstore(0xe0, m7)
 12457 |     |             mstore(0x100, m8)
 12458 |     |         }
 12459 |     |     }
 12460 |     | 
 12461 |     |     function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {
 12462 |     |         bytes32 m0;
 12463 |     |         bytes32 m1;
 12464 |     |         bytes32 m2;
 12465 |     |         bytes32 m3;
 12466 |     |         bytes32 m4;
 12467 |     |         bytes32 m5;
 12468 |     |         bytes32 m6;
 12469 |     |         /// @solidity memory-safe-assembly
 12470 |     |         assembly {
 12471 |     |             function writeString(pos, w) {
 12472 |     |                 let length := 0
 12473 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12474 |     |                 mstore(pos, length)
 12475 |     |                 let shift := sub(256, shl(3, length))
 12476 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12477 |     |             }
 12478 |     |             m0 := mload(0x00)
 12479 |     |             m1 := mload(0x20)
 12480 |     |             m2 := mload(0x40)
 12481 |     |             m3 := mload(0x60)
 12482 |     |             m4 := mload(0x80)
 12483 |     |             m5 := mload(0xa0)
 12484 |     |             m6 := mload(0xc0)
 12485 |     |             // Selector of `log(string,uint256,bool,address)`.
 12486 |     |             mstore(0x00, 0xe0e95b98)
 12487 |     |             mstore(0x20, 0x80)
 12488 |     |             mstore(0x40, p1)
 12489 |     |             mstore(0x60, p2)
 12490 |     |             mstore(0x80, p3)
 12491 |     |             writeString(0xa0, p0)
 12492 |     |         }
 12493 |     |         _sendLogPayload(0x1c, 0xc4);
 12494 |     |         /// @solidity memory-safe-assembly
 12495 |     |         assembly {
 12496 |     |             mstore(0x00, m0)
 12497 |     |             mstore(0x20, m1)
 12498 |     |             mstore(0x40, m2)
 12499 |     |             mstore(0x60, m3)
 12500 |     |             mstore(0x80, m4)
 12501 |     |             mstore(0xa0, m5)
 12502 |     |             mstore(0xc0, m6)
 12503 |     |         }
 12504 |     |     }
 12505 |     | 
 12506 |     |     function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {
 12507 |     |         bytes32 m0;
 12508 |     |         bytes32 m1;
 12509 |     |         bytes32 m2;
 12510 |     |         bytes32 m3;
 12511 |     |         bytes32 m4;
 12512 |     |         bytes32 m5;
 12513 |     |         bytes32 m6;
 12514 |     |         /// @solidity memory-safe-assembly
 12515 |     |         assembly {
 12516 |     |             function writeString(pos, w) {
 12517 |     |                 let length := 0
 12518 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12519 |     |                 mstore(pos, length)
 12520 |     |                 let shift := sub(256, shl(3, length))
 12521 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12522 |     |             }
 12523 |     |             m0 := mload(0x00)
 12524 |     |             m1 := mload(0x20)
 12525 |     |             m2 := mload(0x40)
 12526 |     |             m3 := mload(0x60)
 12527 |     |             m4 := mload(0x80)
 12528 |     |             m5 := mload(0xa0)
 12529 |     |             m6 := mload(0xc0)
 12530 |     |             // Selector of `log(string,uint256,bool,bool)`.
 12531 |     |             mstore(0x00, 0x354c36d6)
 12532 |     |             mstore(0x20, 0x80)
 12533 |     |             mstore(0x40, p1)
 12534 |     |             mstore(0x60, p2)
 12535 |     |             mstore(0x80, p3)
 12536 |     |             writeString(0xa0, p0)
 12537 |     |         }
 12538 |     |         _sendLogPayload(0x1c, 0xc4);
 12539 |     |         /// @solidity memory-safe-assembly
 12540 |     |         assembly {
 12541 |     |             mstore(0x00, m0)
 12542 |     |             mstore(0x20, m1)
 12543 |     |             mstore(0x40, m2)
 12544 |     |             mstore(0x60, m3)
 12545 |     |             mstore(0x80, m4)
 12546 |     |             mstore(0xa0, m5)
 12547 |     |             mstore(0xc0, m6)
 12548 |     |         }
 12549 |     |     }
 12550 |     | 
 12551 |     |     function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {
 12552 |     |         bytes32 m0;
 12553 |     |         bytes32 m1;
 12554 |     |         bytes32 m2;
 12555 |     |         bytes32 m3;
 12556 |     |         bytes32 m4;
 12557 |     |         bytes32 m5;
 12558 |     |         bytes32 m6;
 12559 |     |         /// @solidity memory-safe-assembly
 12560 |     |         assembly {
 12561 |     |             function writeString(pos, w) {
 12562 |     |                 let length := 0
 12563 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12564 |     |                 mstore(pos, length)
 12565 |     |                 let shift := sub(256, shl(3, length))
 12566 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12567 |     |             }
 12568 |     |             m0 := mload(0x00)
 12569 |     |             m1 := mload(0x20)
 12570 |     |             m2 := mload(0x40)
 12571 |     |             m3 := mload(0x60)
 12572 |     |             m4 := mload(0x80)
 12573 |     |             m5 := mload(0xa0)
 12574 |     |             m6 := mload(0xc0)
 12575 |     |             // Selector of `log(string,uint256,bool,uint256)`.
 12576 |     |             mstore(0x00, 0xe41b6f6f)
 12577 |     |             mstore(0x20, 0x80)
 12578 |     |             mstore(0x40, p1)
 12579 |     |             mstore(0x60, p2)
 12580 |     |             mstore(0x80, p3)
 12581 |     |             writeString(0xa0, p0)
 12582 |     |         }
 12583 |     |         _sendLogPayload(0x1c, 0xc4);
 12584 |     |         /// @solidity memory-safe-assembly
 12585 |     |         assembly {
 12586 |     |             mstore(0x00, m0)
 12587 |     |             mstore(0x20, m1)
 12588 |     |             mstore(0x40, m2)
 12589 |     |             mstore(0x60, m3)
 12590 |     |             mstore(0x80, m4)
 12591 |     |             mstore(0xa0, m5)
 12592 |     |             mstore(0xc0, m6)
 12593 |     |         }
 12594 |     |     }
 12595 |     | 
 12596 |     |     function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {
 12597 |     |         bytes32 m0;
 12598 |     |         bytes32 m1;
 12599 |     |         bytes32 m2;
 12600 |     |         bytes32 m3;
 12601 |     |         bytes32 m4;
 12602 |     |         bytes32 m5;
 12603 |     |         bytes32 m6;
 12604 |     |         bytes32 m7;
 12605 |     |         bytes32 m8;
 12606 |     |         /// @solidity memory-safe-assembly
 12607 |     |         assembly {
 12608 |     |             function writeString(pos, w) {
 12609 |     |                 let length := 0
 12610 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12611 |     |                 mstore(pos, length)
 12612 |     |                 let shift := sub(256, shl(3, length))
 12613 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12614 |     |             }
 12615 |     |             m0 := mload(0x00)
 12616 |     |             m1 := mload(0x20)
 12617 |     |             m2 := mload(0x40)
 12618 |     |             m3 := mload(0x60)
 12619 |     |             m4 := mload(0x80)
 12620 |     |             m5 := mload(0xa0)
 12621 |     |             m6 := mload(0xc0)
 12622 |     |             m7 := mload(0xe0)
 12623 |     |             m8 := mload(0x100)
 12624 |     |             // Selector of `log(string,uint256,bool,string)`.
 12625 |     |             mstore(0x00, 0xabf73a98)
 12626 |     |             mstore(0x20, 0x80)
 12627 |     |             mstore(0x40, p1)
 12628 |     |             mstore(0x60, p2)
 12629 |     |             mstore(0x80, 0xc0)
 12630 |     |             writeString(0xa0, p0)
 12631 |     |             writeString(0xe0, p3)
 12632 |     |         }
 12633 |     |         _sendLogPayload(0x1c, 0x104);
 12634 |     |         /// @solidity memory-safe-assembly
 12635 |     |         assembly {
 12636 |     |             mstore(0x00, m0)
 12637 |     |             mstore(0x20, m1)
 12638 |     |             mstore(0x40, m2)
 12639 |     |             mstore(0x60, m3)
 12640 |     |             mstore(0x80, m4)
 12641 |     |             mstore(0xa0, m5)
 12642 |     |             mstore(0xc0, m6)
 12643 |     |             mstore(0xe0, m7)
 12644 |     |             mstore(0x100, m8)
 12645 |     |         }
 12646 |     |     }
 12647 |     | 
 12648 |     |     function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {
 12649 |     |         bytes32 m0;
 12650 |     |         bytes32 m1;
 12651 |     |         bytes32 m2;
 12652 |     |         bytes32 m3;
 12653 |     |         bytes32 m4;
 12654 |     |         bytes32 m5;
 12655 |     |         bytes32 m6;
 12656 |     |         /// @solidity memory-safe-assembly
 12657 |     |         assembly {
 12658 |     |             function writeString(pos, w) {
 12659 |     |                 let length := 0
 12660 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12661 |     |                 mstore(pos, length)
 12662 |     |                 let shift := sub(256, shl(3, length))
 12663 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12664 |     |             }
 12665 |     |             m0 := mload(0x00)
 12666 |     |             m1 := mload(0x20)
 12667 |     |             m2 := mload(0x40)
 12668 |     |             m3 := mload(0x60)
 12669 |     |             m4 := mload(0x80)
 12670 |     |             m5 := mload(0xa0)
 12671 |     |             m6 := mload(0xc0)
 12672 |     |             // Selector of `log(string,uint256,uint256,address)`.
 12673 |     |             mstore(0x00, 0xe21de278)
 12674 |     |             mstore(0x20, 0x80)
 12675 |     |             mstore(0x40, p1)
 12676 |     |             mstore(0x60, p2)
 12677 |     |             mstore(0x80, p3)
 12678 |     |             writeString(0xa0, p0)
 12679 |     |         }
 12680 |     |         _sendLogPayload(0x1c, 0xc4);
 12681 |     |         /// @solidity memory-safe-assembly
 12682 |     |         assembly {
 12683 |     |             mstore(0x00, m0)
 12684 |     |             mstore(0x20, m1)
 12685 |     |             mstore(0x40, m2)
 12686 |     |             mstore(0x60, m3)
 12687 |     |             mstore(0x80, m4)
 12688 |     |             mstore(0xa0, m5)
 12689 |     |             mstore(0xc0, m6)
 12690 |     |         }
 12691 |     |     }
 12692 |     | 
 12693 |     |     function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {
 12694 |     |         bytes32 m0;
 12695 |     |         bytes32 m1;
 12696 |     |         bytes32 m2;
 12697 |     |         bytes32 m3;
 12698 |     |         bytes32 m4;
 12699 |     |         bytes32 m5;
 12700 |     |         bytes32 m6;
 12701 |     |         /// @solidity memory-safe-assembly
 12702 |     |         assembly {
 12703 |     |             function writeString(pos, w) {
 12704 |     |                 let length := 0
 12705 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12706 |     |                 mstore(pos, length)
 12707 |     |                 let shift := sub(256, shl(3, length))
 12708 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12709 |     |             }
 12710 |     |             m0 := mload(0x00)
 12711 |     |             m1 := mload(0x20)
 12712 |     |             m2 := mload(0x40)
 12713 |     |             m3 := mload(0x60)
 12714 |     |             m4 := mload(0x80)
 12715 |     |             m5 := mload(0xa0)
 12716 |     |             m6 := mload(0xc0)
 12717 |     |             // Selector of `log(string,uint256,uint256,bool)`.
 12718 |     |             mstore(0x00, 0x7626db92)
 12719 |     |             mstore(0x20, 0x80)
 12720 |     |             mstore(0x40, p1)
 12721 |     |             mstore(0x60, p2)
 12722 |     |             mstore(0x80, p3)
 12723 |     |             writeString(0xa0, p0)
 12724 |     |         }
 12725 |     |         _sendLogPayload(0x1c, 0xc4);
 12726 |     |         /// @solidity memory-safe-assembly
 12727 |     |         assembly {
 12728 |     |             mstore(0x00, m0)
 12729 |     |             mstore(0x20, m1)
 12730 |     |             mstore(0x40, m2)
 12731 |     |             mstore(0x60, m3)
 12732 |     |             mstore(0x80, m4)
 12733 |     |             mstore(0xa0, m5)
 12734 |     |             mstore(0xc0, m6)
 12735 |     |         }
 12736 |     |     }
 12737 |     | 
 12738 |     |     function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
 12739 |     |         bytes32 m0;
 12740 |     |         bytes32 m1;
 12741 |     |         bytes32 m2;
 12742 |     |         bytes32 m3;
 12743 |     |         bytes32 m4;
 12744 |     |         bytes32 m5;
 12745 |     |         bytes32 m6;
 12746 |     |         /// @solidity memory-safe-assembly
 12747 |     |         assembly {
 12748 |     |             function writeString(pos, w) {
 12749 |     |                 let length := 0
 12750 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12751 |     |                 mstore(pos, length)
 12752 |     |                 let shift := sub(256, shl(3, length))
 12753 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12754 |     |             }
 12755 |     |             m0 := mload(0x00)
 12756 |     |             m1 := mload(0x20)
 12757 |     |             m2 := mload(0x40)
 12758 |     |             m3 := mload(0x60)
 12759 |     |             m4 := mload(0x80)
 12760 |     |             m5 := mload(0xa0)
 12761 |     |             m6 := mload(0xc0)
 12762 |     |             // Selector of `log(string,uint256,uint256,uint256)`.
 12763 |     |             mstore(0x00, 0xa7a87853)
 12764 |     |             mstore(0x20, 0x80)
 12765 |     |             mstore(0x40, p1)
 12766 |     |             mstore(0x60, p2)
 12767 |     |             mstore(0x80, p3)
 12768 |     |             writeString(0xa0, p0)
 12769 |     |         }
 12770 |     |         _sendLogPayload(0x1c, 0xc4);
 12771 |     |         /// @solidity memory-safe-assembly
 12772 |     |         assembly {
 12773 |     |             mstore(0x00, m0)
 12774 |     |             mstore(0x20, m1)
 12775 |     |             mstore(0x40, m2)
 12776 |     |             mstore(0x60, m3)
 12777 |     |             mstore(0x80, m4)
 12778 |     |             mstore(0xa0, m5)
 12779 |     |             mstore(0xc0, m6)
 12780 |     |         }
 12781 |     |     }
 12782 |     | 
 12783 |     |     function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
 12784 |     |         bytes32 m0;
 12785 |     |         bytes32 m1;
 12786 |     |         bytes32 m2;
 12787 |     |         bytes32 m3;
 12788 |     |         bytes32 m4;
 12789 |     |         bytes32 m5;
 12790 |     |         bytes32 m6;
 12791 |     |         bytes32 m7;
 12792 |     |         bytes32 m8;
 12793 |     |         /// @solidity memory-safe-assembly
 12794 |     |         assembly {
 12795 |     |             function writeString(pos, w) {
 12796 |     |                 let length := 0
 12797 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12798 |     |                 mstore(pos, length)
 12799 |     |                 let shift := sub(256, shl(3, length))
 12800 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12801 |     |             }
 12802 |     |             m0 := mload(0x00)
 12803 |     |             m1 := mload(0x20)
 12804 |     |             m2 := mload(0x40)
 12805 |     |             m3 := mload(0x60)
 12806 |     |             m4 := mload(0x80)
 12807 |     |             m5 := mload(0xa0)
 12808 |     |             m6 := mload(0xc0)
 12809 |     |             m7 := mload(0xe0)
 12810 |     |             m8 := mload(0x100)
 12811 |     |             // Selector of `log(string,uint256,uint256,string)`.
 12812 |     |             mstore(0x00, 0x854b3496)
 12813 |     |             mstore(0x20, 0x80)
 12814 |     |             mstore(0x40, p1)
 12815 |     |             mstore(0x60, p2)
 12816 |     |             mstore(0x80, 0xc0)
 12817 |     |             writeString(0xa0, p0)
 12818 |     |             writeString(0xe0, p3)
 12819 |     |         }
 12820 |     |         _sendLogPayload(0x1c, 0x104);
 12821 |     |         /// @solidity memory-safe-assembly
 12822 |     |         assembly {
 12823 |     |             mstore(0x00, m0)
 12824 |     |             mstore(0x20, m1)
 12825 |     |             mstore(0x40, m2)
 12826 |     |             mstore(0x60, m3)
 12827 |     |             mstore(0x80, m4)
 12828 |     |             mstore(0xa0, m5)
 12829 |     |             mstore(0xc0, m6)
 12830 |     |             mstore(0xe0, m7)
 12831 |     |             mstore(0x100, m8)
 12832 |     |         }
 12833 |     |     }
 12834 |     | 
 12835 |     |     function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {
 12836 |     |         bytes32 m0;
 12837 |     |         bytes32 m1;
 12838 |     |         bytes32 m2;
 12839 |     |         bytes32 m3;
 12840 |     |         bytes32 m4;
 12841 |     |         bytes32 m5;
 12842 |     |         bytes32 m6;
 12843 |     |         bytes32 m7;
 12844 |     |         bytes32 m8;
 12845 |     |         /// @solidity memory-safe-assembly
 12846 |     |         assembly {
 12847 |     |             function writeString(pos, w) {
 12848 |     |                 let length := 0
 12849 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12850 |     |                 mstore(pos, length)
 12851 |     |                 let shift := sub(256, shl(3, length))
 12852 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12853 |     |             }
 12854 |     |             m0 := mload(0x00)
 12855 |     |             m1 := mload(0x20)
 12856 |     |             m2 := mload(0x40)
 12857 |     |             m3 := mload(0x60)
 12858 |     |             m4 := mload(0x80)
 12859 |     |             m5 := mload(0xa0)
 12860 |     |             m6 := mload(0xc0)
 12861 |     |             m7 := mload(0xe0)
 12862 |     |             m8 := mload(0x100)
 12863 |     |             // Selector of `log(string,uint256,string,address)`.
 12864 |     |             mstore(0x00, 0x7c4632a4)
 12865 |     |             mstore(0x20, 0x80)
 12866 |     |             mstore(0x40, p1)
 12867 |     |             mstore(0x60, 0xc0)
 12868 |     |             mstore(0x80, p3)
 12869 |     |             writeString(0xa0, p0)
 12870 |     |             writeString(0xe0, p2)
 12871 |     |         }
 12872 |     |         _sendLogPayload(0x1c, 0x104);
 12873 |     |         /// @solidity memory-safe-assembly
 12874 |     |         assembly {
 12875 |     |             mstore(0x00, m0)
 12876 |     |             mstore(0x20, m1)
 12877 |     |             mstore(0x40, m2)
 12878 |     |             mstore(0x60, m3)
 12879 |     |             mstore(0x80, m4)
 12880 |     |             mstore(0xa0, m5)
 12881 |     |             mstore(0xc0, m6)
 12882 |     |             mstore(0xe0, m7)
 12883 |     |             mstore(0x100, m8)
 12884 |     |         }
 12885 |     |     }
 12886 |     | 
 12887 |     |     function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {
 12888 |     |         bytes32 m0;
 12889 |     |         bytes32 m1;
 12890 |     |         bytes32 m2;
 12891 |     |         bytes32 m3;
 12892 |     |         bytes32 m4;
 12893 |     |         bytes32 m5;
 12894 |     |         bytes32 m6;
 12895 |     |         bytes32 m7;
 12896 |     |         bytes32 m8;
 12897 |     |         /// @solidity memory-safe-assembly
 12898 |     |         assembly {
 12899 |     |             function writeString(pos, w) {
 12900 |     |                 let length := 0
 12901 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12902 |     |                 mstore(pos, length)
 12903 |     |                 let shift := sub(256, shl(3, length))
 12904 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12905 |     |             }
 12906 |     |             m0 := mload(0x00)
 12907 |     |             m1 := mload(0x20)
 12908 |     |             m2 := mload(0x40)
 12909 |     |             m3 := mload(0x60)
 12910 |     |             m4 := mload(0x80)
 12911 |     |             m5 := mload(0xa0)
 12912 |     |             m6 := mload(0xc0)
 12913 |     |             m7 := mload(0xe0)
 12914 |     |             m8 := mload(0x100)
 12915 |     |             // Selector of `log(string,uint256,string,bool)`.
 12916 |     |             mstore(0x00, 0x7d24491d)
 12917 |     |             mstore(0x20, 0x80)
 12918 |     |             mstore(0x40, p1)
 12919 |     |             mstore(0x60, 0xc0)
 12920 |     |             mstore(0x80, p3)
 12921 |     |             writeString(0xa0, p0)
 12922 |     |             writeString(0xe0, p2)
 12923 |     |         }
 12924 |     |         _sendLogPayload(0x1c, 0x104);
 12925 |     |         /// @solidity memory-safe-assembly
 12926 |     |         assembly {
 12927 |     |             mstore(0x00, m0)
 12928 |     |             mstore(0x20, m1)
 12929 |     |             mstore(0x40, m2)
 12930 |     |             mstore(0x60, m3)
 12931 |     |             mstore(0x80, m4)
 12932 |     |             mstore(0xa0, m5)
 12933 |     |             mstore(0xc0, m6)
 12934 |     |             mstore(0xe0, m7)
 12935 |     |             mstore(0x100, m8)
 12936 |     |         }
 12937 |     |     }
 12938 |     | 
 12939 |     |     function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
 12940 |     |         bytes32 m0;
 12941 |     |         bytes32 m1;
 12942 |     |         bytes32 m2;
 12943 |     |         bytes32 m3;
 12944 |     |         bytes32 m4;
 12945 |     |         bytes32 m5;
 12946 |     |         bytes32 m6;
 12947 |     |         bytes32 m7;
 12948 |     |         bytes32 m8;
 12949 |     |         /// @solidity memory-safe-assembly
 12950 |     |         assembly {
 12951 |     |             function writeString(pos, w) {
 12952 |     |                 let length := 0
 12953 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12954 |     |                 mstore(pos, length)
 12955 |     |                 let shift := sub(256, shl(3, length))
 12956 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12957 |     |             }
 12958 |     |             m0 := mload(0x00)
 12959 |     |             m1 := mload(0x20)
 12960 |     |             m2 := mload(0x40)
 12961 |     |             m3 := mload(0x60)
 12962 |     |             m4 := mload(0x80)
 12963 |     |             m5 := mload(0xa0)
 12964 |     |             m6 := mload(0xc0)
 12965 |     |             m7 := mload(0xe0)
 12966 |     |             m8 := mload(0x100)
 12967 |     |             // Selector of `log(string,uint256,string,uint256)`.
 12968 |     |             mstore(0x00, 0xc67ea9d1)
 12969 |     |             mstore(0x20, 0x80)
 12970 |     |             mstore(0x40, p1)
 12971 |     |             mstore(0x60, 0xc0)
 12972 |     |             mstore(0x80, p3)
 12973 |     |             writeString(0xa0, p0)
 12974 |     |             writeString(0xe0, p2)
 12975 |     |         }
 12976 |     |         _sendLogPayload(0x1c, 0x104);
 12977 |     |         /// @solidity memory-safe-assembly
 12978 |     |         assembly {
 12979 |     |             mstore(0x00, m0)
 12980 |     |             mstore(0x20, m1)
 12981 |     |             mstore(0x40, m2)
 12982 |     |             mstore(0x60, m3)
 12983 |     |             mstore(0x80, m4)
 12984 |     |             mstore(0xa0, m5)
 12985 |     |             mstore(0xc0, m6)
 12986 |     |             mstore(0xe0, m7)
 12987 |     |             mstore(0x100, m8)
 12988 |     |         }
 12989 |     |     }
 12990 |     | 
 12991 |     |     function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
 12992 |     |         bytes32 m0;
 12993 |     |         bytes32 m1;
 12994 |     |         bytes32 m2;
 12995 |     |         bytes32 m3;
 12996 |     |         bytes32 m4;
 12997 |     |         bytes32 m5;
 12998 |     |         bytes32 m6;
 12999 |     |         bytes32 m7;
 13000 |     |         bytes32 m8;
 13001 |     |         bytes32 m9;
 13002 |     |         bytes32 m10;
 13003 |     |         /// @solidity memory-safe-assembly
 13004 |     |         assembly {
 13005 |     |             function writeString(pos, w) {
 13006 |     |                 let length := 0
 13007 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13008 |     |                 mstore(pos, length)
 13009 |     |                 let shift := sub(256, shl(3, length))
 13010 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13011 |     |             }
 13012 |     |             m0 := mload(0x00)
 13013 |     |             m1 := mload(0x20)
 13014 |     |             m2 := mload(0x40)
 13015 |     |             m3 := mload(0x60)
 13016 |     |             m4 := mload(0x80)
 13017 |     |             m5 := mload(0xa0)
 13018 |     |             m6 := mload(0xc0)
 13019 |     |             m7 := mload(0xe0)
 13020 |     |             m8 := mload(0x100)
 13021 |     |             m9 := mload(0x120)
 13022 |     |             m10 := mload(0x140)
 13023 |     |             // Selector of `log(string,uint256,string,string)`.
 13024 |     |             mstore(0x00, 0x5ab84e1f)
 13025 |     |             mstore(0x20, 0x80)
 13026 |     |             mstore(0x40, p1)
 13027 |     |             mstore(0x60, 0xc0)
 13028 |     |             mstore(0x80, 0x100)
 13029 |     |             writeString(0xa0, p0)
 13030 |     |             writeString(0xe0, p2)
 13031 |     |             writeString(0x120, p3)
 13032 |     |         }
 13033 |     |         _sendLogPayload(0x1c, 0x144);
 13034 |     |         /// @solidity memory-safe-assembly
 13035 |     |         assembly {
 13036 |     |             mstore(0x00, m0)
 13037 |     |             mstore(0x20, m1)
 13038 |     |             mstore(0x40, m2)
 13039 |     |             mstore(0x60, m3)
 13040 |     |             mstore(0x80, m4)
 13041 |     |             mstore(0xa0, m5)
 13042 |     |             mstore(0xc0, m6)
 13043 |     |             mstore(0xe0, m7)
 13044 |     |             mstore(0x100, m8)
 13045 |     |             mstore(0x120, m9)
 13046 |     |             mstore(0x140, m10)
 13047 |     |         }
 13048 |     |     }
 13049 |     | 
 13050 |     |     function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {
 13051 |     |         bytes32 m0;
 13052 |     |         bytes32 m1;
 13053 |     |         bytes32 m2;
 13054 |     |         bytes32 m3;
 13055 |     |         bytes32 m4;
 13056 |     |         bytes32 m5;
 13057 |     |         bytes32 m6;
 13058 |     |         bytes32 m7;
 13059 |     |         bytes32 m8;
 13060 |     |         /// @solidity memory-safe-assembly
 13061 |     |         assembly {
 13062 |     |             function writeString(pos, w) {
 13063 |     |                 let length := 0
 13064 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13065 |     |                 mstore(pos, length)
 13066 |     |                 let shift := sub(256, shl(3, length))
 13067 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13068 |     |             }
 13069 |     |             m0 := mload(0x00)
 13070 |     |             m1 := mload(0x20)
 13071 |     |             m2 := mload(0x40)
 13072 |     |             m3 := mload(0x60)
 13073 |     |             m4 := mload(0x80)
 13074 |     |             m5 := mload(0xa0)
 13075 |     |             m6 := mload(0xc0)
 13076 |     |             m7 := mload(0xe0)
 13077 |     |             m8 := mload(0x100)
 13078 |     |             // Selector of `log(string,string,address,address)`.
 13079 |     |             mstore(0x00, 0x439c7bef)
 13080 |     |             mstore(0x20, 0x80)
 13081 |     |             mstore(0x40, 0xc0)
 13082 |     |             mstore(0x60, p2)
 13083 |     |             mstore(0x80, p3)
 13084 |     |             writeString(0xa0, p0)
 13085 |     |             writeString(0xe0, p1)
 13086 |     |         }
 13087 |     |         _sendLogPayload(0x1c, 0x104);
 13088 |     |         /// @solidity memory-safe-assembly
 13089 |     |         assembly {
 13090 |     |             mstore(0x00, m0)
 13091 |     |             mstore(0x20, m1)
 13092 |     |             mstore(0x40, m2)
 13093 |     |             mstore(0x60, m3)
 13094 |     |             mstore(0x80, m4)
 13095 |     |             mstore(0xa0, m5)
 13096 |     |             mstore(0xc0, m6)
 13097 |     |             mstore(0xe0, m7)
 13098 |     |             mstore(0x100, m8)
 13099 |     |         }
 13100 |     |     }
 13101 |     | 
 13102 |     |     function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {
 13103 |     |         bytes32 m0;
 13104 |     |         bytes32 m1;
 13105 |     |         bytes32 m2;
 13106 |     |         bytes32 m3;
 13107 |     |         bytes32 m4;
 13108 |     |         bytes32 m5;
 13109 |     |         bytes32 m6;
 13110 |     |         bytes32 m7;
 13111 |     |         bytes32 m8;
 13112 |     |         /// @solidity memory-safe-assembly
 13113 |     |         assembly {
 13114 |     |             function writeString(pos, w) {
 13115 |     |                 let length := 0
 13116 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13117 |     |                 mstore(pos, length)
 13118 |     |                 let shift := sub(256, shl(3, length))
 13119 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13120 |     |             }
 13121 |     |             m0 := mload(0x00)
 13122 |     |             m1 := mload(0x20)
 13123 |     |             m2 := mload(0x40)
 13124 |     |             m3 := mload(0x60)
 13125 |     |             m4 := mload(0x80)
 13126 |     |             m5 := mload(0xa0)
 13127 |     |             m6 := mload(0xc0)
 13128 |     |             m7 := mload(0xe0)
 13129 |     |             m8 := mload(0x100)
 13130 |     |             // Selector of `log(string,string,address,bool)`.
 13131 |     |             mstore(0x00, 0x5ccd4e37)
 13132 |     |             mstore(0x20, 0x80)
 13133 |     |             mstore(0x40, 0xc0)
 13134 |     |             mstore(0x60, p2)
 13135 |     |             mstore(0x80, p3)
 13136 |     |             writeString(0xa0, p0)
 13137 |     |             writeString(0xe0, p1)
 13138 |     |         }
 13139 |     |         _sendLogPayload(0x1c, 0x104);
 13140 |     |         /// @solidity memory-safe-assembly
 13141 |     |         assembly {
 13142 |     |             mstore(0x00, m0)
 13143 |     |             mstore(0x20, m1)
 13144 |     |             mstore(0x40, m2)
 13145 |     |             mstore(0x60, m3)
 13146 |     |             mstore(0x80, m4)
 13147 |     |             mstore(0xa0, m5)
 13148 |     |             mstore(0xc0, m6)
 13149 |     |             mstore(0xe0, m7)
 13150 |     |             mstore(0x100, m8)
 13151 |     |         }
 13152 |     |     }
 13153 |     | 
 13154 |     |     function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {
 13155 |     |         bytes32 m0;
 13156 |     |         bytes32 m1;
 13157 |     |         bytes32 m2;
 13158 |     |         bytes32 m3;
 13159 |     |         bytes32 m4;
 13160 |     |         bytes32 m5;
 13161 |     |         bytes32 m6;
 13162 |     |         bytes32 m7;
 13163 |     |         bytes32 m8;
 13164 |     |         /// @solidity memory-safe-assembly
 13165 |     |         assembly {
 13166 |     |             function writeString(pos, w) {
 13167 |     |                 let length := 0
 13168 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13169 |     |                 mstore(pos, length)
 13170 |     |                 let shift := sub(256, shl(3, length))
 13171 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13172 |     |             }
 13173 |     |             m0 := mload(0x00)
 13174 |     |             m1 := mload(0x20)
 13175 |     |             m2 := mload(0x40)
 13176 |     |             m3 := mload(0x60)
 13177 |     |             m4 := mload(0x80)
 13178 |     |             m5 := mload(0xa0)
 13179 |     |             m6 := mload(0xc0)
 13180 |     |             m7 := mload(0xe0)
 13181 |     |             m8 := mload(0x100)
 13182 |     |             // Selector of `log(string,string,address,uint256)`.
 13183 |     |             mstore(0x00, 0x7cc3c607)
 13184 |     |             mstore(0x20, 0x80)
 13185 |     |             mstore(0x40, 0xc0)
 13186 |     |             mstore(0x60, p2)
 13187 |     |             mstore(0x80, p3)
 13188 |     |             writeString(0xa0, p0)
 13189 |     |             writeString(0xe0, p1)
 13190 |     |         }
 13191 |     |         _sendLogPayload(0x1c, 0x104);
 13192 |     |         /// @solidity memory-safe-assembly
 13193 |     |         assembly {
 13194 |     |             mstore(0x00, m0)
 13195 |     |             mstore(0x20, m1)
 13196 |     |             mstore(0x40, m2)
 13197 |     |             mstore(0x60, m3)
 13198 |     |             mstore(0x80, m4)
 13199 |     |             mstore(0xa0, m5)
 13200 |     |             mstore(0xc0, m6)
 13201 |     |             mstore(0xe0, m7)
 13202 |     |             mstore(0x100, m8)
 13203 |     |         }
 13204 |     |     }
 13205 |     | 
 13206 |     |     function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {
 13207 |     |         bytes32 m0;
 13208 |     |         bytes32 m1;
 13209 |     |         bytes32 m2;
 13210 |     |         bytes32 m3;
 13211 |     |         bytes32 m4;
 13212 |     |         bytes32 m5;
 13213 |     |         bytes32 m6;
 13214 |     |         bytes32 m7;
 13215 |     |         bytes32 m8;
 13216 |     |         bytes32 m9;
 13217 |     |         bytes32 m10;
 13218 |     |         /// @solidity memory-safe-assembly
 13219 |     |         assembly {
 13220 |     |             function writeString(pos, w) {
 13221 |     |                 let length := 0
 13222 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13223 |     |                 mstore(pos, length)
 13224 |     |                 let shift := sub(256, shl(3, length))
 13225 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13226 |     |             }
 13227 |     |             m0 := mload(0x00)
 13228 |     |             m1 := mload(0x20)
 13229 |     |             m2 := mload(0x40)
 13230 |     |             m3 := mload(0x60)
 13231 |     |             m4 := mload(0x80)
 13232 |     |             m5 := mload(0xa0)
 13233 |     |             m6 := mload(0xc0)
 13234 |     |             m7 := mload(0xe0)
 13235 |     |             m8 := mload(0x100)
 13236 |     |             m9 := mload(0x120)
 13237 |     |             m10 := mload(0x140)
 13238 |     |             // Selector of `log(string,string,address,string)`.
 13239 |     |             mstore(0x00, 0xeb1bff80)
 13240 |     |             mstore(0x20, 0x80)
 13241 |     |             mstore(0x40, 0xc0)
 13242 |     |             mstore(0x60, p2)
 13243 |     |             mstore(0x80, 0x100)
 13244 |     |             writeString(0xa0, p0)
 13245 |     |             writeString(0xe0, p1)
 13246 |     |             writeString(0x120, p3)
 13247 |     |         }
 13248 |     |         _sendLogPayload(0x1c, 0x144);
 13249 |     |         /// @solidity memory-safe-assembly
 13250 |     |         assembly {
 13251 |     |             mstore(0x00, m0)
 13252 |     |             mstore(0x20, m1)
 13253 |     |             mstore(0x40, m2)
 13254 |     |             mstore(0x60, m3)
 13255 |     |             mstore(0x80, m4)
 13256 |     |             mstore(0xa0, m5)
 13257 |     |             mstore(0xc0, m6)
 13258 |     |             mstore(0xe0, m7)
 13259 |     |             mstore(0x100, m8)
 13260 |     |             mstore(0x120, m9)
 13261 |     |             mstore(0x140, m10)
 13262 |     |         }
 13263 |     |     }
 13264 |     | 
 13265 |     |     function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {
 13266 |     |         bytes32 m0;
 13267 |     |         bytes32 m1;
 13268 |     |         bytes32 m2;
 13269 |     |         bytes32 m3;
 13270 |     |         bytes32 m4;
 13271 |     |         bytes32 m5;
 13272 |     |         bytes32 m6;
 13273 |     |         bytes32 m7;
 13274 |     |         bytes32 m8;
 13275 |     |         /// @solidity memory-safe-assembly
 13276 |     |         assembly {
 13277 |     |             function writeString(pos, w) {
 13278 |     |                 let length := 0
 13279 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13280 |     |                 mstore(pos, length)
 13281 |     |                 let shift := sub(256, shl(3, length))
 13282 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13283 |     |             }
 13284 |     |             m0 := mload(0x00)
 13285 |     |             m1 := mload(0x20)
 13286 |     |             m2 := mload(0x40)
 13287 |     |             m3 := mload(0x60)
 13288 |     |             m4 := mload(0x80)
 13289 |     |             m5 := mload(0xa0)
 13290 |     |             m6 := mload(0xc0)
 13291 |     |             m7 := mload(0xe0)
 13292 |     |             m8 := mload(0x100)
 13293 |     |             // Selector of `log(string,string,bool,address)`.
 13294 |     |             mstore(0x00, 0xc371c7db)
 13295 |     |             mstore(0x20, 0x80)
 13296 |     |             mstore(0x40, 0xc0)
 13297 |     |             mstore(0x60, p2)
 13298 |     |             mstore(0x80, p3)
 13299 |     |             writeString(0xa0, p0)
 13300 |     |             writeString(0xe0, p1)
 13301 |     |         }
 13302 |     |         _sendLogPayload(0x1c, 0x104);
 13303 |     |         /// @solidity memory-safe-assembly
 13304 |     |         assembly {
 13305 |     |             mstore(0x00, m0)
 13306 |     |             mstore(0x20, m1)
 13307 |     |             mstore(0x40, m2)
 13308 |     |             mstore(0x60, m3)
 13309 |     |             mstore(0x80, m4)
 13310 |     |             mstore(0xa0, m5)
 13311 |     |             mstore(0xc0, m6)
 13312 |     |             mstore(0xe0, m7)
 13313 |     |             mstore(0x100, m8)
 13314 |     |         }
 13315 |     |     }
 13316 |     | 
 13317 |     |     function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {
 13318 |     |         bytes32 m0;
 13319 |     |         bytes32 m1;
 13320 |     |         bytes32 m2;
 13321 |     |         bytes32 m3;
 13322 |     |         bytes32 m4;
 13323 |     |         bytes32 m5;
 13324 |     |         bytes32 m6;
 13325 |     |         bytes32 m7;
 13326 |     |         bytes32 m8;
 13327 |     |         /// @solidity memory-safe-assembly
 13328 |     |         assembly {
 13329 |     |             function writeString(pos, w) {
 13330 |     |                 let length := 0
 13331 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13332 |     |                 mstore(pos, length)
 13333 |     |                 let shift := sub(256, shl(3, length))
 13334 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13335 |     |             }
 13336 |     |             m0 := mload(0x00)
 13337 |     |             m1 := mload(0x20)
 13338 |     |             m2 := mload(0x40)
 13339 |     |             m3 := mload(0x60)
 13340 |     |             m4 := mload(0x80)
 13341 |     |             m5 := mload(0xa0)
 13342 |     |             m6 := mload(0xc0)
 13343 |     |             m7 := mload(0xe0)
 13344 |     |             m8 := mload(0x100)
 13345 |     |             // Selector of `log(string,string,bool,bool)`.
 13346 |     |             mstore(0x00, 0x40785869)
 13347 |     |             mstore(0x20, 0x80)
 13348 |     |             mstore(0x40, 0xc0)
 13349 |     |             mstore(0x60, p2)
 13350 |     |             mstore(0x80, p3)
 13351 |     |             writeString(0xa0, p0)
 13352 |     |             writeString(0xe0, p1)
 13353 |     |         }
 13354 |     |         _sendLogPayload(0x1c, 0x104);
 13355 |     |         /// @solidity memory-safe-assembly
 13356 |     |         assembly {
 13357 |     |             mstore(0x00, m0)
 13358 |     |             mstore(0x20, m1)
 13359 |     |             mstore(0x40, m2)
 13360 |     |             mstore(0x60, m3)
 13361 |     |             mstore(0x80, m4)
 13362 |     |             mstore(0xa0, m5)
 13363 |     |             mstore(0xc0, m6)
 13364 |     |             mstore(0xe0, m7)
 13365 |     |             mstore(0x100, m8)
 13366 |     |         }
 13367 |     |     }
 13368 |     | 
 13369 |     |     function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {
 13370 |     |         bytes32 m0;
 13371 |     |         bytes32 m1;
 13372 |     |         bytes32 m2;
 13373 |     |         bytes32 m3;
 13374 |     |         bytes32 m4;
 13375 |     |         bytes32 m5;
 13376 |     |         bytes32 m6;
 13377 |     |         bytes32 m7;
 13378 |     |         bytes32 m8;
 13379 |     |         /// @solidity memory-safe-assembly
 13380 |     |         assembly {
 13381 |     |             function writeString(pos, w) {
 13382 |     |                 let length := 0
 13383 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13384 |     |                 mstore(pos, length)
 13385 |     |                 let shift := sub(256, shl(3, length))
 13386 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13387 |     |             }
 13388 |     |             m0 := mload(0x00)
 13389 |     |             m1 := mload(0x20)
 13390 |     |             m2 := mload(0x40)
 13391 |     |             m3 := mload(0x60)
 13392 |     |             m4 := mload(0x80)
 13393 |     |             m5 := mload(0xa0)
 13394 |     |             m6 := mload(0xc0)
 13395 |     |             m7 := mload(0xe0)
 13396 |     |             m8 := mload(0x100)
 13397 |     |             // Selector of `log(string,string,bool,uint256)`.
 13398 |     |             mstore(0x00, 0xd6aefad2)
 13399 |     |             mstore(0x20, 0x80)
 13400 |     |             mstore(0x40, 0xc0)
 13401 |     |             mstore(0x60, p2)
 13402 |     |             mstore(0x80, p3)
 13403 |     |             writeString(0xa0, p0)
 13404 |     |             writeString(0xe0, p1)
 13405 |     |         }
 13406 |     |         _sendLogPayload(0x1c, 0x104);
 13407 |     |         /// @solidity memory-safe-assembly
 13408 |     |         assembly {
 13409 |     |             mstore(0x00, m0)
 13410 |     |             mstore(0x20, m1)
 13411 |     |             mstore(0x40, m2)
 13412 |     |             mstore(0x60, m3)
 13413 |     |             mstore(0x80, m4)
 13414 |     |             mstore(0xa0, m5)
 13415 |     |             mstore(0xc0, m6)
 13416 |     |             mstore(0xe0, m7)
 13417 |     |             mstore(0x100, m8)
 13418 |     |         }
 13419 |     |     }
 13420 |     | 
 13421 |     |     function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
 13422 |     |         bytes32 m0;
 13423 |     |         bytes32 m1;
 13424 |     |         bytes32 m2;
 13425 |     |         bytes32 m3;
 13426 |     |         bytes32 m4;
 13427 |     |         bytes32 m5;
 13428 |     |         bytes32 m6;
 13429 |     |         bytes32 m7;
 13430 |     |         bytes32 m8;
 13431 |     |         bytes32 m9;
 13432 |     |         bytes32 m10;
 13433 |     |         /// @solidity memory-safe-assembly
 13434 |     |         assembly {
 13435 |     |             function writeString(pos, w) {
 13436 |     |                 let length := 0
 13437 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13438 |     |                 mstore(pos, length)
 13439 |     |                 let shift := sub(256, shl(3, length))
 13440 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13441 |     |             }
 13442 |     |             m0 := mload(0x00)
 13443 |     |             m1 := mload(0x20)
 13444 |     |             m2 := mload(0x40)
 13445 |     |             m3 := mload(0x60)
 13446 |     |             m4 := mload(0x80)
 13447 |     |             m5 := mload(0xa0)
 13448 |     |             m6 := mload(0xc0)
 13449 |     |             m7 := mload(0xe0)
 13450 |     |             m8 := mload(0x100)
 13451 |     |             m9 := mload(0x120)
 13452 |     |             m10 := mload(0x140)
 13453 |     |             // Selector of `log(string,string,bool,string)`.
 13454 |     |             mstore(0x00, 0x5e84b0ea)
 13455 |     |             mstore(0x20, 0x80)
 13456 |     |             mstore(0x40, 0xc0)
 13457 |     |             mstore(0x60, p2)
 13458 |     |             mstore(0x80, 0x100)
 13459 |     |             writeString(0xa0, p0)
 13460 |     |             writeString(0xe0, p1)
 13461 |     |             writeString(0x120, p3)
 13462 |     |         }
 13463 |     |         _sendLogPayload(0x1c, 0x144);
 13464 |     |         /// @solidity memory-safe-assembly
 13465 |     |         assembly {
 13466 |     |             mstore(0x00, m0)
 13467 |     |             mstore(0x20, m1)
 13468 |     |             mstore(0x40, m2)
 13469 |     |             mstore(0x60, m3)
 13470 |     |             mstore(0x80, m4)
 13471 |     |             mstore(0xa0, m5)
 13472 |     |             mstore(0xc0, m6)
 13473 |     |             mstore(0xe0, m7)
 13474 |     |             mstore(0x100, m8)
 13475 |     |             mstore(0x120, m9)
 13476 |     |             mstore(0x140, m10)
 13477 |     |         }
 13478 |     |     }
 13479 |     | 
 13480 |     |     function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {
 13481 |     |         bytes32 m0;
 13482 |     |         bytes32 m1;
 13483 |     |         bytes32 m2;
 13484 |     |         bytes32 m3;
 13485 |     |         bytes32 m4;
 13486 |     |         bytes32 m5;
 13487 |     |         bytes32 m6;
 13488 |     |         bytes32 m7;
 13489 |     |         bytes32 m8;
 13490 |     |         /// @solidity memory-safe-assembly
 13491 |     |         assembly {
 13492 |     |             function writeString(pos, w) {
 13493 |     |                 let length := 0
 13494 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13495 |     |                 mstore(pos, length)
 13496 |     |                 let shift := sub(256, shl(3, length))
 13497 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13498 |     |             }
 13499 |     |             m0 := mload(0x00)
 13500 |     |             m1 := mload(0x20)
 13501 |     |             m2 := mload(0x40)
 13502 |     |             m3 := mload(0x60)
 13503 |     |             m4 := mload(0x80)
 13504 |     |             m5 := mload(0xa0)
 13505 |     |             m6 := mload(0xc0)
 13506 |     |             m7 := mload(0xe0)
 13507 |     |             m8 := mload(0x100)
 13508 |     |             // Selector of `log(string,string,uint256,address)`.
 13509 |     |             mstore(0x00, 0x1023f7b2)
 13510 |     |             mstore(0x20, 0x80)
 13511 |     |             mstore(0x40, 0xc0)
 13512 |     |             mstore(0x60, p2)
 13513 |     |             mstore(0x80, p3)
 13514 |     |             writeString(0xa0, p0)
 13515 |     |             writeString(0xe0, p1)
 13516 |     |         }
 13517 |     |         _sendLogPayload(0x1c, 0x104);
 13518 |     |         /// @solidity memory-safe-assembly
 13519 |     |         assembly {
 13520 |     |             mstore(0x00, m0)
 13521 |     |             mstore(0x20, m1)
 13522 |     |             mstore(0x40, m2)
 13523 |     |             mstore(0x60, m3)
 13524 |     |             mstore(0x80, m4)
 13525 |     |             mstore(0xa0, m5)
 13526 |     |             mstore(0xc0, m6)
 13527 |     |             mstore(0xe0, m7)
 13528 |     |             mstore(0x100, m8)
 13529 |     |         }
 13530 |     |     }
 13531 |     | 
 13532 |     |     function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {
 13533 |     |         bytes32 m0;
 13534 |     |         bytes32 m1;
 13535 |     |         bytes32 m2;
 13536 |     |         bytes32 m3;
 13537 |     |         bytes32 m4;
 13538 |     |         bytes32 m5;
 13539 |     |         bytes32 m6;
 13540 |     |         bytes32 m7;
 13541 |     |         bytes32 m8;
 13542 |     |         /// @solidity memory-safe-assembly
 13543 |     |         assembly {
 13544 |     |             function writeString(pos, w) {
 13545 |     |                 let length := 0
 13546 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13547 |     |                 mstore(pos, length)
 13548 |     |                 let shift := sub(256, shl(3, length))
 13549 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13550 |     |             }
 13551 |     |             m0 := mload(0x00)
 13552 |     |             m1 := mload(0x20)
 13553 |     |             m2 := mload(0x40)
 13554 |     |             m3 := mload(0x60)
 13555 |     |             m4 := mload(0x80)
 13556 |     |             m5 := mload(0xa0)
 13557 |     |             m6 := mload(0xc0)
 13558 |     |             m7 := mload(0xe0)
 13559 |     |             m8 := mload(0x100)
 13560 |     |             // Selector of `log(string,string,uint256,bool)`.
 13561 |     |             mstore(0x00, 0xc3a8a654)
 13562 |     |             mstore(0x20, 0x80)
 13563 |     |             mstore(0x40, 0xc0)
 13564 |     |             mstore(0x60, p2)
 13565 |     |             mstore(0x80, p3)
 13566 |     |             writeString(0xa0, p0)
 13567 |     |             writeString(0xe0, p1)
 13568 |     |         }
 13569 |     |         _sendLogPayload(0x1c, 0x104);
 13570 |     |         /// @solidity memory-safe-assembly
 13571 |     |         assembly {
 13572 |     |             mstore(0x00, m0)
 13573 |     |             mstore(0x20, m1)
 13574 |     |             mstore(0x40, m2)
 13575 |     |             mstore(0x60, m3)
 13576 |     |             mstore(0x80, m4)
 13577 |     |             mstore(0xa0, m5)
 13578 |     |             mstore(0xc0, m6)
 13579 |     |             mstore(0xe0, m7)
 13580 |     |             mstore(0x100, m8)
 13581 |     |         }
 13582 |     |     }
 13583 |     | 
 13584 |     |     function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
 13585 |     |         bytes32 m0;
 13586 |     |         bytes32 m1;
 13587 |     |         bytes32 m2;
 13588 |     |         bytes32 m3;
 13589 |     |         bytes32 m4;
 13590 |     |         bytes32 m5;
 13591 |     |         bytes32 m6;
 13592 |     |         bytes32 m7;
 13593 |     |         bytes32 m8;
 13594 |     |         /// @solidity memory-safe-assembly
 13595 |     |         assembly {
 13596 |     |             function writeString(pos, w) {
 13597 |     |                 let length := 0
 13598 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13599 |     |                 mstore(pos, length)
 13600 |     |                 let shift := sub(256, shl(3, length))
 13601 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13602 |     |             }
 13603 |     |             m0 := mload(0x00)
 13604 |     |             m1 := mload(0x20)
 13605 |     |             m2 := mload(0x40)
 13606 |     |             m3 := mload(0x60)
 13607 |     |             m4 := mload(0x80)
 13608 |     |             m5 := mload(0xa0)
 13609 |     |             m6 := mload(0xc0)
 13610 |     |             m7 := mload(0xe0)
 13611 |     |             m8 := mload(0x100)
 13612 |     |             // Selector of `log(string,string,uint256,uint256)`.
 13613 |     |             mstore(0x00, 0xf45d7d2c)
 13614 |     |             mstore(0x20, 0x80)
 13615 |     |             mstore(0x40, 0xc0)
 13616 |     |             mstore(0x60, p2)
 13617 |     |             mstore(0x80, p3)
 13618 |     |             writeString(0xa0, p0)
 13619 |     |             writeString(0xe0, p1)
 13620 |     |         }
 13621 |     |         _sendLogPayload(0x1c, 0x104);
 13622 |     |         /// @solidity memory-safe-assembly
 13623 |     |         assembly {
 13624 |     |             mstore(0x00, m0)
 13625 |     |             mstore(0x20, m1)
 13626 |     |             mstore(0x40, m2)
 13627 |     |             mstore(0x60, m3)
 13628 |     |             mstore(0x80, m4)
 13629 |     |             mstore(0xa0, m5)
 13630 |     |             mstore(0xc0, m6)
 13631 |     |             mstore(0xe0, m7)
 13632 |     |             mstore(0x100, m8)
 13633 |     |         }
 13634 |     |     }
 13635 |     | 
 13636 |     |     function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
 13637 |     |         bytes32 m0;
 13638 |     |         bytes32 m1;
 13639 |     |         bytes32 m2;
 13640 |     |         bytes32 m3;
 13641 |     |         bytes32 m4;
 13642 |     |         bytes32 m5;
 13643 |     |         bytes32 m6;
 13644 |     |         bytes32 m7;
 13645 |     |         bytes32 m8;
 13646 |     |         bytes32 m9;
 13647 |     |         bytes32 m10;
 13648 |     |         /// @solidity memory-safe-assembly
 13649 |     |         assembly {
 13650 |     |             function writeString(pos, w) {
 13651 |     |                 let length := 0
 13652 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13653 |     |                 mstore(pos, length)
 13654 |     |                 let shift := sub(256, shl(3, length))
 13655 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13656 |     |             }
 13657 |     |             m0 := mload(0x00)
 13658 |     |             m1 := mload(0x20)
 13659 |     |             m2 := mload(0x40)
 13660 |     |             m3 := mload(0x60)
 13661 |     |             m4 := mload(0x80)
 13662 |     |             m5 := mload(0xa0)
 13663 |     |             m6 := mload(0xc0)
 13664 |     |             m7 := mload(0xe0)
 13665 |     |             m8 := mload(0x100)
 13666 |     |             m9 := mload(0x120)
 13667 |     |             m10 := mload(0x140)
 13668 |     |             // Selector of `log(string,string,uint256,string)`.
 13669 |     |             mstore(0x00, 0x5d1a971a)
 13670 |     |             mstore(0x20, 0x80)
 13671 |     |             mstore(0x40, 0xc0)
 13672 |     |             mstore(0x60, p2)
 13673 |     |             mstore(0x80, 0x100)
 13674 |     |             writeString(0xa0, p0)
 13675 |     |             writeString(0xe0, p1)
 13676 |     |             writeString(0x120, p3)
 13677 |     |         }
 13678 |     |         _sendLogPayload(0x1c, 0x144);
 13679 |     |         /// @solidity memory-safe-assembly
 13680 |     |         assembly {
 13681 |     |             mstore(0x00, m0)
 13682 |     |             mstore(0x20, m1)
 13683 |     |             mstore(0x40, m2)
 13684 |     |             mstore(0x60, m3)
 13685 |     |             mstore(0x80, m4)
 13686 |     |             mstore(0xa0, m5)
 13687 |     |             mstore(0xc0, m6)
 13688 |     |             mstore(0xe0, m7)
 13689 |     |             mstore(0x100, m8)
 13690 |     |             mstore(0x120, m9)
 13691 |     |             mstore(0x140, m10)
 13692 |     |         }
 13693 |     |     }
 13694 |     | 
 13695 |     |     function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {
 13696 |     |         bytes32 m0;
 13697 |     |         bytes32 m1;
 13698 |     |         bytes32 m2;
 13699 |     |         bytes32 m3;
 13700 |     |         bytes32 m4;
 13701 |     |         bytes32 m5;
 13702 |     |         bytes32 m6;
 13703 |     |         bytes32 m7;
 13704 |     |         bytes32 m8;
 13705 |     |         bytes32 m9;
 13706 |     |         bytes32 m10;
 13707 |     |         /// @solidity memory-safe-assembly
 13708 |     |         assembly {
 13709 |     |             function writeString(pos, w) {
 13710 |     |                 let length := 0
 13711 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13712 |     |                 mstore(pos, length)
 13713 |     |                 let shift := sub(256, shl(3, length))
 13714 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13715 |     |             }
 13716 |     |             m0 := mload(0x00)
 13717 |     |             m1 := mload(0x20)
 13718 |     |             m2 := mload(0x40)
 13719 |     |             m3 := mload(0x60)
 13720 |     |             m4 := mload(0x80)
 13721 |     |             m5 := mload(0xa0)
 13722 |     |             m6 := mload(0xc0)
 13723 |     |             m7 := mload(0xe0)
 13724 |     |             m8 := mload(0x100)
 13725 |     |             m9 := mload(0x120)
 13726 |     |             m10 := mload(0x140)
 13727 |     |             // Selector of `log(string,string,string,address)`.
 13728 |     |             mstore(0x00, 0x6d572f44)
 13729 |     |             mstore(0x20, 0x80)
 13730 |     |             mstore(0x40, 0xc0)
 13731 |     |             mstore(0x60, 0x100)
 13732 |     |             mstore(0x80, p3)
 13733 |     |             writeString(0xa0, p0)
 13734 |     |             writeString(0xe0, p1)
 13735 |     |             writeString(0x120, p2)
 13736 |     |         }
 13737 |     |         _sendLogPayload(0x1c, 0x144);
 13738 |     |         /// @solidity memory-safe-assembly
 13739 |     |         assembly {
 13740 |     |             mstore(0x00, m0)
 13741 |     |             mstore(0x20, m1)
 13742 |     |             mstore(0x40, m2)
 13743 |     |             mstore(0x60, m3)
 13744 |     |             mstore(0x80, m4)
 13745 |     |             mstore(0xa0, m5)
 13746 |     |             mstore(0xc0, m6)
 13747 |     |             mstore(0xe0, m7)
 13748 |     |             mstore(0x100, m8)
 13749 |     |             mstore(0x120, m9)
 13750 |     |             mstore(0x140, m10)
 13751 |     |         }
 13752 |     |     }
 13753 |     | 
 13754 |     |     function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
 13755 |     |         bytes32 m0;
 13756 |     |         bytes32 m1;
 13757 |     |         bytes32 m2;
 13758 |     |         bytes32 m3;
 13759 |     |         bytes32 m4;
 13760 |     |         bytes32 m5;
 13761 |     |         bytes32 m6;
 13762 |     |         bytes32 m7;
 13763 |     |         bytes32 m8;
 13764 |     |         bytes32 m9;
 13765 |     |         bytes32 m10;
 13766 |     |         /// @solidity memory-safe-assembly
 13767 |     |         assembly {
 13768 |     |             function writeString(pos, w) {
 13769 |     |                 let length := 0
 13770 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13771 |     |                 mstore(pos, length)
 13772 |     |                 let shift := sub(256, shl(3, length))
 13773 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13774 |     |             }
 13775 |     |             m0 := mload(0x00)
 13776 |     |             m1 := mload(0x20)
 13777 |     |             m2 := mload(0x40)
 13778 |     |             m3 := mload(0x60)
 13779 |     |             m4 := mload(0x80)
 13780 |     |             m5 := mload(0xa0)
 13781 |     |             m6 := mload(0xc0)
 13782 |     |             m7 := mload(0xe0)
 13783 |     |             m8 := mload(0x100)
 13784 |     |             m9 := mload(0x120)
 13785 |     |             m10 := mload(0x140)
 13786 |     |             // Selector of `log(string,string,string,bool)`.
 13787 |     |             mstore(0x00, 0x2c1754ed)
 13788 |     |             mstore(0x20, 0x80)
 13789 |     |             mstore(0x40, 0xc0)
 13790 |     |             mstore(0x60, 0x100)
 13791 |     |             mstore(0x80, p3)
 13792 |     |             writeString(0xa0, p0)
 13793 |     |             writeString(0xe0, p1)
 13794 |     |             writeString(0x120, p2)
 13795 |     |         }
 13796 |     |         _sendLogPayload(0x1c, 0x144);
 13797 |     |         /// @solidity memory-safe-assembly
 13798 |     |         assembly {
 13799 |     |             mstore(0x00, m0)
 13800 |     |             mstore(0x20, m1)
 13801 |     |             mstore(0x40, m2)
 13802 |     |             mstore(0x60, m3)
 13803 |     |             mstore(0x80, m4)
 13804 |     |             mstore(0xa0, m5)
 13805 |     |             mstore(0xc0, m6)
 13806 |     |             mstore(0xe0, m7)
 13807 |     |             mstore(0x100, m8)
 13808 |     |             mstore(0x120, m9)
 13809 |     |             mstore(0x140, m10)
 13810 |     |         }
 13811 |     |     }
 13812 |     | 
 13813 |     |     function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
 13814 |     |         bytes32 m0;
 13815 |     |         bytes32 m1;
 13816 |     |         bytes32 m2;
 13817 |     |         bytes32 m3;
 13818 |     |         bytes32 m4;
 13819 |     |         bytes32 m5;
 13820 |     |         bytes32 m6;
 13821 |     |         bytes32 m7;
 13822 |     |         bytes32 m8;
 13823 |     |         bytes32 m9;
 13824 |     |         bytes32 m10;
 13825 |     |         /// @solidity memory-safe-assembly
 13826 |     |         assembly {
 13827 |     |             function writeString(pos, w) {
 13828 |     |                 let length := 0
 13829 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13830 |     |                 mstore(pos, length)
 13831 |     |                 let shift := sub(256, shl(3, length))
 13832 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13833 |     |             }
 13834 |     |             m0 := mload(0x00)
 13835 |     |             m1 := mload(0x20)
 13836 |     |             m2 := mload(0x40)
 13837 |     |             m3 := mload(0x60)
 13838 |     |             m4 := mload(0x80)
 13839 |     |             m5 := mload(0xa0)
 13840 |     |             m6 := mload(0xc0)
 13841 |     |             m7 := mload(0xe0)
 13842 |     |             m8 := mload(0x100)
 13843 |     |             m9 := mload(0x120)
 13844 |     |             m10 := mload(0x140)
 13845 |     |             // Selector of `log(string,string,string,uint256)`.
 13846 |     |             mstore(0x00, 0x8eafb02b)
 13847 |     |             mstore(0x20, 0x80)
 13848 |     |             mstore(0x40, 0xc0)
 13849 |     |             mstore(0x60, 0x100)
 13850 |     |             mstore(0x80, p3)
 13851 |     |             writeString(0xa0, p0)
 13852 |     |             writeString(0xe0, p1)
 13853 |     |             writeString(0x120, p2)
 13854 |     |         }
 13855 |     |         _sendLogPayload(0x1c, 0x144);
 13856 |     |         /// @solidity memory-safe-assembly
 13857 |     |         assembly {
 13858 |     |             mstore(0x00, m0)
 13859 |     |             mstore(0x20, m1)
 13860 |     |             mstore(0x40, m2)
 13861 |     |             mstore(0x60, m3)
 13862 |     |             mstore(0x80, m4)
 13863 |     |             mstore(0xa0, m5)
 13864 |     |             mstore(0xc0, m6)
 13865 |     |             mstore(0xe0, m7)
 13866 |     |             mstore(0x100, m8)
 13867 |     |             mstore(0x120, m9)
 13868 |     |             mstore(0x140, m10)
 13869 |     |         }
 13870 |     |     }
 13871 |     | 
 13872 |     |     function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
 13873 |     |         bytes32 m0;
 13874 |     |         bytes32 m1;
 13875 |     |         bytes32 m2;
 13876 |     |         bytes32 m3;
 13877 |     |         bytes32 m4;
 13878 |     |         bytes32 m5;
 13879 |     |         bytes32 m6;
 13880 |     |         bytes32 m7;
 13881 |     |         bytes32 m8;
 13882 |     |         bytes32 m9;
 13883 |     |         bytes32 m10;
 13884 |     |         bytes32 m11;
 13885 |     |         bytes32 m12;
 13886 |     |         /// @solidity memory-safe-assembly
 13887 |     |         assembly {
 13888 |     |             function writeString(pos, w) {
 13889 |     |                 let length := 0
 13890 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13891 |     |                 mstore(pos, length)
 13892 |     |                 let shift := sub(256, shl(3, length))
 13893 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13894 |     |             }
 13895 |     |             m0 := mload(0x00)
 13896 |     |             m1 := mload(0x20)
 13897 |     |             m2 := mload(0x40)
 13898 |     |             m3 := mload(0x60)
 13899 |     |             m4 := mload(0x80)
 13900 |     |             m5 := mload(0xa0)
 13901 |     |             m6 := mload(0xc0)
 13902 |     |             m7 := mload(0xe0)
 13903 |     |             m8 := mload(0x100)
 13904 |     |             m9 := mload(0x120)
 13905 |     |             m10 := mload(0x140)
 13906 |     |             m11 := mload(0x160)
 13907 |     |             m12 := mload(0x180)
 13908 |     |             // Selector of `log(string,string,string,string)`.
 13909 |     |             mstore(0x00, 0xde68f20a)
 13910 |     |             mstore(0x20, 0x80)
 13911 |     |             mstore(0x40, 0xc0)
 13912 |     |             mstore(0x60, 0x100)
 13913 |     |             mstore(0x80, 0x140)
 13914 |     |             writeString(0xa0, p0)
 13915 |     |             writeString(0xe0, p1)
 13916 |     |             writeString(0x120, p2)
 13917 |     |             writeString(0x160, p3)
 13918 |     |         }
 13919 |     |         _sendLogPayload(0x1c, 0x184);
 13920 |     |         /// @solidity memory-safe-assembly
 13921 |     |         assembly {
 13922 |     |             mstore(0x00, m0)
 13923 |     |             mstore(0x20, m1)
 13924 |     |             mstore(0x40, m2)
 13925 |     |             mstore(0x60, m3)
 13926 |     |             mstore(0x80, m4)
 13927 |     |             mstore(0xa0, m5)
 13928 |     |             mstore(0xc0, m6)
 13929 |     |             mstore(0xe0, m7)
 13930 |     |             mstore(0x100, m8)
 13931 |     |             mstore(0x120, m9)
 13932 |     |             mstore(0x140, m10)
 13933 |     |             mstore(0x160, m11)
 13934 |     |             mstore(0x180, m12)
 13935 |     |         }
 13936 |     |     }
 13937 |     | }
 13938 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/external/VirtualToken.sol
  1 |     | // contracts/VirtualToken.sol
  2 |     | // SPDX-License-Identifier: MIT
  3 |     | pragma solidity >=0.8.2 <0.9.0;
  4 |     | 
  5 |     | import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  6 |     | import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
  7 |     | 
  8 |     | contract VirtualToken is ERC20, Ownable {
  9 |     |     constructor(
 10 |     |         address _owner,
 11 |     |         string memory name,
 12 |     |         string memory symbol
 13 |     |     ) ERC20(name, symbol) Ownable(_owner) {}
 14 |     | 
 15 |     |     function mint(address to, uint256 amount) public {
 16 |     |         _mint(to, amount);
 17 |     |     }
 18 |     | }
 19 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/external/univ3/FixedPoint96.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.2 <0.9.0;
  3 |     | 
  4 |     | /// @notice based on Uniswap V3's TickMath library, but migrated to use Solidity 0.8.2 onwards
  5 |     | 
  6 |     | /// @title FixedPoint96
  7 |     | /// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)
  8 |     | /// @dev Used in SqrtPriceMath.sol
  9 |     | library FixedPoint96 {
 10 |     |     uint8 internal constant RESOLUTION = 96;
 11 |     |     uint256 internal constant Q96 = 0x1000000000000000000000000;
 12 |     | }
 13 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/external/univ3/FullMath.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.2 <0.9.0;
   3 |     | 
   4 |     | /// @notice based on Uniswap V3's TickMath library, but migrated to use Solidity 0.8.2 onwards
   5 |     | import "./MigrationMathUtils.sol";
   6 |     | 
   7 |     | /// @title Contains 512-bit math functions
   8 |     | /// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision
   9 |     | /// @dev Handles "phantom overflow" i.e., allows multiplication and division where an intermediate value overflows 256 bits
  10 |     | library FullMath {
  11 |     |     using MigrationMathUtils for uint256;
  12 |     |     using MigrationMathUtils for int256;
  13 |     | 
  14 |     |     /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
  15 |     |     /// @param a The multiplicand
  16 |     |     /// @param b The multiplier
  17 |     |     /// @param denominator The divisor
  18 |     |     /// @return result The 256-bit result
  19 |     |     /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv
  20 |     |     function mulDiv(
  21 |     |         uint256 a,
  22 |     |         uint256 b,
  23 |     |         uint256 denominator
  24 |     |     ) internal pure returns (uint256 result) {
  25 |     |         // 512-bit multiply [prod1 prod0] = a * b
  26 |     |         // Compute the product mod 2**256 and mod 2**256 - 1
  27 |     |         // then use the Chinese Remainder Theorem to reconstruct
  28 |     |         // the 512 bit result. The result is stored in two 256
  29 |     |         // variables such that product = prod1 * 2**256 + prod0
  30 |     |         uint256 prod0; // Least significant 256 bits of the product
  31 |     |         uint256 prod1; // Most significant 256 bits of the product
  32 |     |         assembly {
  33 |     |             let mm := mulmod(a, b, not(0))
  34 |     |             prod0 := mul(a, b)
  35 |     |             prod1 := sub(sub(mm, prod0), lt(mm, prod0))
  36 |     |         }
  37 |     | 
  38 |     |         // Handle non-overflow cases, 256 by 256 division
  39 |     |         if (prod1 == 0) {
  40 |     |             require(denominator > 0);
  41 |     |             assembly {
  42 |     |                 result := div(prod0, denominator)
  43 |     |             }
  44 |     |             return result;
  45 |     |         }
  46 |     | 
  47 |     |         // Make sure the result is less than 2**256.
  48 |     |         // Also prevents denominator == 0
  49 |     |         require(denominator > prod1);
  50 |     | 
  51 |     |         ///////////////////////////////////////////////
  52 |     |         // 512 by 256 division.
  53 |     |         ///////////////////////////////////////////////
  54 |     | 
  55 |     |         // Make division exact by subtracting the remainder from [prod1 prod0]
  56 |     |         // Compute remainder using mulmod
  57 |     |         uint256 remainder;
  58 |     |         assembly {
  59 |     |             remainder := mulmod(a, b, denominator)
  60 |     |         }
  61 |     |         // Subtract 256 bit number from 512 bit number
  62 |     |         assembly {
  63 |     |             prod1 := sub(prod1, gt(remainder, prod0))
  64 |     |             prod0 := sub(prod0, remainder)
  65 |     |         }
  66 |     | 
  67 |     |         // Factor powers of two out of denominator
  68 |     |         // Compute largest power of two divisor of denominator.
  69 |     |         // Always >= 1.
  70 |     |         uint256 twos = (-denominator.toInt() & denominator.toInt()).toUint();
  71 |     |         // uint256 twos = -denominator & denominator;
  72 |     |         // Divide denominator by power of two
  73 |     |         assembly {
  74 |     |             denominator := div(denominator, twos)
  75 |     |         }
  76 |     | 
  77 |     |         // Divide [prod1 prod0] by the factors of two
  78 |     |         assembly {
  79 |     |             prod0 := div(prod0, twos)
  80 |     |         }
  81 |     |         // Shift in bits from prod1 into prod0. For this we need
  82 |     |         // to flip `twos` such that it is 2**256 / twos.
  83 |     |         // If twos is zero, then it becomes one
  84 |     |         assembly {
  85 |     |             twos := add(div(sub(0, twos), twos), 1)
  86 |     |         }
  87 |     |         prod0 |= prod1 * twos;
  88 |     | 
  89 |     |         // Invert denominator mod 2**256
  90 |     |         // Now that denominator is an odd number, it has an inverse
  91 |     |         // modulo 2**256 such that denominator * inv = 1 mod 2**256.
  92 |     |         // Compute the inverse by starting with a seed that is correct
  93 |     |         // correct for four bits. That is, denominator * inv = 1 mod 2**4
  94 |     |         uint256 inv = (3 * denominator) ^ 2;
  95 |     |         // Now use Newton-Raphson iteration to improve the precision.
  96 |     |         // Thanks to Hensel's lifting lemma, this also works in modular
  97 |     |         // arithmetic, doubling the correct bits in each step.
  98 |     |         inv *= 2 - denominator * inv; // inverse mod 2**8
  99 |     |         inv *= 2 - denominator * inv; // inverse mod 2**16
 100 |     |         inv *= 2 - denominator * inv; // inverse mod 2**32
 101 |     |         inv *= 2 - denominator * inv; // inverse mod 2**64
 102 |     |         inv *= 2 - denominator * inv; // inverse mod 2**128
 103 |     |         inv *= 2 - denominator * inv; // inverse mod 2**256
 104 |     | 
 105 |     |         // Because the division is now exact we can divide by multiplying
 106 |     |         // with the modular inverse of denominator. This will give us the
 107 |     |         // correct result modulo 2**256. Since the precoditions guarantee
 108 |     |         // that the outcome is less than 2**256, this is the final result.
 109 |     |         // We don't need to compute the high bits of the result and prod1
 110 |     |         // is no longer required.
 111 |     |         result = prod0 * inv;
 112 |     |         return result;
 113 |     |     }
 114 |     | 
 115 |     |     /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
 116 |     |     /// @param a The multiplicand
 117 |     |     /// @param b The multiplier
 118 |     |     /// @param denominator The divisor
 119 |     |     /// @return result The 256-bit result
 120 |     |     function mulDivRoundingUp(
 121 |     |         uint256 a,
 122 |     |         uint256 b,
 123 |     |         uint256 denominator
 124 |     |     ) internal pure returns (uint256 result) {
 125 |     |         result = mulDiv(a, b, denominator);
 126 |     |         if (mulmod(a, b, denominator) > 0) {
 127 |     |             require(result < type(uint256).max);
 128 |     |             result++;
 129 |     |         }
 130 |     |     }
 131 |     | }
 132 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/external/univ3/LiquidityAmounts.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.8.2 <0.9.0;
   3 |     | /// @notice based on Uniswap V3's TickMath library, but migrated to use Solidity 0.8.2 onwards
   4 |     | 
   5 |     | import "./FullMath.sol";
   6 |     | import "./FixedPoint96.sol";
   7 |     | 
   8 |     | import "forge-std/console2.sol";
   9 |     | 
  10 |     | /// @title Liquidity amount functions
  11 |     | /// @notice Provides functions for computing liquidity amounts from token amounts and prices
  12 |     | library LiquidityAmounts {
  13 |     |     /// @notice Downcasts uint256 to uint128
  14 |     |     /// @param x The uint258 to be downcasted
  15 |     |     /// @return y The passed value, downcasted to uint128
  16 |     |     function toUint128(uint256 x) private pure returns (uint128 y) {
  17 |     |         require((y = uint128(x)) == x);
  18 |     |     }
  19 |     | 
  20 |     |     /// @notice Computes the amount of liquidity received for a given amount of token0 and price range
  21 |     |     /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))
  22 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
  23 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
  24 |     |     /// @param amount0 The amount0 being sent in
  25 |     |     /// @return liquidity The amount of returned liquidity
  26 |     |     function getLiquidityForAmount0(
  27 |     |         uint160 sqrtRatioAX96,
  28 |     |         uint160 sqrtRatioBX96,
  29 |     |         uint256 amount0
  30 |     |     ) internal pure returns (uint128 liquidity) {
  31 |     |         if (sqrtRatioAX96 > sqrtRatioBX96)
  32 |     |             (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
  33 |     |         uint256 intermediate = FullMath.mulDiv(
  34 |     |             sqrtRatioAX96,
  35 |     |             sqrtRatioBX96,
  36 |     |             FixedPoint96.Q96
  37 |     |         );
  38 |     |         return
  39 |     |             toUint128(
  40 |     |                 FullMath.mulDiv(
  41 |     |                     amount0,
  42 |     |                     intermediate,
  43 |     |                     sqrtRatioBX96 - sqrtRatioAX96
  44 |     |                 )
  45 |     |             );
  46 |     |     }
  47 |     | 
  48 |     |     /// @notice Computes the amount of liquidity received for a given amount of token1 and price range
  49 |     |     /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).
  50 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
  51 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
  52 |     |     /// @param amount1 The amount1 being sent in
  53 |     |     /// @return liquidity The amount of returned liquidity
  54 |     |     function getLiquidityForAmount1(
  55 |     |         uint160 sqrtRatioAX96,
  56 |     |         uint160 sqrtRatioBX96,
  57 |     |         uint256 amount1
  58 |     |     ) internal pure returns (uint128 liquidity) {
  59 |     |         if (sqrtRatioAX96 > sqrtRatioBX96)
  60 |     |             (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
  61 |     |         return
  62 |     |             toUint128(
  63 |     |                 FullMath.mulDiv(
  64 |     |                     amount1,
  65 |     |                     FixedPoint96.Q96,
  66 |     |                     sqrtRatioBX96 - sqrtRatioAX96
  67 |     |                 )
  68 |     |             );
  69 |     |     }
  70 |     | 
  71 |     |     /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current
  72 |     |     /// pool prices and the prices at the tick boundaries
  73 |     |     /// @param sqrtRatioX96 A sqrt price representing the current pool prices
  74 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
  75 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
  76 |     |     /// @param amount0 The amount of token0 being sent in
  77 |     |     /// @param amount1 The amount of token1 being sent in
  78 |     |     /// @return liquidity The maximum amount of liquidity received
  79 |     |     function getLiquidityForAmounts(
  80 |     |         uint160 sqrtRatioX96,
  81 |     |         uint160 sqrtRatioAX96,
  82 |     |         uint160 sqrtRatioBX96,
  83 |     |         uint256 amount0,
  84 |     |         uint256 amount1
  85 |     |     ) internal pure returns (uint128 liquidity) {
  86 |     |         if (sqrtRatioAX96 > sqrtRatioBX96)
  87 |     |             (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
  88 |     | 
  89 |     |         if (sqrtRatioX96 <= sqrtRatioAX96) {
  90 |     |             liquidity = getLiquidityForAmount0(
  91 |     |                 sqrtRatioAX96,
  92 |     |                 sqrtRatioBX96,
  93 |     |                 amount0
  94 |     |             );
  95 |     |         } else if (sqrtRatioX96 < sqrtRatioBX96) {
  96 |     |             uint128 liquidity0 = getLiquidityForAmount0(
  97 |     |                 sqrtRatioX96,
  98 |     |                 sqrtRatioBX96,
  99 |     |                 amount0
 100 |     |             );
 101 |     |             uint128 liquidity1 = getLiquidityForAmount1(
 102 |     |                 sqrtRatioAX96,
 103 |     |                 sqrtRatioX96,
 104 |     |                 amount1
 105 |     |             );
 106 |     | 
 107 |     |             liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;
 108 |     |         } else {
 109 |     |             liquidity = getLiquidityForAmount1(
 110 |     |                 sqrtRatioAX96,
 111 |     |                 sqrtRatioBX96,
 112 |     |                 amount1
 113 |     |             );
 114 |     |         }
 115 |     |     }
 116 |     | 
 117 |     |     /// Modified from Uniswap V3's getAmount0ForLiquidity to resolve overflow issues
 118 |     |     /// @notice Computes the amount of token0 for a given amount of liquidity and a price range
 119 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
 120 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
 121 |     |     /// @param liquidity The liquidity being valued
 122 |     |     /// @return amount0 The amount of token0
 123 |     |     function getAmount0ForLiquidity(
 124 |     |         uint160 sqrtRatioAX96,
 125 |     |         uint160 sqrtRatioBX96,
 126 |     |         uint128 liquidity
 127 |     |     ) internal pure returns (uint256 amount0) {
 128 |     |         if (sqrtRatioAX96 > sqrtRatioBX96)
 129 |     |             (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
 130 |     | 
 131 |     |         uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;
 132 |     |         uint256 numerator2 = FullMath.mulDiv(
 133 |     |             sqrtRatioBX96 - sqrtRatioAX96,
 134 |     |             FixedPoint96.Q96,
 135 |     |             sqrtRatioBX96
 136 |     |         );
 137 |     | 
 138 |     |         uint256 numerator = FullMath.mulDiv(
 139 |     |             numerator1,
 140 |     |             numerator2,
 141 |     |             FixedPoint96.Q96
 142 |     |         );
 143 |     | 
 144 |     |         amount0 = numerator / sqrtRatioAX96;
 145 |     |     }
 146 |     | 
 147 |     |     /// @notice Computes the amount of token1 for a given amount of liquidity and a price range
 148 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
 149 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
 150 |     |     /// @param liquidity The liquidity being valued
 151 |     |     /// @return amount1 The amount of token1
 152 |     |     function getAmount1ForLiquidity(
 153 |     |         uint160 sqrtRatioAX96,
 154 |     |         uint160 sqrtRatioBX96,
 155 |     |         uint128 liquidity
 156 |     |     ) internal pure returns (uint256 amount1) {
 157 |     |         if (sqrtRatioAX96 > sqrtRatioBX96)
 158 |     |             (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
 159 |     | 
 160 |     |         return
 161 |     |             FullMath.mulDiv(
 162 |     |                 liquidity,
 163 |     |                 sqrtRatioBX96 - sqrtRatioAX96,
 164 |     |                 FixedPoint96.Q96
 165 |     |             );
 166 |     |     }
 167 |     | 
 168 |     |     /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current
 169 |     |     /// pool prices and the prices at the tick boundaries
 170 |     |     /// @param sqrtRatioX96 A sqrt price representing the current pool prices
 171 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
 172 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
 173 |     |     /// @param liquidity The liquidity being valued
 174 |     |     /// @return amount0 The amount of token0
 175 |     |     /// @return amount1 The amount of token1
 176 |     |     function getAmountsForLiquidity(
 177 |     |         uint160 sqrtRatioX96,
 178 |     |         uint160 sqrtRatioAX96,
 179 |     |         uint160 sqrtRatioBX96,
 180 |     |         uint128 liquidity
 181 |     |     ) internal pure returns (uint256 amount0, uint256 amount1) {
 182 |     |         if (sqrtRatioAX96 > sqrtRatioBX96)
 183 |     |             (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
 184 |     | 
 185 |     |         if (sqrtRatioX96 <= sqrtRatioAX96) {
 186 |     |             amount0 = getAmount0ForLiquidity(
 187 |     |                 sqrtRatioAX96,
 188 |     |                 sqrtRatioBX96,
 189 |     |                 liquidity
 190 |     |             );
 191 |     |         } else if (sqrtRatioX96 < sqrtRatioBX96) {
 192 |     |             amount0 = getAmount0ForLiquidity(
 193 |     |                 sqrtRatioX96,
 194 |     |                 sqrtRatioBX96,
 195 |     |                 liquidity
 196 |     |             );
 197 |     |             amount1 = getAmount1ForLiquidity(
 198 |     |                 sqrtRatioAX96,
 199 |     |                 sqrtRatioX96,
 200 |     |                 liquidity
 201 |     |             );
 202 |     |         } else {
 203 |     |             amount1 = getAmount1ForLiquidity(
 204 |     |                 sqrtRatioAX96,
 205 |     |                 sqrtRatioBX96,
 206 |     |                 liquidity
 207 |     |             );
 208 |     |         }
 209 |     |     }
 210 |     | }
 211 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/external/univ3/MigrationMathUtils.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | 
  3 |     | pragma solidity >=0.8.2 <0.9.0;
  4 |     | 
  5 |     | library MigrationMathUtils {
  6 |     |     error OverflowUint256ToInt256();
  7 |     |     error OverflowInt256ToUint256();
  8 |     |     error OverflowInt24ToUint256();
  9 |     | 
 10 |     |     function toInt(uint256 x) internal pure returns (int256) {
 11 |     |         if (x > uint256(type(int256).max)) {
 12 |     |             revert OverflowUint256ToInt256();
 13 |     |         }
 14 |     | 
 15 |     |         return int256(x);
 16 |     |     }
 17 |     | 
 18 |     |     function toUint(int256 x) internal pure returns (uint256) {
 19 |     |         if (x < 0) {
 20 |     |             revert OverflowInt256ToUint256();
 21 |     |         }
 22 |     | 
 23 |     |         return uint256(x);
 24 |     |     }
 25 |     | 
 26 | *   |     function toUint256(int24 x) internal pure returns (uint256) {
 27 | *   |         if (x < 0) {
 28 |     |             revert OverflowInt24ToUint256();
 29 |     |         }
 30 | *   |         return uint256(uint24(x));
 31 |     |     }
 32 |     | 
 33 |     |     function abs(int256 x) internal pure returns (uint256 z) {
 34 |     |         assembly {
 35 |     |             /// shr(255, x):
 36 |     |             /// shifts the number x to the right by 255 bits:
 37 |     |             /// IF the number is negative, the leftmost bit (bit 255) will be 1
 38 |     |             /// IF the number is positive,the leftmost bit (bit 255) will be 0
 39 |     | 
 40 |     |             /// sub(0, shr(255, x)):
 41 |     |             /// creates a mask of all 1s if x is negative
 42 |     |             /// creates a mask of all 0s if x is positive
 43 |     |             let mask := sub(0, shr(255, x))
 44 |     | 
 45 |     |             /// If x is negative, this effectively negates the number
 46 |     |             /// if x is positive, it leaves the number unchanged, thereby computing the absolute value
 47 |     |             z := xor(mask, add(mask, x))
 48 |     |         }
 49 |     |     }
 50 |     | }
 51 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/external/univ3/TickMath.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.8.2 <0.9.0;
   3 |     | 
   4 |     | import "./MigrationMathUtils.sol";
   5 |     | 
   6 |     | /// @notice based on Uniswap V3's TickMath library, but migrated to use Solidity 0.8.2 onwards
   7 |     | /// @title Math library for computing sqrt prices from ticks and vice versa
   8 |     | /// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports
   9 |     | /// prices between 2**-128 and 2**128
  10 |     | library TickMath {
  11 |     |     using MigrationMathUtils for int24;
  12 |     | 
  13 |     |     /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128
  14 |     |     int24 internal constant MIN_TICK = -887272;
  15 |     |     /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128
  16 | *   |     int24 internal constant MAX_TICK = -MIN_TICK;
  17 |     | 
  18 |     |     /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)
  19 |     |     uint160 internal constant MIN_SQRT_RATIO = 4295128739;
  20 |     |     /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)
  21 |     |     uint160 internal constant MAX_SQRT_RATIO =
  22 |     |         1461446703485210103287273052203988822378723970342;
  23 |     | 
  24 |     |     /// @notice Calculates sqrt(1.0001^tick) * 2^96
  25 |     |     /// @dev Throws if |tick| > max tick
  26 |     |     /// @param tick The input tick for the above formula
  27 |     |     /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)
  28 |     |     /// at the given tick
  29 | *   |     function getSqrtRatioAtTick(
  30 |     |         int24 tick
  31 | *   |     ) internal pure returns (uint160 sqrtPriceX96) {
  32 | *   |         uint256 absTick = tick < 0
  33 | *   |             ? uint256(-int256(tick))
  34 | *   |             : uint256(int256(tick));
  35 | *   |         require(absTick <= MAX_TICK.toUint256(), "T");
  36 |     | 
  37 | *   |         uint256 ratio = absTick & 0x1 != 0
  38 |     |             ? 0xfffcb933bd6fad37aa2d162d1a594001
  39 |     |             : 0x100000000000000000000000000000000;
  40 | *   |         if (absTick & 0x2 != 0)
  41 |     |             ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;
  42 | *   |         if (absTick & 0x4 != 0)
  43 |     |             ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;
  44 | *   |         if (absTick & 0x8 != 0)
  45 | *   |             ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;
  46 | *   |         if (absTick & 0x10 != 0)
  47 | *   |             ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;
  48 | *   |         if (absTick & 0x20 != 0)
  49 | *   |             ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;
  50 | *   |         if (absTick & 0x40 != 0)
  51 | *   |             ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;
  52 | *   |         if (absTick & 0x80 != 0)
  53 | *   |             ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;
  54 | *   |         if (absTick & 0x100 != 0)
  55 | *   |             ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;
  56 | *   |         if (absTick & 0x200 != 0)
  57 | *   |             ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;
  58 | *   |         if (absTick & 0x400 != 0)
  59 | *   |             ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;
  60 | *   |         if (absTick & 0x800 != 0)
  61 | *   |             ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;
  62 | *   |         if (absTick & 0x1000 != 0)
  63 | *   |             ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;
  64 | *   |         if (absTick & 0x2000 != 0)
  65 | *   |             ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;
  66 | *   |         if (absTick & 0x4000 != 0)
  67 | *   |             ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;
  68 | *   |         if (absTick & 0x8000 != 0)
  69 | *   |             ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;
  70 | *   |         if (absTick & 0x10000 != 0)
  71 | *   |             ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;
  72 | *   |         if (absTick & 0x20000 != 0)
  73 | *   |             ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;
  74 | *   |         if (absTick & 0x40000 != 0)
  75 | *   |             ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;
  76 | *   |         if (absTick & 0x80000 != 0)
  77 | *   |             ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;
  78 |     | 
  79 | *   |         if (tick > 0) ratio = type(uint256).max / ratio;
  80 |     | 
  81 |     |         // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.
  82 |     |         // we then downcast because we know the result always fits within 160 bits due to our tick input constraint
  83 |     |         // we round up in the division so getTickAtSqrtRatio of the output price is always consistent
  84 | *   |         sqrtPriceX96 = uint160(
  85 | *   |             (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)
  86 |     |         );
  87 |     |     }
  88 |     | 
  89 |     |     /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio
  90 |     |     /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may
  91 |     |     /// ever return.
  92 |     |     /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96
  93 |     |     /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio
  94 |     |     function getTickAtSqrtRatio(
  95 |     |         uint160 sqrtPriceX96
  96 |     |     ) internal pure returns (int24 tick) {
  97 |     |         // second inequality must be < because the price can never reach the price at the max tick
  98 |     |         require(
  99 |     |             sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,
 100 |     |             "R"
 101 |     |         );
 102 |     |         uint256 ratio = uint256(sqrtPriceX96) << 32;
 103 |     | 
 104 |     |         uint256 r = ratio;
 105 |     |         uint256 msb = 0;
 106 |     | 
 107 |     |         assembly {
 108 |     |             let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))
 109 |     |             msb := or(msb, f)
 110 |     |             r := shr(f, r)
 111 |     |         }
 112 |     |         assembly {
 113 |     |             let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))
 114 |     |             msb := or(msb, f)
 115 |     |             r := shr(f, r)
 116 |     |         }
 117 |     |         assembly {
 118 |     |             let f := shl(5, gt(r, 0xFFFFFFFF))
 119 |     |             msb := or(msb, f)
 120 |     |             r := shr(f, r)
 121 |     |         }
 122 |     |         assembly {
 123 |     |             let f := shl(4, gt(r, 0xFFFF))
 124 |     |             msb := or(msb, f)
 125 |     |             r := shr(f, r)
 126 |     |         }
 127 |     |         assembly {
 128 |     |             let f := shl(3, gt(r, 0xFF))
 129 |     |             msb := or(msb, f)
 130 |     |             r := shr(f, r)
 131 |     |         }
 132 |     |         assembly {
 133 |     |             let f := shl(2, gt(r, 0xF))
 134 |     |             msb := or(msb, f)
 135 |     |             r := shr(f, r)
 136 |     |         }
 137 |     |         assembly {
 138 |     |             let f := shl(1, gt(r, 0x3))
 139 |     |             msb := or(msb, f)
 140 |     |             r := shr(f, r)
 141 |     |         }
 142 |     |         assembly {
 143 |     |             let f := gt(r, 0x1)
 144 |     |             msb := or(msb, f)
 145 |     |         }
 146 |     | 
 147 |     |         if (msb >= 128) r = ratio >> (msb - 127);
 148 |     |         else r = ratio << (127 - msb);
 149 |     | 
 150 |     |         int256 log_2 = (int256(msb) - 128) << 64;
 151 |     | 
 152 |     |         assembly {
 153 |     |             r := shr(127, mul(r, r))
 154 |     |             let f := shr(128, r)
 155 |     |             log_2 := or(log_2, shl(63, f))
 156 |     |             r := shr(f, r)
 157 |     |         }
 158 |     |         assembly {
 159 |     |             r := shr(127, mul(r, r))
 160 |     |             let f := shr(128, r)
 161 |     |             log_2 := or(log_2, shl(62, f))
 162 |     |             r := shr(f, r)
 163 |     |         }
 164 |     |         assembly {
 165 |     |             r := shr(127, mul(r, r))
 166 |     |             let f := shr(128, r)
 167 |     |             log_2 := or(log_2, shl(61, f))
 168 |     |             r := shr(f, r)
 169 |     |         }
 170 |     |         assembly {
 171 |     |             r := shr(127, mul(r, r))
 172 |     |             let f := shr(128, r)
 173 |     |             log_2 := or(log_2, shl(60, f))
 174 |     |             r := shr(f, r)
 175 |     |         }
 176 |     |         assembly {
 177 |     |             r := shr(127, mul(r, r))
 178 |     |             let f := shr(128, r)
 179 |     |             log_2 := or(log_2, shl(59, f))
 180 |     |             r := shr(f, r)
 181 |     |         }
 182 |     |         assembly {
 183 |     |             r := shr(127, mul(r, r))
 184 |     |             let f := shr(128, r)
 185 |     |             log_2 := or(log_2, shl(58, f))
 186 |     |             r := shr(f, r)
 187 |     |         }
 188 |     |         assembly {
 189 |     |             r := shr(127, mul(r, r))
 190 |     |             let f := shr(128, r)
 191 |     |             log_2 := or(log_2, shl(57, f))
 192 |     |             r := shr(f, r)
 193 |     |         }
 194 |     |         assembly {
 195 |     |             r := shr(127, mul(r, r))
 196 |     |             let f := shr(128, r)
 197 |     |             log_2 := or(log_2, shl(56, f))
 198 |     |             r := shr(f, r)
 199 |     |         }
 200 |     |         assembly {
 201 |     |             r := shr(127, mul(r, r))
 202 |     |             let f := shr(128, r)
 203 |     |             log_2 := or(log_2, shl(55, f))
 204 |     |             r := shr(f, r)
 205 |     |         }
 206 |     |         assembly {
 207 |     |             r := shr(127, mul(r, r))
 208 |     |             let f := shr(128, r)
 209 |     |             log_2 := or(log_2, shl(54, f))
 210 |     |             r := shr(f, r)
 211 |     |         }
 212 |     |         assembly {
 213 |     |             r := shr(127, mul(r, r))
 214 |     |             let f := shr(128, r)
 215 |     |             log_2 := or(log_2, shl(53, f))
 216 |     |             r := shr(f, r)
 217 |     |         }
 218 |     |         assembly {
 219 |     |             r := shr(127, mul(r, r))
 220 |     |             let f := shr(128, r)
 221 |     |             log_2 := or(log_2, shl(52, f))
 222 |     |             r := shr(f, r)
 223 |     |         }
 224 |     |         assembly {
 225 |     |             r := shr(127, mul(r, r))
 226 |     |             let f := shr(128, r)
 227 |     |             log_2 := or(log_2, shl(51, f))
 228 |     |             r := shr(f, r)
 229 |     |         }
 230 |     |         assembly {
 231 |     |             r := shr(127, mul(r, r))
 232 |     |             let f := shr(128, r)
 233 |     |             log_2 := or(log_2, shl(50, f))
 234 |     |         }
 235 |     | 
 236 |     |         int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number
 237 |     | 
 238 |     |         int24 tickLow = int24(
 239 |     |             (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128
 240 |     |         );
 241 |     |         int24 tickHi = int24(
 242 |     |             (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128
 243 |     |         );
 244 |     | 
 245 |     |         tick = tickLow == tickHi
 246 |     |             ? tickLow
 247 |     |             : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96
 248 |     |                 ? tickHi
 249 |     |                 : tickLow;
 250 |     |     }
 251 |     | }
 252 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/IConfigurationModule.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.2 <0.9.0;
  3 |     | 
  4 |     | import {IFoilStructs} from "./IFoilStructs.sol";
  5 |     | 
  6 |     | interface IConfigurationModule {
  7 |     |     event MarketInitialized(
  8 |     |         address initialOwner,
  9 |     |         address collateralAsset,
 10 |     |         IFoilStructs.EpochParams epochParams
 11 |     |     );
 12 |     | 
 13 |     |     event MarketUpdated(IFoilStructs.EpochParams epochParams);
 14 |     | 
 15 |     |     event EpochCreated(
 16 |     |         uint epochId,
 17 |     |         uint256 startTime,
 18 |     |         uint256 endTime,
 19 |     |         uint160 startingSqrtPriceX96
 20 |     |     );
 21 |     | 
 22 |     |     event OwnershipTransferStarted(
 23 |     |         address indexed previousOwner,
 24 |     |         address indexed newOwner
 25 |     |     );
 26 |     | 
 27 |     |     event OwnershipTransferred(
 28 |     |         address indexed previousOwner,
 29 |     |         address indexed newOwner
 30 |     |     );
 31 |     | 
 32 |     |     /**
 33 |     |      * @notice Initializes a market
 34 |     |      * @param owner Address of a market owner, which can update the configurations and submit a settlement price
 35 |     |      * @param collateralAsset Address of the collateral used by the market. This cannot be a rebase token.
 36 |     |      * @param epochParams Parameters used when new epochs are created
 37 |     |      */
 38 |     |     function initializeMarket(
 39 |     |         address owner,
 40 |     |         address collateralAsset,
 41 |     |         IFoilStructs.EpochParams memory epochParams,
 42 |     |         address foil //@audit added by fuzzer
 43 |     |     ) external;
 44 |     | 
 45 |     |     function updateMarket(IFoilStructs.EpochParams memory epochParams) external;
 46 |     | 
 47 |     |     function createEpoch(
 48 |     |         uint256 startTime,
 49 |     |         uint256 endTime,
 50 |     |         uint160 startingSqrtPriceX96,
 51 |     |         uint256 salt
 52 |     |     ) external;
 53 |     | }
 54 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/IERC165Module.sol
 1 |     | //SPDX-License-Identifier: MIT
 2 |     | pragma solidity >=0.8.11 <0.9.0;
 3 |     | 
 4 |     | interface IERC165Module {
 5 |     |     function supportsInterface(bytes4 interfaceId) external view returns (bool);
 6 |     | }
 7 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/IERC721.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.11 <0.9.0;
   3 |     | 
   4 |     | /**
   5 |     |  * @title ERC721 non-fungible token (NFT) contract.
   6 |     |  */
   7 |     | interface IERC721Foil {
   8 |     |     /**
   9 |     |      * @notice Thrown when an address attempts to provide allowance to itself.
  10 |     |      * @param addr The address attempting to provide allowance.
  11 |     |      */
  12 |     |     error CannotSelfApprove(address addr);
  13 |     | 
  14 |     |     /**
  15 |     |      * @notice Thrown when attempting to transfer a token to an address that does not satisfy IERC721Receiver requirements.
  16 |     |      * @param addr The address that cannot receive the tokens.
  17 |     |      */
  18 |     |     error InvalidTransferRecipient(address addr);
  19 |     | 
  20 |     |     /**
  21 |     |      * @notice Thrown when attempting to specify an owner which is not valid (ex. the 0x00000... address)
  22 |     |      */
  23 |     |     error InvalidOwner(address addr);
  24 |     | 
  25 |     |     /**
  26 |     |      * @notice Thrown when attempting to operate on a token id that does not exist.
  27 |     |      * @param id The token id that does not exist.
  28 |     |      */
  29 |     |     error TokenDoesNotExist(uint256 id);
  30 |     | 
  31 |     |     /**
  32 |     |      * @notice Thrown when attempting to mint a token that already exists.
  33 |     |      * @param id The token id that already exists.
  34 |     |      */
  35 |     |     error TokenAlreadyMinted(uint256 id);
  36 |     | 
  37 |     |     /**
  38 |     |      * @notice Emitted when `tokenId` token is transferred from `from` to `to`.
  39 |     |      */
  40 |     |     event Transfer(
  41 |     |         address indexed from,
  42 |     |         address indexed to,
  43 |     |         uint256 indexed tokenId
  44 |     |     );
  45 |     | 
  46 |     |     /**
  47 |     |      * @notice Emitted when `owner` enables `approved` to manage the `tokenId` token.
  48 |     |      */
  49 |     |     event Approval(
  50 |     |         address indexed owner,
  51 |     |         address indexed approved,
  52 |     |         uint256 indexed tokenId
  53 |     |     );
  54 |     | 
  55 |     |     /**
  56 |     |      * @notice Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
  57 |     |      */
  58 |     |     event ApprovalForAll(
  59 |     |         address indexed owner,
  60 |     |         address indexed operator,
  61 |     |         bool approved
  62 |     |     );
  63 |     | 
  64 |     |     function name() external view returns (string memory);
  65 |     | 
  66 |     |     function symbol() external view returns (string memory);
  67 |     | 
  68 |     |     function tokenURI(uint256 tokenId) external view returns (string memory);
  69 |     | 
  70 |     |     /**
  71 |     |      * @notice Returns the number of tokens in ``owner``'s account.
  72 |     |      *
  73 |     |      * Requirements:
  74 |     |      *
  75 |     |      * - `holder` must be a valid address
  76 |     |      */
  77 |     |     function balanceOf(address holder) external view returns (uint256 balance);
  78 |     | 
  79 |     |     /**
  80 |     |      * @notice Returns the owner of the `tokenId` token.
  81 |     |      *
  82 |     |      * Requirements:
  83 |     |      *
  84 |     |      * - `tokenId` must exist.
  85 |     |      */
  86 |     |     function ownerOf(uint256 tokenId) external view returns (address owner);
  87 |     | 
  88 |     |     /**
  89 |     |      * @notice Safely transfers `tokenId` token from `from` to `to`.
  90 |     |      *
  91 |     |      * Requirements:
  92 |     |      *
  93 |     |      * - `from` cannot be the zero address.
  94 |     |      * - `to` cannot be the zero address.
  95 |     |      * - `tokenId` token must exist and be owned by `from`.
  96 |     |      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
  97 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
  98 |     |      *
  99 |     |      * Emits a {Transfer} event.
 100 |     |      */
 101 |     |     function safeTransferFrom(
 102 |     |         address from,
 103 |     |         address to,
 104 |     |         uint256 tokenId,
 105 |     |         bytes calldata data
 106 |     |     ) external;
 107 |     | 
 108 |     |     /**
 109 |     |      * @notice Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
 110 |     |      * are aware of the ERC721 protocol to prevent tokens from being forever locked.
 111 |     |      *
 112 |     |      * Requirements:
 113 |     |      *
 114 |     |      * - `from` cannot be the zero address.
 115 |     |      * - `to` cannot be the zero address.
 116 |     |      * - `tokenId` token must exist and be owned by `from`.
 117 |     |      * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
 118 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
 119 |     |      *
 120 |     |      * Emits a {Transfer} event.
 121 |     |      */
 122 |     |     function safeTransferFrom(
 123 |     |         address from,
 124 |     |         address to,
 125 |     |         uint256 tokenId
 126 |     |     ) external;
 127 |     | 
 128 |     |     /**
 129 |     |      * @notice Transfers `tokenId` token from `from` to `to`.
 130 |     |      *
 131 |     |      * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
 132 |     |      *
 133 |     |      * Requirements:
 134 |     |      *
 135 |     |      * - `from` cannot be the zero address.
 136 |     |      * - `to` cannot be the zero address.
 137 |     |      * - `tokenId` token must be owned by `from`.
 138 |     |      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
 139 |     |      *
 140 |     |      * Emits a {Transfer} event.
 141 |     |      */
 142 |     |     function transferFrom(address from, address to, uint256 tokenId) external;
 143 |     | 
 144 |     |     /**
 145 |     |      * @notice Gives permission to `to` to transfer `tokenId` token to another account.
 146 |     |      * The approval is cleared when the token is transferred.
 147 |     |      *
 148 |     |      * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
 149 |     |      *
 150 |     |      * Requirements:
 151 |     |      *
 152 |     |      * - The caller must own the token or be an approved operator.
 153 |     |      * - `tokenId` must exist.
 154 |     |      *
 155 |     |      * Emits an {Approval} event.
 156 |     |      */
 157 |     |     function approve(address to, uint256 tokenId) external;
 158 |     | 
 159 |     |     /**
 160 |     |      * @notice Approve or remove `operator` as an operator for the caller.
 161 |     |      * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
 162 |     |      *
 163 |     |      * Requirements:
 164 |     |      *
 165 |     |      * - The `operator` cannot be the caller.
 166 |     |      *
 167 |     |      * Emits an {ApprovalForAll} event.
 168 |     |      */
 169 |     |     function setApprovalForAll(address operator, bool approved) external;
 170 |     | 
 171 |     |     /**
 172 |     |      * @notice Returns the account approved for `tokenId` token.
 173 |     |      *
 174 |     |      * Requirements:
 175 |     |      *
 176 |     |      * - `tokenId` must exist.
 177 |     |      */
 178 |     |     function getApproved(
 179 |     |         uint256 tokenId
 180 |     |     ) external view returns (address operator);
 181 |     | 
 182 |     |     /**
 183 |     |      * @notice Returns if the `operator` is allowed to manage all of the assets of `owner`.
 184 |     |      *
 185 |     |      * See {setApprovalForAll}
 186 |     |      */
 187 |     |     function isApprovedForAll(
 188 |     |         address owner,
 189 |     |         address operator
 190 |     |     ) external view returns (bool);
 191 |     | }
 192 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/IERC721Enumerable.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | import "./IERC721.sol";
  5 |     | 
  6 |     | /**
  7 |     |  * @title ERC721 extension with helper functions that allow the enumeration of NFT tokens.
  8 |     |  */
  9 |     | interface IERC721Enumerable is IERC721Foil {
 10 |     |     /**
 11 |     |      * @notice Thrown calling *ByIndex function with an index greater than the number of tokens existing
 12 |     |      * @param requestedIndex The index requested by the caller
 13 |     |      * @param length The length of the list that is being iterated, making the max index queryable length - 1
 14 |     |      */
 15 |     |     error IndexOverrun(uint256 requestedIndex, uint256 length);
 16 |     | 
 17 |     |     /**
 18 |     |      * @dev Returns the total amount of tokens stored by the contract.
 19 |     |      */
 20 |     |     function totalSupply() external view returns (uint256);
 21 |     | 
 22 |     |     /**
 23 |     |      * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
 24 |     |      * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
 25 |     |      *
 26 |     |      * Requirements:
 27 |     |      * - `owner` must be a valid address
 28 |     |      * - `index` must be less than the balance of the tokens for the owner
 29 |     |      */
 30 |     |     function tokenOfOwnerByIndex(
 31 |     |         address owner,
 32 |     |         uint256 index
 33 |     |     ) external view returns (uint256);
 34 |     | 
 35 |     |     /**
 36 |     |      * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
 37 |     |      * Use along with {totalSupply} to enumerate all tokens.
 38 |     |      *
 39 |     |      * Requirements:
 40 |     |      * - `index` must be less than the total supply of the tokens
 41 |     |      */
 42 |     |     function tokenByIndex(uint256 index) external view returns (uint256);
 43 |     | }
 44 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/IFoilStructs.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.2 <0.9.0;
  3 |     | 
  4 |     | interface IFoilStructs {
  5 |     |     enum PositionKind {
  6 |     |         Unknown,
  7 |     |         Liquidity,
  8 |     |         Trade
  9 |     |     }
 10 |     | 
 11 |     |     struct LiquidityMintParams {
 12 |     |         uint256 epochId;
 13 |     |         uint256 amountTokenA;
 14 |     |         uint256 amountTokenB;
 15 |     |         uint256 collateralAmount;
 16 |     |         int24 lowerTick;
 17 |     |         int24 upperTick;
 18 |     |         uint256 minAmountTokenA;
 19 |     |         uint256 minAmountTokenB;
 20 |     |         uint256 deadline;
 21 |     |     }
 22 |     | 
 23 |     |     struct LiquidityDecreaseParams {
 24 |     |         uint256 positionId;
 25 |     |         uint128 liquidity;
 26 |     |         uint256 minGasAmount;
 27 |     |         uint256 minEthAmount;
 28 |     |         uint256 deadline;
 29 |     |     }
 30 |     | 
 31 |     |     struct LiquidityIncreaseParams {
 32 |     |         uint256 positionId;
 33 |     |         uint256 collateralAmount;
 34 |     |         uint256 gasTokenAmount;
 35 |     |         uint256 ethTokenAmount;
 36 |     |         uint256 minGasAmount;
 37 |     |         uint256 minEthAmount;
 38 |     |         uint256 deadline;
 39 |     |     }
 40 |     | 
 41 |     |     struct EpochParams {
 42 |     |         int24 baseAssetMinPriceTick;
 43 |     |         int24 baseAssetMaxPriceTick;
 44 |     |         uint24 feeRate;
 45 |     |         uint64 assertionLiveness;
 46 |     |         address bondCurrency;
 47 |     |         uint256 bondAmount;
 48 |     |         bytes32 priceUnit;
 49 |     |         address uniswapPositionManager;
 50 |     |         address uniswapSwapRouter;
 51 |     |         address uniswapQuoter;
 52 |     |         address optimisticOracleV3;
 53 |     |     }
 54 |     | }
 55 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/ILiquidityModule.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.2 <0.9.0;
   3 |     | 
   4 |     | import {IFoilStructs} from "./IFoilStructs.sol";
   5 |     | import {INonfungiblePositionManager} from "../interfaces/external/INonfungiblePositionManager.sol";
   6 |     | 
   7 |     | interface ILiquidityModule {
   8 |     |     event LiquidityPositionCreated(
   9 |     |         uint256 indexed epochId,
  10 |     |         uint256 indexed positionId,
  11 |     |         uint256 collateralAmount,
  12 |     |         uint128 liquidity,
  13 |     |         uint256 addedAmount0,
  14 |     |         uint256 addedAmount1,
  15 |     |         int24 lowerTick,
  16 |     |         int24 upperTick
  17 |     |     );
  18 |     | 
  19 |     |     event LiquidityPositionDecreased(
  20 |     |         uint256 indexed epochId,
  21 |     |         uint256 indexed positionId,
  22 |     |         uint256 collateralAmount,
  23 |     |         uint128 liquidity,
  24 |     |         uint256 amount0,
  25 |     |         uint256 amount1
  26 |     |     );
  27 |     | 
  28 |     |     event LiquidityPositionIncreased(
  29 |     |         uint256 indexed epochId,
  30 |     |         uint256 indexed positionId,
  31 |     |         uint256 collateralAmount,
  32 |     |         uint128 liquidity,
  33 |     |         uint256 amount0,
  34 |     |         uint256 amount1
  35 |     |     );
  36 |     | 
  37 |     |     event LiquidityPositionClosed(
  38 |     |         uint256 indexed epochId,
  39 |     |         uint256 indexed positionId,
  40 |     |         IFoilStructs.PositionKind kind,
  41 |     |         uint256 collectedAmount0,
  42 |     |         uint256 collectedAmount1
  43 |     |     );
  44 |     | 
  45 |     |     function createLiquidityPosition(
  46 |     |         IFoilStructs.LiquidityMintParams memory params
  47 |     |     )
  48 |     |         external
  49 |     |         returns (
  50 |     |             uint256 id,
  51 |     |             uint256 collateralAmount,
  52 |     |             uint256 uniswapNftId,
  53 |     |             uint128 liquidity,
  54 |     |             uint256 addedAmount0,
  55 |     |             uint256 addedAmount1
  56 |     |         );
  57 |     | 
  58 |     |     struct DecreaseLiquidityPositionStack {
  59 |     |         uint256 previousAmount0;
  60 |     |         uint256 previousAmount1;
  61 |     |         uint128 previousLiquidity;
  62 |     |         int24 lowerTick;
  63 |     |         int24 upperTick;
  64 |     |         INonfungiblePositionManager.DecreaseLiquidityParams decreaseParams;
  65 |     |         uint256 tokensOwed0;
  66 |     |         uint256 tokensOwed1;
  67 |     |     }
  68 |     | 
  69 |     |     function decreaseLiquidityPosition(
  70 |     |         IFoilStructs.LiquidityDecreaseParams memory params
  71 |     |     )
  72 |     |         external
  73 |     |         returns (uint256 amount0, uint256 amount1, uint256 collateralAmount);
  74 |     | 
  75 |     |     struct IncreaseLiquidityPositionStack {
  76 |     |         uint256 previousAmount0;
  77 |     |         uint256 previousAmount1;
  78 |     |         uint128 previousLiquidity;
  79 |     |         int24 lowerTick;
  80 |     |         int24 upperTick;
  81 |     |         INonfungiblePositionManager.IncreaseLiquidityParams increaseParams;
  82 |     |         uint256 tokensOwed0;
  83 |     |         uint256 tokensOwed1;
  84 |     |     }
  85 |     | 
  86 |     |     function increaseLiquidityPosition(
  87 |     |         IFoilStructs.LiquidityIncreaseParams memory params
  88 |     |     )
  89 |     |         external
  90 |     |         returns (
  91 |     |             uint128 liquidity,
  92 |     |             uint256 amount0,
  93 |     |             uint256 amount1,
  94 |     |             uint256 collateralAmount
  95 |     |         );
  96 |     | 
  97 |     |     function getTokenAmounts(
  98 |     |         uint256 epochId,
  99 |     |         uint256 depositedCollateralAmount,
 100 |     |         uint160 sqrtPriceX96,
 101 |     |         uint160 sqrtPriceAX96,
 102 |     |         uint160 sqrtPriceBX96
 103 |     |     )
 104 |     |         external
 105 |     |         returns (
 106 |     |             // view //@audit changed by fuzzer
 107 |     |             uint256 amount0,
 108 |     |             uint256 amount1,
 109 |     |             uint128 liquidity
 110 |     |         );
 111 |     | 
 112 |     |     function getCollateralRequirementForAdditionalTokens(
 113 |     |         uint256 positionId,
 114 |     |         uint256 amount0,
 115 |     |         uint256 amount1
 116 |     |     )
 117 |     |         external
 118 |     |         returns (
 119 |     |             // ) external view returns (uint256); //@audit changed by fuzzer
 120 |     |             uint256
 121 |     |         );
 122 |     | }
 123 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/ISettlementModule.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import {IFoilStructs} from "./IFoilStructs.sol";
  5 |     | 
  6 |     | /**
  7 |     |  * @title Interface for the SettlementModule
  8 |     |  * @notice This interface defines the functions for settling positions in an epoch
  9 |     |  */
 10 |     | interface ISettlementModule {
 11 |     |     /**
 12 |     |      * @notice Settles a position
 13 |     |      * @param positionId The ID of the position to settle
 14 |     |      */
 15 |     |     function settlePosition(uint256 positionId) external returns (uint256);
 16 |     | 
 17 |     |     /**
 18 |     |      * @notice Event emitted when a position is settled
 19 |     |      * @param positionId The ID of the settled position
 20 |     |      * @param withdrawnCollateral The amount of collateral withdrawn after settlement
 21 |     |      */
 22 |     |     event PositionSettled(uint256 positionId, uint256 withdrawnCollateral);
 23 |     | }
 24 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/ITradeModule.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.2 <0.9.0;
  3 |     | 
  4 |     | import {IFoilStructs} from "./IFoilStructs.sol";
  5 |     | 
  6 |     | interface ITradeModule {
  7 |     |     event TraderPositionCreated(
  8 |     |         uint256 indexed epochId,
  9 |     |         uint256 indexed positionId,
 10 |     |         uint256 collateralAmount,
 11 |     |         uint256 vEthAmount,
 12 |     |         uint256 vGasAmount,
 13 |     |         uint256 borrowedVEth,
 14 |     |         uint256 borrowedVGas,
 15 |     |         uint256 initialPrice,
 16 |     |         uint256 finalPrice,
 17 |     |         uint256 tradeRatio
 18 |     |     );
 19 |     | 
 20 |     |     event TraderPositionModified(
 21 |     |         uint256 indexed epochId,
 22 |     |         uint256 indexed positionId,
 23 |     |         uint256 collateralAmount,
 24 |     |         uint256 vEthAmount,
 25 |     |         uint256 vGasAmount,
 26 |     |         uint256 borrowedVEth,
 27 |     |         uint256 borrowedVGas,
 28 |     |         uint256 initialPrice,
 29 |     |         uint256 finalPrice,
 30 |     |         uint256 tradeRatio
 31 |     |     );
 32 |     | 
 33 |     |     /** @dev Create a new trader position.
 34 |     |      * @param epochId The epoch id.
 35 |     |      * @param size The position size.
 36 |     |      * @param maxCollateral The maximum collateral that can be deposited.
 37 |     |      * @param deadline The deadline for the transaction.
 38 |     |      * @return positionId The position id.
 39 |     |      */
 40 |     |     function createTraderPosition(
 41 |     |         uint256 epochId,
 42 |     |         int256 size,
 43 |     |         uint256 maxCollateral,
 44 |     |         uint256 deadline
 45 |     |     ) external returns (uint256 positionId);
 46 |     | 
 47 |     |     /** @dev Modify an existing trader position.
 48 |     |      * @param positionId The position id.
 49 |     |      * @param size The new position size.
 50 |     |      * @param deltaCollateralLimit The change in the collateral limit. Positive for adding collateral, negative for reomving (closing a position means minimum profit to withdraw)
 51 |     |      * @param deadline The deadline for the transaction.
 52 |     |      */
 53 |     |     function modifyTraderPosition(
 54 |     |         uint256 positionId,
 55 |     |         int256 size,
 56 |     |         int256 deltaCollateralLimit,
 57 |     |         uint256 deadline
 58 |     |     ) external;
 59 |     | 
 60 |     |     function quoteCreateTraderPosition(
 61 |     |         uint256 epochId,
 62 |     |         int256 size
 63 |     |     ) external returns (uint256 requiredCollateral);
 64 |     | 
 65 |     |     function quoteModifyTraderPosition(
 66 |     |         uint256 positionId,
 67 |     |         int256 size
 68 |     |     ) external returns (uint256 requiredCollateral);
 69 |     | }
 70 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/IUMASettlementModule.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.2 <0.9.0;
  3 |     | 
  4 |     | interface IUMASettlementModule {
  5 |     |     event SettlementSubmitted(
  6 |     |         uint256 epochId,
  7 |     |         uint256 price,
  8 |     |         uint256 submissionTime
  9 |     |     );
 10 |     |     event SettlementDisputed(uint256 epochId, uint256 disputeTime);
 11 |     |     event MarketSettled(
 12 |     |         uint256 epochId,
 13 |     |         bytes32 assertionId,
 14 |     |         uint256 settlementPriceD18
 15 |     |     );
 16 |     | 
 17 |     |     function submitSettlementPrice(
 18 |     |         uint256 epochId,
 19 |     |         uint256 settlementPriceD18
 20 |     |     ) external returns (bytes32);
 21 |     | 
 22 |     |     function assertionResolvedCallback(
 23 |     |         bytes32 assertionId,
 24 |     |         bool assertedTruthfully
 25 |     |     ) external;
 26 |     | 
 27 |     |     function assertionDisputedCallback(bytes32 assertionId) external;
 28 |     | }
 29 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/IViewsModule.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.2 <0.9.0;
  3 |     | 
  4 |     | import {IFoilStructs} from "./IFoilStructs.sol";
  5 |     | import {Position} from "../storage/Position.sol";
  6 |     | 
  7 |     | interface IViewsModule {
  8 |     |     function getMarket()
  9 |     |         external
 10 |     |         view
 11 |     |         returns (
 12 |     |             address owner,
 13 |     |             address collateralAsset,
 14 |     |             IFoilStructs.EpochParams memory epochParams
 15 |     |         );
 16 |     | 
 17 |     |     function getEpoch(
 18 |     |         uint256 id
 19 |     |     )
 20 |     |         external
 21 |     |         view
 22 |     |         returns (
 23 |     |             uint256 startTime,
 24 |     |             uint256 endTime,
 25 |     |             address pool,
 26 |     |             address ethToken,
 27 |     |             address gasToken,
 28 |     |             uint256 minPriceD18,
 29 |     |             uint256 maxPriceD18,
 30 |     |             bool settled,
 31 |     |             uint256 settlementPriceD18,
 32 |     |             IFoilStructs.EpochParams memory epochParams
 33 |     |         );
 34 |     | 
 35 |     |     function getLatestEpoch()
 36 |     |         external
 37 |     |         view
 38 |     |         returns (
 39 |     |             uint256 epochId,
 40 |     |             uint256 startTime,
 41 |     |             uint256 endTime,
 42 |     |             address pool,
 43 |     |             address ethToken,
 44 |     |             address gasToken,
 45 |     |             uint256 minPriceD18,
 46 |     |             uint256 maxPriceD18,
 47 |     |             bool settled,
 48 |     |             uint256 settlementPriceD18,
 49 |     |             IFoilStructs.EpochParams memory epochParams
 50 |     |         );
 51 |     | 
 52 |     |     function getPosition(
 53 |     |         uint256 positionId
 54 |     |     ) external returns (Position.Data memory);
 55 |     | 
 56 |     |     function getPositionSize(uint256 positionId) external returns (int256);
 57 |     | }
 58 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/external/INonfungiblePositionManager.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.2 <0.9.0;
   3 |     | pragma abicoder v2;
   4 |     | 
   5 |     | import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol";
   6 |     | import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol";
   7 |     | 
   8 |     | /// @title Non-fungible token for positions
   9 |     | /// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred
  10 |     | /// and authorized.
  11 |     | interface INonfungiblePositionManager is IERC721Metadata, IERC721Enumerable {
  12 |     |     /// @notice Emitted when liquidity is increased for a position NFT
  13 |     |     /// @dev Also emitted when a token is minted
  14 |     |     /// @param tokenId The ID of the token for which liquidity was increased
  15 |     |     /// @param liquidity The amount by which liquidity for the NFT position was increased
  16 |     |     /// @param amount0 The amount of token0 that was paid for the increase in liquidity
  17 |     |     /// @param amount1 The amount of token1 that was paid for the increase in liquidity
  18 |     |     event IncreaseLiquidity(
  19 |     |         uint256 indexed tokenId,
  20 |     |         uint128 liquidity,
  21 |     |         uint256 amount0,
  22 |     |         uint256 amount1
  23 |     |     );
  24 |     |     /// @notice Emitted when liquidity is decreased for a position NFT
  25 |     |     /// @param tokenId The ID of the token for which liquidity was decreased
  26 |     |     /// @param liquidity The amount by which liquidity for the NFT position was decreased
  27 |     |     /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity
  28 |     |     /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity
  29 |     |     event DecreaseLiquidity(
  30 |     |         uint256 indexed tokenId,
  31 |     |         uint128 liquidity,
  32 |     |         uint256 amount0,
  33 |     |         uint256 amount1
  34 |     |     );
  35 |     |     /// @notice Emitted when tokens are collected for a position NFT
  36 |     |     /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior
  37 |     |     /// @param tokenId The ID of the token for which underlying tokens were collected
  38 |     |     /// @param recipient The address of the account that received the collected tokens
  39 |     |     /// @param amount0 The amount of token0 owed to the position that was collected
  40 |     |     /// @param amount1 The amount of token1 owed to the position that was collected
  41 |     |     event Collect(
  42 |     |         uint256 indexed tokenId,
  43 |     |         address recipient,
  44 |     |         uint256 amount0,
  45 |     |         uint256 amount1
  46 |     |     );
  47 |     | 
  48 |     |     /// @notice Returns the position information associated with a given token ID.
  49 |     |     /// @dev Throws if the token ID is not valid.
  50 |     |     /// @param tokenId The ID of the token that represents the position
  51 |     |     /// @return nonce The nonce for permits
  52 |     |     /// @return operator The address that is approved for spending
  53 |     |     /// @return token0 The address of the token0 for a specific pool
  54 |     |     /// @return token1 The address of the token1 for a specific pool
  55 |     |     /// @return fee The fee associated with the pool
  56 |     |     /// @return tickLower The lower end of the tick range for the position
  57 |     |     /// @return tickUpper The higher end of the tick range for the position
  58 |     |     /// @return liquidity The liquidity of the position
  59 |     |     /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position
  60 |     |     /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position
  61 |     |     /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation
  62 |     |     /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation
  63 |     |     function positions(
  64 |     |         uint256 tokenId
  65 |     |     )
  66 |     |         external
  67 |     |         view
  68 |     |         returns (
  69 |     |             uint96 nonce,
  70 |     |             address operator,
  71 |     |             address token0,
  72 |     |             address token1,
  73 |     |             uint24 fee,
  74 |     |             int24 tickLower,
  75 |     |             int24 tickUpper,
  76 |     |             uint128 liquidity,
  77 |     |             uint256 feeGrowthInside0LastX128,
  78 |     |             uint256 feeGrowthInside1LastX128,
  79 |     |             uint128 tokensOwed0,
  80 |     |             uint128 tokensOwed1
  81 |     |         );
  82 |     | 
  83 |     |     struct MintParams {
  84 |     |         address token0;
  85 |     |         address token1;
  86 |     |         uint24 fee;
  87 |     |         int24 tickLower;
  88 |     |         int24 tickUpper;
  89 |     |         uint256 amount0Desired;
  90 |     |         uint256 amount1Desired;
  91 |     |         uint256 amount0Min;
  92 |     |         uint256 amount1Min;
  93 |     |         address recipient;
  94 |     |         uint256 deadline;
  95 |     |     }
  96 |     | 
  97 |     |     /// @notice Creates a new position wrapped in a NFT
  98 |     |     /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized
  99 |     |     /// a method does not exist, i.e. the pool is assumed to be initialized.
 100 |     |     /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata
 101 |     |     /// @return tokenId The ID of the token that represents the minted position
 102 |     |     /// @return liquidity The amount of liquidity for this position
 103 |     |     /// @return amount0 The amount of token0
 104 |     |     /// @return amount1 The amount of token1
 105 |     |     function mint(
 106 |     |         MintParams calldata params
 107 |     |     )
 108 |     |         external
 109 |     |         payable
 110 |     |         returns (
 111 |     |             uint256 tokenId,
 112 |     |             uint128 liquidity,
 113 |     |             uint256 amount0,
 114 |     |             uint256 amount1
 115 |     |         );
 116 |     | 
 117 |     |     struct IncreaseLiquidityParams {
 118 |     |         uint256 tokenId;
 119 |     |         uint256 amount0Desired;
 120 |     |         uint256 amount1Desired;
 121 |     |         uint256 amount0Min;
 122 |     |         uint256 amount1Min;
 123 |     |         uint256 deadline;
 124 |     |     }
 125 |     | 
 126 |     |     /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`
 127 |     |     /// @param params tokenId The ID of the token for which liquidity is being increased,
 128 |     |     /// amount0Desired The desired amount of token0 to be spent,
 129 |     |     /// amount1Desired The desired amount of token1 to be spent,
 130 |     |     /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,
 131 |     |     /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,
 132 |     |     /// deadline The time by which the transaction must be included to effect the change
 133 |     |     /// @return liquidity The new liquidity amount as a result of the increase
 134 |     |     /// @return amount0 The amount of token0 to acheive resulting liquidity
 135 |     |     /// @return amount1 The amount of token1 to acheive resulting liquidity
 136 |     |     function increaseLiquidity(
 137 |     |         IncreaseLiquidityParams calldata params
 138 |     |     )
 139 |     |         external
 140 |     |         payable
 141 |     |         returns (uint128 liquidity, uint256 amount0, uint256 amount1);
 142 |     | 
 143 |     |     struct DecreaseLiquidityParams {
 144 |     |         uint256 tokenId;
 145 |     |         uint128 liquidity;
 146 |     |         uint256 amount0Min;
 147 |     |         uint256 amount1Min;
 148 |     |         uint256 deadline;
 149 |     |     }
 150 |     | 
 151 |     |     /// @notice Decreases the amount of liquidity in a position and accounts it to the position
 152 |     |     /// @param params tokenId The ID of the token for which liquidity is being decreased,
 153 |     |     /// amount The amount by which liquidity will be decreased,
 154 |     |     /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,
 155 |     |     /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,
 156 |     |     /// deadline The time by which the transaction must be included to effect the change
 157 |     |     /// @return amount0 The amount of token0 accounted to the position's tokens owed
 158 |     |     /// @return amount1 The amount of token1 accounted to the position's tokens owed
 159 |     |     function decreaseLiquidity(
 160 |     |         DecreaseLiquidityParams calldata params
 161 |     |     ) external payable returns (uint256 amount0, uint256 amount1);
 162 |     | 
 163 |     |     struct CollectParams {
 164 |     |         uint256 tokenId;
 165 |     |         address recipient;
 166 |     |         uint128 amount0Max;
 167 |     |         uint128 amount1Max;
 168 |     |     }
 169 |     | 
 170 |     |     /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient
 171 |     |     /// @param params tokenId The ID of the NFT for which tokens are being collected,
 172 |     |     /// recipient The account that should receive the tokens,
 173 |     |     /// amount0Max The maximum amount of token0 to collect,
 174 |     |     /// amount1Max The maximum amount of token1 to collect
 175 |     |     /// @return amount0 The amount of fees collected in token0
 176 |     |     /// @return amount1 The amount of fees collected in token1
 177 |     |     function collect(
 178 |     |         CollectParams calldata params
 179 |     |     ) external payable returns (uint256 amount0, uint256 amount1);
 180 |     | 
 181 |     |     /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens
 182 |     |     /// must be collected first.
 183 |     |     /// @param tokenId The ID of the token that is being burned
 184 |     |     function burn(uint256 tokenId) external payable;
 185 |     | 
 186 |     |     /// @return Returns the address of the Uniswap V3 factory
 187 |     |     function factory() external view returns (address);
 188 |     | }
 189 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/external/ISwapRouter.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.2 <0.9.0;
  3 |     | pragma abicoder v2;
  4 |     | 
  5 |     | import "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol";
  6 |     | 
  7 |     | /// @title Router token swapping functionality
  8 |     | /// @notice Functions for swapping tokens via Uniswap V3
  9 |     | interface ISwapRouter is IUniswapV3SwapCallback {
 10 |     |     struct ExactInputSingleParams {
 11 |     |         address tokenIn;
 12 |     |         address tokenOut;
 13 |     |         uint24 fee;
 14 |     |         address recipient;
 15 |     |         uint256 deadline;
 16 |     |         uint256 amountIn;
 17 |     |         uint256 amountOutMinimum;
 18 |     |         uint160 sqrtPriceLimitX96;
 19 |     |     }
 20 |     | 
 21 |     |     /// @notice Swaps `amountIn` of one token for as much as possible of another token
 22 |     |     /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata
 23 |     |     /// @return amountOut The amount of the received token
 24 |     |     function exactInputSingle(
 25 |     |         ExactInputSingleParams calldata params
 26 |     |     ) external payable returns (uint256 amountOut);
 27 |     | 
 28 |     |     struct ExactInputParams {
 29 |     |         bytes path;
 30 |     |         address recipient;
 31 |     |         uint256 deadline;
 32 |     |         uint256 amountIn;
 33 |     |         uint256 amountOutMinimum;
 34 |     |     }
 35 |     | 
 36 |     |     /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path
 37 |     |     /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata
 38 |     |     /// @return amountOut The amount of the received token
 39 |     |     function exactInput(
 40 |     |         ExactInputParams calldata params
 41 |     |     ) external payable returns (uint256 amountOut);
 42 |     | 
 43 |     |     struct ExactOutputSingleParams {
 44 |     |         address tokenIn;
 45 |     |         address tokenOut;
 46 |     |         uint24 fee;
 47 |     |         address recipient;
 48 |     |         uint256 deadline;
 49 |     |         uint256 amountOut;
 50 |     |         uint256 amountInMaximum;
 51 |     |         uint160 sqrtPriceLimitX96;
 52 |     |     }
 53 |     | 
 54 |     |     /// @notice Swaps as little as possible of one token for `amountOut` of another token
 55 |     |     /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata
 56 |     |     /// @return amountIn The amount of the input token
 57 |     |     function exactOutputSingle(
 58 |     |         ExactOutputSingleParams calldata params
 59 |     |     ) external payable returns (uint256 amountIn);
 60 |     | 
 61 |     |     struct ExactOutputParams {
 62 |     |         bytes path;
 63 |     |         address recipient;
 64 |     |         uint256 deadline;
 65 |     |         uint256 amountOut;
 66 |     |         uint256 amountInMaximum;
 67 |     |     }
 68 |     | 
 69 |     |     /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)
 70 |     |     /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata
 71 |     |     /// @return amountIn The amount of the input token
 72 |     |     function exactOutput(
 73 |     |         ExactOutputParams calldata params
 74 |     |     ) external payable returns (uint256 amountIn);
 75 |     | }
 76 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/interfaces/external/IUniswapV3Quoter.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.2 <0.9.0;
  3 |     | 
  4 |     | interface IUniswapV3Quoter {
  5 |     |     function quoteExactInputSingle(
  6 |     |         address tokenIn,
  7 |     |         address tokenOut,
  8 |     |         uint24 fee,
  9 |     |         uint256 amountIn,
 10 |     |         uint160 sqrtPriceLimitX96
 11 |     |     ) external returns (uint256 amountOut);
 12 |     | 
 13 |     |     function quoteExactOutputSingle(
 14 |     |         address tokenIn,
 15 |     |         address tokenOut,
 16 |     |         uint24 fee,
 17 |     |         uint256 amountOut,
 18 |     |         uint160 sqrtPriceLimitX96
 19 |     |     ) external returns (uint256 amountIn);
 20 |     | }
 21 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/libraries/DecimalPrice.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.25 <0.9.0;
  3 |     | 
  4 |     | import {FullMath} from "../external/univ3/FullMath.sol";
  5 |     | 
  6 |     | library DecimalPrice {
  7 | *   |     function sqrtRatioX96ToPrice(
  8 |     |         uint160 sqrtRatioX96
  9 |     |     ) internal pure returns (uint256 price) {
 10 |     |         // Calculate the price as (sqrtRatioX96^2) / (2^192)
 11 |     |         uint256 sqrtRatioX96Squared = uint256(sqrtRatioX96) *
 12 |     |             uint256(sqrtRatioX96);
 13 |     |         price = sqrtRatioX96Squared >> 96;
 14 |     |         // Scale price to have 18 decimal places
 15 | *   |         price = (price * 10 ** 18) / (2 ** 96);
 16 |     |     }
 17 |     | }
 18 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/libraries/Pool.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.25 <0.9.0;
  3 |     | 
  4 |     | import "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol";
  5 |     | import "../external/univ3/LiquidityAmounts.sol";
  6 |     | import "../external/univ3/TickMath.sol";
  7 |     | import "../storage/Market.sol";
  8 |     | import "../storage/Epoch.sol";
  9 |     | import "../storage/Position.sol";
 10 |     | import {INonfungiblePositionManager} from "../interfaces/external/INonfungiblePositionManager.sol";
 11 |     | 
 12 |     | library Pool {
 13 |     |     function getCurrentPositionTokenAmounts(
 14 |     |         Market.Data storage market,
 15 |     |         Epoch.Data storage epoch,
 16 |     |         Position.Data storage position
 17 |     |     )
 18 |     |         internal
 19 |     |         view
 20 |     |         returns (
 21 |     |             uint256 amount0,
 22 |     |             uint256 amount1,
 23 |     |             int24 lowerTick,
 24 |     |             int24 upperTick,
 25 |     |             uint128 liquidity
 26 |     |         )
 27 |     |     {
 28 |     |         market; // silence warnings
 29 |     |         // get liquidity given tokenId
 30 |     |         (
 31 |     |             ,
 32 |     |             ,
 33 |     |             ,
 34 |     |             ,
 35 |     |             ,
 36 |     |             lowerTick,
 37 |     |             upperTick,
 38 |     |             liquidity,
 39 |     |             ,
 40 |     |             ,
 41 |     |             ,
 42 |     | 
 43 |     |         ) = INonfungiblePositionManager(epoch.params.uniswapPositionManager)
 44 |     |             .positions(position.uniswapPositionId);
 45 |     |         (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3Pool(epoch.pool).slot0();
 46 |     |         uint160 sqrtPriceAX96 = uint160(TickMath.getSqrtRatioAtTick(lowerTick));
 47 |     |         uint160 sqrtPriceBX96 = uint160(TickMath.getSqrtRatioAtTick(upperTick));
 48 |     | 
 49 |     |         (amount0, amount1) = LiquidityAmounts.getAmountsForLiquidity(
 50 |     |             sqrtPriceX96,
 51 |     |             sqrtPriceAX96,
 52 |     |             sqrtPriceBX96,
 53 |     |             liquidity
 54 |     |         );
 55 |     |     }
 56 |     | }
 57 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/libraries/Quote.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | 
  3 |     | pragma solidity >=0.8.2 <0.9.0;
  4 |     | 
  5 |     | import {TickMath} from "../external/univ3/TickMath.sol";
  6 |     | import {FullMath} from "../external/univ3/FullMath.sol";
  7 |     | import {DecimalPrice} from "./DecimalPrice.sol";
  8 |     | 
  9 |     | import "forge-std/console2.sol";
 10 |     | 
 11 |     | library Quote {
 12 |     |     function quoteGasToEthWithPrice(
 13 |     |         uint256 gasAmount,
 14 |     |         uint256 price
 15 |     |     ) internal pure returns (uint256) {
 16 |     |         return FullMath.mulDiv(gasAmount, price, 1e18);
 17 |     |     }
 18 |     | 
 19 |     |     function quoteGasToEth(
 20 |     |         //@audit added by fuzzer for compatibility
 21 |     |         uint256 gasAmount,
 22 |     |         uint160 sqrtRatioX96
 23 |     |     ) internal pure returns (uint256) {
 24 |     |         // TODO we can use the precalculated D18 price instead of srqtRatioX96 (or maybe another function)
 25 |     |         return
 26 |     |             FullMath.mulDiv(
 27 |     |                 gasAmount,
 28 |     |                 DecimalPrice.sqrtRatioX96ToPrice(sqrtRatioX96),
 29 |     |                 1e18
 30 |     |             );
 31 |     |     }
 32 |     | }
 33 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/modules/ConfigurationModule.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.25 <0.9.0;
   3 |     | 
   4 |     | import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
   5 |     | import "../interfaces/IConfigurationModule.sol";
   6 |     | import "../storage/Market.sol";
   7 |     | import "../storage/Epoch.sol";
   8 |     | import "../storage/Errors.sol";
   9 |     | 
  10 | *   | contract ConfigurationModule is
  11 |     |     IConfigurationModule,
  12 |     |     ReentrancyGuardUpgradeable
  13 |     | {
  14 |     |     using Market for Market.Data;
  15 |     | 
  16 |     |     address immutable marketInitializer;
  17 |     | 
  18 |     |     constructor(address _marketInitializer) {
  19 |     |         marketInitializer = _marketInitializer;
  20 |     |     }
  21 |     | 
  22 | *   |     modifier onlyOwner() {
  23 | *   |         Market.Data storage market = Market.load();
  24 | *   |         if (msg.sender != market.owner) {
  25 | *   |             revert Errors.OnlyOwner();
  26 |     |         }
  27 | *   |         if (market.owner == address(0)) {
  28 |     |             revert Errors.MarketNotInitialized();
  29 |     |         }
  30 |     |         _;
  31 |     |     }
  32 |     | 
  33 | *   |     function initializeMarket(
  34 |     |         address initialOwner,
  35 |     |         address collateralAsset,
  36 |     |         IFoilStructs.EpochParams memory epochParams,
  37 |     |         address foil //@audit added by fuzzer
  38 |     |     ) external nonReentrant {
  39 | *   |         if (msg.sender != marketInitializer) {
  40 | *   |             revert Errors.OnlyInitializer(msg.sender, marketInitializer);
  41 |     |         }
  42 | *   |         Market.createValid(initialOwner, collateralAsset, epochParams, foil); //@audit updated by fuzzer
  43 | *   |         emit MarketInitialized(initialOwner, collateralAsset, epochParams);
  44 |     |     }
  45 |     | 
  46 | *   |     function updateMarket(
  47 |     |         IFoilStructs.EpochParams memory epochParams
  48 |     |     ) external override onlyOwner {
  49 | *   |         Market.updateValid(epochParams);
  50 |     | 
  51 | *   |         emit MarketUpdated(epochParams);
  52 |     |     }
  53 |     | 
  54 | *   |     function createEpoch(
  55 |     |         uint256 startTime,
  56 |     |         uint256 endTime,
  57 |     |         uint160 startingSqrtPriceX96,
  58 |     |         uint256 salt
  59 |     |     ) external override nonReentrant onlyOwner {
  60 |     |         // load the market to check if it's already created
  61 | *   |         Market.Data storage market = Market.load();
  62 |     | 
  63 | *   |         uint256 newEpochId = market.getNewEpochId();
  64 |     | 
  65 | *   |         Epoch.createValid(
  66 | *   |             newEpochId,
  67 | *   |             startTime,
  68 | *   |             endTime,
  69 | *   |             startingSqrtPriceX96,
  70 | *   |             salt
  71 |     |         );
  72 |     |         emit EpochCreated(newEpochId, startTime, endTime, startingSqrtPriceX96);
  73 |     |     }
  74 |     | 
  75 | *   |     function transferOwnership(
  76 |     |         address newOwner
  77 |     |     ) external nonReentrant onlyOwner {
  78 |     |         Market.Data storage market = Market.load();
  79 |     |         address oldOwner = market.owner;
  80 |     |         market.transferOwnership(newOwner);
  81 |     |         emit OwnershipTransferStarted(oldOwner, newOwner);
  82 |     |     }
  83 |     | 
  84 |     |     function acceptOwnership() external nonReentrant {
  85 |     |         Market.Data storage market = Market.load();
  86 |     |         address oldOwner = market.owner;
  87 |     |         market.acceptOwnership();
  88 |     |         emit OwnershipTransferred(oldOwner, msg.sender);
  89 |     |     }
  90 |     | 
  91 |     |     function pendingOwner() external view returns (address) {
  92 |     |         Market.Data storage market = Market.load();
  93 |     |         return market.pendingOwner;
  94 |     |     }
  95 |     | 
  96 |     |     function owner() external view returns (address) {
  97 |     |         Market.Data storage market = Market.load();
  98 |     |         return market.owner;
  99 |     |     }
 100 |     | }
 101 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/modules/ERC165Module.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.25 <0.9.0;
  3 |     | 
  4 |     | import {IERC165Module} from "../interfaces/IERC165Module.sol";
  5 |     | import {IERC721} from "@openzeppelin/contracts/token/ERC721/IERC721.sol";
  6 |     | import {IERC721Metadata} from "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol";
  7 |     | 
  8 |     | contract ERC165Module is IERC165Module {
  9 |     |     function supportsInterface(
 10 |     |         bytes4 interfaceId
 11 |     |     ) public view virtual override returns (bool) {
 12 |     |         return
 13 |     |             interfaceId == this.supportsInterface.selector || // ERC165
 14 |     |             interfaceId == type(IERC721).interfaceId ||
 15 |     |             interfaceId == type(IERC721Metadata).interfaceId;
 16 |     |     }
 17 |     | }
 18 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/modules/LiquidityModule.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.25 <0.9.0;
   3 |     | 
   4 |     | import "../storage/ERC721EnumerableStorage.sol";
   5 |     | import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
   6 |     | import "../storage/Position.sol";
   7 |     | import {IFoilStructs} from "../interfaces/IFoilStructs.sol";
   8 |     | import {ILiquidityModule} from "../interfaces/ILiquidityModule.sol";
   9 |     | import {Pool} from "../libraries/Pool.sol";
  10 |     | 
  11 |     | // Add this struct at the contract level
  12 |     | struct LiquidityPositionCreatedEventData {
  13 |     |     uint256 epochId;
  14 |     |     uint256 positionId;
  15 |     |     uint256 depositedCollateralAmount;
  16 |     |     uint128 liquidity;
  17 |     |     uint256 addedAmount0;
  18 |     |     uint256 addedAmount1;
  19 |     |     int24 lowerTick;
  20 |     |     int24 upperTick;
  21 |     | }
  22 |     | 
  23 |     | contract LiquidityModule is ReentrancyGuardUpgradeable, ILiquidityModule {
  24 |     |     using Position for Position.Data;
  25 |     |     using Epoch for Epoch.Data;
  26 |     |     using Market for Market.Data;
  27 |     | 
  28 |     |     function createLiquidityPosition(
  29 |     |         IFoilStructs.LiquidityMintParams calldata params
  30 |     |     )
  31 |     |         external
  32 |     |         override
  33 |     |         nonReentrant
  34 |     |         returns (
  35 |     |             uint256 id,
  36 |     |             uint256 collateralAmount,
  37 |     |             uint256 uniswapNftId,
  38 |     |             uint128 liquidity,
  39 |     |             uint256 addedAmount0,
  40 |     |             uint256 addedAmount1
  41 |     |         )
  42 |     |     {
  43 |     |         require(block.timestamp <= params.deadline, "Transaction too old");
  44 |     | 
  45 |     |         id = ERC721EnumerableStorage.totalSupply() + 1;
  46 |     |         Position.Data storage position = Position.createValid(id);
  47 |     |         ERC721Storage._checkOnERC721Received(address(this), msg.sender, id, "");
  48 |     |         ERC721Storage._mint(msg.sender, id);
  49 |     | 
  50 |     |         Epoch.Data storage epoch = Epoch.loadValid(params.epochId);
  51 |     |         epoch.validateLp(params.lowerTick, params.upperTick);
  52 |     | 
  53 |     |         (
  54 |     |             uniswapNftId,
  55 |     |             liquidity,
  56 |     |             addedAmount0,
  57 |     |             addedAmount1
  58 |     |         ) = INonfungiblePositionManager(epoch.params.uniswapPositionManager)
  59 |     |             .mint(
  60 |     |                 INonfungiblePositionManager.MintParams({
  61 |     |                     token0: address(epoch.gasToken),
  62 |     |                     token1: address(epoch.ethToken),
  63 |     |                     fee: epoch.params.feeRate,
  64 |     |                     tickLower: params.lowerTick,
  65 |     |                     tickUpper: params.upperTick,
  66 |     |                     amount0Desired: params.amountTokenA,
  67 |     |                     amount1Desired: params.amountTokenB,
  68 |     |                     amount0Min: params.minAmountTokenA,
  69 |     |                     amount1Min: params.minAmountTokenB,
  70 |     |                     recipient: address(this),
  71 |     |                     deadline: block.timestamp
  72 |     |                 })
  73 |     |             );
  74 |     | 
  75 |     |         collateralAmount = position.updateValidLp(
  76 |     |             epoch,
  77 |     |             Position.UpdateLpParams({
  78 |     |                 uniswapNftId: uniswapNftId,
  79 |     |                 liquidity: liquidity,
  80 |     |                 additionalCollateral: params.collateralAmount,
  81 |     |                 additionalLoanAmount0: addedAmount0,
  82 |     |                 additionalLoanAmount1: addedAmount1,
  83 |     |                 lowerTick: params.lowerTick,
  84 |     |                 upperTick: params.upperTick,
  85 |     |                 tokensOwed0: 0,
  86 |     |                 tokensOwed1: 0
  87 |     |             })
  88 |     |         );
  89 |     | 
  90 |     |         _emitLiquidityPositionCreated(
  91 |     |             LiquidityPositionCreatedEventData({
  92 |     |                 epochId: epoch.id,
  93 |     |                 positionId: id,
  94 |     |                 depositedCollateralAmount: position.depositedCollateralAmount,
  95 |     |                 liquidity: liquidity,
  96 |     |                 addedAmount0: addedAmount0,
  97 |     |                 addedAmount1: addedAmount1,
  98 |     |                 lowerTick: params.lowerTick,
  99 |     |                 upperTick: params.upperTick
 100 |     |             })
 101 |     |         );
 102 |     |     }
 103 |     | 
 104 |     |     function _emitLiquidityPositionCreated(
 105 |     |         LiquidityPositionCreatedEventData memory eventData
 106 |     |     ) internal {
 107 |     |         emit LiquidityPositionCreated(
 108 |     |             eventData.epochId,
 109 |     |             eventData.positionId,
 110 |     |             eventData.depositedCollateralAmount,
 111 |     |             eventData.liquidity,
 112 |     |             eventData.addedAmount0,
 113 |     |             eventData.addedAmount1,
 114 |     |             eventData.lowerTick,
 115 |     |             eventData.upperTick
 116 |     |         );
 117 |     |     }
 118 |     | 
 119 |     |     function decreaseLiquidityPosition(
 120 |     |         IFoilStructs.LiquidityDecreaseParams memory params
 121 |     |     )
 122 |     |         external
 123 |     |         override
 124 |     |         nonReentrant
 125 |     |         returns (uint256 amount0, uint256 amount1, uint256 collateralAmount)
 126 |     |     {
 127 |     |         require(block.timestamp <= params.deadline, "Transaction too old");
 128 |     | 
 129 |     |         DecreaseLiquidityPositionStack memory stack;
 130 |     | 
 131 |     |         Market.Data storage market = Market.load();
 132 |     |         Position.Data storage position = Position.loadValid(params.positionId);
 133 |     |         Epoch.Data storage epoch = Epoch.loadValid(position.epochId);
 134 |     | 
 135 |     |         epoch.validateEpochNotExpired();
 136 |     |         position.preValidateLp();
 137 |     |         (
 138 |     |             stack.previousAmount0,
 139 |     |             stack.previousAmount1,
 140 |     |             stack.lowerTick,
 141 |     |             stack.upperTick,
 142 |     |             stack.previousLiquidity
 143 |     |         ) = Pool.getCurrentPositionTokenAmounts(market, epoch, position);
 144 |     | 
 145 |     |         stack.decreaseParams = INonfungiblePositionManager
 146 |     |             .DecreaseLiquidityParams({
 147 |     |                 tokenId: position.uniswapPositionId,
 148 |     |                 liquidity: params.liquidity,
 149 |     |                 amount0Min: params.minGasAmount,
 150 |     |                 amount1Min: params.minEthAmount,
 151 |     |                 deadline: block.timestamp
 152 |     |             });
 153 |     | 
 154 |     |         (amount0, amount1) = INonfungiblePositionManager(
 155 |     |             epoch.params.uniswapPositionManager
 156 |     |         ).decreaseLiquidity(stack.decreaseParams);
 157 |     | 
 158 |     |         if (params.liquidity == stack.previousLiquidity) {
 159 |     |             return _closeLiquidityPosition(market, position);
 160 |     |         } else {
 161 |     |             // get tokens owed
 162 |     |             (
 163 |     |                 ,
 164 |     |                 ,
 165 |     |                 ,
 166 |     |                 ,
 167 |     |                 ,
 168 |     |                 ,
 169 |     |                 ,
 170 |     |                 ,
 171 |     |                 ,
 172 |     |                 ,
 173 |     |                 stack.tokensOwed0,
 174 |     |                 stack.tokensOwed1
 175 |     |             ) = INonfungiblePositionManager(epoch.params.uniswapPositionManager)
 176 |     |                 .positions(position.uniswapPositionId);
 177 |     | 
 178 |     |             collateralAmount = position.updateValidLp(
 179 |     |                 epoch,
 180 |     |                 Position.UpdateLpParams({
 181 |     |                     uniswapNftId: position.uniswapPositionId,
 182 |     |                     liquidity: stack.previousLiquidity - params.liquidity,
 183 |     |                     additionalCollateral: 0,
 184 |     |                     additionalLoanAmount0: 0, // tokensOwed0 represents the returned tokens
 185 |     |                     additionalLoanAmount1: 0, // tokensOwed1 represents the returned tokens
 186 |     |                     lowerTick: stack.lowerTick,
 187 |     |                     upperTick: stack.upperTick,
 188 |     |                     tokensOwed0: stack.tokensOwed0,
 189 |     |                     tokensOwed1: stack.tokensOwed1
 190 |     |                 })
 191 |     |             );
 192 |     |         }
 193 |     | 
 194 |     |         emit LiquidityPositionDecreased(
 195 |     |             epoch.id,
 196 |     |             position.id,
 197 |     |             position.depositedCollateralAmount,
 198 |     |             params.liquidity,
 199 |     |             amount0,
 200 |     |             amount1
 201 |     |         );
 202 |     |     }
 203 |     | 
 204 |     |     function increaseLiquidityPosition(
 205 |     |         IFoilStructs.LiquidityIncreaseParams memory params
 206 |     |     )
 207 |     |         external
 208 |     |         nonReentrant
 209 |     |         returns (
 210 |     |             uint128 liquidity,
 211 |     |             uint256 amount0,
 212 |     |             uint256 amount1,
 213 |     |             uint256 collateralAmount
 214 |     |         )
 215 |     |     {
 216 |     |         require(block.timestamp <= params.deadline, "Transaction too old");
 217 |     | 
 218 |     |         IncreaseLiquidityPositionStack memory stack;
 219 |     | 
 220 |     |         Market.Data storage market = Market.load();
 221 |     |         Position.Data storage position = Position.loadValid(params.positionId);
 222 |     |         Epoch.Data storage epoch = Epoch.loadValid(position.epochId);
 223 |     | 
 224 |     |         epoch.validateEpochNotExpired();
 225 |     |         position.preValidateLp();
 226 |     | 
 227 |     |         (
 228 |     |             stack.previousAmount0,
 229 |     |             stack.previousAmount1,
 230 |     |             stack.lowerTick,
 231 |     |             stack.upperTick,
 232 |     |             stack.previousLiquidity
 233 |     |         ) = Pool.getCurrentPositionTokenAmounts(market, epoch, position);
 234 |     | 
 235 |     |         stack.increaseParams = INonfungiblePositionManager
 236 |     |             .IncreaseLiquidityParams({
 237 |     |                 tokenId: position.uniswapPositionId,
 238 |     |                 amount0Desired: params.gasTokenAmount,
 239 |     |                 amount1Desired: params.ethTokenAmount,
 240 |     |                 amount0Min: params.minGasAmount,
 241 |     |                 amount1Min: params.minEthAmount,
 242 |     |                 deadline: block.timestamp
 243 |     |             });
 244 |     | 
 245 |     |         (liquidity, amount0, amount1) = INonfungiblePositionManager(
 246 |     |             epoch.params.uniswapPositionManager
 247 |     |         ).increaseLiquidity(stack.increaseParams);
 248 |     | 
 249 |     |         // get tokens owed
 250 |     |         (
 251 |     |             ,
 252 |     |             ,
 253 |     |             ,
 254 |     |             ,
 255 |     |             ,
 256 |     |             ,
 257 |     |             ,
 258 |     |             ,
 259 |     |             ,
 260 |     |             ,
 261 |     |             stack.tokensOwed0,
 262 |     |             stack.tokensOwed1
 263 |     |         ) = INonfungiblePositionManager(epoch.params.uniswapPositionManager)
 264 |     |             .positions(position.uniswapPositionId);
 265 |     | 
 266 |     |         collateralAmount = position.updateValidLp(
 267 |     |             epoch,
 268 |     |             Position.UpdateLpParams({
 269 |     |                 uniswapNftId: position.uniswapPositionId,
 270 |     |                 liquidity: stack.previousLiquidity + liquidity,
 271 |     |                 additionalCollateral: params.collateralAmount,
 272 |     |                 additionalLoanAmount0: amount0, // these are the added tokens to the position
 273 |     |                 additionalLoanAmount1: amount1,
 274 |     |                 lowerTick: stack.lowerTick,
 275 |     |                 upperTick: stack.upperTick,
 276 |     |                 tokensOwed0: stack.tokensOwed0,
 277 |     |                 tokensOwed1: stack.tokensOwed1
 278 |     |             })
 279 |     |         );
 280 |     | 
 281 |     |         emit LiquidityPositionIncreased(
 282 |     |             epoch.id,
 283 |     |             position.id,
 284 |     |             position.depositedCollateralAmount,
 285 |     |             liquidity,
 286 |     |             amount0,
 287 |     |             amount1
 288 |     |         );
 289 |     |     }
 290 |     | 
 291 |     |     function getTokenAmounts(
 292 |     |         uint256 epochId,
 293 |     |         uint256 depositedCollateralAmount,
 294 |     |         uint160 sqrtPriceX96,
 295 |     |         uint160 sqrtPriceAX96,
 296 |     |         uint160 sqrtPriceBX96
 297 |     |     )
 298 |     |         external
 299 |     |         override
 300 |     |         returns (uint256 amount0, uint256 amount1, uint128 liquidity)
 301 |     |     {
 302 |     |         //@audit view removed by fuzzer
 303 |     |         Epoch.Data storage epoch = Epoch.load(epochId);
 304 |     | 
 305 |     |         // calculate for unit
 306 |     |         uint128 unitLiquidity = LiquidityAmounts.getLiquidityForAmounts(
 307 |     |             sqrtPriceX96,
 308 |     |             sqrtPriceAX96,
 309 |     |             sqrtPriceBX96,
 310 |     |             1e18,
 311 |     |             1e18
 312 |     |         );
 313 |     | 
 314 |     |         (uint256 unitAmount0, uint256 unitAmount1) = LiquidityAmounts
 315 |     |             .getAmountsForLiquidity(
 316 |     |                 sqrtPriceX96,
 317 |     |                 sqrtPriceAX96,
 318 |     |                 sqrtPriceBX96,
 319 |     |                 unitLiquidity
 320 |     |             );
 321 |     | 
 322 |     |         uint256 requiredCollateral = epoch.requiredCollateralForLiquidity(
 323 |     |             unitLiquidity,
 324 |     |             unitAmount0,
 325 |     |             unitAmount1,
 326 |     |             0,
 327 |     |             0,
 328 |     |             sqrtPriceAX96,
 329 |     |             sqrtPriceBX96
 330 |     |         );
 331 |     | 
 332 |     |         // scale up for fractional collateral ratio
 333 |     |         uint256 collateralRatio = FullMath.mulDiv(
 334 |     |             depositedCollateralAmount,
 335 |     |             1e18, // Create MathUtil and use UNIT
 336 |     |             requiredCollateral
 337 |     |         );
 338 |     | 
 339 |     |         // scale up liquidity by collateral amount
 340 |     |         return (
 341 |     |             FullMath.mulDiv(unitAmount0, collateralRatio, 1e18),
 342 |     |             FullMath.mulDiv(unitAmount1, collateralRatio, 1e18),
 343 |     |             uint128(unitLiquidity * collateralRatio) / 1e18
 344 |     |         );
 345 |     |     }
 346 |     | 
 347 |     |     function getCollateralRequirementForAdditionalTokens(
 348 |     |         uint256 positionId,
 349 |     |         uint256 amount0,
 350 |     |         uint256 amount1
 351 |     |     ) external returns (uint256) {
 352 |     |         //@audit view removed by fuzzer
 353 |     |         Market.Data storage market = Market.load();
 354 |     |         Position.Data storage position = Position.loadValid(positionId);
 355 |     |         Epoch.Data storage epoch = Epoch.loadValid(position.epochId);
 356 |     | 
 357 |     |         IncreaseLiquidityPositionStack memory stack;
 358 |     | 
 359 |     |         (
 360 |     |             stack.previousAmount0,
 361 |     |             stack.previousAmount1,
 362 |     |             stack.lowerTick,
 363 |     |             stack.upperTick,
 364 |     |             stack.previousLiquidity
 365 |     |         ) = Pool.getCurrentPositionTokenAmounts(market, epoch, position);
 366 |     | 
 367 |     |         (
 368 |     |             ,
 369 |     |             ,
 370 |     |             ,
 371 |     |             ,
 372 |     |             ,
 373 |     |             ,
 374 |     |             ,
 375 |     |             ,
 376 |     |             ,
 377 |     |             ,
 378 |     |             stack.tokensOwed0,
 379 |     |             stack.tokensOwed1
 380 |     |         ) = INonfungiblePositionManager(epoch.params.uniswapPositionManager)
 381 |     |             .positions(position.uniswapPositionId);
 382 |     | 
 383 |     |         (uint160 sqrtPriceX96, , , , , , ) = epoch.pool.slot0();
 384 |     | 
 385 |     |         uint160 sqrtPriceAX96 = TickMath.getSqrtRatioAtTick(stack.lowerTick);
 386 |     |         uint160 sqrtPriceBX96 = TickMath.getSqrtRatioAtTick(stack.upperTick);
 387 |     | 
 388 |     |         uint128 liquidityDelta = LiquidityAmounts.getLiquidityForAmounts(
 389 |     |             sqrtPriceX96,
 390 |     |             sqrtPriceAX96,
 391 |     |             sqrtPriceBX96,
 392 |     |             amount0,
 393 |     |             amount1
 394 |     |         );
 395 |     | 
 396 |     |         return
 397 |     |             epoch.requiredCollateralForLiquidity(
 398 |     |                 stack.previousLiquidity + liquidityDelta,
 399 |     |                 position.borrowedVGas + amount0,
 400 |     |                 position.borrowedVEth + amount1,
 401 |     |                 stack.tokensOwed0,
 402 |     |                 stack.tokensOwed1,
 403 |     |                 sqrtPriceAX96,
 404 |     |                 sqrtPriceBX96
 405 |     |             );
 406 |     |     }
 407 |     | 
 408 |     |     function _closeLiquidityPosition(
 409 |     |         Market.Data storage market,
 410 |     |         Position.Data storage position
 411 |     |     )
 412 |     |         internal
 413 |     |         returns (
 414 |     |             uint256 collectedAmount0,
 415 |     |             uint256 collectedAmount1,
 416 |     |             uint256 collateralAmount
 417 |     |         )
 418 |     |     {
 419 |     |         Epoch.Data storage epoch = Epoch.loadValid(position.epochId);
 420 |     |         // Collect fees and remaining tokens
 421 |     |         (collectedAmount0, collectedAmount1) = INonfungiblePositionManager(
 422 |     |             epoch.params.uniswapPositionManager
 423 |     |         ).collect(
 424 |     |                 INonfungiblePositionManager.CollectParams({
 425 |     |                     tokenId: position.uniswapPositionId,
 426 |     |                     recipient: address(this),
 427 |     |                     amount0Max: type(uint128).max,
 428 |     |                     amount1Max: type(uint128).max
 429 |     |                 })
 430 |     |             );
 431 |     |         // Burn the Uniswap position
 432 |     |         INonfungiblePositionManager(epoch.params.uniswapPositionManager).burn(
 433 |     |             position.uniswapPositionId
 434 |     |         );
 435 |     |         position.uniswapPositionId = 0;
 436 |     | 
 437 |     |         if (collectedAmount0 > position.borrowedVGas) {
 438 |     |             position.vGasAmount = collectedAmount0 - position.borrowedVGas;
 439 |     |             position.borrowedVGas = 0;
 440 |     |         } else {
 441 |     |             position.borrowedVGas = position.borrowedVGas - collectedAmount0;
 442 |     |         }
 443 |     | 
 444 |     |         // recouncil with deposited collateral
 445 |     |         if (collectedAmount1 > position.borrowedVEth) {
 446 |     |             position.depositedCollateralAmount +=
 447 |     |                 collectedAmount1 -
 448 |     |                 position.borrowedVEth;
 449 |     |             position.borrowedVEth = 0;
 450 |     |         } else {
 451 |     |             if (
 452 |     |                 position.depositedCollateralAmount <
 453 |     |                 position.borrowedVEth - collectedAmount1
 454 |     |             ) {
 455 |     |                 position.borrowedVEth -= collectedAmount1;
 456 |     |             } else {
 457 |     |                 position.depositedCollateralAmount -=
 458 |     |                     position.borrowedVEth -
 459 |     |                     collectedAmount1;
 460 |     |                 position.borrowedVEth = 0;
 461 |     |             }
 462 |     |         }
 463 |     | 
 464 |     |         position.borrowedVEth = 0; // eth is fully paid
 465 |     | 
 466 |     |         // if gas amounts, transition to trader and let user trade through pool
 467 |     |         // otherwise withdraw collateral to user
 468 |     |         if (
 469 |     |             position.borrowedVGas == 0 &&
 470 |     |             position.vGasAmount == 0 &&
 471 |     |             position.borrowedVEth == 0
 472 |     |         ) {
 473 |     |             market.withdrawCollateral(
 474 |     |                 ERC721Storage._ownerOf(position.id),
 475 |     |                 position.depositedCollateralAmount
 476 |     |             );
 477 |     |             position.depositedCollateralAmount = 0;
 478 |     |             position.kind = IFoilStructs.PositionKind.Unknown;
 479 |     |         } else {
 480 |     |             position.kind = IFoilStructs.PositionKind.Trade;
 481 |     |         }
 482 |     | 
 483 |     |         collateralAmount = position.depositedCollateralAmount;
 484 |     | 
 485 |     |         // Emit an event for the closed position
 486 |     |         emit LiquidityPositionClosed(
 487 |     |             epoch.id,
 488 |     |             position.id,
 489 |     |             position.kind,
 490 |     |             collectedAmount0,
 491 |     |             collectedAmount1
 492 |     |         );
 493 |     |     }
 494 |     | }
 495 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/modules/NftModule.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.25 <0.9.0;
   3 |     | 
   4 |     | import "../interfaces/IERC721Enumerable.sol";
   5 |     | import "../storage/ERC721Storage.sol";
   6 |     | import "../storage/ERC721EnumerableStorage.sol";
   7 |     | 
   8 |     | // import "forge-std/console2.sol";
   9 |     | 
  10 |     | contract NftModule is IERC721Enumerable {
  11 |     |     constructor() {}
  12 |     | 
  13 |     |     function balanceOf(
  14 |     |         address holder
  15 |     |     ) public view virtual override returns (uint256 balance) {
  16 |     |         if (holder == address(0)) {
  17 |     |             revert InvalidOwner(holder);
  18 |     |         }
  19 |     | 
  20 |     |         return ERC721Storage.load().balanceOf[holder];
  21 |     |     }
  22 |     | 
  23 |     |     function ownerOf(
  24 |     |         uint256 tokenId
  25 |     |     ) public view virtual override returns (address) {
  26 |     |         if (!ERC721Storage._exists(tokenId)) {
  27 |     |             revert TokenDoesNotExist(tokenId);
  28 |     |         }
  29 |     | 
  30 |     |         return ERC721Storage.load().ownerOf[tokenId];
  31 |     |     }
  32 |     | 
  33 |     |     function name() external view virtual override returns (string memory) {
  34 |     |         return ERC721Storage.load().name;
  35 |     |     }
  36 |     | 
  37 |     |     function symbol() external view virtual override returns (string memory) {
  38 |     |         return ERC721Storage.load().symbol;
  39 |     |     }
  40 |     | 
  41 |     |     function tokenURI(
  42 |     |         uint256 tokenId
  43 |     |     ) external view virtual override returns (string memory) {
  44 |     |         if (!ERC721Storage._exists(tokenId)) {
  45 |     |             revert TokenDoesNotExist(tokenId);
  46 |     |         }
  47 |     | 
  48 |     |         string memory baseURI = ERC721Storage.load().baseTokenURI;
  49 |     | 
  50 |     |         return
  51 |     |             bytes(baseURI).length > 0
  52 |     |                 ? string(
  53 |     |                     abi.encodePacked(baseURI, StringUtil.uintToString(tokenId))
  54 |     |                 )
  55 |     |                 : "";
  56 |     |     }
  57 |     | 
  58 |     |     function approve(address to, uint256 tokenId) public virtual override {
  59 |     |         ERC721Storage.Data storage store = ERC721Storage.load();
  60 |     |         address holder = store.ownerOf[tokenId];
  61 |     | 
  62 |     |         if (to == holder) {
  63 |     |             revert CannotSelfApprove(to);
  64 |     |         }
  65 |     | 
  66 |     |         if (
  67 |     |             ERC2771Context._msgSender() != holder &&
  68 |     |             !isApprovedForAll(holder, ERC2771Context._msgSender())
  69 |     |         ) {
  70 |     |             revert AccessError.Unauthorized(ERC2771Context._msgSender());
  71 |     |         }
  72 |     | 
  73 |     |         ERC721Storage._approve(to, tokenId);
  74 |     |     }
  75 |     | 
  76 |     |     function getApproved(
  77 |     |         uint256 tokenId
  78 |     |     ) public view virtual override returns (address operator) {
  79 |     |         if (!ERC721Storage._exists(tokenId)) {
  80 |     |             revert TokenDoesNotExist(tokenId);
  81 |     |         }
  82 |     | 
  83 |     |         return ERC721Storage.load().tokenApprovals[tokenId];
  84 |     |     }
  85 |     | 
  86 |     |     function setApprovalForAll(
  87 |     |         address operator,
  88 |     |         bool approved
  89 |     |     ) public virtual override {
  90 |     |         if (ERC2771Context._msgSender() == operator) {
  91 |     |             revert CannotSelfApprove(operator);
  92 |     |         }
  93 |     | 
  94 |     |         ERC721Storage.load().operatorApprovals[ERC2771Context._msgSender()][
  95 |     |                 operator
  96 |     |             ] = approved;
  97 |     | 
  98 |     |         emit ApprovalForAll(ERC2771Context._msgSender(), operator, approved);
  99 |     |     }
 100 |     | 
 101 |     |     function isApprovedForAll(
 102 |     |         address holder,
 103 |     |         address operator
 104 |     |     ) public view virtual override returns (bool) {
 105 |     |         return ERC721Storage.load().operatorApprovals[holder][operator];
 106 |     |     }
 107 |     | 
 108 |     |     function transferFrom(
 109 |     |         address from,
 110 |     |         address to,
 111 |     |         uint256 tokenId
 112 |     |     ) public virtual override {
 113 |     |         if (
 114 |     |             !ERC721Storage._isApprovedOrOwner(
 115 |     |                 ERC2771Context._msgSender(),
 116 |     |                 tokenId
 117 |     |             )
 118 |     |         ) {
 119 |     |             revert AccessError.Unauthorized(ERC2771Context._msgSender());
 120 |     |         }
 121 |     | 
 122 |     |         ERC721Storage._transfer(from, to, tokenId);
 123 |     |     }
 124 |     | 
 125 |     |     function safeTransferFrom(
 126 |     |         address from,
 127 |     |         address to,
 128 |     |         uint256 tokenId
 129 |     |     ) public virtual override {
 130 |     |         safeTransferFrom(from, to, tokenId, "");
 131 |     |     }
 132 |     | 
 133 |     |     function safeTransferFrom(
 134 |     |         address from,
 135 |     |         address to,
 136 |     |         uint256 tokenId,
 137 |     |         bytes memory data
 138 |     |     ) public virtual override {
 139 |     |         if (
 140 |     |             !ERC721Storage._isApprovedOrOwner(
 141 |     |                 ERC2771Context._msgSender(),
 142 |     |                 tokenId
 143 |     |             )
 144 |     |         ) {
 145 |     |             revert AccessError.Unauthorized(ERC2771Context._msgSender());
 146 |     |         }
 147 |     | 
 148 |     |         ERC721Storage._transfer(from, to, tokenId);
 149 |     |         if (!ERC721Storage._checkOnERC721Received(from, to, tokenId, data)) {
 150 |     |             revert InvalidTransferRecipient(to);
 151 |     |         }
 152 |     |     }
 153 |     | 
 154 |     |     ///
 155 |     |     ///
 156 |     |     ///
 157 |     |     /// ERC721Enumerable
 158 |     |     ///
 159 |     |     ///
 160 |     |     ///
 161 |     | 
 162 |     |     function tokenOfOwnerByIndex(
 163 |     |         address owner,
 164 |     |         uint256 index
 165 |     |     ) public view virtual override returns (uint256) {
 166 |     |         if (balanceOf(owner) <= index) {
 167 |     |             revert IndexOverrun(index, balanceOf(owner));
 168 |     |         }
 169 |     |         return ERC721EnumerableStorage.load().ownedTokens[owner][index];
 170 |     |     }
 171 |     | 
 172 |     |     /**
 173 |     |      * @dev Returns the total amount of tokens stored by the contract.
 174 |     |      */
 175 |     |     function totalSupply() public view virtual override returns (uint256) {
 176 |     |         return ERC721EnumerableStorage.totalSupply();
 177 |     |     }
 178 |     | 
 179 |     |     /**
 180 |     |      * @dev Returns the token identifier for the `_index`th NFT
 181 |     |      */
 182 |     |     function tokenByIndex(
 183 |     |         uint256 index
 184 |     |     ) public view virtual override returns (uint256) {
 185 |     |         if (index >= totalSupply()) {
 186 |     |             revert IndexOverrun(index, totalSupply());
 187 |     |         }
 188 |     |         return ERC721EnumerableStorage.load().allTokens[index];
 189 |     |     }
 190 |     | }
 191 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/modules/SettlementModule.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import {IFoilStructs} from "../interfaces/IFoilStructs.sol";
   5 |     | import {Position} from "../storage/Position.sol";
   6 |     | import {Epoch} from "../storage/Epoch.sol";
   7 |     | import {Market} from "../storage/Market.sol";
   8 |     | import {Errors} from "../storage/Errors.sol";
   9 |     | import {Pool} from "../libraries/Pool.sol";
  10 |     | import {DecimalPrice} from "../libraries/DecimalPrice.sol";
  11 |     | import {ERC721Storage} from "../storage/ERC721Storage.sol";
  12 |     | import {IUniswapV3Pool} from "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol";
  13 |     | import {ISettlementModule} from "../interfaces/ISettlementModule.sol";
  14 |     | import {INonfungiblePositionManager} from "../interfaces/external/INonfungiblePositionManager.sol";
  15 |     | import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
  16 |     | import {console2} from "forge-std/console2.sol";
  17 |     | 
  18 |     | contract SettlementModule is ISettlementModule, ReentrancyGuardUpgradeable {
  19 |     |     using Position for Position.Data;
  20 |     |     using Market for Market.Data;
  21 |     | 
  22 |     |     function settlePosition(
  23 |     |         uint256 positionId
  24 |     |     ) external nonReentrant override returns (uint256 withdrawableCollateral) {
  25 |     |         console2.log("settlePosition");
  26 |     | 
  27 |     |         Position.Data storage position = Position.loadValid(positionId);
  28 |     |         Epoch.Data storage epoch = Epoch.loadValid(position.epochId);
  29 |     |         Market.Data storage market = Market.load();
  30 |     | 
  31 |     |         // Get the current price of the pool in decimal format
  32 |     |         (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3Pool(epoch.pool).slot0();
  33 |     |         uint256 priceInDecimal = DecimalPrice.sqrtRatioX96ToPrice(sqrtPriceX96);
  34 |     | 
  35 |     |         console2.log("Current pool price:", priceInDecimal);
  36 |     | 
  37 |     |         if (ERC721Storage._ownerOf(positionId) != msg.sender) {
  38 |     |             revert Errors.NotAccountOwnerOrAuthorized(positionId, msg.sender);
  39 |     |         }
  40 |     | 
  41 |     |         // Ensure the epoch has ended
  42 |     |         if (!epoch.settled) {
  43 |     |             revert Errors.EpochNotSettled(position.epochId);
  44 |     |         }
  45 |     | 
  46 |     |         // Ensure the position hasn't been settled already
  47 |     |         if (position.isSettled) {
  48 |     |             revert Errors.PositionAlreadySettled(positionId);
  49 |     |         }
  50 |     | 
  51 |     |         console2.log("settlePosition 2");
  52 |     | 
  53 |     |         // Perform settlement logic based on position kind
  54 |     |         if (position.kind == IFoilStructs.PositionKind.Liquidity) {
  55 |     |             withdrawableCollateral = _settleLiquidityPosition(
  56 |     |                 position,
  57 |     |                 market,
  58 |     |                 epoch
  59 |     |             );
  60 |     |         } else if (position.kind == IFoilStructs.PositionKind.Trade) {
  61 |     |             withdrawableCollateral = position.settle(epoch.settlementPriceD18);
  62 |     |         } else {
  63 |     |             revert Errors.InvalidPositionKind();
  64 |     |         }
  65 |     | 
  66 |     |         market.withdrawCollateral(msg.sender, withdrawableCollateral);
  67 |     | 
  68 |     |         emit PositionSettled(positionId, withdrawableCollateral);
  69 |     |     }
  70 |     | 
  71 |     |     function _settleLiquidityPosition(
  72 |     |         Position.Data storage position,
  73 |     |         Market.Data storage market,
  74 |     |         Epoch.Data storage epoch
  75 |     |     ) internal returns (uint256) {
  76 |     |         // Get current token amounts using Pool library
  77 |     |         (uint256 currentAmount0, uint256 currentAmount1, , , ) = Pool
  78 |     |             .getCurrentPositionTokenAmounts(market, epoch, position);
  79 |     | 
  80 |     |         // Update the position's token amounts with the current values
  81 |     |         position.vGasAmount += currentAmount0;
  82 |     |         position.vEthAmount += currentAmount1;
  83 |     | 
  84 |     |         // Collect fees from the Uniswap position
  85 |     |         (uint256 amount0, uint256 amount1) = INonfungiblePositionManager(epoch
  86 |     |             .params
  87 |     |             .uniswapPositionManager)
  88 |     |             .collect(
  89 |     |                 INonfungiblePositionManager.CollectParams({
  90 |     |                     tokenId: position.uniswapPositionId,
  91 |     |                     recipient: address(this),
  92 |     |                     amount0Max: type(uint128).max,
  93 |     |                     amount1Max: type(uint128).max
  94 |     |                 })
  95 |     |             );
  96 |     | 
  97 |     |         // Update the position's token amounts
  98 |     |         position.vGasAmount += amount0;
  99 |     |         position.vEthAmount += amount1;
 100 |     | 
 101 |     |         return position.settle(epoch.settlementPriceD18);
 102 |     |     }
 103 |     | }
 104 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/modules/TradeModule.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.25 <0.9.0;
   3 |     | 
   4 |     | import "../storage/Position.sol";
   5 |     | import "../storage/ERC721Storage.sol";
   6 |     | import "../storage/Trade.sol";
   7 |     | import "@synthetixio/core-contracts/contracts/utils/DecimalMath.sol";
   8 |     | import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
   9 |     | import {SafeCastI256} from "@synthetixio/core-contracts/contracts/utils/SafeCast.sol";
  10 |     | import {SafeCastU256} from "@synthetixio/core-contracts/contracts/utils/SafeCast.sol";
  11 |     | import {ITradeModule} from "../interfaces/ITradeModule.sol";
  12 |     | 
  13 |     | import "forge-std/console2.sol";
  14 |     | 
  15 |     | /**
  16 |     |  * @title Module for trade positions.
  17 |     |  * @dev See ITradeModule.
  18 |     |  */
  19 |     | contract TradeModule is ITradeModule, ReentrancyGuardUpgradeable {
  20 |     |     using Epoch for Epoch.Data;
  21 |     |     using Position for Position.Data;
  22 |     |     using DecimalMath for uint256;
  23 |     |     using SafeCastI256 for int256;
  24 |     |     using SafeCastU256 for uint256;
  25 |     | 
  26 |     |     /**
  27 |     |      * @inheritdoc ITradeModule
  28 |     |      */
  29 |     |     function createTraderPosition(
  30 |     |         uint256 epochId,
  31 |     |         int256 size,
  32 |     |         uint256 deltaCollateralLimit,
  33 |     |         uint256 deadline
  34 |     |     ) external nonReentrant returns (uint256 positionId) {
  35 |     |         require(block.timestamp <= deadline, "Transaction too old");
  36 |     | 
  37 |     |         if (size == 0) {
  38 |     |             revert Errors.InvalidData("Size cannot be 0");
  39 |     |         }
  40 |     | 
  41 |     |         Epoch.Data storage epoch = Epoch.load(epochId);
  42 |     | 
  43 |     |         // check if epoch is not settled
  44 |     |         epoch.validateNotSettled();
  45 |     | 
  46 |     |         // Mint position NFT and initialize position
  47 |     |         positionId = ERC721EnumerableStorage.totalSupply() + 1;
  48 |     |         Position.Data storage position = Position.createValid(positionId);
  49 |     |         ERC721Storage._checkOnERC721Received(
  50 |     |             address(this),
  51 |     |             msg.sender,
  52 |     |             positionId,
  53 |     |             ""
  54 |     |         );
  55 |     |         ERC721Storage._mint(msg.sender, positionId);
  56 |     |         position.epochId = epochId;
  57 |     |         position.kind = IFoilStructs.PositionKind.Trade;
  58 |     | 
  59 |     |         uint256 initialPrice = Trade.getReferencePrice(epochId);
  60 |     | 
  61 |     |         // Create the position
  62 |     |         uint256 requiredCollateralAmount;
  63 |     |         uint256 vEthAmount;
  64 |     |         uint256 vGasAmount;
  65 |     |         uint256 tradeRatioD18;
  66 |     | 
  67 |     |         if (size > 0) {
  68 |     |             (
  69 |     |                 vEthAmount,
  70 |     |                 vGasAmount,
  71 |     |                 requiredCollateralAmount,
  72 |     |                 tradeRatioD18
  73 |     |             ) = _moveToLongDirection(position, epoch, size);
  74 |     |         } else {
  75 |     |             (
  76 |     |                 vEthAmount,
  77 |     |                 vGasAmount,
  78 |     |                 requiredCollateralAmount,
  79 |     |                 tradeRatioD18
  80 |     |             ) = _moveToShortDirection(position, epoch, size);
  81 |     |         }
  82 |     | 
  83 |     |         // Check if the collateral is within the limit
  84 |     |         if (requiredCollateralAmount > deltaCollateralLimit) {
  85 |     |             revert Errors.CollateralLimitReached(
  86 |     |                 requiredCollateralAmount.toInt(),
  87 |     |                 deltaCollateralLimit.toInt()
  88 |     |             );
  89 |     |         }
  90 |     | 
  91 |     |         // Transfer the locked collateral to the market
  92 |     |         position.updateCollateral(requiredCollateralAmount);
  93 |     | 
  94 |     |         // Validate after trading that collateral is enough
  95 |     |         position.afterTradeCheck();
  96 |     | 
  97 |     |         uint256 finalPrice = Trade.getReferencePrice(epochId);
  98 |     | 
  99 |     |         epoch.validateCurrentPoolPriceInRange();
 100 |     | 
 101 |     |         emit TraderPositionCreated(
 102 |     |             epochId,
 103 |     |             positionId,
 104 |     |             requiredCollateralAmount,
 105 |     |             position.vEthAmount,
 106 |     |             position.vGasAmount,
 107 |     |             position.borrowedVEth,
 108 |     |             position.borrowedVGas,
 109 |     |             initialPrice,
 110 |     |             finalPrice,
 111 |     |             tradeRatioD18
 112 |     |         );
 113 |     |     }
 114 |     | 
 115 |     |     /**
 116 |     |      * @inheritdoc ITradeModule
 117 |     |      */
 118 |     |     function modifyTraderPosition(
 119 |     |         uint256 positionId,
 120 |     |         int256 size,
 121 |     |         int256 deltaCollateralLimit, // TODO C-09 int256 maxCollateralDelta and use it also for expected collateral profits
 122 |     |         uint256 deadline
 123 |     |     ) external nonReentrant {
 124 |     |         require(block.timestamp <= deadline, "Transaction too old");
 125 |     | 
 126 |     |         if (ERC721Storage._ownerOf(positionId) != msg.sender) {
 127 |     |             revert Errors.NotAccountOwnerOrAuthorized(positionId, msg.sender);
 128 |     |         }
 129 |     | 
 130 |     |         Position.Data storage position = Position.loadValid(positionId);
 131 |     | 
 132 |     |         if (position.kind != IFoilStructs.PositionKind.Trade) {
 133 |     |             revert Errors.InvalidPositionKind();
 134 |     |         }
 135 |     | 
 136 |     |         int256 deltaSize = size - position.positionSize();
 137 |     |         if (deltaSize == 0) {
 138 |     |             revert Errors.InvalidData("Size not changed");
 139 |     |         }
 140 |     | 
 141 |     |         Epoch.Data storage epoch = Epoch.load(position.epochId);
 142 |     | 
 143 |     |         // check if epoch is not settled
 144 |     |         epoch.validateNotSettled();
 145 |     | 
 146 |     |         uint256 initialPrice = Trade.getReferencePrice(position.epochId);
 147 |     | 
 148 |     |         uint256 requiredCollateralAmount;
 149 |     |         uint256 vEthAmount;
 150 |     |         uint256 vGasAmount;
 151 |     |         uint256 tradeRatioD18;
 152 |     | 
 153 |     |         if (deltaSize > 0) {
 154 |     |             (
 155 |     |                 vEthAmount,
 156 |     |                 vGasAmount,
 157 |     |                 requiredCollateralAmount,
 158 |     |                 tradeRatioD18
 159 |     |             ) = _moveToLongDirection(position, epoch, deltaSize);
 160 |     |         } else {
 161 |     |             (
 162 |     |                 vEthAmount,
 163 |     |                 vGasAmount,
 164 |     |                 requiredCollateralAmount,
 165 |     |                 tradeRatioD18
 166 |     |             ) = _moveToShortDirection(position, epoch, deltaSize);
 167 |     |         }
 168 |     | 
 169 |     |         if (size == 0) {
 170 |     |             // Closing the position. No need to check collateral limit
 171 |     |             // We need to:
 172 |     |             // 1. Reconcile the tokens
 173 |     |             position.reconcileTokens();
 174 |     | 
 175 |     |             // 2. Confirm no vgas tokens
 176 |     |             if (position.vGasAmount > 0) {
 177 |     |                 // Notice. This error should not happen. If it's here it means something went wrong
 178 |     |                 revert Errors.InvalidData(
 179 |     |                     "Cannot close position with vGas tokens"
 180 |     |                 );
 181 |     |             }
 182 |     |             if (position.borrowedVGas > 0) {
 183 |     |                 // Notice. This error should not happen. If it's here it means something went wrong
 184 |     |                 revert Errors.InvalidData(
 185 |     |                     "Cannot close position with borrowed vGas tokens"
 186 |     |                 );
 187 |     |             }
 188 |     | 
 189 |     |             // 3. Confirm collateral is enough to pay for borrowed veth
 190 |     |             if (position.borrowedVEth > 0) {
 191 |     |                 uint256 collateralRequired = position.getRequiredCollateral();
 192 |     |                 if (collateralRequired > position.depositedCollateralAmount) {
 193 |     |                     // Notice. This error should not happen. If it's here it means something went wrong
 194 |     |                     revert Errors.InsufficientCollateral(
 195 |     |                         collateralRequired,
 196 |     |                         position.depositedCollateralAmount
 197 |     |                     );
 198 |     |                 }
 199 |     |             }
 200 |     | 
 201 |     |             // 4. Reconcile collateral
 202 |     |             position.reconcileCollateral();
 203 |     | 
 204 |     |             // 5. Transfer the released collateral to the trader (pnl)
 205 |     |             int256 deltaCollateral = position.updateCollateral(0);
 206 |     | 
 207 |     |             // Check if the collateral is within the limit
 208 |     |             _checkDeltaCollateralLimit(deltaCollateral, deltaCollateralLimit);
 209 |     | 
 210 |     |             // Now the position should be closed. All the vToken and collateral values set to zero
 211 |     |         } else {
 212 |     |             // Not closing, proced as a normal trade
 213 |     | 
 214 |     |             // Ensures that the position only have single side tokens
 215 |     |             position.reconcileTokens();
 216 |     | 
 217 |     |             if (size == 0) {
 218 |     |                 // close position
 219 |     |                 // gas should be zero, reconcile vEth tokens to collateral
 220 |     |                 assert(position.vGasAmount == 0);
 221 |     |                 assert(position.borrowedVGas == 0);
 222 |     |             }
 223 |     | 
 224 |     |             // Transfer the locked collateral to the market or viceversa
 225 |     |             int256 deltaCollateral = position.updateCollateral(
 226 |     |                 requiredCollateralAmount
 227 |     |             );
 228 |     | 
 229 |     |             // Check if the collateral is within the limit
 230 |     |             _checkDeltaCollateralLimit(deltaCollateral, deltaCollateralLimit);
 231 |     | 
 232 |     |             // Validate after trading that collateral is enough
 233 |     |             position.afterTradeCheck();
 234 |     |         }
 235 |     | 
 236 |     |         uint256 finalPrice = Trade.getReferencePrice(position.epochId);
 237 |     | 
 238 |     |         epoch.validateCurrentPoolPriceInRange();
 239 |     | 
 240 |     |         emit TraderPositionModified(
 241 |     |             position.epochId,
 242 |     |             positionId,
 243 |     |             requiredCollateralAmount,
 244 |     |             position.vEthAmount,
 245 |     |             position.vGasAmount,
 246 |     |             position.borrowedVEth,
 247 |     |             position.borrowedVGas,
 248 |     |             initialPrice,
 249 |     |             finalPrice,
 250 |     |             tradeRatioD18
 251 |     |         );
 252 |     |     }
 253 |     | 
 254 |     |     function _checkDeltaCollateralLimit(
 255 |     |         int256 deltaCollateral,
 256 |     |         int256 deltaCollateralLimit
 257 |     |     ) internal pure {
 258 |     |         if (
 259 |     |             deltaCollateralLimit > 0 && deltaCollateral > deltaCollateralLimit
 260 |     |         ) {
 261 |     |             revert Errors.CollateralLimitReached(
 262 |     |                 deltaCollateral,
 263 |     |                 deltaCollateralLimit
 264 |     |             );
 265 |     |         }
 266 |     |         if (
 267 |     |             deltaCollateralLimit < 0 && deltaCollateral < deltaCollateralLimit
 268 |     |         ) {
 269 |     |             revert Errors.CollateralLimitReached(
 270 |     |                 deltaCollateral,
 271 |     |                 deltaCollateralLimit
 272 |     |             );
 273 |     |         }
 274 |     |     }
 275 |     |     /**
 276 |     |      * @inheritdoc ITradeModule
 277 |     |      */
 278 |     |     function quoteCreateTraderPosition(
 279 |     |         uint256 epochId,
 280 |     |         int256 size
 281 |     |     ) external returns (uint256 requiredCollateral) {
 282 |     |         if (size == 0) {
 283 |     |             revert Errors.InvalidData("Size cannot be 0");
 284 |     |         }
 285 |     | 
 286 |     |         Epoch.Data storage epoch = Epoch.load(epochId);
 287 |     | 
 288 |     |         // check if epoch is not settled
 289 |     |         epoch.validateNotSettled();
 290 |     | 
 291 |     |         if (size > 0) {
 292 |     |             return _quoteCreateLongPosition(epoch, size);
 293 |     |         } else {
 294 |     |             return _quoteCreateShortPosition(epoch, size);
 295 |     |         }
 296 |     |     }
 297 |     | 
 298 |     |     /**
 299 |     |      * @inheritdoc ITradeModule
 300 |     |      */
 301 |     |     function quoteModifyTraderPosition(
 302 |     |         uint256 positionId,
 303 |     |         int256 size
 304 |     |     ) external returns (uint256 requiredCollateral) {
 305 |     |         // TODO C-09 return an int256 expectedCollateralDelta
 306 |     |         if (ERC721Storage._ownerOf(positionId) != msg.sender) {
 307 |     |             revert Errors.NotAccountOwnerOrAuthorized(positionId, msg.sender);
 308 |     |         }
 309 |     | 
 310 |     |         Position.Data storage position = Position.loadValid(positionId);
 311 |     | 
 312 |     |         // check if epoch is not settled
 313 |     |         Epoch.load(position.epochId).validateNotSettled();
 314 |     | 
 315 |     |         if (position.kind != IFoilStructs.PositionKind.Trade) {
 316 |     |             revert Errors.InvalidPositionKind();
 317 |     |         }
 318 |     | 
 319 |     |         int256 deltaSize = size - position.positionSize();
 320 |     | 
 321 |     |         if (deltaSize == 0) {
 322 |     |             revert Errors.InvalidData("Size cannot be 0");
 323 |     |         }
 324 |     | 
 325 |     |         // check settlement state
 326 |     |         if (size == 0) {
 327 |     |             // closing cannot happen after endTime, before settlement
 328 |     |             Epoch.load(position.epochId).validateSettlementSanity();
 329 |     |         } else {
 330 |     |             // trading (not closing), can only happen if before endTime
 331 |     |             Epoch.load(position.epochId).validateNotSettled();
 332 |     |         }
 333 |     | 
 334 |     |         // uint requiredCollateral;
 335 |     |         if (deltaSize > 0) {
 336 |     |             requiredCollateral = _quoteModifyLongDirection(position, deltaSize);
 337 |     |         } else {
 338 |     |             requiredCollateral = _quoteModifyShortDirection(
 339 |     |                 position,
 340 |     |                 deltaSize
 341 |     |             );
 342 |     |         }
 343 |     |     }
 344 |     | 
 345 |     |     function _quoteModifyLongDirection(
 346 |     |         Position.Data storage position,
 347 |     |         int256 deltaSize
 348 |     |     ) internal returns (uint256 requiredCollateral) {
 349 |     |         uint256 vGasDeltaTokens = deltaSize.toUint();
 350 |     |         Epoch.Data storage epoch = Epoch.load(position.epochId);
 351 |     | 
 352 |     |         (uint256 requiredAmountInVEth, ) = Trade.swapOrQuoteTokensExactOut(
 353 |     |             epoch,
 354 |     |             0,
 355 |     |             vGasDeltaTokens,
 356 |     |             true
 357 |     |         );
 358 |     | 
 359 |     |         requiredCollateral = epoch.getCollateralRequirementsForTrade(
 360 |     |             position.vGasAmount + vGasDeltaTokens,
 361 |     |             position.vEthAmount,
 362 |     |             position.borrowedVGas,
 363 |     |             position.borrowedVEth + requiredAmountInVEth
 364 |     |         );
 365 |     |     }
 366 |     | 
 367 |     |     function _quoteModifyShortDirection(
 368 |     |         Position.Data storage position,
 369 |     |         int256 deltaSize
 370 |     |     ) internal returns (uint256 requiredCollateral) {
 371 |     |         uint256 vGasDeltaDebt = (deltaSize * -1).toUint();
 372 |     | 
 373 |     |         Epoch.Data storage epoch = Epoch.load(position.epochId);
 374 |     | 
 375 |     |         (uint256 amountOutVEth, ) = Trade.swapOrQuoteTokensExactIn(
 376 |     |             epoch,
 377 |     |             0,
 378 |     |             vGasDeltaDebt,
 379 |     |             true
 380 |     |         );
 381 |     | 
 382 |     |         requiredCollateral = epoch.getCollateralRequirementsForTrade(
 383 |     |             position.vGasAmount,
 384 |     |             position.vEthAmount + amountOutVEth,
 385 |     |             position.borrowedVGas + vGasDeltaDebt,
 386 |     |             position.borrowedVEth
 387 |     |         );
 388 |     |     }
 389 |     | 
 390 |     |     function _quoteCreateLongPosition(
 391 |     |         Epoch.Data storage epoch,
 392 |     |         int256 size
 393 |     |     ) internal returns (uint256 collateralDelta) {
 394 |     |         uint256 vGasTokens = size.toUint();
 395 |     | 
 396 |     |         (uint256 requiredAmountInVEth, ) = Trade.swapOrQuoteTokensExactOut(
 397 |     |             epoch,
 398 |     |             0,
 399 |     |             vGasTokens,
 400 |     |             true
 401 |     |         );
 402 |     | 
 403 |     |         collateralDelta = epoch.getCollateralRequirementsForTrade(
 404 |     |             vGasTokens,
 405 |     |             0,
 406 |     |             0,
 407 |     |             requiredAmountInVEth
 408 |     |         );
 409 |     |     }
 410 |     | 
 411 |     |     function _quoteCreateShortPosition(
 412 |     |         Epoch.Data storage epoch,
 413 |     |         int256 size
 414 |     |     ) internal returns (uint256 collateralDelta) {
 415 |     |         uint256 vGasDebt = (size * -1).toUint();
 416 |     | 
 417 |     |         (uint256 amountOutVEth, ) = Trade.swapOrQuoteTokensExactIn(
 418 |     |             epoch,
 419 |     |             0,
 420 |     |             vGasDebt,
 421 |     |             true
 422 |     |         );
 423 |     | 
 424 |     |         collateralDelta = epoch.getCollateralRequirementsForTrade(
 425 |     |             0,
 426 |     |             amountOutVEth,
 427 |     |             vGasDebt,
 428 |     |             0
 429 |     |         );
 430 |     |     }
 431 |     | 
 432 |     |     function _moveToLongDirection(
 433 |     |         Position.Data storage position,
 434 |     |         Epoch.Data storage epoch,
 435 |     |         int256 deltaSize
 436 |     |     )
 437 |     |         internal
 438 |     |         returns (
 439 |     |             uint256 vEthDebt,
 440 |     |             uint256 vGasTokens,
 441 |     |             uint256 collateralRequired,
 442 |     |             uint256 tradeRatioD18
 443 |     |         )
 444 |     |     {
 445 |     |         vGasTokens = deltaSize.toUint();
 446 |     |         (uint256 requiredAmountInVEth, ) = Trade.swapOrQuoteTokensExactOut(
 447 |     |             epoch,
 448 |     |             0,
 449 |     |             vGasTokens,
 450 |     |             false
 451 |     |         );
 452 |     | 
 453 |     |         vEthDebt = requiredAmountInVEth;
 454 |     | 
 455 |     |         // Update the position
 456 |     |         position.borrowedVEth += vEthDebt;
 457 |     |         position.vGasAmount += vGasTokens;
 458 |     | 
 459 |     |         // get required collateral from the position
 460 |     |         collateralRequired = position.getRequiredCollateral();
 461 |     | 
 462 |     |         // get average trade ratio (price)
 463 |     |         if (vGasTokens == 0) {
 464 |     |             tradeRatioD18 = 0;
 465 |     |         } else {
 466 |     |             tradeRatioD18 = requiredAmountInVEth.divDecimal(vGasTokens);
 467 |     |         }
 468 |     |     }
 469 |     | 
 470 |     |     function _moveToShortDirection(
 471 |     |         Position.Data storage position,
 472 |     |         Epoch.Data storage epoch,
 473 |     |         int256 deltaSize
 474 |     |     )
 475 |     |         internal
 476 |     |         returns (
 477 |     |             uint256 vEthTokens,
 478 |     |             uint256 vGasDebt,
 479 |     |             uint256 collateralRequired,
 480 |     |             uint256 tradeRatioD18
 481 |     |         )
 482 |     |     {
 483 |     |         vGasDebt = (deltaSize * -1).toUint();
 484 |     |         (uint256 amountOutVEth, ) = Trade.swapOrQuoteTokensExactIn(
 485 |     |             epoch,
 486 |     |             0,
 487 |     |             vGasDebt,
 488 |     |             false
 489 |     |         );
 490 |     | 
 491 |     |         vEthTokens = amountOutVEth;
 492 |     | 
 493 |     |         // Update the position
 494 |     |         position.vEthAmount += vEthTokens;
 495 |     |         position.borrowedVGas += vGasDebt;
 496 |     | 
 497 |     |         // get required collateral from the position
 498 |     |         collateralRequired = position.getRequiredCollateral();
 499 |     | 
 500 |     |         // get average trade ratio (price)
 501 |     |         if (vGasDebt == 0) {
 502 |     |             tradeRatioD18 = 0;
 503 |     |         } else {
 504 |     |             tradeRatioD18 = amountOutVEth.divDecimal(vGasDebt);
 505 |     |         }
 506 |     |     }
 507 |     | }
 508 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/modules/UMASettlementModule.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.25 <0.9.0;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
   5 |     | import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
   6 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
   7 |     | import {Epoch} from "../storage/Epoch.sol";
   8 |     | import {Market} from "../storage/Market.sol";
   9 |     | import {IUMASettlementModule} from "../interfaces/IUMASettlementModule.sol";
  10 |     | import {OptimisticOracleV3Interface} from "@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol";
  11 |     | 
  12 |     | contract UMASettlementModule is IUMASettlementModule, ReentrancyGuardUpgradeable {
  13 |     |     using SafeERC20 for IERC20;
  14 |     |     using Epoch for Epoch.Data;
  15 |     | 
  16 |     |     function submitSettlementPrice(
  17 |     |         uint256 epochId,
  18 |     |         uint256 settlementPriceD18
  19 |     |     ) external nonReentrant returns (bytes32) {
  20 |     |         Market.Data storage market = Market.load();
  21 |     |         Epoch.Data storage epoch = Epoch.loadValid(epochId);
  22 |     | 
  23 |     |         validateSubmission(epoch, market, msg.sender);
  24 |     | 
  25 |     |         IERC20 bondCurrency = IERC20(epoch.params.bondCurrency);
  26 |     |         OptimisticOracleV3Interface optimisticOracleV3 = OptimisticOracleV3Interface(epoch.params
  27 |     |             .optimisticOracleV3);
  28 |     | 
  29 |     |         bondCurrency.safeTransferFrom(
  30 |     |             msg.sender,
  31 |     |             address(this),
  32 |     |             epoch.params.bondAmount
  33 |     |         );
  34 |     |         bondCurrency.approve(
  35 |     |             address(optimisticOracleV3),
  36 |     |             epoch.params.bondAmount
  37 |     |         );
  38 |     | 
  39 |     |         bytes memory claim = abi.encodePacked(
  40 |     |             "ipfs://Qmbg1KiuKNmCbL696Zu8hXUAJrTxuhgNCbyjaPyni4RXTc evaluates to ",
  41 |     |             abi.encodePacked(settlementPriceD18),
  42 |     |             " ",
  43 |     |             epoch.params.priceUnit,
  44 |     |             " with start time ",
  45 |     |             abi.encodePacked(epoch.startTime),
  46 |     |             " and end time ",
  47 |     |             abi.encodePacked(epoch.endTime)
  48 |     |         );
  49 |     | 
  50 |     |         epoch.assertionId = optimisticOracleV3.assertTruth(
  51 |     |             claim,
  52 |     |             msg.sender,
  53 |     |             address(this),
  54 |     |             address(0),
  55 |     |             epoch.params.assertionLiveness,
  56 |     |             IERC20(epoch.params.bondCurrency),
  57 |     |             epoch.params.bondAmount,
  58 |     |             optimisticOracleV3.defaultIdentifier(),
  59 |     |             bytes32(0)
  60 |     |         );
  61 |     | 
  62 |     |         market.epochIdByAssertionId[epoch.assertionId] = epochId;
  63 |     | 
  64 |     |         epoch.settlement = Epoch.Settlement({
  65 |     |             settlementPriceD18: settlementPriceD18,
  66 |     |             submissionTime: block.timestamp,
  67 |     |             disputed: false,
  68 |     |             disputer: address(0)
  69 |     |         });
  70 |     | 
  71 |     |         emit SettlementSubmitted(epochId, settlementPriceD18, block.timestamp);
  72 |     | 
  73 |     |         return epoch.assertionId;
  74 |     |     }
  75 |     | 
  76 |     |     function assertionResolvedCallback(
  77 |     |         bytes32 assertionId,
  78 |     |         bool assertedTruthfully
  79 |     |     ) external nonReentrant {
  80 |     |         Market.Data storage market = Market.load();
  81 |     |         uint256 epochId = market.epochIdByAssertionId[assertionId];
  82 |     |         Epoch.Data storage epoch = Epoch.load(epochId);
  83 |     | 
  84 |     |         validateCallback(epoch, msg.sender, assertionId);
  85 |     | 
  86 |     |         Epoch.Settlement storage settlement = epoch.settlement;
  87 |     | 
  88 |     |         if (!epoch.settlement.disputed) {
  89 |     |             epoch.setSettlementPriceInRange(settlement.settlementPriceD18);
  90 |     |             epoch.settled = true;
  91 |     |             emit MarketSettled(
  92 |     |                 epochId,
  93 |     |                 assertionId,
  94 |     |                 settlement.settlementPriceD18
  95 |     |             );
  96 |     |         }
  97 |     |     }
  98 |     | 
  99 |     |     function assertionDisputedCallback(bytes32 assertionId) external nonReentrant {
 100 |     |         Market.Data storage market = Market.load();
 101 |     |         uint256 epochId = market.epochIdByAssertionId[assertionId];
 102 |     |         Epoch.Data storage epoch = Epoch.load(epochId);
 103 |     | 
 104 |     |         validateCallback(epoch, msg.sender, assertionId);
 105 |     | 
 106 |     |         Epoch.Settlement storage settlement = epoch.settlement;
 107 |     |         settlement.disputed = true;
 108 |     | 
 109 |     |         emit SettlementDisputed(epochId, block.timestamp);
 110 |     |     }
 111 |     | 
 112 |     |     function validateSubmission(
 113 |     |         Epoch.Data storage epoch, 
 114 |     |         Market.Data storage market, 
 115 |     |         address caller
 116 |     |     ) internal view {
 117 |     |         require(
 118 |     |             block.timestamp > epoch.endTime,
 119 |     |             "Market epoch activity is still allowed"
 120 |     |         );
 121 |     |         require(!epoch.settled, "Market epoch already settled");
 122 |     |         require(
 123 |     |             caller == market.owner,
 124 |     |             "Only owner can call this function"
 125 |     |         );
 126 |     |     }
 127 |     | 
 128 |     |     function validateCallback(
 129 |     |         Epoch.Data storage epoch,
 130 |     |         address caller,
 131 |     |         bytes32 assertionId
 132 |     |     ) internal view {
 133 |     |         OptimisticOracleV3Interface optimisticOracleV3 = OptimisticOracleV3Interface(epoch.params
 134 |     |             .optimisticOracleV3);
 135 |     | 
 136 |     |         require(
 137 |     |             block.timestamp > epoch.endTime,
 138 |     |             "Market epoch activity is still allowed"
 139 |     |         );
 140 |     |         require(!epoch.settled, "Market epoch already settled");
 141 |     |         require(
 142 |     |             caller == address(optimisticOracleV3),
 143 |     |             "Invalid caller"
 144 |     |         );
 145 |     |         require(assertionId == epoch.assertionId, "Invalid assertionId");
 146 |     |     }
 147 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/modules/ViewsModule.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.25 <0.9.0;
   3 |     | 
   4 |     | import "../storage/Epoch.sol";
   5 |     | import "../storage/Position.sol";
   6 |     | import "../interfaces/IViewsModule.sol";
   7 |     | import "../interfaces/IFoilStructs.sol";
   8 |     | 
   9 | *   | contract ViewsModule is IViewsModule {
  10 |     |     using Position for Position.Data;
  11 |     | 
  12 |     |     function getMarket()
  13 |     |         external
  14 |     |         view
  15 |     |         override
  16 |     |         returns (
  17 |     |             address owner,
  18 |     |             address collateralAsset,
  19 |     |             IFoilStructs.EpochParams memory epochParams
  20 |     |         )
  21 |     |     {
  22 |     |         Market.Data storage market = Market.load();
  23 |     |         return (
  24 |     |             market.owner,
  25 |     |             address(market.collateralAsset),
  26 |     |             market.epochParams
  27 |     |         );
  28 |     |     }
  29 |     | 
  30 |     |     function getEpoch(
  31 |     |         uint256 id
  32 |     |     )
  33 |     |         external
  34 |     |         view
  35 |     |         override
  36 |     |         returns (
  37 |     |             uint256 startTime,
  38 |     |             uint256 endTime,
  39 |     |             address pool,
  40 |     |             address ethToken,
  41 |     |             address gasToken,
  42 |     |             uint256 minPriceD18,
  43 |     |             uint256 maxPriceD18,
  44 |     |             bool settled,
  45 |     |             uint256 settlementPriceD18,
  46 |     |             IFoilStructs.EpochParams memory params
  47 |     |         )
  48 |     |     {
  49 |     |         Epoch.Data storage epoch = Epoch.load(id);
  50 |     |         return (
  51 |     |             epoch.startTime,
  52 |     |             epoch.endTime,
  53 |     |             address(epoch.pool),
  54 |     |             address(epoch.ethToken),
  55 |     |             address(epoch.gasToken),
  56 |     |             epoch.minPriceD18,
  57 |     |             epoch.maxPriceD18,
  58 |     |             epoch.settled,
  59 |     |             epoch.settlementPriceD18,
  60 |     |             epoch.params
  61 |     |         );
  62 |     |     }
  63 |     | 
  64 | *   |     function getLatestEpoch()
  65 |     |         external
  66 |     |         view
  67 |     |         override
  68 |     |         returns (
  69 | *   |             uint256 epochId,
  70 | *   |             uint256 startTime,
  71 | *   |             uint256 endTime,
  72 | *   |             address pool,
  73 | *   |             address ethToken,
  74 | *   |             address gasToken,
  75 | *   |             uint256 minPriceD18,
  76 | *   |             uint256 maxPriceD18,
  77 | *   |             bool settled,
  78 | *   |             uint256 settlementPriceD18,
  79 | *   |             IFoilStructs.EpochParams memory params
  80 |     |         )
  81 |     |     {
  82 | *   |         epochId = Market.load().lastEpochId;
  83 |     | 
  84 | *   |         if (epochId == 0) {
  85 | *   |             revert Errors.NoEpochsCreated();
  86 |     |         }
  87 |     |         Epoch.Data storage epoch = Epoch.load(epochId);
  88 |     | 
  89 |     |         return (
  90 |     |             epochId,
  91 |     |             epoch.startTime,
  92 |     |             epoch.endTime,
  93 |     |             address(epoch.pool),
  94 |     |             address(epoch.ethToken),
  95 |     |             address(epoch.gasToken),
  96 |     |             epoch.minPriceD18,
  97 |     |             epoch.maxPriceD18,
  98 |     |             epoch.settled,
  99 |     |             epoch.settlementPriceD18,
 100 |     |             epoch.params
 101 |     |         );
 102 |     |     }
 103 |     | 
 104 |     |     function getPosition(
 105 |     |         uint256 positionId
 106 |     |     ) external pure override returns (Position.Data memory) {
 107 |     |         return Position.load(positionId);
 108 |     |     }
 109 |     | 
 110 |     |     function getPositionSize(
 111 |     |         uint256 positionId
 112 |     |     ) external view override returns (int256) {
 113 |     |         Position.Data storage position = Position.load(positionId);
 114 |     |         return position.positionSize();
 115 |     |     }
 116 |     | }
 117 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/storage/Debt.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | 
  3 |     | pragma solidity >=0.8.2 <0.9.0;
  4 |     | 
  5 |     | library Debt {
  6 |     |     struct Data {
  7 |     |         uint256 tokenAmount0;
  8 |     |         uint256 tokenAmount1;
  9 |     |         uint128 liquidity;
 10 |     |     }
 11 |     | }
 12 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/storage/ERC721EnumerableStorage.sol
   1 |     | //SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.11 <0.9.0;
   3 |     | 
   4 |     | import "./ERC721Storage.sol";
   5 |     | import "./Errors.sol";
   6 |     | 
   7 |     | library ERC721EnumerableStorage {
   8 |     |     using ERC721Storage for ERC721Storage.Data;
   9 |     | 
  10 |     |     bytes32 private constant _SLOT_ERC721_ENUMERABLE_STORAGE =
  11 |     |         keccak256(abi.encode("io.synthetix.core-contracts.ERC721Enumerable"));
  12 |     | 
  13 |     |     struct Data {
  14 |     |         mapping(uint256 => uint256) ownedTokensIndex;
  15 |     |         mapping(uint256 => uint256) allTokensIndex;
  16 |     |         mapping(address => mapping(uint256 => uint256)) ownedTokens;
  17 |     |         uint256[] allTokens;
  18 |     |     }
  19 |     | 
  20 |     |     function load() internal pure returns (Data storage store) {
  21 |     |         bytes32 s = _SLOT_ERC721_ENUMERABLE_STORAGE;
  22 |     |         assembly {
  23 |     |             store.slot := s
  24 |     |         }
  25 |     |     }
  26 |     | 
  27 |     |     function totalSupply() internal view returns (uint256) {
  28 |     |         return load().allTokens.length;
  29 |     |     }
  30 |     | 
  31 |     |     function tokenOfOwnerByIndex(
  32 |     |         address owner,
  33 |     |         uint256 index
  34 |     |     ) public view returns (uint256) {
  35 |     |         ERC721Storage.Data storage erc721Storage = ERC721Storage.load();
  36 |     | 
  37 |     |         if (erc721Storage.balanceOf[owner] <= index) {
  38 |     |             revert Errors.IndexOverrun(index, erc721Storage.balanceOf[owner]);
  39 |     |         }
  40 |     |         return load().ownedTokens[owner][index];
  41 |     |     }
  42 |     | 
  43 |     |     /**
  44 |     |      * @dev Returns the total amount of tokens stored by the contract.
  45 |     |      */
  46 |     |     function tokenByIndex(uint256 index) public view returns (uint256) {
  47 |     |         if (index > totalSupply()) {
  48 |     |             revert Errors.IndexOverrun(index, totalSupply());
  49 |     |         }
  50 |     |         return load().allTokens[index];
  51 |     |     }
  52 |     | 
  53 |     |     function _addTokenToOwnerEnumeration(address to, uint256 tokenId) internal {
  54 |     |         uint256 length = ERC721Storage.load().balanceOf[to];
  55 |     |         Data storage self = load();
  56 |     |         self.ownedTokens[to][length] = tokenId;
  57 |     |         self.ownedTokensIndex[tokenId] = length;
  58 |     |     }
  59 |     | 
  60 |     |     /**
  61 |     |      * @dev Private function to add a token to this extension's token tracking data structures.
  62 |     |      * @param tokenId uint256 ID of the token to be added to the tokens list
  63 |     |      */
  64 |     |     function _addTokenToAllTokensEnumeration(uint256 tokenId) internal {
  65 |     |         Data storage self = load();
  66 |     |         self.allTokensIndex[tokenId] = self.allTokens.length;
  67 |     |         self.allTokens.push(tokenId);
  68 |     |     }
  69 |     | 
  70 |     |     /**
  71 |     |      * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
  72 |     |      * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
  73 |     |      * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
  74 |     |      * This has O(1) time complexity, but alters the order of the _ownedTokens array.
  75 |     |      * @param from address representing the previous owner of the given token ID
  76 |     |      * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
  77 |     |      */
  78 |     |     function _removeTokenFromOwnerEnumeration(
  79 |     |         address from,
  80 |     |         uint256 tokenId
  81 |     |     ) internal {
  82 |     |         // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
  83 |     |         // then delete the last slot (swap and pop).
  84 |     |         Data storage self = load();
  85 |     | 
  86 |     |         uint256 lastTokenIndex = ERC721Storage.load().balanceOf[from] - 1;
  87 |     |         uint256 tokenIndex = self.ownedTokensIndex[tokenId];
  88 |     | 
  89 |     |         // When the token to delete is the last token, the swap operation is unnecessary
  90 |     |         if (tokenIndex != lastTokenIndex) {
  91 |     |             uint256 lastTokenId = self.ownedTokens[from][lastTokenIndex];
  92 |     | 
  93 |     |             self.ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
  94 |     |             self.ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
  95 |     |         }
  96 |     | 
  97 |     |         // This also deletes the contents at the last position of the array
  98 |     |         delete self.ownedTokensIndex[tokenId];
  99 |     |         delete self.ownedTokens[from][lastTokenIndex];
 100 |     |     }
 101 |     | 
 102 |     |     /**
 103 |     |      * @dev Private function to remove a token from this extension's token tracking data structures.
 104 |     |      * This has O(1) time complexity, but alters the order of the _allTokens array.
 105 |     |      * @param tokenId uint256 ID of the token to be removed from the tokens list
 106 |     |      */
 107 |     |     function _removeTokenFromAllTokensEnumeration(uint256 tokenId) internal {
 108 |     |         Data storage self = load();
 109 |     | 
 110 |     |         // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
 111 |     |         // then delete the last slot (swap and pop).
 112 |     | 
 113 |     |         uint256 lastTokenIndex = self.allTokens.length - 1;
 114 |     |         uint256 tokenIndex = self.allTokensIndex[tokenId];
 115 |     | 
 116 |     |         // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
 117 |     |         // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
 118 |     |         // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
 119 |     |         uint256 lastTokenId = self.allTokens[lastTokenIndex];
 120 |     | 
 121 |     |         self.allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
 122 |     |         self.allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
 123 |     | 
 124 |     |         // This also deletes the contents at the last position of the array
 125 |     |         delete self.allTokensIndex[tokenId];
 126 |     |         self.allTokens.pop();
 127 |     |     }
 128 |     | }
 129 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/storage/ERC721Storage.sol
   1 |     | //SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.11 <0.9.0;
   3 |     | import "@synthetixio/core-contracts/contracts/utils/AddressUtil.sol";
   4 |     | import "@synthetixio/core-contracts/contracts/utils/StringUtil.sol";
   5 |     | import "@synthetixio/core-contracts/contracts/utils/ERC2771Context.sol";
   6 |     | import "@synthetixio/core-contracts/contracts/errors/AddressError.sol";
   7 |     | import "@synthetixio/core-contracts/contracts/errors/AccessError.sol";
   8 |     | import "@synthetixio/core-contracts/contracts/errors/InitError.sol";
   9 |     | import "@synthetixio/core-contracts/contracts/errors/ParameterError.sol";
  10 |     | import "../interfaces/IERC721.sol";
  11 |     | import "@synthetixio/core-contracts/contracts/interfaces/IERC721Receiver.sol";
  12 |     | import "./ERC721EnumerableStorage.sol";
  13 |     | 
  14 |     | library ERC721Storage {
  15 |     |     bytes32 private constant _SLOT_ERC721_STORAGE =
  16 |     |         keccak256(abi.encode("io.synthetix.core-contracts.ERC721"));
  17 |     | 
  18 |     |     struct Data {
  19 |     |         string name;
  20 |     |         string symbol;
  21 |     |         string baseTokenURI;
  22 |     |         mapping(uint256 => address) ownerOf;
  23 |     |         mapping(address => uint256) balanceOf;
  24 |     |         mapping(uint256 => address) tokenApprovals;
  25 |     |         mapping(address => mapping(address => bool)) operatorApprovals;
  26 |     |     }
  27 |     | 
  28 |     |     function load() internal pure returns (Data storage store) {
  29 |     |         bytes32 s = _SLOT_ERC721_STORAGE;
  30 |     |         assembly {
  31 |     |             store.slot := s
  32 |     |         }
  33 |     |     }
  34 |     | 
  35 |     |     function _exists(
  36 |     |         Data storage self,
  37 |     |         uint256 tokenId
  38 |     |     ) internal view returns (bool) {
  39 |     |         return self.ownerOf[tokenId] != address(0);
  40 |     |     }
  41 |     | 
  42 |     |     function _exists(uint256 tokenId) internal view returns (bool) {
  43 |     |         return load().ownerOf[tokenId] != address(0);
  44 |     |     }
  45 |     | 
  46 |     |     function _ownerOf(uint256 tokenId) internal view returns (address) {
  47 |     |         return load().ownerOf[tokenId];
  48 |     |     }
  49 |     | 
  50 |     |     function _getApproved(
  51 |     |         uint256 tokenId
  52 |     |     ) internal view returns (address operator) {
  53 |     |         return load().tokenApprovals[tokenId];
  54 |     |     }
  55 |     | 
  56 |     |     function _getApproved(
  57 |     |         Data storage self,
  58 |     |         uint256 tokenId
  59 |     |     ) internal view returns (address operator) {
  60 |     |         return self.tokenApprovals[tokenId];
  61 |     |     }
  62 |     | 
  63 |     |     function _isApprovedForAll(
  64 |     |         address holder,
  65 |     |         address operator
  66 |     |     ) internal view returns (bool) {
  67 |     |         return load().operatorApprovals[holder][operator];
  68 |     |     }
  69 |     | 
  70 |     |     function _isApprovedForAll(
  71 |     |         Data storage self,
  72 |     |         address holder,
  73 |     |         address operator
  74 |     |     ) internal view returns (bool) {
  75 |     |         return self.operatorApprovals[holder][operator];
  76 |     |     }
  77 |     | 
  78 |     |     function _isApprovedOrOwner(
  79 |     |         address spender,
  80 |     |         uint256 tokenId
  81 |     |     ) internal view returns (bool) {
  82 |     |         address holder = _ownerOf(tokenId);
  83 |     | 
  84 |     |         // Not checking tokenId existence since it is checked in ownerOf() and getApproved()
  85 |     | 
  86 |     |         return (spender == holder ||
  87 |     |             _getApproved(tokenId) == spender ||
  88 |     |             _isApprovedForAll(holder, spender));
  89 |     |     }
  90 |     | 
  91 |     |     function _mint(address to, uint256 tokenId) internal {
  92 |     |         Data storage store = load();
  93 |     |         if (to == address(0)) {
  94 |     |             revert AddressError.ZeroAddress();
  95 |     |         }
  96 |     | 
  97 |     |         if (tokenId == 0) {
  98 |     |             revert ParameterError.InvalidParameter("tokenId", "cannot be zero");
  99 |     |         }
 100 |     | 
 101 |     |         if (_exists(tokenId)) {
 102 |     |             revert IERC721Foil.TokenAlreadyMinted(tokenId);
 103 |     |         }
 104 |     | 
 105 |     |         _beforeTransfer(address(0), to, tokenId);
 106 |     | 
 107 |     |         store.balanceOf[to] += 1;
 108 |     |         store.ownerOf[tokenId] = to;
 109 |     | 
 110 |     |         _postTransfer(address(0), to, tokenId);
 111 |     | 
 112 |     |         emit IERC721Foil.Transfer(address(0), to, tokenId);
 113 |     |     }
 114 |     | 
 115 |     |     function _burn(uint256 tokenId) internal {
 116 |     |         Data storage store = load();
 117 |     |         address holder = store.ownerOf[tokenId];
 118 |     | 
 119 |     |         _approve(address(0), tokenId);
 120 |     | 
 121 |     |         _beforeTransfer(holder, address(0), tokenId);
 122 |     | 
 123 |     |         store.balanceOf[holder] -= 1;
 124 |     |         delete store.ownerOf[tokenId];
 125 |     | 
 126 |     |         _postTransfer(holder, address(0), tokenId);
 127 |     | 
 128 |     |         emit IERC721Foil.Transfer(holder, address(0), tokenId);
 129 |     |     }
 130 |     | 
 131 |     |     function _transfer(address from, address to, uint256 tokenId) internal {
 132 |     |         Data storage store = load();
 133 |     | 
 134 |     |         if (_ownerOf(tokenId) != from) {
 135 |     |             revert AccessError.Unauthorized(from);
 136 |     |         }
 137 |     | 
 138 |     |         if (to == address(0)) {
 139 |     |             revert AddressError.ZeroAddress();
 140 |     |         }
 141 |     | 
 142 |     |         _beforeTransfer(from, to, tokenId);
 143 |     | 
 144 |     |         // Clear approvals from the previous holder
 145 |     |         _approve(address(0), tokenId);
 146 |     | 
 147 |     |         store.balanceOf[from] -= 1;
 148 |     |         store.balanceOf[to] += 1;
 149 |     |         store.ownerOf[tokenId] = to;
 150 |     | 
 151 |     |         _postTransfer(from, to, tokenId);
 152 |     | 
 153 |     |         emit IERC721Foil.Transfer(from, to, tokenId);
 154 |     |     }
 155 |     | 
 156 |     |     function _approve(address to, uint256 tokenId) internal {
 157 |     |         load().tokenApprovals[tokenId] = to;
 158 |     |         emit IERC721Foil.Approval(_ownerOf(tokenId), to, tokenId);
 159 |     |     }
 160 |     | 
 161 |     |     function _checkOnERC721Received(
 162 |     |         address from,
 163 |     |         address to,
 164 |     |         uint256 tokenId,
 165 |     |         bytes memory data
 166 |     |     ) internal returns (bool) {
 167 |     |         if (AddressUtil.isContract(to)) {
 168 |     |             try
 169 |     |                 IERC721Receiver(to).onERC721Received(
 170 |     |                     ERC2771Context._msgSender(),
 171 |     |                     from,
 172 |     |                     tokenId,
 173 |     |                     data
 174 |     |                 )
 175 |     |             returns (bytes4 retval) {
 176 |     |                 return retval == IERC721Receiver.onERC721Received.selector;
 177 |     |             } catch {
 178 |     |                 return false;
 179 |     |             }
 180 |     |         } else {
 181 |     |             return true;
 182 |     |         }
 183 |     |     }
 184 |     | 
 185 |     |     function _beforeTransfer(
 186 |     |         address from,
 187 |     |         address to,
 188 |     |         uint256 tokenId
 189 |     |     ) internal {
 190 |     |         if (from == address(0)) {
 191 |     |             ERC721EnumerableStorage._addTokenToAllTokensEnumeration(tokenId);
 192 |     |         } else if (from != to) {
 193 |     |             ERC721EnumerableStorage._removeTokenFromOwnerEnumeration(
 194 |     |                 from,
 195 |     |                 tokenId
 196 |     |             );
 197 |     |         }
 198 |     |         if (to == address(0)) {
 199 |     |             ERC721EnumerableStorage._removeTokenFromAllTokensEnumeration(
 200 |     |                 tokenId
 201 |     |             );
 202 |     |         } else if (to != from) {
 203 |     |             ERC721EnumerableStorage._addTokenToOwnerEnumeration(to, tokenId);
 204 |     |         }
 205 |     |     }
 206 |     | 
 207 |     |     function _postTransfer(
 208 |     |         address from,
 209 |     |         address to,
 210 |     |         uint256 tokenId // solhint-disable-next-line no-empty-blocks
 211 |     |     ) internal {}
 212 |     | 
 213 |     |     function _initialize(
 214 |     |         string memory tokenName,
 215 |     |         string memory tokenSymbol,
 216 |     |         string memory baseTokenURI
 217 |     |     ) internal {
 218 |     |         Data storage store = load();
 219 |     |         if (
 220 |     |             bytes(store.name).length > 0 ||
 221 |     |             bytes(store.symbol).length > 0 ||
 222 |     |             bytes(store.baseTokenURI).length > 0
 223 |     |         ) {
 224 |     |             revert InitError.AlreadyInitialized();
 225 |     |         }
 226 |     | 
 227 |     |         if (bytes(tokenName).length == 0 || bytes(tokenSymbol).length == 0) {
 228 |     |             revert ParameterError.InvalidParameter(
 229 |     |                 "name/symbol",
 230 |     |                 "must not be empty"
 231 |     |             );
 232 |     |         }
 233 |     | 
 234 |     |         store.name = tokenName;
 235 |     |         store.symbol = tokenSymbol;
 236 |     |         store.baseTokenURI = baseTokenURI;
 237 |     |     }
 238 |     | }
 239 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/storage/Epoch.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.2 <0.9.0;
   3 |     | 
   4 |     | import "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol";
   5 |     | import "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol";
   6 |     | import "@synthetixio/core-contracts/contracts/utils/DecimalMath.sol";
   7 |     | 
   8 |     | import "../external/VirtualToken.sol";
   9 |     | import "../libraries/DecimalPrice.sol";
  10 |     | import "../libraries/Quote.sol";
  11 |     | import "../external/univ3/LiquidityAmounts.sol";
  12 |     | import {INonfungiblePositionManager} from "../interfaces/external/INonfungiblePositionManager.sol";
  13 |     | import "./Debt.sol";
  14 |     | import "./Errors.sol";
  15 |     | import "./Market.sol";
  16 |     | import {SafeCastI256, SafeCastU256} from "@synthetixio/core-contracts/contracts/utils/SafeCast.sol";
  17 |     | 
  18 |     | // import "forge-std/console2.sol";
  19 |     | 
  20 |     | library Epoch {
  21 |     |     using DecimalMath for uint256;
  22 |     |     using SafeCastI256 for int256;
  23 |     |     using SafeCastU256 for uint256;
  24 |     | 
  25 |     |     event Reason(string reason); //@audit added by fuzzer
  26 |     |     event LogUint(string msg, uint value); //@audit added by fuzzer
  27 |     | 
  28 |     |     struct Settlement {
  29 |     |         uint256 settlementPriceD18;
  30 |     |         uint256 submissionTime;
  31 |     |         bool disputed;
  32 |     |         address disputer;
  33 |     |     }
  34 |     | 
  35 |     |     struct Data {
  36 |     |         uint256 startTime;
  37 |     |         uint256 endTime;
  38 |     |         VirtualToken ethToken;
  39 |     |         VirtualToken gasToken;
  40 |     |         IUniswapV3Pool pool;
  41 |     |         bool settled;
  42 |     |         uint256 settlementPriceD18;
  43 |     |         mapping(uint256 => Debt.Data) lpDebtPositions;
  44 |     |         bytes32 assertionId;
  45 |     |         Settlement settlement;
  46 |     |         IFoilStructs.EpochParams params; // Storing epochParams as a struct within Epoch.Data
  47 |     |         uint160 sqrtPriceMinX96;
  48 |     |         uint160 sqrtPriceMaxX96;
  49 |     |         uint256 minPriceD18;
  50 |     |         uint256 maxPriceD18;
  51 |     |         uint256 feeRateD18;
  52 |     |         uint256 id;
  53 |     |     }
  54 |     | 
  55 |     |     function load(uint256 id) internal pure returns (Data storage epoch) {
  56 | *   |         bytes32 s = keccak256(abi.encode("foil.gas.epoch", id));
  57 |     | 
  58 |     |         assembly {
  59 |     |             epoch.slot := s
  60 |     |         }
  61 |     |     }
  62 |     | 
  63 | *   |     function createValid(
  64 |     |         uint256 id,
  65 |     |         uint256 startTime,
  66 |     |         uint256 endTime,
  67 |     |         uint160 startingSqrtPriceX96,
  68 |     |         uint256 salt
  69 | *   |     ) internal returns (Data storage epoch) {
  70 | *   |         Market.Data storage market = Market.loadValid();
  71 | *   |         IFoilStructs.EpochParams storage epochParams = market.epochParams;
  72 |     | 
  73 | *   |         epoch = load(id);
  74 |     | 
  75 |     |         // can only be called once
  76 | *   |         if (epoch.startTime != 0) {
  77 |     |             revert Errors.EpochAlreadyStarted();
  78 |     |         }
  79 |     | 
  80 | *   |         if (startTime < block.timestamp) {
  81 |     |             revert Errors.StartTimeTooEarly(startTime, block.timestamp);
  82 |     |         }
  83 |     | 
  84 | *   |         if (endTime <= startTime) {
  85 |     |             revert Errors.EndTimeTooEarly(startTime, endTime);
  86 |     |         }
  87 |     | 
  88 | *   |         if (
  89 | *   |             address(epoch.ethToken) != address(0) ||
  90 | *   |             address(epoch.gasToken) != address(0)
  91 |     |         ) {
  92 |     |             revert Errors.TokensAlreadyCreated();
  93 |     |         }
  94 |     | 
  95 |     |         // set id on first creation
  96 | *   |         if (epoch.id == 0) epoch.id = id;
  97 |     | 
  98 | *   |         epoch.startTime = startTime;
  99 | *   |         epoch.endTime = endTime;
 100 |     | 
 101 |     |         // copy over market parameters into epoch (clone them to prevent any changes to market params)
 102 | *   |         epoch.params.baseAssetMinPriceTick = epochParams.baseAssetMinPriceTick;
 103 | *   |         epoch.params.baseAssetMaxPriceTick = epochParams.baseAssetMaxPriceTick;
 104 | *   |         epoch.params.feeRate = epochParams.feeRate;
 105 | *   |         epoch.params.assertionLiveness = epochParams.assertionLiveness;
 106 | *   |         epoch.params.bondCurrency = epochParams.bondCurrency;
 107 | *   |         epoch.params.bondAmount = epochParams.bondAmount;
 108 | *   |         epoch.params.priceUnit = epochParams.priceUnit;
 109 | *   |         epoch.params.uniswapPositionManager = epochParams
 110 |     |             .uniswapPositionManager;
 111 | *   |         epoch.params.uniswapSwapRouter = epochParams.uniswapSwapRouter;
 112 | *   |         epoch.params.uniswapQuoter = epochParams.uniswapQuoter;
 113 | *   |         epoch.params.optimisticOracleV3 = epochParams.optimisticOracleV3;
 114 |     | 
 115 | *   |         epoch.feeRateD18 = uint256(epochParams.feeRate) * 1e12;
 116 |     | 
 117 | *   |         VirtualToken tokenA = new VirtualToken{salt: bytes32(salt)}(
 118 | *   |             address(this),
 119 |     |             "Token A",
 120 |     |             "tknA"
 121 |     |         );
 122 |     | 
 123 | *   |         VirtualToken tokenB = new VirtualToken{salt: bytes32(salt + 1)}(
 124 | *   |             address(this),
 125 |     |             "Token B",
 126 |     |             "tknB"
 127 |     |         );
 128 |     | 
 129 | *   |         if (address(tokenA) < address(tokenB)) {
 130 |     |             epoch.gasToken = tokenA;
 131 |     |             epoch.ethToken = tokenB;
 132 |     |         } else {
 133 | *   |             epoch.gasToken = tokenB;
 134 | *   |             epoch.ethToken = tokenA;
 135 |     |         }
 136 |     | 
 137 |     |         // create & initialize pool
 138 | *   |         epoch.pool = IUniswapV3Pool(
 139 | *   |             IUniswapV3Factory(
 140 | *   |                 INonfungiblePositionManager(
 141 | *   |                     market.epochParams.uniswapPositionManager
 142 |     |                 ).factory()
 143 |     |             ).createPool(
 144 | *   |                     address(epoch.gasToken),
 145 | *   |                     address(epoch.ethToken),
 146 | *   |                     epochParams.feeRate
 147 |     |                 )
 148 |     |         );
 149 | *   |         IUniswapV3Pool(epoch.pool).initialize(startingSqrtPriceX96); // starting price
 150 |     | 
 151 | *   |         int24 spacing = IUniswapV3Pool(epoch.pool).tickSpacing();
 152 |     |         // store min/max prices
 153 | *   |         epoch.sqrtPriceMinX96 = TickMath.getSqrtRatioAtTick(
 154 | *   |             epoch.params.baseAssetMinPriceTick
 155 |     |         );
 156 |     |         // use next tick for max price
 157 | *   |         epoch.sqrtPriceMaxX96 = TickMath.getSqrtRatioAtTick(
 158 | *   |             epoch.params.baseAssetMaxPriceTick + spacing
 159 |     |         );
 160 |     |         epoch.maxPriceD18 = DecimalPrice.sqrtRatioX96ToPrice(
 161 |     |             epoch.sqrtPriceMaxX96
 162 |     |         );
 163 |     |         epoch.minPriceD18 = DecimalPrice.sqrtRatioX96ToPrice(
 164 |     |             epoch.sqrtPriceMinX96
 165 |     |         );
 166 |     | 
 167 |     |         // mint max; track tokens loaned by in FAccount
 168 |     |         epoch.ethToken.mint(address(this), type(uint256).max);
 169 |     |         epoch.gasToken.mint(address(this), type(uint256).max);
 170 |     | 
 171 |     |         // approve to uniswapPositionManager
 172 |     |         epoch.ethToken.approve(
 173 |     |             address(market.epochParams.uniswapPositionManager),
 174 |     |             type(uint256).max
 175 |     |         );
 176 |     |         epoch.gasToken.approve(
 177 |     |             address(market.epochParams.uniswapPositionManager),
 178 |     |             type(uint256).max
 179 |     |         );
 180 |     | 
 181 |     |         // approve to uniswapSwapRouter
 182 |     |         epoch.ethToken.approve(
 183 |     |             address(market.epochParams.uniswapSwapRouter),
 184 |     |             type(uint256).max
 185 |     |         );
 186 |     |         epoch.gasToken.approve(
 187 |     |             address(market.epochParams.uniswapSwapRouter),
 188 |     |             type(uint256).max
 189 |     |         );
 190 |     |     }
 191 |     | 
 192 |     |     function loadValid(uint256 id) internal view returns (Data storage epoch) {
 193 |     |         epoch = load(id);
 194 |     | 
 195 |     |         if (epoch.endTime == 0) {
 196 |     |             revert Errors.InvalidEpoch();
 197 |     |         }
 198 |     |     }
 199 |     | 
 200 |     |     function validateLp(
 201 |     |         Data storage self,
 202 |     |         int24 lowerTick,
 203 |     |         int24 upperTick
 204 |     |     ) internal view {
 205 |     |         validateEpochNotExpired(self);
 206 |     | 
 207 |     |         int24 minTick = self.params.baseAssetMinPriceTick;
 208 |     |         int24 maxTick = self.params.baseAssetMaxPriceTick;
 209 |     |         if (lowerTick < minTick) revert Errors.InvalidRange(lowerTick, minTick);
 210 |     |         if (upperTick > maxTick) revert Errors.InvalidRange(upperTick, maxTick);
 211 |     |     }
 212 |     | 
 213 |     |     function validateEpochNotExpired(Data storage self) internal view {
 214 |     |         if (self.settled || block.timestamp >= self.endTime) {
 215 |     |             revert Errors.ExpiredEpoch();
 216 |     |         }
 217 |     |     }
 218 |     | 
 219 |     |     function validateSettlementSanity(Data storage self) internal view {
 220 |     |         if (block.timestamp >= self.endTime && !self.settled) {
 221 |     |             revert Errors.EpochNotSettled(self.endTime);
 222 |     |         }
 223 |     |     }
 224 |     | 
 225 |     |     function validateNotSettled(Data storage self) internal view {
 226 |     |         if (block.timestamp >= self.endTime && !self.settled) {
 227 |     |             revert Errors.EpochNotSettled(self.endTime);
 228 |     |         }
 229 |     | 
 230 |     |         if (self.settled) {
 231 |     |             revert Errors.EpochSettled();
 232 |     |         }
 233 |     |     }
 234 |     | 
 235 |     |     /**
 236 |     |      * @notice Gets the reuired collateral amount to cover the loan amounts
 237 |     |      *
 238 |     |      * @param self Epoch storage
 239 |     |      * @param ownedGasAmount Amount of gas owned by the trader
 240 |     |      * @param ownedEthAmount Amount of eth owned by the trader
 241 |     |      * @param loanGasAmount Amount of gas loaned by the trader
 242 |     |      * @param loanEthAmount Amount of eth loaned by the trader
 243 |     |      */
 244 |     |     function getCollateralRequirementsForTrade(
 245 |     |         Data storage self,
 246 |     |         uint256 ownedGasAmount,
 247 |     |         uint256 ownedEthAmount,
 248 |     |         uint256 loanGasAmount,
 249 |     |         uint256 loanEthAmount
 250 |     |     ) internal view returns (uint256 requiredCollateral) {
 251 |     |         uint256 requiredCollateralAtMinPrice = getCollateralRequiredAtPrice(
 252 |     |             self,
 253 |     |             ownedGasAmount,
 254 |     |             ownedEthAmount,
 255 |     |             loanGasAmount,
 256 |     |             loanEthAmount,
 257 |     |             self.minPriceD18
 258 |     |         );
 259 |     | 
 260 |     |         uint256 requiredCollateralAtMaxPrice = getCollateralRequiredAtPrice(
 261 |     |             self,
 262 |     |             ownedGasAmount,
 263 |     |             ownedEthAmount,
 264 |     |             loanGasAmount,
 265 |     |             loanEthAmount,
 266 |     |             self.maxPriceD18
 267 |     |         );
 268 |     | 
 269 |     |         requiredCollateral = requiredCollateralAtMinPrice >
 270 |     |             requiredCollateralAtMaxPrice
 271 |     |             ? requiredCollateralAtMinPrice
 272 |     |             : requiredCollateralAtMaxPrice;
 273 |     |     }
 274 |     | 
 275 |     |     /**
 276 |     |      * @notice Validates that the provided collateral amount is sufficient to cover the loan amounts
 277 |     |      * @notice will revert if not enough collateral is provided
 278 |     |      *
 279 |     |      * @param self Epoch storage
 280 |     |      * @param collateralAmount Amount of collateral provided
 281 |     |      * @param ownedGasAmount Amount of gas owned by the trader
 282 |     |      * @param ownedEthAmount Amount of eth owned by the trader
 283 |     |      * @param loanGasAmount Amount of gas loaned by the trader
 284 |     |      * @param loanEthAmount Amount of eth loaned by the trader
 285 |     |      */
 286 |     |     function validateCollateralRequirementsForTrade(
 287 |     |         Data storage self,
 288 |     |         uint256 collateralAmount,
 289 |     |         uint256 ownedGasAmount,
 290 |     |         uint256 ownedEthAmount,
 291 |     |         uint256 loanGasAmount,
 292 |     |         uint256 loanEthAmount // ) internal view {
 293 |     |     ) internal view {
 294 |     |         //@audit changed by fuzzer
 295 |     |         validateOwnedAndDebtAtPrice(
 296 |     |             self,
 297 |     |             collateralAmount,
 298 |     |             ownedGasAmount,
 299 |     |             ownedEthAmount,
 300 |     |             loanGasAmount,
 301 |     |             loanEthAmount,
 302 |     |             self.minPriceD18
 303 |     |         );
 304 |     | 
 305 |     |         validateOwnedAndDebtAtPrice(
 306 |     |             self,
 307 |     |             collateralAmount,
 308 |     |             ownedGasAmount,
 309 |     |             ownedEthAmount,
 310 |     |             loanGasAmount,
 311 |     |             loanEthAmount,
 312 |     |             self.maxPriceD18
 313 |     |         );
 314 |     |     }
 315 |     | 
 316 |     |     function getCollateralRequiredAtPrice(
 317 |     |         Data storage self,
 318 |     |         uint256 ownedGasAmount,
 319 |     |         uint256 ownedEthAmount,
 320 |     |         uint256 loanGasAmount,
 321 |     |         uint256 loanEthAmount,
 322 |     |         uint256 price
 323 |     |     ) internal view returns (uint256 requiredCollateral) {
 324 |     |         uint256 gasAmount;
 325 |     |         uint256 ethAmount;
 326 |     |         uint256 gasDebt;
 327 |     |         uint256 ethDebt;
 328 |     | 
 329 |     |         // Consolidate to only trade what is needed
 330 |     |         if (ownedGasAmount > loanGasAmount) {
 331 |     |             gasAmount = ownedGasAmount - loanGasAmount;
 332 |     |             gasDebt = 0;
 333 |     |         } else {
 334 |     |             gasAmount = 0;
 335 |     |             gasDebt = loanGasAmount - ownedGasAmount;
 336 |     |         }
 337 |     | 
 338 |     |         if (ownedEthAmount > loanEthAmount) {
 339 |     |             ethAmount = ownedEthAmount - loanEthAmount;
 340 |     |             ethDebt = 0;
 341 |     |         } else {
 342 |     |             ethAmount = 0;
 343 |     |             ethDebt = loanEthAmount - ownedEthAmount;
 344 |     |         }
 345 |     | 
 346 |     |         // Get total debt
 347 |     |         uint256 adjustedPrice = self.settled
 348 |     |             ? price.mulDecimal((DecimalMath.UNIT + self.feeRateD18))
 349 |     |             : price;
 350 |     |         uint256 totalDebtValue = Quote.quoteGasToEthWithPrice(
 351 |     |             gasDebt,
 352 |     |             adjustedPrice
 353 |     |         ) + ethDebt;
 354 |     | 
 355 |     |         // Get total credit
 356 |     |         adjustedPrice = self.settled
 357 |     |             ? price.mulDecimal((DecimalMath.UNIT - self.feeRateD18))
 358 |     |             : price;
 359 |     |         uint256 totalOwnedValue = Quote.quoteGasToEthWithPrice(
 360 |     |             gasAmount,
 361 |     |             adjustedPrice
 362 |     |         ) + ethAmount;
 363 |     | 
 364 |     |         requiredCollateral = totalDebtValue > totalOwnedValue
 365 |     |             ? totalDebtValue - totalOwnedValue
 366 |     |             : 0;
 367 |     | 
 368 |     |         // Adding 2 wei to prevent round up errors. Insignificant amount for normal operations but to prevent potential issues
 369 |     |         requiredCollateral += 2;
 370 |     |     }
 371 |     | 
 372 |     |     function validateOwnedAndDebtAtPrice(
 373 |     |         Data storage self,
 374 |     |         uint256 collateralAmount,
 375 |     |         uint256 ownedGasAmount,
 376 |     |         uint256 ownedEthAmount,
 377 |     |         uint256 loanGasAmount,
 378 |     |         uint256 loanEthAmount,
 379 |     |         uint256 price
 380 |     |     ) internal view {
 381 |     |         uint256 requiredCollateral = getCollateralRequiredAtPrice(
 382 |     |             self,
 383 |     |             ownedGasAmount,
 384 |     |             ownedEthAmount,
 385 |     |             loanGasAmount,
 386 |     |             loanEthAmount,
 387 |     |             price
 388 |     |         );
 389 |     | 
 390 |     |         if (requiredCollateral > collateralAmount) {
 391 |     |             revert Errors.InsufficientCollateral(
 392 |     |                 requiredCollateral,
 393 |     |                 collateralAmount
 394 |     |             );
 395 |     |         }
 396 |     |     }
 397 |     | 
 398 |     |     function getCurrentPoolPrice(
 399 |     |         Data storage self
 400 |     |     ) internal view returns (uint256 decimalPrice) {
 401 |     |         (uint160 sqrtPriceX96, , , , , , ) = self.pool.slot0();
 402 |     | 
 403 |     |         return DecimalPrice.sqrtRatioX96ToPrice(sqrtPriceX96);
 404 |     |     }
 405 |     | 
 406 |     |     function validateCurrentPoolPriceInRange(Data storage self) internal view {
 407 |     |         (uint160 sqrtPriceX96, , , , , , ) = self.pool.slot0();
 408 |     | 
 409 |     |         if (
 410 |     |             sqrtPriceX96 < self.sqrtPriceMinX96 ||
 411 |     |             sqrtPriceX96 > self.sqrtPriceMaxX96
 412 |     |         ) {
 413 |     |             revert Errors.PoolPriceOutOfRange(
 414 |     |                 sqrtPriceX96,
 415 |     |                 self.sqrtPriceMinX96,
 416 |     |                 self.sqrtPriceMaxX96
 417 |     |             );
 418 |     |         }
 419 |     |     }
 420 |     | 
 421 |     |     function requiredCollateralForLiquidity(
 422 |     |         Data storage self,
 423 |     |         uint128 liquidity,
 424 |     |         uint256 loanAmount0,
 425 |     |         uint256 loanAmount1,
 426 |     |         uint256 tokensOwed0,
 427 |     |         uint256 tokensOwed1,
 428 |     |         uint160 sqrtPriceAX96,
 429 |     |         uint160 sqrtPriceBX96
 430 |     |     )
 431 |     |         internal
 432 |     |         returns (
 433 |     |             // ) internal view returns (uint256 requiredCollateral) {
 434 |     |             uint256 requiredCollateral
 435 |     |         )
 436 |     |     {
 437 |     |         //@audit changed by fuzzer
 438 |     |         uint256 collateralRequirementAtMin = collateralRequirementAtMinTick(
 439 |     |             self,
 440 |     |             liquidity,
 441 |     |             sqrtPriceAX96,
 442 |     |             sqrtPriceBX96,
 443 |     |             loanAmount0,
 444 |     |             loanAmount1,
 445 |     |             tokensOwed0,
 446 |     |             tokensOwed1
 447 |     |         );
 448 |     |         uint256 collateralRequirementAtMax = collateralRequirementAtMaxTick(
 449 |     |             self,
 450 |     |             liquidity,
 451 |     |             sqrtPriceAX96,
 452 |     |             sqrtPriceBX96,
 453 |     |             loanAmount0,
 454 |     |             loanAmount1,
 455 |     |             tokensOwed0,
 456 |     |             tokensOwed1
 457 |     |         );
 458 |     |         requiredCollateral = collateralRequirementAtMin >
 459 |     |             collateralRequirementAtMax
 460 |     |             ? collateralRequirementAtMin
 461 |     |             : collateralRequirementAtMax;
 462 |     | 
 463 |     |         // Adding 2 wei to prevent round up errors. Insignificant amount for normal operations but to prevent potential issues
 464 |     |         requiredCollateral += 2;
 465 |     | 
 466 |     |         //
 467 |     |         //NOTE: ASSERTIONS INSIDE ORIGINAL CODE START
 468 |     |         //#2
 469 |     |         emit Reason(
 470 |     |             "EPOCH_01: Position with non zero loan amount for lp should always have non-zero collateral required"
 471 |     |         );
 472 |     |         if (loanAmount0 != 0 || loanAmount1 != 0) {
 473 |     |             assert(requiredCollateral != 0);
 474 |     |         }
 475 |     |         //NOTE: ASSERTIONS INSIDE ORIGINAL CODE END
 476 |     |     }
 477 |     | 
 478 |     |     function collateralRequirementAtMinTick(
 479 |     |         Data storage self,
 480 |     |         uint128 liquidity,
 481 |     |         uint160 sqrtPriceAX96,
 482 |     |         uint160 sqrtPriceBX96,
 483 |     |         uint256 loanAmount0,
 484 |     |         uint256 loanAmount1,
 485 |     |         uint256 tokensOwed0,
 486 |     |         uint256 tokensOwed1
 487 |     |     ) internal view returns (uint256) {
 488 |     |         uint256 maxAmount0 = LiquidityAmounts.getAmount0ForLiquidity(
 489 |     |             sqrtPriceAX96,
 490 |     |             sqrtPriceBX96,
 491 |     |             liquidity
 492 |     |         );
 493 |     | 
 494 |     |         uint256 liquidityAmount0ConvertedTo1 = Quote.quoteGasToEthWithPrice(
 495 |     |             maxAmount0,
 496 |     |             self.minPriceD18
 497 |     |         );
 498 |     | 
 499 |     |         uint256 creditEth = liquidityAmount0ConvertedTo1 + tokensOwed1;
 500 |     |         uint256 debitEth = loanAmount1;
 501 |     | 
 502 |     |         // Adjust debit or credit with new loan amount balance
 503 |     |         if (loanAmount0 > tokensOwed0) {
 504 |     |             uint256 net0ConvertedTo1 = Quote.quoteGasToEthWithPrice(
 505 |     |                 loanAmount0 - tokensOwed0,
 506 |     |                 self.minPriceD18
 507 |     |             );
 508 |     | 
 509 |     |             debitEth += net0ConvertedTo1;
 510 |     |         } else {
 511 |     |             uint256 net0ConvertedTo1 = Quote.quoteGasToEthWithPrice(
 512 |     |                 tokensOwed0 - loanAmount0,
 513 |     |                 self.minPriceD18
 514 |     |             );
 515 |     | 
 516 |     |             creditEth += net0ConvertedTo1;
 517 |     |         }
 518 |     | 
 519 |     |         return debitEth > creditEth ? debitEth - creditEth : 0;
 520 |     |     }
 521 |     | 
 522 |     |     function collateralRequirementAtMaxTick(
 523 |     |         Data storage self,
 524 |     |         uint128 liquidity,
 525 |     |         uint160 sqrtPriceAX96,
 526 |     |         uint160 sqrtPriceBX96,
 527 |     |         uint256 loanAmount0,
 528 |     |         uint256 loanAmount1,
 529 |     |         uint256 tokensOwed0,
 530 |     |         uint256 tokensOwed1
 531 |     |     ) internal view returns (uint256) {
 532 |     |         uint256 maxAmount1 = LiquidityAmounts.getAmount1ForLiquidity(
 533 |     |             sqrtPriceAX96,
 534 |     |             sqrtPriceBX96,
 535 |     |             liquidity
 536 |     |         );
 537 |     | 
 538 |     |         uint256 creditEth = maxAmount1 + tokensOwed1;
 539 |     |         uint256 debitEth = loanAmount1;
 540 |     | 
 541 |     |         // Adjust debit or credit with new loan amount balance
 542 |     |         if (loanAmount0 > tokensOwed0) {
 543 |     |             uint256 net0ConvertedTo1 = Quote.quoteGasToEthWithPrice(
 544 |     |                 loanAmount0 - tokensOwed0,
 545 |     |                 self.maxPriceD18
 546 |     |             );
 547 |     | 
 548 |     |             debitEth += net0ConvertedTo1;
 549 |     |         } else {
 550 |     |             uint256 net0ConvertedTo1 = Quote.quoteGasToEthWithPrice(
 551 |     |                 tokensOwed0 - loanAmount0,
 552 |     |                 self.minPriceD18 // Use min price to avoid profit masking an insolvent position at an intermediate tick
 553 |     |             );
 554 |     | 
 555 |     |             creditEth += net0ConvertedTo1;
 556 |     |         }
 557 |     | 
 558 |     |         return debitEth > creditEth ? debitEth - creditEth : 0;
 559 |     |     }
 560 |     | 
 561 |     |     function setSettlementPriceInRange(
 562 |     |         Data storage self,
 563 |     |         uint256 settlementPriceD18
 564 |     |     ) internal {
 565 |     |         if (settlementPriceD18 > self.maxPriceD18) {
 566 |     |             self.settlementPriceD18 = self.maxPriceD18;
 567 |     |         } else if (settlementPriceD18 < self.minPriceD18) {
 568 |     |             self.settlementPriceD18 = self.minPriceD18;
 569 |     |         } else {
 570 |     |             self.settlementPriceD18 = settlementPriceD18;
 571 |     |         }
 572 |     |     }
 573 |     | }
 574 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/storage/Errors.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | 
  3 |     | pragma solidity >=0.8.2 <0.9.0;
  4 |     | 
  5 |     | library Errors {
  6 |     |     error OnlyOwner();
  7 |     |     error MarketNotInitialized();
  8 |     |     error InvalidData(string message);
  9 |     |     error MarketAlreadyCreated();
 10 |     |     error PositionAlreadyCreated();
 11 |     |     error InvalidPositionId(uint256 positionId);
 12 |     |     error NoEpochsCreated();
 13 |     |     error InvalidEpoch();
 14 |     |     error InvalidMarket();
 15 |     |     error EpochNotSettled(uint256 epochId);
 16 |     |     error EpochAlreadyStarted();
 17 |     |     error EpochSettled();
 18 |     |     error ExpiredEpoch();
 19 |     |     error TokensAlreadyCreated();
 20 |     |     error InsufficientCollateral(
 21 |     |         uint256 amountRequired,
 22 |     |         uint256 collateralAvailable
 23 |     |     );
 24 |     |     error CollateralLimitReached(
 25 |     |         int256 collateralRequired,
 26 |     |         int256 maxCollateral
 27 |     |     );
 28 |     |     error IndexOverrun(uint256 requestedIndex, uint256 length);
 29 |     |     error NotAccountOwnerOrAuthorized(uint256 tokenId, address sender);
 30 |     |     error InvalidPositionKind();
 31 |     |     error InvalidRange(int24 requestedTick, int24 boundedTick);
 32 |     |     error PositionAlreadySettled(uint256 positionId);
 33 |     |     error InvalidBaseAssetMinPriceTick(int24 minPriceTick, int24 tickSpacing);
 34 |     |     error InvalidBaseAssetMaxPriceTick(int24 maxPriceTick, int24 tickSpacing);
 35 |     |     error InvalidPriceTickRange(int24 minPriceTick, int24 maxPriceTick);
 36 |     |     error InvalidTickSpacing(uint24 feeRate);
 37 |     |     error OwnableUnauthorizedAccount(address sender);
 38 |     |     error OnlyInitializer(address sender, address initializer);
 39 |     |     error StartTimeTooEarly(uint256 startTime, uint256 blockTime);
 40 |     |     error EndTimeTooEarly(uint256 startTime, uint256 endTime);
 41 |     |     error PoolPriceOutOfRange(
 42 |     |         uint160 poolPrice,
 43 |     |         uint160 minPrice,
 44 |     |         uint160 maxPrice
 45 |     |     );
 46 |     | }
 47 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/storage/Market.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.2 <0.9.0;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
   5 |     | import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
   6 |     | import "@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol";
   7 |     | import "./Errors.sol";
   8 |     | import "../interfaces/IFoilStructs.sol";
   9 |     | 
  10 |     | library Market {
  11 |     |     using SafeERC20 for IERC20;
  12 |     | 
  13 |     |     struct Data {
  14 |     |         address owner;
  15 |     |         address pendingOwner;
  16 |     |         IERC20 collateralAsset;
  17 |     |         uint256 lastEpochId;
  18 |     |         IFoilStructs.EpochParams epochParams;
  19 |     |         mapping(bytes32 => uint256) epochIdByAssertionId;
  20 |     |         // **
  21 |     |         //NOTE: ASSERTIONS INSIDE ORIGINAL CODE
  22 |     |         address foil; //@audit added by fuzzer
  23 |     |     }
  24 |     | 
  25 | *   |     function load() internal pure returns (Data storage market) {
  26 | *   |         bytes32 slot = keccak256("foil.gas.market");
  27 |     | 
  28 |     |         assembly {
  29 |     |             market.slot := slot
  30 |     |         }
  31 |     |     }
  32 |     | 
  33 | *   |     function createValid(
  34 |     |         address owner,
  35 |     |         address collateralAsset,
  36 |     |         IFoilStructs.EpochParams memory epochParams,
  37 |     |         //NOTE: ASSERTIONS INSIDE ORIGINAL CODE
  38 |     |         address foil //@audit added by fuzzer
  39 | *   |     ) internal returns (Data storage market) {
  40 | *   |         validateEpochParams(epochParams);
  41 |     | 
  42 | *   |         require(
  43 | *   |             IERC20Metadata(collateralAsset).decimals() == 18,
  44 |     |             "collateralAsset must have 18 decimals"
  45 |     |         );
  46 |     | 
  47 | *   |         market = load();
  48 |     | 
  49 |     |         // can only be called once
  50 | *   |         if (address(market.collateralAsset) != address(0)) {
  51 | *   |             revert Errors.MarketAlreadyCreated();
  52 |     |         }
  53 |     | 
  54 | *   |         market.owner = owner;
  55 | *   |         market.collateralAsset = IERC20(collateralAsset);
  56 | *   |         market.epochParams = epochParams;
  57 |     | 
  58 |     |         //added by fuzzer
  59 | *   |         market.foil = foil;
  60 |     |     }
  61 |     | 
  62 | *   |     function loadValid() internal view returns (Data storage market) {
  63 | *   |         market = load();
  64 |     | 
  65 | *   |         if (address(market.epochParams.uniswapPositionManager) == address(0)) {
  66 |     |             revert Errors.InvalidMarket();
  67 |     |         }
  68 |     |     }
  69 | *   |     function updateValid(
  70 |     |         IFoilStructs.EpochParams memory epochParams
  71 | *   |     ) internal returns (Data storage market) {
  72 | *   |         validateEpochParams(epochParams);
  73 |     | 
  74 | *   |         market = load();
  75 |     | 
  76 | *   |         market.epochParams = epochParams;
  77 |     |     }
  78 |     | 
  79 | *   |     function validateEpochParams(
  80 |     |         IFoilStructs.EpochParams memory epochParams
  81 | *   |     ) internal pure {
  82 | *   |         int24 tickSpacing = getTickSpacingForFee(epochParams.feeRate);
  83 |     | 
  84 | *   |         if (epochParams.baseAssetMinPriceTick % tickSpacing != 0) {
  85 |     |             revert Errors.InvalidBaseAssetMinPriceTick(
  86 |     |                 epochParams.baseAssetMinPriceTick,
  87 |     |                 tickSpacing
  88 |     |             );
  89 |     |         }
  90 |     | 
  91 | *   |         if (epochParams.baseAssetMaxPriceTick % tickSpacing != 0) {
  92 |     |             revert Errors.InvalidBaseAssetMaxPriceTick(
  93 |     |                 epochParams.baseAssetMaxPriceTick,
  94 |     |                 tickSpacing
  95 |     |             );
  96 |     |         }
  97 |     | 
  98 | *   |         if (
  99 | *   |             epochParams.baseAssetMinPriceTick >=
 100 | *   |             epochParams.baseAssetMaxPriceTick
 101 |     |         ) {
 102 | *   |             revert Errors.InvalidPriceTickRange(
 103 | *   |                 epochParams.baseAssetMinPriceTick,
 104 | *   |                 epochParams.baseAssetMaxPriceTick
 105 |     |             );
 106 |     |         }
 107 |     | 
 108 | *   |         require(
 109 | *   |             epochParams.assertionLiveness >= 6 hours,
 110 |     |             "assertionLiveness must be at least six hours"
 111 |     |         );
 112 | *   |         require(
 113 | *   |             epochParams.bondCurrency != address(0),
 114 |     |             "bondCurrency must be a non-zero address"
 115 |     |         );
 116 | *   |         require(
 117 | *   |             epochParams.bondAmount > 0,
 118 |     |             "bondAmount must be greater than 0"
 119 |     |         );
 120 |     |         require(
 121 |     |             epochParams.priceUnit.length > 0,
 122 |     |             "priceUnit must be non-empty"
 123 |     |         );
 124 | *   |         require(
 125 | *   |             epochParams.uniswapPositionManager != address(0),
 126 |     |             "uniswapPositionManager must be a non-zero address"
 127 |     |         );
 128 | *   |         require(
 129 | *   |             epochParams.uniswapSwapRouter != address(0),
 130 |     |             "uniswapSwapRouter must be a non-zero address"
 131 |     |         );
 132 | *   |         require(
 133 | *   |             epochParams.uniswapQuoter != address(0),
 134 |     |             "uniswapQuoter must be a non-zero address"
 135 |     |         );
 136 | *   |         require(
 137 | *   |             epochParams.optimisticOracleV3 != address(0),
 138 |     |             "optimisticOracleV3 must be a non-zero address"
 139 |     |         );
 140 |     |     }
 141 |     | 
 142 | *   |     function getTickSpacingForFee(uint24 fee) internal pure returns (int24) {
 143 | *   |         if (fee == 100) {
 144 |     |             return 1;
 145 | *   |         } else if (fee == 500) {
 146 |     |             return 10;
 147 | *   |         } else if (fee == 3000) {
 148 |     |             return 60;
 149 | *   |         } else if (fee == 10000) {
 150 | *   |             return 200;
 151 |     |         } else {
 152 |     |             revert Errors.InvalidTickSpacing(fee);
 153 |     |         }
 154 |     |     }
 155 |     | 
 156 | *   |     function getNewEpochId(Data storage self) internal returns (uint256) {
 157 | *   |         self.lastEpochId++;
 158 | *   |         return self.lastEpochId;
 159 |     |     }
 160 |     | 
 161 |     |     function withdrawCollateral(
 162 |     |         Data storage self,
 163 |     |         address user,
 164 |     |         uint256 amount
 165 |     |     ) internal {
 166 |     |         self.collateralAsset.safeTransfer(user, amount);
 167 |     |     }
 168 |     | 
 169 |     |     function transferOwnership(Data storage self, address newOwner) internal {
 170 |     |         self.pendingOwner = newOwner;
 171 |     |     }
 172 |     | 
 173 |     |     function acceptOwnership(Data storage self) internal {
 174 |     |         address sender = msg.sender;
 175 |     |         if (self.pendingOwner != sender) {
 176 |     |             revert Errors.OwnableUnauthorizedAccount(sender);
 177 |     |         }
 178 |     |         self.owner = sender;
 179 |     |         delete self.pendingOwner;
 180 |     |     }
 181 |     | }
 182 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/storage/Position.sol
   1 |     | // SPDX-License-Identifier: GPL-3.0
   2 |     | 
   3 |     | pragma solidity >=0.8.2 <0.9.0;
   4 |     | 
   5 |     | import "./Epoch.sol";
   6 |     | import "./Trade.sol";
   7 |     | 
   8 |     | import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
   9 |     | import {SafeCastU256, SafeCastI256} from "@synthetixio/core-contracts/contracts/utils/SafeCast.sol";
  10 |     | import {DecimalMath} from "@synthetixio/core-contracts/contracts/utils/DecimalMath.sol";
  11 |     | import {IFoilStructs} from "../interfaces/IFoilStructs.sol";
  12 |     | import {ERC721Storage} from "./ERC721Storage.sol";
  13 |     | import {Errors} from "./Errors.sol";
  14 |     | 
  15 |     | library Position {
  16 |     |     using SafeCastU256 for uint256;
  17 |     |     using SafeCastI256 for int256;
  18 |     |     using DecimalMath for uint256;
  19 |     |     using SafeERC20 for IERC20;
  20 |     | 
  21 |     |     using Epoch for Epoch.Data;
  22 |     | 
  23 |     |     struct Data {
  24 |     |         uint256 id;
  25 |     |         IFoilStructs.PositionKind kind;
  26 |     |         uint256 epochId;
  27 |     |         // Accounting data (debt and deposited collateral)
  28 |     |         uint256 depositedCollateralAmount; // configured collateral
  29 |     |         uint256 borrowedVEth;
  30 |     |         uint256 borrowedVGas;
  31 |     |         // Position data (owned tokens)
  32 |     |         uint256 vEthAmount;
  33 |     |         uint256 vGasAmount;
  34 |     |         uint256 uniswapPositionId; // uniswap nft id
  35 |     |         bool isSettled;
  36 |     |     }
  37 |     | 
  38 |     |     //prev struct
  39 |     |     //   struct Data {
  40 |     |     //         uint256 id;
  41 |     |     //         IFoilStructs.PositionKind kind;
  42 |     |     //         uint256 epochId;
  43 |     |     //         // Accounting data (debt and deposited collateral)
  44 |     |     //         uint256 depositedCollateralAmount; // configured collateral
  45 |     |     //         uint256 borrowedVEth;
  46 |     |     //         uint256 borrowedVGas;
  47 |     |     //         // Position data (owned tokens and position size)
  48 |     |     //         uint256 vEthAmount;
  49 |     |     //         uint256 vGasAmount;
  50 |     |     //         int256 currentTokenAmount;
  51 |     |     //         uint256 uniswapPositionId; // uniswap nft id
  52 |     |     //         bool isSettled;
  53 |     |     //     }
  54 |     | 
  55 |     |     function load(
  56 |     |         uint256 positionId
  57 |     |     ) internal pure returns (Data storage position) {
  58 |     |         bytes32 s = keccak256(abi.encode("foil.gas.position", positionId));
  59 |     | 
  60 |     |         assembly {
  61 |     |             position.slot := s
  62 |     |         }
  63 |     |     }
  64 |     | 
  65 |     |     function loadValid(
  66 |     |         uint256 positionId
  67 |     |     ) internal view returns (Data storage position) {
  68 |     |         position = load(positionId);
  69 |     |         if (positionId == 0 || position.id == 0) {
  70 |     |             revert Errors.InvalidPositionId(positionId);
  71 |     |         }
  72 |     |     }
  73 |     | 
  74 |     |     function createValid(
  75 |     |         uint256 positionId
  76 |     |     ) internal returns (Data storage position) {
  77 |     |         if (positionId == 0) {
  78 |     |             revert Errors.InvalidPositionId(positionId);
  79 |     |         }
  80 |     | 
  81 |     |         position = load(positionId);
  82 |     | 
  83 |     |         if (position.id != 0) {
  84 |     |             revert Errors.PositionAlreadyCreated();
  85 |     |         }
  86 |     | 
  87 |     |         position.id = positionId;
  88 |     |         return position;
  89 |     |     }
  90 |     | 
  91 |     |     function updateCollateral(
  92 |     |         Data storage self,
  93 |     |         uint256 amount
  94 |     |     ) internal returns (int256 deltaCollateral) {
  95 |     |         IERC20 collateralAsset = Market.load().collateralAsset;
  96 |     |         deltaCollateral =
  97 |     |             amount.toInt() -
  98 |     |             self.depositedCollateralAmount.toInt();
  99 |     | 
 100 |     |         if (deltaCollateral > 0) {
 101 |     |             collateralAsset.safeTransferFrom(
 102 |     |                 msg.sender,
 103 |     |                 address(this),
 104 |     |                 deltaCollateral.toUint()
 105 |     |             );
 106 |     |         } else if (deltaCollateral < 0) {
 107 |     |             collateralAsset.safeTransfer(
 108 |     |                 msg.sender,
 109 |     |                 (deltaCollateral * -1).toUint()
 110 |     |             );
 111 |     |         }
 112 |     |         // do nothing if deltaCollateral == 0
 113 |     | 
 114 |     |         self.depositedCollateralAmount = amount;
 115 |     |     }
 116 |     | 
 117 |     |     function afterTradeCheck(Data storage self) internal view {
 118 |     |         Epoch.load(self.epochId).validateCollateralRequirementsForTrade(
 119 |     |             self.depositedCollateralAmount,
 120 |     |             self.vGasAmount,
 121 |     |             self.vEthAmount,
 122 |     |             self.borrowedVGas,
 123 |     |             self.borrowedVEth
 124 |     |         );
 125 |     |     }
 126 |     | 
 127 |     |     function preValidateLp(Data storage self) internal view {
 128 |     |         if (self.kind != IFoilStructs.PositionKind.Liquidity) {
 129 |     |             revert Errors.InvalidPositionKind();
 130 |     |         }
 131 |     | 
 132 |     |         if (self.isSettled) {
 133 |     |             revert Errors.PositionAlreadySettled(self.id);
 134 |     |         }
 135 |     | 
 136 |     |         if (ERC721Storage._ownerOf(self.id) != msg.sender) {
 137 |     |             revert Errors.NotAccountOwnerOrAuthorized(self.id, msg.sender);
 138 |     |         }
 139 |     |     }
 140 |     | 
 141 |     |     struct UpdateLpParams {
 142 |     |         uint256 uniswapNftId;
 143 |     |         uint128 liquidity;
 144 |     |         uint256 additionalCollateral;
 145 |     |         uint256 additionalLoanAmount0;
 146 |     |         uint256 additionalLoanAmount1;
 147 |     |         int24 lowerTick;
 148 |     |         int24 upperTick;
 149 |     |         uint256 tokensOwed0;
 150 |     |         uint256 tokensOwed1;
 151 |     |     }
 152 |     | 
 153 |     |     function updateValidLp(
 154 |     |         Data storage self,
 155 |     |         Epoch.Data storage epoch,
 156 |     |         UpdateLpParams memory params
 157 |     |     ) internal returns (uint256 requiredCollateral) {
 158 |     |         self.kind = IFoilStructs.PositionKind.Liquidity;
 159 |     |         self.epochId = epoch.id;
 160 |     |         self.uniswapPositionId = params.uniswapNftId;
 161 |     |         self.borrowedVGas += params.additionalLoanAmount0;
 162 |     |         self.borrowedVEth += params.additionalLoanAmount1;
 163 |     | 
 164 |     |         requiredCollateral = epoch.requiredCollateralForLiquidity(
 165 |     |             params.liquidity,
 166 |     |             self.borrowedVGas, // as loanAmount0
 167 |     |             self.borrowedVEth, // as loanAmount1
 168 |     |             params.tokensOwed0,
 169 |     |             params.tokensOwed1,
 170 |     |             TickMath.getSqrtRatioAtTick(params.lowerTick),
 171 |     |             TickMath.getSqrtRatioAtTick(params.upperTick)
 172 |     |         );
 173 |     | 
 174 |     |         uint256 newCollateral = self.depositedCollateralAmount +
 175 |     |             params.additionalCollateral;
 176 |     | 
 177 |     |         if (newCollateral < requiredCollateral) {
 178 |     |             revert Errors.InsufficientCollateral(
 179 |     |                 requiredCollateral,
 180 |     |                 newCollateral
 181 |     |             );
 182 |     |         }
 183 |     | 
 184 |     |         updateCollateral(self, requiredCollateral);
 185 |     |     }
 186 |     | 
 187 |     |     function settle(
 188 |     |         Data storage self,
 189 |     |         uint256 settlementPriceD18
 190 |     |     ) internal returns (uint256 collateralAmountReturned) {
 191 |     |         self.isSettled = true;
 192 |     | 
 193 |     |         // 1- reconcile gas tokens
 194 |     |         reconcileGasTokens(self);
 195 |     | 
 196 |     |         // 2- convert everything to ETH
 197 |     |         if (self.vGasAmount > 0) {
 198 |     |             self.vEthAmount += self.vGasAmount.mulDecimal(settlementPriceD18);
 199 |     |         }
 200 |     |         if (self.borrowedVGas > 0) {
 201 |     |             self.borrowedVEth += self.borrowedVGas.mulDecimal(
 202 |     |                 settlementPriceD18
 203 |     |             );
 204 |     |             // round up
 205 |     |             self.borrowedVEth += mulmod(
 206 |     |                 self.borrowedVGas,
 207 |     |                 settlementPriceD18,
 208 |     |                 1e18
 209 |     |             ) > 0
 210 |     |                 ? 1
 211 |     |                 : 0;
 212 |     |         }
 213 |     | 
 214 |     |         // 3- reconcile eth tokens
 215 |     |         reconcileEthTokens(self);
 216 |     | 
 217 |     |         console2.log("self.vGasAmount", self.vGasAmount);
 218 |     |         console2.log("self.borrowedVGas", self.borrowedVGas);
 219 |     |         console2.log("self.vEthAmount", self.vEthAmount);
 220 |     |         console2.log("self.borrowedVEth", self.borrowedVEth);
 221 |     | 
 222 |     |         // 4- reconcile collateral
 223 |     |         reconcileCollateral(self);
 224 |     | 
 225 |     |         console2.log(
 226 |     |             "self.depositedCollateralAmount",
 227 |     |             self.depositedCollateralAmount
 228 |     |         );
 229 |     | 
 230 |     |         return self.depositedCollateralAmount;
 231 |     |     }
 232 |     | 
 233 |     |     function positionSize(Data storage self) internal view returns (int256) {
 234 |     |         return self.vGasAmount.toInt() - self.borrowedVGas.toInt();
 235 |     |     }
 236 |     | 
 237 |     |     function reconcileTokens(Data storage self) internal {
 238 |     |         reconcileGasTokens(self);
 239 |     |         reconcileEthTokens(self);
 240 |     |     }
 241 |     | 
 242 |     |     function reconcileGasTokens(Data storage self) internal {
 243 |     |         if (self.vGasAmount > self.borrowedVGas) {
 244 |     |             self.vGasAmount -= self.borrowedVGas;
 245 |     |             self.borrowedVGas = 0;
 246 |     |         } else {
 247 |     |             self.borrowedVGas -= self.vGasAmount;
 248 |     |             self.vGasAmount = 0;
 249 |     |         }
 250 |     |     }
 251 |     | 
 252 |     |     function reconcileEthTokens(Data storage self) internal {
 253 |     |         if (self.vEthAmount > self.borrowedVEth) {
 254 |     |             self.vEthAmount -= self.borrowedVEth;
 255 |     |             self.borrowedVEth = 0;
 256 |     |         } else {
 257 |     |             self.borrowedVEth -= self.vEthAmount;
 258 |     |             self.vEthAmount = 0;
 259 |     |         }
 260 |     |     }
 261 |     | 
 262 |     |     function reconcileCollateral(Data storage self) internal {
 263 |     |         if (self.vEthAmount > 0) {
 264 |     |             self.depositedCollateralAmount += self.vEthAmount;
 265 |     |             self.vEthAmount = 0;
 266 |     |         }
 267 |     | 
 268 |     |         if (self.borrowedVEth > 0) {
 269 |     |             self.depositedCollateralAmount -= self.borrowedVEth;
 270 |     |             self.borrowedVEth = 0;
 271 |     |         }
 272 |     |     }
 273 |     | 
 274 |     |     function getRequiredCollateral(
 275 |     |         Data storage self
 276 |     |     ) internal view returns (uint256 requiredCollateral) {
 277 |     |         Epoch.Data storage epoch = Epoch.load(self.epochId);
 278 |     | 
 279 |     |         requiredCollateral = epoch.getCollateralRequirementsForTrade(
 280 |     |             self.vGasAmount,
 281 |     |             self.vEthAmount,
 282 |     |             self.borrowedVGas,
 283 |     |             self.borrowedVEth
 284 |     |         );
 285 |     |     }
 286 |     | }
 287 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/src/contracts/storage/Trade.sol
   1 |     | // SPDX-License-Identifier: GPL-3.0
   2 |     | 
   3 |     | pragma solidity >=0.8.2 <0.9.0;
   4 |     | 
   5 |     | import {Epoch} from "./Epoch.sol";
   6 |     | import {Market} from "./Market.sol";
   7 |     | import {Errors} from "./Errors.sol";
   8 |     | import {ISwapRouter} from "../interfaces/external/ISwapRouter.sol";
   9 |     | import {IUniswapV3Quoter} from "../interfaces/external/IUniswapV3Quoter.sol";
  10 |     | import "@synthetixio/core-contracts/contracts/utils/DecimalMath.sol";
  11 |     | 
  12 |     | // import "forge-std/console2.sol";
  13 |     | 
  14 |     | library Trade {
  15 |     |     using Epoch for Epoch.Data;
  16 |     |     using DecimalMath for uint256;
  17 |     | 
  18 |     |     function swapOrQuoteTokensExactIn(
  19 |     |         Epoch.Data storage epoch,
  20 |     |         uint256 amountInVEth,
  21 |     |         uint256 amountInVGas,
  22 |     |         bool isQuote
  23 |     |     ) internal returns (uint256 amountOutVEth, uint256 amountOutVGas) {
  24 |     |         if (amountInVEth > 0 && amountInVGas > 0) {
  25 |     |             revert Errors.InvalidData("Only one token can be traded at a time");
  26 |     |         }
  27 |     | 
  28 |     |         if (amountInVEth == 0 && amountInVGas == 0) {
  29 |     |             revert Errors.InvalidData("At least one token should be traded");
  30 |     |         }
  31 |     | 
  32 |     |         address tokenIn;
  33 |     |         address tokenOut;
  34 |     |         uint256 amountIn;
  35 |     |         uint256 amountOut;
  36 |     | 
  37 |     |         if (amountInVEth > 0) {
  38 |     |             tokenIn = address(epoch.ethToken);
  39 |     |             tokenOut = address(epoch.gasToken);
  40 |     |             amountIn = amountInVEth;
  41 |     |         } else {
  42 |     |             tokenIn = address(epoch.gasToken);
  43 |     |             tokenOut = address(epoch.ethToken);
  44 |     |             amountIn = amountInVGas;
  45 |     |         }
  46 |     | 
  47 |     |         if (isQuote) {
  48 |     |             amountOut = IUniswapV3Quoter(epoch.params.uniswapQuoter)
  49 |     |                 .quoteExactInputSingle(
  50 |     |                     tokenIn,
  51 |     |                     tokenOut,
  52 |     |                     epoch.params.feeRate,
  53 |     |                     amountIn,
  54 |     |                     0
  55 |     |                 );
  56 |     |         } else {
  57 |     |             ISwapRouter.ExactInputSingleParams memory swapParams = ISwapRouter
  58 |     |                 .ExactInputSingleParams({
  59 |     |                     fee: epoch.params.feeRate,
  60 |     |                     recipient: address(this),
  61 |     |                     deadline: block.timestamp,
  62 |     |                     tokenIn: tokenIn,
  63 |     |                     tokenOut: tokenOut,
  64 |     |                     amountIn: amountIn,
  65 |     |                     // Notice, not limiting the trade in any way since we are limiting the collateral required afterwards.
  66 |     |                     amountOutMinimum: 0,
  67 |     |                     sqrtPriceLimitX96: 0
  68 |     |                 });
  69 |     | 
  70 |     |             amountOut = ISwapRouter(epoch.params.uniswapSwapRouter)
  71 |     |                 .exactInputSingle(swapParams);
  72 |     |         }
  73 |     | 
  74 |     |         if (amountInVEth > 0) {
  75 |     |             amountOutVGas = amountOut;
  76 |     |         } else {
  77 |     |             amountOutVEth = amountOut;
  78 |     |         }
  79 |     |     }
  80 |     | 
  81 |     |     function swapOrQuoteTokensExactOut(
  82 |     |         Epoch.Data storage epoch,
  83 |     |         uint256 expectedAmountOutVEth,
  84 |     |         uint256 expectedAmountOutVGas,
  85 |     |         bool isQuote
  86 |     |     )
  87 |     |         internal
  88 |     |         returns (uint256 requiredAmountInVEth, uint256 requiredAmountInVGas)
  89 |     |     {
  90 |     |         if (expectedAmountOutVEth > 0 && expectedAmountOutVGas > 0) {
  91 |     |             revert Errors.InvalidData("Only one token can be traded at a time");
  92 |     |         }
  93 |     | 
  94 |     |         if (expectedAmountOutVEth == 0 && expectedAmountOutVGas == 0) {
  95 |     |             revert Errors.InvalidData("At least one token should be traded");
  96 |     |         }
  97 |     | 
  98 |     |         address tokenIn;
  99 |     |         address tokenOut;
 100 |     |         uint256 amountOut;
 101 |     |         uint256 amountIn;
 102 |     | 
 103 |     |         if (expectedAmountOutVEth > 0) {
 104 |     |             tokenIn = address(epoch.gasToken);
 105 |     |             tokenOut = address(epoch.ethToken);
 106 |     |             amountOut = expectedAmountOutVEth;
 107 |     |         } else {
 108 |     |             tokenIn = address(epoch.ethToken);
 109 |     |             tokenOut = address(epoch.gasToken);
 110 |     |             amountOut = expectedAmountOutVGas;
 111 |     |         }
 112 |     | 
 113 |     |         if (isQuote) {
 114 |     |             amountIn = IUniswapV3Quoter(epoch.params.uniswapQuoter)
 115 |     |                 .quoteExactOutputSingle(
 116 |     |                     tokenIn,
 117 |     |                     tokenOut,
 118 |     |                     epoch.params.feeRate,
 119 |     |                     amountOut,
 120 |     |                     0
 121 |     |                 );
 122 |     |         } else {
 123 |     |             ISwapRouter.ExactOutputSingleParams memory swapParams = ISwapRouter
 124 |     |                 .ExactOutputSingleParams({
 125 |     |                     tokenIn: tokenIn,
 126 |     |                     tokenOut: tokenOut,
 127 |     |                     amountOut: amountOut,
 128 |     |                     fee: epoch.params.feeRate,
 129 |     |                     recipient: address(this),
 130 |     |                     deadline: block.timestamp,
 131 |     |                     // Notice, not limiting the trade in any way since we are limiting the collateral required afterwards.
 132 |     |                     sqrtPriceLimitX96: 0,
 133 |     |                     amountInMaximum: type(uint256).max
 134 |     |                 });
 135 |     | 
 136 |     |             amountIn = ISwapRouter(epoch.params.uniswapSwapRouter)
 137 |     |                 .exactOutputSingle(swapParams);
 138 |     |         }
 139 |     |         if (expectedAmountOutVEth > 0) {
 140 |     |             requiredAmountInVGas = amountIn;
 141 |     |         } else {
 142 |     |             requiredAmountInVEth = amountIn;
 143 |     |         }
 144 |     |     }
 145 |     | 
 146 |     |     function getReferencePrice(
 147 |     |         uint256 epochId
 148 |     |     ) internal view returns (uint256 price18Digits) {
 149 |     |         Epoch.Data storage epoch = Epoch.load(epochId);
 150 |     | 
 151 |     |         if (epoch.settled) {
 152 |     |             return epoch.settlementPriceD18;
 153 |     |         } else {
 154 |     |             return epoch.getCurrentPoolPrice();
 155 |     |         }
 156 |     |     }
 157 |     | }
 158 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/Fuzz.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./FuzzEpochConfigurationModule.sol";
  5 |     | import "./FuzzEpochLiquidityModule.sol";
  6 |     | import "./FuzzEpochSettlementModule.sol";
  7 |     | import "./FuzzEpochTradeModule.sol";
  8 |     | import "./FuzzEpochUMASettlementModule.sol";
  9 |     | 
 10 | *r  | contract Fuzz is
 11 |     |     FuzzEpochConfigurationModule,
 12 |     |     FuzzEpochLiquidityModule,
 13 |     |     FuzzEpochSettlementModule,
 14 |     |     FuzzEpochTradeModule,
 15 |     |     FuzzEpochUMASettlementModule
 16 |     | {
 17 |     |     constructor() payable {
 18 |     |         setupFoil();
 19 |     |     }
 20 |     | }
 21 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/FuzzEpochConfigurationModule.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./helper/preconditions/PreconditionsEpochConfigurationModule.sol";
  5 |     | import "./helper/postconditions/PostconditionsEpochConfigurationModule.sol";
  6 |     | import "./util/FunctionCalls.sol";
  7 |     | 
  8 |     | contract FuzzEpochConfigurationModule is
  9 |     |     PreconditionsEpochConfigurationModule,
 10 |     |     PostconditionsEpochConfigurationModule
 11 |     | {
 12 | *   |     function fuzz_initializeMarket(
 13 |     |         int24 minTick,
 14 |     |         int24 maxTick
 15 |     |     ) public setCurrentActor {
 16 |     |         //setCurrentActor use vm.prank(actor)
 17 | *   |         InitializeMarketParams memory params = initializeMarketPreconditions(
 18 | *   |             minTick,
 19 | *   |             maxTick
 20 |     |         );
 21 |     | 
 22 | *   |         address[] memory actorsToUpdate = new address[](1);
 23 | *   |         actorsToUpdate[0] = currentActor;
 24 |     | 
 25 | *   |         _before(actorsToUpdate);
 26 |     | 
 27 | *   |         vm.prank(currentActor);
 28 | *   |         (bool success, bytes memory returnData) = _initializeMarketCall(
 29 | *   |             params.owner,
 30 | *   |             params.collateralAsset, //NOTE: remediated contracts, require less params
 31 | *   |             params.epochParams,
 32 | *   |             address(foil)
 33 |     |         );
 34 |     | 
 35 |     |         InitializeMarketPostConditions(success, returnData, actorsToUpdate);
 36 |     |     }
 37 |     | 
 38 | *   |     function fuzz_updateMarket(
 39 |     |         int24 minTick,
 40 |     |         int24 maxTick
 41 |     |     ) public setCurrentActor {
 42 |     |         //reusing initialization params randomizer since we updating only min and max ticks
 43 | *   |         InitializeMarketParams memory params = initializeMarketPreconditions(
 44 | *   |             minTick,
 45 | *   |             maxTick
 46 |     |         );
 47 |     | 
 48 | *   |         address[] memory actorsToUpdate = new address[](1);
 49 | *   |         actorsToUpdate[0] = currentActor;
 50 |     | 
 51 | *   |         _before(actorsToUpdate);
 52 |     | 
 53 | *   |         vm.prank(currentActor);
 54 | *   |         (bool success, bytes memory returnData) = _updateMarketCall(
 55 | *   |             params.epochParams //NOTE: remediated contracts, require less params
 56 |     |         );
 57 |     | 
 58 | *   |         updateMarketPostConditions(success, returnData, actorsToUpdate);
 59 |     |     }
 60 |     | 
 61 | *   |     function fuzz_createEpoch(
 62 |     |         uint160 startingSqrtPriceX96Seed
 63 |     |     ) public setCurrentActor {
 64 | *   |         CreateEpochParams memory params = createEpochPreconditions(
 65 | *   |             startingSqrtPriceX96Seed
 66 |     |         );
 67 |     | 
 68 | *   |         address[] memory actorsToUpdate = new address[](1);
 69 | *   |         actorsToUpdate[0] = currentActor;
 70 |     | 
 71 | *   |         _before(actorsToUpdate);
 72 |     | 
 73 | *   |         vm.prank(currentActor);
 74 | *   |         (bool success, bytes memory returnData) = _createEpochCall(
 75 | *   |             params.startTime,
 76 | *   |             params.endTime,
 77 | *   |             params.startingSqrtPriceX96,
 78 | *   |             uint256(1) //salt, any
 79 |     |         );
 80 |     | 
 81 |     |         createEpochPostConditions(success, returnData, actorsToUpdate);
 82 |     |     }
 83 |     | }
 84 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/FuzzEpochLiquidityModule.sol
   1 |     | // SPDX-License-Identifier: GPL-3.0
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import "./helper/preconditions/PreconditionsEpochLiquidityModule.sol";
   5 |     | import "./helper/postconditions/PostconditionsEpochLiquidityModule.sol";
   6 |     | import "./util/FunctionCalls.sol";
   7 |     | 
   8 |     | contract FuzzEpochLiquidityModule is
   9 |     |     PreconditionsEpochLiquidityModule,
  10 |     |     PostconditionsEpochLiquidityModule
  11 |     | {
  12 | *   |     function fuzz_createLiquidityPosition(
  13 |     |         uint collateralAmountSeed,
  14 |     |         int24 lowerTickSeed,
  15 |     |         int24 upperTickSeed
  16 |     |     ) public setCurrentActor {
  17 | *   |         IFoilStructs.LiquidityMintParams
  18 | *   |             memory params = createLiquidityPositionPreconditions(
  19 | *   |                 collateralAmountSeed,
  20 | *   |                 lowerTickSeed,
  21 | *   |                 upperTickSeed
  22 |     |             );
  23 |     | 
  24 |     |         address[] memory actorsToUpdate = new address[](1);
  25 |     |         actorsToUpdate[0] = currentActor;
  26 |     | 
  27 |     |         _before(actorsToUpdate);
  28 |     | 
  29 |     |         weth.approve(address(foil), type(uint256).max);
  30 |     |         (bool success, bytes memory returnData) = _createLiquidityPositionCall(
  31 |     |             params
  32 |     |         );
  33 | *r  |         require(
  34 |     |             !checkIfTraderPushedPriceOutsideOfBoundaries(),
  35 |     |             "Price pushed out of boundaries upon creation"
  36 |     |         ); //check if not pushed
  37 |     | 
  38 |     |         (uint positionId, , , , , ) = abi.decode(
  39 |     |             returnData,
  40 |     |             (uint, uint, uint, uint128, uint, uint)
  41 |     |         );
  42 |     |         fl.log("addPosition after");
  43 |     | 
  44 |     |         if (success) {
  45 |     |             addPosition(params.epochId, currentActor, positionId, true);
  46 |     |         }
  47 |     |         fl.log("addPosition after");
  48 |     | 
  49 |     |         createLiquidityPositionPostconditions(
  50 |     |             success,
  51 |     |             returnData,
  52 |     |             actorsToUpdate
  53 |     |         );
  54 |     |     }
  55 |     | 
  56 | *   |     function fuzz_increaseLiquidityPosition(
  57 |     |         uint collateralAmountSeed
  58 |     |     ) public setCurrentActor {
  59 | *   |         weth.balanceOf(foil); //resetting prank
  60 | *   |         IFoilStructs.LiquidityIncreaseParams
  61 | *   |             memory params = increaseLiquidityPositionPreconditions(
  62 | *   |                 collateralAmountSeed
  63 |     |             );
  64 |     | 
  65 |     |         address[] memory actorsToUpdate = new address[](1);
  66 |     |         actorsToUpdate[0] = currentActor;
  67 |     | 
  68 |     |         _before(actorsToUpdate);
  69 |     |         (
  70 |     |             bool success,
  71 |     |             bytes memory returnData
  72 |     |         ) = _increaseLiquidityPositionCall(params);
  73 |     |         require(!checkIfTraderPushedPriceOutsideOfBoundaries()); //check if not pushed
  74 |     | 
  75 |     |         increaseLiquidityPositionPostConditions(
  76 |     |             success,
  77 |     |             returnData,
  78 |     |             actorsToUpdate
  79 |     |         );
  80 |     |     }
  81 |     | 
  82 | *   |     function fuzz_decreaseLiquidityPosition(uint seed) public setCurrentActor {
  83 | *   |         IFoilStructs.LiquidityDecreaseParams
  84 | *   |             memory params = decreaseLiquidityPositionPreconditions(seed);
  85 |     | 
  86 |     |         address[] memory actorsToUpdate = new address[](1);
  87 |     |         actorsToUpdate[0] = currentActor;
  88 |     |         uint stateChangerVar = 30 * 30; //@audit fuzzing cov trick to cover function with optimizer
  89 |     |         _before(actorsToUpdate);
  90 |     |         (
  91 |     |             bool success,
  92 |     |             bytes memory returnData
  93 |     |         ) = _decreaseLiquidityPositionCall(params);
  94 |     |         stateChangerVar = 30 * 38;
  95 |     |         require(!checkIfTraderPushedPriceOutsideOfBoundaries()); //check if not pushed
  96 |     |         stateChangerVar = 30 * 48;
  97 |     | 
  98 |     |         if (success) {
  99 |     |             if (isPositionTypeTrade(params.positionId)) {
 100 |     |                 deletePosition(
 101 |     |                     getLatestEpoch(),
 102 |     |                     currentActor,
 103 |     |                     params.positionId,
 104 |     |                     true //isLiquidity
 105 |     |                 );
 106 |     |                 addPosition(
 107 |     |                     getLatestEpoch(),
 108 |     |                     currentActor,
 109 |     |                     params.positionId,
 110 |     |                     false //isLiquidity, its a trade position
 111 |     |                 );
 112 |     |             }
 113 |     |         }
 114 |     | 
 115 |     |         decreaseLiquidityPositionPostConditions(
 116 |     |             success,
 117 |     |             returnData,
 118 |     |             actorsToUpdate
 119 |     |         );
 120 |     |         stateChangerVar = 4 * 38;
 121 |     |     }
 122 |     | 
 123 | *   |     function fuzz_closeLiquidityPosition(uint seed) public setCurrentActor {
 124 | *   |         IFoilStructs.LiquidityDecreaseParams
 125 | *   |             memory params = closeLiquidityPositionPreconditions(seed); //close is a branch in decrease
 126 |     | 
 127 |     |         address[] memory actorsToUpdate = new address[](1);
 128 |     |         actorsToUpdate[0] = currentActor;
 129 |     | 
 130 |     |         _before(actorsToUpdate);
 131 |     |         (
 132 |     |             bool success,
 133 |     |             bytes memory returnData
 134 |     |         ) = _decreaseLiquidityPositionCall(params);
 135 |     | 
 136 |     |         if (success) {
 137 |     |             if (isPositionTypeTrade(params.positionId)) {
 138 |     |                 deletePosition(
 139 |     |                     getLatestEpoch(),
 140 |     |                     currentActor,
 141 |     |                     params.positionId,
 142 |     |                     true //isLiquidity
 143 |     |                 );
 144 |     |                 addPosition(
 145 |     |                     getLatestEpoch(),
 146 |     |                     currentActor,
 147 |     |                     params.positionId,
 148 |     |                     false //isLiquidity, its a trade position
 149 |     |                 );
 150 |     |             }
 151 |     |         }
 152 |     | 
 153 |     |         require(!checkIfTraderPushedPriceOutsideOfBoundaries()); //check if not pushed
 154 |     | 
 155 | *   |         closeLiquidityPositionPostConditions(
 156 |     |             success,
 157 |     |             returnData,
 158 |     |             actorsToUpdate
 159 |     |         );
 160 |     |     }
 161 |     | 
 162 | *   |     function fuzz_closeAllLiquidityPositions() public {
 163 | *   |         (bool success, bytes memory returnData) = _getLatestEpochCall();
 164 | *   |         if (success) {
 165 |     |             //epoch should be created
 166 |     |             (uint epochId, , , , , , , , , , ) = abi.decode(
 167 |     |                 returnData,
 168 |     |                 (
 169 |     |                     uint256,
 170 |     |                     uint256,
 171 |     |                     uint256,
 172 |     |                     address,
 173 |     |                     address,
 174 |     |                     address,
 175 |     |                     uint256,
 176 |     |                     uint256,
 177 |     |                     bool,
 178 |     |                     uint256,
 179 |     |                     IFoilStructs.EpochParams
 180 |     |                 )
 181 |     |             );
 182 |     | 
 183 |     |             (uint[] memory liquidityPositions, ) = getAllPositionsIdsOfAllUsers(
 184 |     |                 epochId
 185 |     |             );
 186 |     | 
 187 |     |             IFoilStructs.LiquidityDecreaseParams[]
 188 |     |                 memory paramsArray = closeAllLiquidityPositionsPreconditions(
 189 |     |                     liquidityPositions
 190 |     |                 );
 191 |     | 
 192 |     |             for (uint i = 0; i < paramsArray.length; i++) {
 193 |     |                 IFoilStructs.LiquidityDecreaseParams
 194 |     |                     memory params = paramsArray[i];
 195 |     | 
 196 |     |                 (success, returnData) = _getPositionOwnerCall(
 197 |     |                     params.positionId
 198 |     |                 );
 199 |     |                 assert(success);
 200 |     |                 address positionOwner = abi.decode(returnData, (address));
 201 |     |                 vm.prank(positionOwner);
 202 |     |                 (success, returnData) = _decreaseLiquidityPositionCallNOPRANK(
 203 |     |                     params
 204 |     |                 );
 205 |     |                 if (success) {
 206 |     |                     if (isPositionTypeTrade(params.positionId)) {
 207 |     |                         console.log(
 208 |     |                             "fuzz_closeAllLiquidityPositions::This position number was converted to trade position",
 209 |     |                             params.positionId
 210 |     |                         );
 211 |     |                         deletePosition(
 212 |     |                             getLatestEpoch(),
 213 |     |                             positionOwner,
 214 |     |                             params.positionId,
 215 |     |                             true //isLiquidity
 216 |     |                         );
 217 |     |                         addPosition(
 218 |     |                             getLatestEpoch(),
 219 |     |                             positionOwner,
 220 |     |                             params.positionId,
 221 |     |                             false //isLiquidity, its a trade position
 222 |     |                         );
 223 |     |                     }
 224 |     |                 }
 225 |     |                 // fl.t(success, SETTLE_01);
 226 |     |                 require(!checkIfTraderPushedPriceOutsideOfBoundaries()); //check if not pushed
 227 |     |             }
 228 |     |             closeAllLiquidityPositionsPostConditions(success, returnData);
 229 |     |         }
 230 |     |     }
 231 |     | }
 232 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/FuzzEpochSettlementModule.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./helper/preconditions/PreconditionsEpochSettlementModule.sol";
  5 |     | import "./helper/postconditions/PostconditionsEpochSettlementModule.sol";
  6 |     | import "./util/FunctionCalls.sol";
  7 |     | 
  8 |     | contract FuzzEpochSettlementModule is
  9 |     |     PreconditionsEpochSettlementModule,
 10 |     |     PostconditionsEpochSettlementModule
 11 |     | {
 12 | *   |     function fuzz_settleLiquidityPosition(uint seed) public setCurrentActor {
 13 | *   |         uint positionId = settleLiquidityPositionPreconditions(seed);
 14 |     | 
 15 |     |         uint stateChangerVar = 1; //@audit trick to get a coverage missed with optimizer
 16 |     | 
 17 |     |         address[] memory actorsToUpdate = new address[](1);
 18 |     |         actorsToUpdate[0] = currentActor;
 19 |     | 
 20 |     |         stateChangerVar = 1 + 1;
 21 |     | 
 22 |     |         _before(actorsToUpdate);
 23 |     |         (bool success, bytes memory returnData) = _settlePositionCall(
 24 |     |             positionId
 25 |     |         );
 26 |     | 
 27 |     |         stateChangerVar = 1 * 6;
 28 |     |         settleLiquidityPositionPostConditions(
 29 |     |             success,
 30 |     |             returnData,
 31 |     |             actorsToUpdate
 32 |     |         );
 33 |     |         stateChangerVar = 2 * 8;
 34 |     |     }
 35 |     | 
 36 | *   |     function fuzz_settleTradePosition(uint seed) public setCurrentActor {
 37 | *   |         uint positionId = settleTradePositionPreconditions(seed);
 38 |     | 
 39 |     |         address[] memory actorsToUpdate = new address[](1);
 40 |     |         actorsToUpdate[0] = currentActor;
 41 |     | 
 42 |     |         _before(actorsToUpdate);
 43 |     |         (bool success, bytes memory returnData) = _settlePositionCall(
 44 |     |             positionId
 45 |     |         );
 46 |     | 
 47 |     |         settleTradePositionPostConditions(success, returnData, actorsToUpdate);
 48 |     |     }
 49 |     | }
 50 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/FuzzEpochTradeModule.sol
   1 |     | // SPDX-License-Identifier: GPL-3.0
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import "./helper/preconditions/PreconditionsEpochTradeModule.sol";
   5 |     | import "./helper/postconditions/PostconditionsEpochTradeModule.sol";
   6 |     | import "./util/FunctionCalls.sol";
   7 |     | 
   8 |     | contract FuzzEpochTradeModule is
   9 |     |     PreconditionsEpochTradeModule,
  10 |     |     PostconditionsEpochTradeModule
  11 |     | {
  12 | *   |     function fuzz_createTraderPositionLong(
  13 |     |         uint collateralAmountSeed,
  14 |     |         uint tokenAmountSeed
  15 |     |     ) public setCurrentActor {
  16 | *   |         CreateTraderPositionParams
  17 | *   |             memory params = createTraderPositionLongPreconditions(
  18 | *   |                 collateralAmountSeed,
  19 | *   |                 tokenAmountSeed
  20 |     |             );
  21 |     | 
  22 |     |         address[] memory actorsToUpdate = new address[](1);
  23 |     |         actorsToUpdate[0] = currentActor;
  24 |     | 
  25 |     |         _before(actorsToUpdate);
  26 |     | 
  27 |     |         (bool success, bytes memory returnData) = _createTraderPositionCall(
  28 |     |             params.epochId,
  29 |     |             params.tokenAmount,
  30 |     |             params.collateralAmount,
  31 |     |             params.deadline
  32 |     |         );
  33 |     | 
  34 |     |         require(!checkIfTraderPushedPriceOutsideOfBoundaries()); //true if pushed
  35 |     |         if (success) {
  36 |     |             addPosition(
  37 |     |                 params.epochId,
  38 |     |                 currentActor,
  39 |     |                 abi.decode(returnData, (uint)), //positionId
  40 |     |                 false //bool isLiquidity, trade
  41 |     |             );
  42 |     |         }
  43 |     |         createTraderPositionLongPostConditions(
  44 |     |             success,
  45 |     |             returnData,
  46 |     |             actorsToUpdate
  47 |     |         );
  48 |     |     }
  49 |     | 
  50 | *   |     function fuzz_createTraderPositionShort(
  51 |     |         uint collateralAmountSeed,
  52 |     |         uint tokenAmountSeed //positive short token amount for seed
  53 |     |     ) public setCurrentActor {
  54 | *   |         CreateTraderPositionParams
  55 | *   |             memory params = createTraderPositionShortPreconditions(
  56 | *   |                 collateralAmountSeed,
  57 | *   |                 tokenAmountSeed
  58 |     |             );
  59 |     |         uint stateChangerVar = 2 * 8;
  60 |     | 
  61 |     |         address[] memory actorsToUpdate = new address[](1);
  62 |     |         actorsToUpdate[0] = currentActor;
  63 |     | 
  64 |     |         _before(actorsToUpdate);
  65 |     |         stateChangerVar = 2 * 5;
  66 |     |         (bool success, bytes memory returnData) = _createTraderPositionCall(
  67 |     |             params.epochId,
  68 |     |             params.tokenAmount,
  69 |     |             params.collateralAmount,
  70 |     |             params.deadline
  71 |     |         );
  72 |     |         require(!checkIfTraderPushedPriceOutsideOfBoundaries()); //true if pushed
  73 |     |         stateChangerVar = 2 * 2;
  74 |     |         if (success) {
  75 |     |             addPosition(
  76 |     |                 params.epochId,
  77 |     |                 currentActor,
  78 |     |                 abi.decode(returnData, (uint)), //positionId
  79 |     |                 false //bool isLiquidity, trade
  80 |     |             );
  81 |     |         }
  82 |     |         stateChangerVar = 2 * 9;
  83 |     | 
  84 |     |         createTraderPositionShortPostConditions(
  85 |     |             success,
  86 |     |             returnData,
  87 |     |             actorsToUpdate
  88 |     |         );
  89 |     |         stateChangerVar = 30 * 30;
  90 |     |     }
  91 |     | 
  92 | *   |     function fuzz_modifyTraderPositionLong(
  93 |     |         uint collateralAmountSeed,
  94 |     |         uint tokenAmountSeed
  95 | *   |     ) public setCurrentActor {
  96 | *   |         ModifyTraderPositionParams
  97 | *   |             memory params = modifyTraderPositionLongPreconditions(
  98 | *   |                 collateralAmountSeed,
  99 | *   |                 tokenAmountSeed
 100 |     |             );
 101 |     | 
 102 |     |         address[] memory actorsToUpdate = new address[](1);
 103 |     |         actorsToUpdate[0] = currentActor;
 104 |     | 
 105 |     |         _before(actorsToUpdate);
 106 |     | 
 107 |     |         (bool success, bytes memory returnData) = _modifyTraderPositionCall(
 108 |     |             params.positionId,
 109 |     |             params.tokenAmount,
 110 |     |             params.collateralAmount,
 111 |     |             params.deadline
 112 |     |         );
 113 |     |         require(!checkIfTraderPushedPriceOutsideOfBoundaries()); //true if pushed
 114 |     | 
 115 | *   |         modifyTraderPositionLongPostConditions(
 116 |     |             success,
 117 |     |             returnData,
 118 |     |             actorsToUpdate
 119 |     |         );
 120 |     |     }
 121 |     | 
 122 | *   |     function fuzz_modifyTraderPositionShort(
 123 |     |         uint collateralAmountSeed,
 124 |     |         uint tokenAmountSeed
 125 |     |     ) public setCurrentActor {
 126 | *   |         ModifyTraderPositionParams
 127 | *   |             memory params = modifyTraderPositionShortPreconditions(
 128 | *   |                 collateralAmountSeed,
 129 | *   |                 tokenAmountSeed
 130 |     |             );
 131 |     | 
 132 |     |         address[] memory actorsToUpdate = new address[](1);
 133 |     |         actorsToUpdate[0] = currentActor;
 134 |     |         uint a; //coverage checker for optimizer
 135 |     |         _before(actorsToUpdate);
 136 |     |         (bool success, bytes memory returnData) = _modifyTraderPositionCall(
 137 |     |             params.positionId,
 138 |     |             params.tokenAmount,
 139 |     |             params.collateralAmount,
 140 |     |             params.deadline
 141 |     |         );
 142 |     |         a = 1;
 143 |     |         require(!checkIfTraderPushedPriceOutsideOfBoundaries()); //check if not pushed
 144 |     | 
 145 |     |         modifyTraderPositionShortPostConditions(
 146 |     |             success,
 147 |     |             returnData,
 148 |     |             actorsToUpdate
 149 |     |         );
 150 |     |         a = 1 * 7;
 151 |     |     }
 152 |     | 
 153 | *   |     function fuzz_closeTraderPosition(
 154 |     |         uint collateralAmountSeed
 155 |     |     ) public setCurrentActor {
 156 | *   |         ModifyTraderPositionParams
 157 | *   |             memory params = closeTraderPositionPreconditions(
 158 | *   |                 collateralAmountSeed
 159 |     |             );
 160 |     | 
 161 |     |         address[] memory actorsToUpdate = new address[](1);
 162 |     |         actorsToUpdate[0] = currentActor;
 163 |     | 
 164 |     |         _before(actorsToUpdate);
 165 |     |         (bool success, bytes memory returnData) = _modifyTraderPositionCall(
 166 |     |             params.positionId,
 167 |     |             params.tokenAmount,
 168 |     |             params.collateralAmount,
 169 |     |             params.deadline
 170 |     |         );
 171 |     |         require(!checkIfTraderPushedPriceOutsideOfBoundaries()); //true if pushed
 172 |     | 
 173 |     |         closeTraderPositionPostConditions(success, returnData, actorsToUpdate);
 174 |     |     }
 175 |     | }
 176 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/FuzzEpochUMASettlementModule.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./helper/preconditions/PreconditionsEpochUMASettlementModule.sol";
  5 |     | import "./helper/postconditions/PostconditionsEpochUMASettlementModule.sol";
  6 |     | import "./util/FunctionCalls.sol";
  7 |     | 
  8 |     | contract FuzzEpochUMASettlementModule is
  9 |     |     PreconditionsEpochUMASettlementModule,
 10 |     |     PostconditionsEpochUMASettlementModule
 11 |     | {
 12 | *   |     function fuzz_submitSettlementPrice(uint settlementPriceD18Seed) public {
 13 | *   |         SubmitSettlementPriceParams
 14 | *   |             memory params = submitSettlementPricePreconditions(
 15 | *   |                 settlementPriceD18Seed
 16 |     |             );
 17 |     | 
 18 |     |         (bool success, bytes memory returnData) = _getMarketOwnerCall();
 19 |     |         address owner = abi.decode(returnData, (address));
 20 |     | 
 21 |     |         address[] memory actorsToUpdate = new address[](1);
 22 |     |         actorsToUpdate[0] = owner; //NOTE: owner is one of the users
 23 |     | 
 24 |     |         _before(actorsToUpdate);
 25 |     | 
 26 |     |         vm.warp(block.timestamp + 30 days + 1);
 27 |     |         vm.prank(owner);
 28 |     | 
 29 |     |         (success, returnData) = _submitSettlementPriceCall(
 30 |     |             params.epochId,
 31 |     |             params.settlementPriceD18
 32 |     |         );
 33 |     |         require(success);
 34 |     | 
 35 |     |         userAssertions[params.epochId].push(abi.decode(returnData, (bytes32)));
 36 |     | 
 37 |     |         submitSettlementPricePostConditions(
 38 |     |             success,
 39 |     |             returnData,
 40 |     |             actorsToUpdate
 41 |     |         );
 42 |     |     }
 43 |     | 
 44 | *   |     function fuzz_mockDisputeAssertion(uint seed) public setCurrentActor {
 45 | *   |         MockDisputeAssertionParams
 46 | *   |             memory params = mockDisputeAssertionPreconditions(seed);
 47 |     | 
 48 |     |         address[] memory actorsToUpdate = new address[](1);
 49 |     |         actorsToUpdate[0] = currentActor;
 50 |     | 
 51 |     |         _before(actorsToUpdate);
 52 |     | 
 53 | *   |         (bool success, bytes memory returnData) = _mockDisputeAssertionCall(
 54 |     |             params.assertionId,
 55 |     |             params.disputer
 56 |     |         );
 57 |     | 
 58 |     |         //NOTE: not deleting disputed assertion in epoch
 59 |     | 
 60 | *   |         mockDisputeAssertionPostConditions(success, returnData, actorsToUpdate);
 61 |     |     }
 62 |     | 
 63 | *   |     function fuzz_mockSettleAssertion(
 64 |     |         uint seed,
 65 |     |         bool settleAll
 66 |     |     ) public setCurrentActor {
 67 | *   |         MockSettleAssertionParams
 68 | *   |             memory params = mockSettleAssertionPreconditions(seed);
 69 |     | 
 70 |     |         address[] memory actorsToUpdate = new address[](1);
 71 |     |         actorsToUpdate[0] = currentActor;
 72 |     | 
 73 |     |         _before(actorsToUpdate);
 74 |     | 
 75 |     |         (bool success, bytes memory returnData) = _mockSettleAssertionCall(
 76 |     |             params.assertionId,
 77 |     |             params.settlementResolution
 78 |     |         );
 79 |     | 
 80 |     |         if (success == true && settleAll == true) {
 81 |     |             fl.log("fuzz_mockSettleAssertion::Going to settle all positions");
 82 |     |             settleAllPositions();
 83 |     |         }
 84 |     | 
 85 |     |         mockSettleAssertionPostConditions(success, returnData, actorsToUpdate);
 86 |     |     }
 87 |     | }
 88 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/FuzzSetup.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | 
   3 |     | pragma solidity ^0.8.20;
   4 |     | 
   5 |     | import "@perimetersec/fuzzlib/src/FuzzBase.sol";
   6 |     | import "./helper/FuzzStorageVariables.sol";
   7 |     | 
   8 |     | contract FuzzSetup is FuzzBase, FuzzStorageVariables {
   9 |     |     function setupFoil() internal {
  10 |     |         router = new MockRouter();
  11 |     |         vm.label(address(router), "Router");
  12 |     |         foil = address(new Proxy(address(router), address(this)));
  13 |     |         vm.label(address(foil), "Foil");
  14 |     | 
  15 |     |         weth = new WETH();
  16 |     |         usdc = new MockERC20("USDC", "USDC", 6);
  17 |     |         wstETH = new MockERC20("wstETH", "wstETH", 18);
  18 |     | 
  19 |     |         deployUniswapV3();
  20 |     |         deployImplementations();
  21 |     |         deployUniQuoter();
  22 |     | 
  23 |     |         addEpochConfigurationModuleSels();
  24 |     |         addEpochLiquidityModuleSels();
  25 |     |         addEpochTradeModuleSels();
  26 |     |         addEpochUMASettlementModuleSels();
  27 |     |         addEpochSettlementModuleSels();
  28 |     |         addEpochViewsModuleSels();
  29 |     |         addMockLensModuleSels();
  30 |     | 
  31 |     |         setupActors();
  32 |     |     }
  33 |     | 
  34 |     |     function deployImplementations() internal {
  35 |     |         epochConfigurationModuleImpl = new EpochConfigurationModule(USER1);
  36 |     |         epochERC165ModuleImpl = new EpochERC165Module();
  37 |     |         epochLiquidityModuleImpl = new EpochLiquidityModule();
  38 |     |         epochNftModuleImpl = new EpochNftModule();
  39 |     |         epochTradeModuleImpl = new EpochTradeModule();
  40 |     |         epochUMASettlementModuleImpl = new EpochUMASettlementModule();
  41 |     |         epochSettlementModuleImpl = new EpochSettlementModule();
  42 |     |         epochViewsModuleImpl = new EpochViewsModule();
  43 |     | 
  44 |     |         uma = new MockUMA();
  45 |     |         lens = new MockLensModule();
  46 |     |     }
  47 |     | 
  48 |     |     function addEpochConfigurationModuleSels() private {
  49 |     |         (bool success, ) = foil.call(
  50 |     |             abi.encodeWithSelector(
  51 |     |                 router.addFunctionAndImplementation.selector,
  52 |     |                 epochConfigurationModuleImpl.initializeMarket.selector,
  53 |     |                 address(epochConfigurationModuleImpl)
  54 |     |             )
  55 |     |         );
  56 |     |         assert(success);
  57 |     | 
  58 |     |         (success, ) = foil.call(
  59 |     |             abi.encodeWithSelector(
  60 |     |                 router.addFunctionAndImplementation.selector,
  61 |     |                 epochConfigurationModuleImpl.updateMarket.selector,
  62 |     |                 address(epochConfigurationModuleImpl)
  63 |     |             )
  64 |     |         );
  65 |     |         assert(success);
  66 |     | 
  67 |     |         (success, ) = foil.call(
  68 |     |             abi.encodeWithSelector(
  69 |     |                 router.addFunctionAndImplementation.selector,
  70 |     |                 epochConfigurationModuleImpl.createEpoch.selector,
  71 |     |                 address(epochConfigurationModuleImpl)
  72 |     |             )
  73 |     |         );
  74 |     |         assert(success);
  75 |     |     }
  76 |     | 
  77 |     |     function addEpochLiquidityModuleSels() private {
  78 |     |         (bool success, ) = foil.call(
  79 |     |             abi.encodeWithSelector(
  80 |     |                 router.addFunctionAndImplementation.selector,
  81 |     |                 epochLiquidityModuleImpl.createLiquidityPosition.selector,
  82 |     |                 address(epochLiquidityModuleImpl)
  83 |     |             )
  84 |     |         );
  85 |     |         assert(success);
  86 |     | 
  87 |     |         (success, ) = foil.call(
  88 |     |             abi.encodeWithSelector(
  89 |     |                 router.addFunctionAndImplementation.selector,
  90 |     |                 epochLiquidityModuleImpl.decreaseLiquidityPosition.selector,
  91 |     |                 address(epochLiquidityModuleImpl)
  92 |     |             )
  93 |     |         );
  94 |     |         assert(success);
  95 |     | 
  96 |     |         (success, ) = foil.call(
  97 |     |             abi.encodeWithSelector(
  98 |     |                 router.addFunctionAndImplementation.selector,
  99 |     |                 epochLiquidityModuleImpl.increaseLiquidityPosition.selector,
 100 |     |                 address(epochLiquidityModuleImpl)
 101 |     |             )
 102 |     |         );
 103 |     |         assert(success);
 104 |     | 
 105 |     |         (success, ) = foil.call(
 106 |     |             abi.encodeWithSelector(
 107 |     |                 router.addFunctionAndImplementation.selector,
 108 |     |                 epochLiquidityModuleImpl.getTokenAmounts.selector,
 109 |     |                 address(epochLiquidityModuleImpl)
 110 |     |             )
 111 |     |         );
 112 |     |         assert(success);
 113 |     |     }
 114 |     | 
 115 |     |     function addEpochNftModuleSels() private {
 116 |     |         (bool success, ) = foil.call(
 117 |     |             abi.encodeWithSelector(
 118 |     |                 router.addFunctionAndImplementation.selector,
 119 |     |                 epochNftModuleImpl.balanceOf.selector,
 120 |     |                 address(epochNftModuleImpl)
 121 |     |             )
 122 |     |         );
 123 |     |         assert(success);
 124 |     | 
 125 |     |         (success, ) = foil.call(
 126 |     |             abi.encodeWithSelector(
 127 |     |                 router.addFunctionAndImplementation.selector,
 128 |     |                 epochNftModuleImpl.ownerOf.selector,
 129 |     |                 address(epochNftModuleImpl)
 130 |     |             )
 131 |     |         );
 132 |     |         assert(success);
 133 |     | 
 134 |     |         (success, ) = foil.call(
 135 |     |             abi.encodeWithSelector(
 136 |     |                 router.addFunctionAndImplementation.selector,
 137 |     |                 epochNftModuleImpl.name.selector,
 138 |     |                 address(epochNftModuleImpl)
 139 |     |             )
 140 |     |         );
 141 |     |         assert(success);
 142 |     | 
 143 |     |         (success, ) = foil.call(
 144 |     |             abi.encodeWithSelector(
 145 |     |                 router.addFunctionAndImplementation.selector,
 146 |     |                 epochNftModuleImpl.symbol.selector,
 147 |     |                 address(epochNftModuleImpl)
 148 |     |             )
 149 |     |         );
 150 |     |         assert(success);
 151 |     | 
 152 |     |         (success, ) = foil.call(
 153 |     |             abi.encodeWithSelector(
 154 |     |                 router.addFunctionAndImplementation.selector,
 155 |     |                 epochNftModuleImpl.tokenURI.selector,
 156 |     |                 address(epochNftModuleImpl)
 157 |     |             )
 158 |     |         );
 159 |     |         assert(success);
 160 |     | 
 161 |     |         (success, ) = foil.call(
 162 |     |             abi.encodeWithSelector(
 163 |     |                 router.addFunctionAndImplementation.selector,
 164 |     |                 epochNftModuleImpl.approve.selector,
 165 |     |                 address(epochNftModuleImpl)
 166 |     |             )
 167 |     |         );
 168 |     |         assert(success);
 169 |     | 
 170 |     |         (success, ) = foil.call(
 171 |     |             abi.encodeWithSelector(
 172 |     |                 router.addFunctionAndImplementation.selector,
 173 |     |                 epochNftModuleImpl.getApproved.selector,
 174 |     |                 address(epochNftModuleImpl)
 175 |     |             )
 176 |     |         );
 177 |     |         assert(success);
 178 |     | 
 179 |     |         (success, ) = foil.call(
 180 |     |             abi.encodeWithSelector(
 181 |     |                 router.addFunctionAndImplementation.selector,
 182 |     |                 epochNftModuleImpl.setApprovalForAll.selector,
 183 |     |                 address(epochNftModuleImpl)
 184 |     |             )
 185 |     |         );
 186 |     |         assert(success);
 187 |     | 
 188 |     |         (success, ) = foil.call(
 189 |     |             abi.encodeWithSelector(
 190 |     |                 router.addFunctionAndImplementation.selector,
 191 |     |                 epochNftModuleImpl.isApprovedForAll.selector,
 192 |     |                 address(epochNftModuleImpl)
 193 |     |             )
 194 |     |         );
 195 |     |         assert(success);
 196 |     | 
 197 |     |         (success, ) = foil.call(
 198 |     |             abi.encodeWithSelector(
 199 |     |                 router.addFunctionAndImplementation.selector,
 200 |     |                 epochNftModuleImpl.transferFrom.selector,
 201 |     |                 address(epochNftModuleImpl)
 202 |     |             )
 203 |     |         );
 204 |     |         assert(success);
 205 |     | 
 206 |     |         (success, ) = foil.call(
 207 |     |             abi.encodeWithSelector(
 208 |     |                 router.addFunctionAndImplementation.selector,
 209 |     |                 epochNftModuleImpl.tokenOfOwnerByIndex.selector,
 210 |     |                 address(epochNftModuleImpl)
 211 |     |             )
 212 |     |         );
 213 |     |         assert(success);
 214 |     | 
 215 |     |         (success, ) = foil.call(
 216 |     |             abi.encodeWithSelector(
 217 |     |                 router.addFunctionAndImplementation.selector,
 218 |     |                 epochNftModuleImpl.totalSupply.selector,
 219 |     |                 address(epochNftModuleImpl)
 220 |     |             )
 221 |     |         );
 222 |     |         assert(success);
 223 |     | 
 224 |     |         (success, ) = foil.call(
 225 |     |             abi.encodeWithSelector(
 226 |     |                 router.addFunctionAndImplementation.selector,
 227 |     |                 epochNftModuleImpl.tokenByIndex.selector,
 228 |     |                 address(epochNftModuleImpl)
 229 |     |             )
 230 |     |         );
 231 |     |         assert(success);
 232 |     |     }
 233 |     | 
 234 |     |     function addEpochTradeModuleSels() private {
 235 |     |         (bool success, ) = foil.call(
 236 |     |             abi.encodeWithSelector(
 237 |     |                 router.addFunctionAndImplementation.selector,
 238 |     |                 epochTradeModuleImpl.createTraderPosition.selector,
 239 |     |                 address(epochTradeModuleImpl)
 240 |     |             )
 241 |     |         );
 242 |     |         assert(success);
 243 |     | 
 244 |     |         (success, ) = foil.call(
 245 |     |             abi.encodeWithSelector(
 246 |     |                 router.addFunctionAndImplementation.selector,
 247 |     |                 epochTradeModuleImpl.modifyTraderPosition.selector,
 248 |     |                 address(epochTradeModuleImpl)
 249 |     |             )
 250 |     |         );
 251 |     |         assert(success);
 252 |     | 
 253 |     |         (success, ) = foil.call(
 254 |     |             abi.encodeWithSelector(
 255 |     |                 router.addFunctionAndImplementation.selector,
 256 |     |                 epochTradeModuleImpl.quoteCreateTraderPosition.selector,
 257 |     |                 address(epochTradeModuleImpl)
 258 |     |             )
 259 |     |         );
 260 |     |         assert(success);
 261 |     | 
 262 |     |         (success, ) = foil.call(
 263 |     |             abi.encodeWithSelector(
 264 |     |                 router.addFunctionAndImplementation.selector,
 265 |     |                 epochTradeModuleImpl.quoteModifyTraderPosition.selector,
 266 |     |                 address(epochTradeModuleImpl)
 267 |     |             )
 268 |     |         );
 269 |     |         assert(success);
 270 |     |     }
 271 |     | 
 272 |     |     function addEpochUMASettlementModuleSels() private {
 273 |     |         (bool success, ) = foil.call(
 274 |     |             abi.encodeWithSelector(
 275 |     |                 router.addFunctionAndImplementation.selector,
 276 |     |                 epochUMASettlementModuleImpl.submitSettlementPrice.selector,
 277 |     |                 address(epochUMASettlementModuleImpl)
 278 |     |             )
 279 |     |         );
 280 |     |         assert(success);
 281 |     | 
 282 |     |         (success, ) = foil.call(
 283 |     |             abi.encodeWithSelector(
 284 |     |                 router.addFunctionAndImplementation.selector,
 285 |     |                 epochUMASettlementModuleImpl.assertionResolvedCallback.selector,
 286 |     |                 address(epochUMASettlementModuleImpl)
 287 |     |             )
 288 |     |         );
 289 |     |         assert(success);
 290 |     | 
 291 |     |         (success, ) = foil.call(
 292 |     |             abi.encodeWithSelector(
 293 |     |                 router.addFunctionAndImplementation.selector,
 294 |     |                 epochUMASettlementModuleImpl.assertionDisputedCallback.selector,
 295 |     |                 address(epochUMASettlementModuleImpl)
 296 |     |             )
 297 |     |         );
 298 |     |         assert(success);
 299 |     |     }
 300 |     |     function addEpochSettlementModuleSels() private {
 301 |     |         (bool success, ) = foil.call(
 302 |     |             abi.encodeWithSelector(
 303 |     |                 router.addFunctionAndImplementation.selector,
 304 |     |                 epochSettlementModuleImpl.settlePosition.selector,
 305 |     |                 address(epochSettlementModuleImpl)
 306 |     |             )
 307 |     |         );
 308 |     |         assert(success);
 309 |     |     }
 310 |     |     function addEpochViewsModuleSels() private {
 311 |     |         (bool success, ) = foil.call(
 312 |     |             abi.encodeWithSelector(
 313 |     |                 router.addFunctionAndImplementation.selector,
 314 |     |                 epochViewsModuleImpl.getMarket.selector,
 315 |     |                 address(epochViewsModuleImpl)
 316 |     |             )
 317 |     |         );
 318 |     |         assert(success);
 319 |     | 
 320 |     |         (success, ) = foil.call(
 321 |     |             abi.encodeWithSelector(
 322 |     |                 router.addFunctionAndImplementation.selector,
 323 |     |                 epochViewsModuleImpl.getEpoch.selector,
 324 |     |                 address(epochViewsModuleImpl)
 325 |     |             )
 326 |     |         );
 327 |     |         assert(success);
 328 |     | 
 329 |     |         (success, ) = foil.call(
 330 |     |             abi.encodeWithSelector(
 331 |     |                 router.addFunctionAndImplementation.selector,
 332 |     |                 epochViewsModuleImpl.getLatestEpoch.selector,
 333 |     |                 address(epochViewsModuleImpl)
 334 |     |             )
 335 |     |         );
 336 |     |         assert(success);
 337 |     | 
 338 |     |         (success, ) = foil.call(
 339 |     |             abi.encodeWithSelector(
 340 |     |                 router.addFunctionAndImplementation.selector,
 341 |     |                 epochViewsModuleImpl.getPosition.selector,
 342 |     |                 address(epochViewsModuleImpl)
 343 |     |             )
 344 |     |         );
 345 |     |         assert(success);
 346 |     |     }
 347 |     | 
 348 |     |     function addMockLensModuleSels() private {
 349 |     |         (bool success, ) = foil.call(
 350 |     |             abi.encodeWithSelector(
 351 |     |                 router.addFunctionAndImplementation.selector,
 352 |     |                 lens.getPositionLiquidity.selector,
 353 |     |                 address(lens)
 354 |     |             )
 355 |     |         );
 356 |     |         assert(success);
 357 |     | 
 358 |     |         (success, ) = foil.call(
 359 |     |             abi.encodeWithSelector(
 360 |     |                 router.addFunctionAndImplementation.selector,
 361 |     |                 lens.getEthToGas.selector,
 362 |     |                 address(lens)
 363 |     |             )
 364 |     |         );
 365 |     | 
 366 |     |         assert(success);
 367 |     | 
 368 |     |         (success, ) = foil.call(
 369 |     |             abi.encodeWithSelector(
 370 |     |                 router.addFunctionAndImplementation.selector,
 371 |     |                 lens.getCurrentPrice.selector,
 372 |     |                 address(lens)
 373 |     |             )
 374 |     |         );
 375 |     |         assert(success);
 376 |     |         (success, ) = foil.call(
 377 |     |             abi.encodeWithSelector(
 378 |     |                 router.addFunctionAndImplementation.selector,
 379 |     |                 lens.getMarketOwner.selector,
 380 |     |                 address(lens)
 381 |     |             )
 382 |     |         );
 383 |     |         assert(success);
 384 |     |         (success, ) = foil.call(
 385 |     |             abi.encodeWithSelector(
 386 |     |                 router.addFunctionAndImplementation.selector,
 387 |     |                 lens.getCurrentEpochTicks.selector,
 388 |     |                 address(lens)
 389 |     |             )
 390 |     |         );
 391 |     |         assert(success);
 392 |     |         (success, ) = foil.call(
 393 |     |             abi.encodeWithSelector(
 394 |     |                 router.addFunctionAndImplementation.selector,
 395 |     |                 lens.getAmount0ForLiquidity_Foil.selector,
 396 |     |                 address(lens)
 397 |     |             )
 398 |     |         );
 399 |     |         assert(success);
 400 |     |         (success, ) = foil.call(
 401 |     |             abi.encodeWithSelector(
 402 |     |                 router.addFunctionAndImplementation.selector,
 403 |     |                 lens.getCurrentEpochSqrtPriceX96MaxMin.selector,
 404 |     |                 address(lens)
 405 |     |             )
 406 |     |         );
 407 |     |         assert(success);
 408 |     |         (success, ) = foil.call(
 409 |     |             abi.encodeWithSelector(
 410 |     |                 router.addFunctionAndImplementation.selector,
 411 |     |                 lens.getPositionOwner.selector,
 412 |     |                 address(lens)
 413 |     |             )
 414 |     |         );
 415 |     |         assert(success);
 416 |     |         (success, ) = foil.call(
 417 |     |             abi.encodeWithSelector(
 418 |     |                 router.addFunctionAndImplementation.selector,
 419 |     |                 lens.getSettlementPrice.selector,
 420 |     |                 address(lens)
 421 |     |             )
 422 |     |         );
 423 |     |         assert(success);
 424 |     |     }
 425 |     | 
 426 |     |     function deployUniswapV3() internal {
 427 |     |         deployUniV3();
 428 |     |         deployPositionManager();
 429 |     |     }
 430 |     | 
 431 |     |     function deployUniV3() internal {
 432 |     |         _uniV3Factory = new UniswapV3Factory();
 433 |     |         _v3SwapRouter = new SwapRouter(address(_uniV3Factory), address(weth));
 434 |     |     }
 435 |     | 
 436 |     |     function deployPositionManager() internal {
 437 |     |         _positionManager = new NonfungiblePositionManager(
 438 |     |             address(_uniV3Factory),
 439 |     |             address(weth)
 440 |     |         );
 441 |     |     }
 442 |     |     function deployUniQuoter() internal {
 443 |     |         _quoter = new Quoter(address(_uniV3Factory), address(weth));
 444 |     |     }
 445 |     | 
 446 |     |     function setupActors() internal {
 447 |     |         for (uint8 i = 0; i < USERS.length; i++) {
 448 |     |             address user = USERS[i];
 449 |     |             (bool success, ) = address(user).call{value: INITIAL_BALANCE}("");
 450 |     |             assert(success);
 451 |     | 
 452 |     |             vm.prank(user);
 453 |     |             weth.deposit{value: INITIAL_BALANCE / 2}();
 454 |     | 
 455 |     |             vm.prank(user);
 456 |     |             usdc.approve(address(uma), type(uint256).max);
 457 |     | 
 458 |     |             vm.prank(user);
 459 |     |             usdc.approve(address(foil), type(uint256).max);
 460 |     | 
 461 |     |             vm.prank(user);
 462 |     |             weth.approve(address(foil), type(uint256).max);
 463 |     | 
 464 |     |             usdc.mint(user, 1_000_000_000_000e6);
 465 |     | 
 466 |     |             wstETH.mint(user, INITIAL_BALANCE);
 467 |     |             vm.prank(user);
 468 |     |             wstETH.approve(address(foil), type(uint256).max);
 469 |     |         }
 470 |     |         usdc.mint(address(this), 1_000_000e6);
 471 |     |     }
 472 |     | }
 473 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/Proxy.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | import {UUPSProxyWithOwner} from "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol";
  5 |     | 
  6 |     | /**
  7 |     |  * Synthetix V3 Proxy contract
  8 |     |  *
  9 |     |  *
 10 |     |  */
 11 | *   | contract Proxy is UUPSProxyWithOwner {
 12 |     |     // solhint-disable-next-line no-empty-blocks
 13 |     |     constructor(
 14 |     |         address firstImplementation,
 15 |     |         address initialOwner
 16 |     |     ) UUPSProxyWithOwner(firstImplementation, initialOwner) {}
 17 |     | }
 18 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/BeforeAfter.sol
   1 |     | // SPDX-License-Identifier: GPL-3.0
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import "../util/FunctionCalls.sol";
   5 |     | import "../FuzzSetup.sol";
   6 |     | 
   7 |     | import "foilInterfaces/IFoilStructs.sol";
   8 |     | import "foilIStorage/Position.sol";
   9 |     | import "foilILibs/Quote.sol";
  10 |     | import {console2} from "forge-std/Test.sol";
  11 |     | import {FoilUniswapCoverage} from "./FoilUniswapCoverage.sol";
  12 |     | 
  13 |     | /* solhint-disable numcast/safe-cast */
  14 |     | abstract contract BeforeAfter is FoilUniswapCoverage {
  15 |     |     using Position for Position.Data;
  16 |     | 
  17 |     |     mapping(uint8 => State) states;
  18 |     | 
  19 |     |     struct State {
  20 |     |         // account => actorStates
  21 |     |         mapping(uint => ActorStates) actorStates;
  22 |     |         mapping(uint => PositionDataExpanded) tradePositions;
  23 |     |         mapping(uint => PositionDataExpanded) liquidityPositions;
  24 |     |         uint32 secondsInsideLower;
  25 |     |         uint32 secondsInsideUpper;
  26 |     |         uint sumVEth;
  27 |     |         uint sumVGas;
  28 |     |         uint sumVEthMax;
  29 |     |         uint sumVGasMax;
  30 |     |         uint totalBorrowedVGas;
  31 |     |         uint totalHeldVGas;
  32 |     |     }
  33 |     | 
  34 |     |     struct ActorStates {
  35 |     |         uint variable;
  36 |     |     }
  37 |     | 
  38 |     |     struct BeforeAfterCache {
  39 |     |         uint amount0;
  40 |     |         uint amount1;
  41 |     |         uint160 sqrtPriceX96;
  42 |     |         uint epochId;
  43 |     |         address pool;
  44 |     |         uint[] liquidityPositions;
  45 |     |         Position.Data positionData;
  46 |     |         uint128 tokensOwed0;
  47 |     |         uint128 tokensOwed1;
  48 |     |         uint borrowedVGas;
  49 |     |         uint borrowedVEth;
  50 |     |         uint debt;
  51 |     |         uint collateral;
  52 |     |         uint valueOfLp;
  53 |     |     }
  54 |     |     struct PositionDataExpanded {
  55 |     |         Position.Data positionData;
  56 |     |         uint debt;
  57 |     |         uint collateral;
  58 |     |         uint valueOfLp;
  59 |     |     }
  60 | *   |     function _before(address[] memory actors) internal {
  61 | *   |         _setStates(0, actors);
  62 |     |     }
  63 |     | 
  64 | *   |     function _after(address[] memory actors) internal {
  65 | *   |         _setStates(1, actors);
  66 |     |     }
  67 |     | 
  68 | *   |     function _setStates(uint8 callNum, address[] memory actors) internal {
  69 | *   |         checkDebtAndCollateralTrade(callNum);
  70 | *   |         checkDebtAndCollateralLiquidity(callNum);
  71 | *   |         checkLiquidityRange(callNum);
  72 | *   |         checkVTokensSum(callNum);
  73 |     | 
  74 | *   |         for (uint256 i = 0; i < USERS.length; i++) {
  75 | *   |             _setActorState(callNum, USERS[i]);
  76 |     |         }
  77 |     |     }
  78 |     | 
  79 |     |     function _setActorState(uint8 callNum, address actor) internal {}
  80 |     | 
  81 | *   |     function checkDebtAndCollateralTrade(uint8 callNum) internal {
  82 | *   |         (bool success, bytes memory returnData) = _getLatestEpochCall();
  83 | *   |         if (success) {
  84 |     |             (uint epochId, , , address pool, , , , , , , ) = abi.decode(
  85 |     |                 returnData,
  86 |     |                 (
  87 |     |                     uint256,
  88 |     |                     uint256,
  89 |     |                     uint256,
  90 |     |                     address,
  91 |     |                     address,
  92 |     |                     address,
  93 |     |                     uint256,
  94 |     |                     uint256,
  95 |     |                     bool,
  96 |     |                     uint256,
  97 |     |                     IFoilStructs.EpochParams
  98 |     |                 )
  99 |     |             );
 100 |     |             (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3Pool(pool).slot0();
 101 |     | 
 102 |     |             (, uint[] memory tradePositions) = getAllPositionsIdsOfAllUsers(
 103 |     |                 epochId
 104 |     |             );
 105 |     | 
 106 |     |             for (uint i = 0; i < tradePositions.length; i++) {
 107 |     |                 (success, returnData) = _getPositionCall(tradePositions[i]);
 108 |     | 
 109 |     |                 if (success) {
 110 |     |                     states[callNum]
 111 |     |                         .tradePositions[tradePositions[i]]
 112 |     |                         .positionData = abi.decode(returnData, (Position.Data));
 113 |     | 
 114 |     |                     _getPositionCoverage(
 115 |     |                         states[callNum]
 116 |     |                             .tradePositions[tradePositions[i]]
 117 |     |                             .positionData
 118 |     |                     );
 119 |     | 
 120 |     |                     Position.Data memory pos = states[callNum]
 121 |     |                         .tradePositions[tradePositions[i]]
 122 |     |                         .positionData;
 123 |     | 
 124 |     |                     uint256 activePrice;
 125 |     | 
 126 |     |                     if (pos.isSettled) {
 127 |     |                         (success, returnData) = _getSettlementPriceCall(
 128 |     |                             epochId
 129 |     |                         );
 130 |     |                         activePrice = abi.decode(returnData, (uint));
 131 |     |                     } else {
 132 |     |                         activePrice = sqrtPriceX96;
 133 |     |                     }
 134 |     | 
 135 |     |                     states[callNum].tradePositions[tradePositions[i]].debt =
 136 |     |                         pos.borrowedVEth +
 137 |     |                         (
 138 |     |                             pos.isSettled
 139 |     |                                 ? quoteEthToGasDecimal(
 140 |     |                                     pos.borrowedVGas,
 141 |     |                                     activePrice
 142 |     |                                 )
 143 |     |                                 : Quote.quoteGasToEth(
 144 |     |                                     pos.borrowedVGas,
 145 |     |                                     uint160(activePrice)
 146 |     |                                 )
 147 |     |                         );
 148 |     | 
 149 |     |                     states[callNum]
 150 |     |                         .tradePositions[tradePositions[i]]
 151 |     |                         .collateral =
 152 |     |                         pos.depositedCollateralAmount +
 153 |     |                         pos.vEthAmount +
 154 |     |                         (
 155 |     |                             pos.isSettled
 156 |     |                                 ? quoteEthToGasDecimal(
 157 |     |                                     pos.vGasAmount,
 158 |     |                                     activePrice
 159 |     |                                 )
 160 |     |                                 : Quote.quoteGasToEth(
 161 |     |                                     pos.vGasAmount,
 162 |     |                                     uint160(activePrice)
 163 |     |                                 )
 164 |     |                         );
 165 |     |                 } //NOTE: invariants should check position id != 0
 166 |     |             }
 167 |     |         }
 168 |     |     }
 169 |     | 
 170 | *   |     function checkDebtAndCollateralLiquidity(uint8 callNum) internal {
 171 | *   |         states[callNum].totalBorrowedVGas = 0;
 172 | *   |         states[callNum].totalHeldVGas = 0;
 173 |     | 
 174 | *   |         BeforeAfterCache memory cache;
 175 |     | 
 176 | *   |         (bool success, bytes memory returnData) = _getLatestEpochCall();
 177 | *   |         if (!success) return;
 178 |     | 
 179 |     |         // Decode epoch data
 180 |     |         (cache.epochId, , , cache.pool, , , , , , , ) = abi.decode(
 181 |     |             returnData,
 182 |     |             (
 183 |     |                 uint256,
 184 |     |                 uint256,
 185 |     |                 uint256,
 186 |     |                 address,
 187 |     |                 address,
 188 |     |                 address,
 189 |     |                 uint256,
 190 |     |                 uint256,
 191 |     |                 bool,
 192 |     |                 uint256,
 193 |     |                 IFoilStructs.EpochParams
 194 |     |             )
 195 |     |         );
 196 |     | 
 197 |     |         // Get sqrtPriceX96
 198 |     |         (cache.sqrtPriceX96, , , , , , ) = IUniswapV3Pool(cache.pool).slot0();
 199 |     | 
 200 |     |         // Get all positions
 201 |     |         (cache.liquidityPositions, ) = getAllPositionsIdsOfAllUsers(
 202 |     |             cache.epochId
 203 |     |         );
 204 |     | 
 205 |     |         for (uint i = 0; i < cache.liquidityPositions.length; i++) {
 206 |     |             (success, returnData) = _getPositionCall(
 207 |     |                 cache.liquidityPositions[i]
 208 |     |             );
 209 |     |             if (!success) continue;
 210 |     | 
 211 |     |             cache.positionData = abi.decode(returnData, (Position.Data));
 212 |     |             states[callNum]
 213 |     |                 .liquidityPositions[cache.liquidityPositions[i]]
 214 |     |                 .positionData = cache.positionData;
 215 |     |             _getPositionCoverage(
 216 |     |                 states[callNum]
 217 |     |                     .liquidityPositions[cache.liquidityPositions[i]]
 218 |     |                     .positionData
 219 |     |             );
 220 |     | 
 221 |     |             if (cache.positionData.uniswapPositionId == 0) continue;
 222 |     | 
 223 |     |             // Get tokens owed
 224 |     |             (
 225 |     |                 ,
 226 |     |                 ,
 227 |     |                 ,
 228 |     |                 ,
 229 |     |                 ,
 230 |     |                 ,
 231 |     |                 ,
 232 |     |                 ,
 233 |     |                 ,
 234 |     |                 ,
 235 |     |                 cache.tokensOwed0,
 236 |     |                 cache.tokensOwed1
 237 |     |             ) = _positionManager.positions(
 238 |     |                 cache.positionData.uniswapPositionId
 239 |     |             );
 240 |     | 
 241 |     |             // Calculate borrowed amounts
 242 |     |             cache.borrowedVGas = cache.positionData.borrowedVGas >
 243 |     |                 uint(cache.tokensOwed0)
 244 |     |                 ? cache.positionData.borrowedVGas - uint(cache.tokensOwed0)
 245 |     |                 : 0;
 246 |     | 
 247 |     |             cache.borrowedVEth = cache.positionData.borrowedVEth >
 248 |     |                 uint(cache.tokensOwed1)
 249 |     |                 ? cache.positionData.borrowedVEth - uint(cache.tokensOwed1)
 250 |     |                 : 0;
 251 |     | 
 252 |     |             // Calculate debt and collateral
 253 |     |             cache.debt =
 254 |     |                 cache.borrowedVEth +
 255 |     |                 Quote.quoteGasToEth(cache.borrowedVGas, cache.sqrtPriceX96);
 256 |     |             cache.collateral =
 257 |     |                 cache.positionData.depositedCollateralAmount +
 258 |     |                 cache.positionData.vEthAmount +
 259 |     |                 Quote.quoteGasToEth(
 260 |     |                     cache.positionData.vGasAmount,
 261 |     |                     cache.sqrtPriceX96
 262 |     |                 ) +
 263 |     |                 cache.tokensOwed1 +
 264 |     |                 Quote.quoteGasToEth(cache.tokensOwed0, cache.sqrtPriceX96);
 265 |     | 
 266 |     |             // Store debt and collateral
 267 |     |             states[callNum]
 268 |     |                 .liquidityPositions[cache.liquidityPositions[i]]
 269 |     |                 .debt = cache.debt;
 270 |     |             states[callNum]
 271 |     |                 .liquidityPositions[cache.liquidityPositions[i]]
 272 |     |                 .collateral = cache.collateral;
 273 |     | 
 274 |     |             // Get position liquidity
 275 |     |             (success, returnData) = _getPositionLiquidityCall(
 276 |     |                 cache.positionData.id
 277 |     |             );
 278 |     |             if (!success) continue;
 279 |     | 
 280 |     |             (cache.amount0, cache.amount1, , , ) = abi.decode(
 281 |     |                 returnData,
 282 |     |                 (uint256, uint256, int24, int24, uint128)
 283 |     |             );
 284 |     | 
 285 |     |             cache.valueOfLp =
 286 |     |                 cache.amount1 +
 287 |     |                 Quote.quoteGasToEth(cache.amount0, cache.sqrtPriceX96);
 288 |     |             states[callNum]
 289 |     |                 .liquidityPositions[cache.liquidityPositions[i]]
 290 |     |                 .valueOfLp = cache.valueOfLp;
 291 |     | 
 292 |     |             states[callNum].totalBorrowedVGas += cache
 293 |     |                 .positionData
 294 |     |                 .borrowedVGas;
 295 |     |             states[callNum].totalHeldVGas += cache.positionData.vGasAmount;
 296 |     |         }
 297 |     |     }
 298 |     | 
 299 | *   |     function checkLiquidityRange(uint8 callNum) internal {
 300 | *   |         states[callNum].secondsInsideLower = 0;
 301 | *   |         states[callNum].secondsInsideUpper = 0;
 302 |     | 
 303 | *   |         (bool success, bytes memory returnData) = _getLatestEpochCall();
 304 | *   |         if (success) {
 305 |     |             //epoch should be created
 306 |     |             (uint epochId, , , address pool, , , , , , , ) = abi.decode(
 307 |     |                 returnData,
 308 |     |                 (
 309 |     |                     uint256,
 310 |     |                     uint256,
 311 |     |                     uint256,
 312 |     |                     address,
 313 |     |                     address,
 314 |     |                     address,
 315 |     |                     uint256,
 316 |     |                     uint256,
 317 |     |                     bool,
 318 |     |                     uint256,
 319 |     |                     IFoilStructs.EpochParams
 320 |     |                 )
 321 |     |             );
 322 |     |             (bool success, bytes memory returnData) = _getCurrentEpochTicksCall(
 323 |     |                 epochId
 324 |     |             );
 325 |     |             assert(success);
 326 |     |             (int24 minEpochTick, int24 maxEpochTick) = abi.decode(
 327 |     |                 returnData,
 328 |     |                 (int24, int24)
 329 |     |             );
 330 |     |             if (CURRENT_MAX_TICK - CURRENT_MIN_TICK > 200) {
 331 |     |                 if (minEpochTick == CURRENT_MIN_TICK) {
 332 |     |                     states[callNum].secondsInsideLower = 0;
 333 |     |                 } else {
 334 |     |                     (, , states[callNum].secondsInsideLower) = IUniswapV3Pool(
 335 |     |                         pool
 336 |     |                     ).snapshotCumulativesInside(CURRENT_MIN_TICK, minEpochTick);
 337 |     |                 }
 338 |     |                 if (maxEpochTick == CURRENT_MAX_TICK) {
 339 |     |                     states[callNum].secondsInsideUpper = 0;
 340 |     |                 } else {
 341 |     |                     (, , states[callNum].secondsInsideUpper) = IUniswapV3Pool(
 342 |     |                         pool
 343 |     |                     ).snapshotCumulativesInside(maxEpochTick, CURRENT_MAX_TICK);
 344 |     |                 }
 345 |     |             }
 346 |     |         }
 347 | *   |         _getLiquidityRangeCoverage();
 348 |     |     }
 349 |     | 
 350 | *   |     function checkVTokensSum(uint8 callNum) internal {
 351 | *   |         BeforeAfterCache memory cache;
 352 | *   |         states[callNum].sumVEthMax = 0;
 353 | *   |         states[callNum].sumVGasMax = 0;
 354 | *   |         (bool success, bytes memory returnData) = _getLatestEpochCall();
 355 | *   |         if (success) {
 356 |     |             // Decode epoch data
 357 |     |             (cache.epochId, , , cache.pool, , , , , , , ) = abi.decode(
 358 |     |                 returnData,
 359 |     |                 (
 360 |     |                     uint256,
 361 |     |                     uint256,
 362 |     |                     uint256,
 363 |     |                     address,
 364 |     |                     address,
 365 |     |                     address,
 366 |     |                     uint256,
 367 |     |                     uint256,
 368 |     |                     bool,
 369 |     |                     uint256,
 370 |     |                     IFoilStructs.EpochParams
 371 |     |                 )
 372 |     |             );
 373 |     |             // Get sqrtPriceX96
 374 |     |             address vETH = IUniswapV3Pool(cache.pool).token0();
 375 |     |             address vGas = IUniswapV3Pool(cache.pool).token1();
 376 |     | 
 377 |     |             unchecked {
 378 |     |                 ///NOTE: overflow is desirable since we are checking exact number type(uint256).max
 379 |     |                 states[callNum].sumVEth =
 380 |     |                     IERC20(vETH).balanceOf(address(foil)) +
 381 |     |                     IERC20(vETH).balanceOf(address(_positionManager)) +
 382 |     |                     IERC20(vETH).balanceOf(address(_v3SwapRouter)) +
 383 |     |                     IERC20(vETH).balanceOf(address(cache.pool));
 384 |     |             }
 385 |     |             unchecked {
 386 |     |                 states[callNum].sumVGas =
 387 |     |                     IERC20(vGas).balanceOf(address(foil)) +
 388 |     |                     IERC20(vGas).balanceOf(address(_positionManager)) +
 389 |     |                     IERC20(vGas).balanceOf(address(_v3SwapRouter)) +
 390 |     |                     IERC20(vGas).balanceOf(address(cache.pool));
 391 |     |             }
 392 |     |             states[callNum].sumVEthMax = type(uint256).max;
 393 |     |             states[callNum].sumVGasMax = type(uint256).max;
 394 |     |         }
 395 |     |     }
 396 |     | 
 397 |     |     //Helpers
 398 |     |     function getEpochData()
 399 |     |         internal
 400 |     |         returns (uint epochId, address pool, uint160 sqrtPriceX96)
 401 |     |     {
 402 |     |         (bool success, bytes memory returnData) = _getLatestEpochCall();
 403 |     |         require(success);
 404 |     | 
 405 |     |         (epochId, , , pool, , , , , , , ) = abi.decode(
 406 |     |             returnData,
 407 |     |             (
 408 |     |                 uint256,
 409 |     |                 uint256,
 410 |     |                 uint256,
 411 |     |                 address,
 412 |     |                 address,
 413 |     |                 address,
 414 |     |                 uint256,
 415 |     |                 uint256,
 416 |     |                 bool,
 417 |     |                 uint256,
 418 |     |                 IFoilStructs.EpochParams
 419 |     |             )
 420 |     |         );
 421 |     |         (sqrtPriceX96, , , , , , ) = IUniswapV3Pool(pool).slot0();
 422 |     |     }
 423 |     | 
 424 |     |     function getAllPositionsIdsOfAllUsers(
 425 |     |         uint currentEpoch
 426 |     |     )
 427 |     |         internal
 428 |     |         view
 429 |     |         returns (uint[] memory liquidityPositions, uint[] memory tradePositions)
 430 |     |     {
 431 |     |         uint[] memory allLiquidityPositions;
 432 |     |         uint[] memory allTradePositions;
 433 |     | 
 434 |     |         for (uint i = 0; i < USERS.length; i++) {
 435 |     |             address user = USERS[i];
 436 |     | 
 437 |     |             uint[] storage userLiquidity = userLiquidityPositions[currentEpoch][
 438 |     |                 user
 439 |     |             ];
 440 |     |             allLiquidityPositions = concatArrays(
 441 |     |                 allLiquidityPositions,
 442 |     |                 userLiquidity
 443 |     |             );
 444 |     | 
 445 |     |             uint[] storage userTrade = userTradePositions[currentEpoch][user];
 446 |     |             allTradePositions = concatArrays(allTradePositions, userTrade);
 447 |     |         }
 448 |     | 
 449 |     |         return (allLiquidityPositions, allTradePositions);
 450 |     |     }
 451 |     | 
 452 |     |     function concatArrays(
 453 |     |         uint[] memory arr1,
 454 |     |         uint[] memory arr2
 455 |     |     ) internal pure returns (uint[] memory) {
 456 |     |         uint[] memory result = new uint[](arr1.length + arr2.length);
 457 |     |         uint i;
 458 |     |         for (i = 0; i < arr1.length; i++) {
 459 |     |             result[i] = arr1[i];
 460 |     |         }
 461 |     |         for (uint j = 0; j < arr2.length; j++) {
 462 |     |             result[i + j] = arr2[j];
 463 |     |         }
 464 |     |         return result;
 465 |     |     }
 466 |     | 
 467 | *   |     function getLatestEpoch() internal returns (uint epochId) {
 468 | *   |         (bool success, bytes memory returnData) = _getLatestEpochCall();
 469 | *r  |         require(success);
 470 |     | 
 471 |     |         (epochId, , , , , , , , , , ) = abi.decode(
 472 |     |             returnData,
 473 |     |             (
 474 |     |                 uint256,
 475 |     |                 uint256,
 476 |     |                 uint256,
 477 |     |                 address,
 478 |     |                 address,
 479 |     |                 address,
 480 |     |                 uint256,
 481 |     |                 uint256,
 482 |     |                 bool,
 483 |     |                 uint256,
 484 |     |                 IFoilStructs.EpochParams
 485 |     |             )
 486 |     |         );
 487 |     |     }
 488 |     | 
 489 |     |     function quoteEthToGasDecimal(
 490 |     |         uint256 ethAmount,
 491 |     |         uint256 decimalPrice
 492 |     |     ) internal pure returns (uint256) {
 493 |     |         return FullMath.mulDiv(ethAmount, 1e18, decimalPrice);
 494 |     |     }
 495 |     | }
 496 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/FoilUniswapCoverage.sol
   1 |     | // SPDX-License-Identifier: GPL-3.0
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import "@perimetersec/fuzzlib/src/FuzzBase.sol";
   5 |     | import "../FuzzSetup.sol";
   6 |     | import "../util/FunctionCalls.sol";
   7 |     | import "../../../src/contracts/storage/Position.sol";
   8 |     | 
   9 |     | contract FoilUniswapCoverage is FuzzBase, FuzzSetup, FunctionCalls {
  10 |     |     using Position for Position.Data;
  11 |     | 
  12 |     |     function _getPositionCoverage(Position.Data memory position) internal {
  13 |     |         // ID coverage
  14 |     |         if (position.id == 0) {
  15 |     |             fl.log("Position ID is zero");
  16 |     |         } else if (position.id <= 10) {
  17 |     |             fl.log("Position ID is between 1 and 10");
  18 |     |         } else {
  19 |     |             fl.log("Position ID is greater than 1000");
  20 |     |         }
  21 |     | 
  22 |     |         // Kind coverage
  23 |     |         if (position.kind == IFoilStructs.PositionKind.Trade) {
  24 |     |             fl.log("Position is a Trade position");
  25 |     |         } else if (position.kind == IFoilStructs.PositionKind.Liquidity) {
  26 |     |             fl.log("Position is a Liquidity position");
  27 |     |         } else {
  28 |     |             fl.log("Unknown position kind");
  29 |     |         }
  30 |     | 
  31 |     |         // Epoch ID coverage
  32 |     |         if (position.epochId == 0) {
  33 |     |             fl.log("Position is not associated with any epoch");
  34 |     |         } else {
  35 |     |             fl.log("Position is associated with an epoch");
  36 |     |         }
  37 |     | 
  38 |     |         // Deposited collateral coverage
  39 |     |         if (position.depositedCollateralAmount == 0) {
  40 |     |             fl.log("No collateral deposited");
  41 |     |         } else if (position.depositedCollateralAmount <= 1e18) {
  42 |     |             fl.log("Collateral deposited is 1 or less");
  43 |     |         } else if (position.depositedCollateralAmount <= 10e18) {
  44 |     |             fl.log("Collateral deposited is between 1 and 10");
  45 |     |         } else if (position.depositedCollateralAmount <= 100e18) {
  46 |     |             fl.log("Collateral deposited is between 10 and 100");
  47 |     |         } else {
  48 |     |             fl.log("Collateral deposited is more than 100");
  49 |     |         }
  50 |     | 
  51 |     |         // Borrowed vETH coverage
  52 |     |         if (position.borrowedVEth == 0) {
  53 |     |             fl.log("No vETH borrowed");
  54 |     |         } else if (position.borrowedVEth <= 1e18) {
  55 |     |             fl.log("Borrowed vETH is 1 or less");
  56 |     |         } else if (position.borrowedVEth <= 10e18) {
  57 |     |             fl.log("Borrowed vETH is between 1 and 10");
  58 |     |         } else {
  59 |     |             fl.log("Borrowed vETH is more than 10");
  60 |     |         }
  61 |     | 
  62 |     |         // Borrowed vGas coverage
  63 |     |         if (position.borrowedVGas == 0) {
  64 |     |             fl.log("No vGas borrowed");
  65 |     |         } else if (position.borrowedVGas <= 1e18) {
  66 |     |             fl.log("Borrowed vGas is 1 or less");
  67 |     |         } else if (position.borrowedVGas <= 10e18) {
  68 |     |             fl.log("Borrowed vGas is between 1 and 10");
  69 |     |         } else {
  70 |     |             fl.log("Borrowed vGas is more than 10");
  71 |     |         }
  72 |     | 
  73 |     |         // vETH amount coverage
  74 |     |         if (position.vEthAmount == 0) {
  75 |     |             fl.log("No vETH owned");
  76 |     |         } else if (position.vEthAmount <= 1e18) {
  77 |     |             fl.log("Owned vETH is 1 or less");
  78 |     |         } else if (position.vEthAmount <= 10e18) {
  79 |     |             fl.log("Owned vETH is between 1 and 10");
  80 |     |         } else {
  81 |     |             fl.log("Owned vETH is more than 10");
  82 |     |         }
  83 |     | 
  84 |     |         // vGas amount coverage
  85 |     |         if (position.vGasAmount == 0) {
  86 |     |             fl.log("No vGas owned");
  87 |     |         } else if (position.vGasAmount <= 1e18) {
  88 |     |             fl.log("Owned vGas is 1 or less");
  89 |     |         } else if (position.vGasAmount <= 10e18) {
  90 |     |             fl.log("Owned vGas is between 1 and 10");
  91 |     |         } else {
  92 |     |             fl.log("Owned vGas is more than 10");
  93 |     |         }
  94 |     | 
  95 |     |         // Uniswap position ID coverage
  96 |     |         if (position.uniswapPositionId == 0) {
  97 |     |             fl.log("No associated Uniswap position");
  98 |     |         } else {
  99 |     |             fl.log("Has associated Uniswap position");
 100 |     |         }
 101 |     | 
 102 |     |         // Settlement status coverage
 103 |     |         if (position.isSettled) {
 104 |     |             fl.log("Position is settled");
 105 |     |         } else {
 106 |     |             fl.log("Position is not settled");
 107 |     |         }
 108 |     | 
 109 |     |         // Additional complex scenarios
 110 |     |         if (position.borrowedVEth > 0 && position.borrowedVGas > 0) {
 111 |     |             fl.log("Position has borrowed both vETH and vGas");
 112 |     |         }
 113 |     | 
 114 |     |         if (position.vEthAmount > 0 && position.vGasAmount > 0) {
 115 |     |             fl.log("Position owns both vETH and vGas");
 116 |     |         }
 117 |     | 
 118 |     |         if (position.borrowedVEth > position.vEthAmount) {
 119 |     |             fl.log("Borrowed vETH exceeds owned vETH");
 120 |     |         }
 121 |     | 
 122 |     |         if (position.borrowedVGas > position.vGasAmount) {
 123 |     |             fl.log("Borrowed vGas exceeds owned vGas");
 124 |     |         }
 125 |     | 
 126 |     |         if (
 127 |     |             position.isSettled &&
 128 |     |             (position.borrowedVEth > 0 || position.borrowedVGas > 0)
 129 |     |         ) {
 130 |     |             fl.log("Position is settled but still has borrowed tokens");
 131 |     |         }
 132 |     |     }
 133 |     | 
 134 | *   |     function _getLiquidityRangeCoverage() internal {
 135 | *   |         (bool success, bytes memory returnData) = _getLatestEpochCall();
 136 | *   |         if (success) {
 137 |     |             (uint256 epochId, , , address pool, , , , , , , ) = abi.decode(
 138 |     |                 returnData,
 139 |     |                 (
 140 |     |                     uint256,
 141 |     |                     uint256,
 142 |     |                     uint256,
 143 |     |                     address,
 144 |     |                     address,
 145 |     |                     address,
 146 |     |                     uint256,
 147 |     |                     uint256,
 148 |     |                     bool,
 149 |     |                     uint256,
 150 |     |                     IFoilStructs.EpochParams
 151 |     |                 )
 152 |     |             );
 153 |     | 
 154 |     |             (success, returnData) = _getCurrentEpochTicksCall(epochId);
 155 |     |             if (success) {
 156 |     |                 (int24 minEpochTick, int24 maxEpochTick) = abi.decode(
 157 |     |                     returnData,
 158 |     |                     (int24, int24)
 159 |     |                 );
 160 |     | 
 161 |     |                 if (
 162 |     |                     minEpochTick >= CURRENT_MIN_TICK &&
 163 |     |                     maxEpochTick <= CURRENT_MAX_TICK
 164 |     |                 ) {
 165 |     |                     fl.log("Epoch range is within current range");
 166 |     |                 } else if (
 167 |     |                     minEpochTick < CURRENT_MIN_TICK &&
 168 |     |                     maxEpochTick > CURRENT_MAX_TICK
 169 |     |                 ) {
 170 |     |                     fl.log("Epoch range exceeds current range on both sides");
 171 |     |                 } else if (minEpochTick < CURRENT_MIN_TICK) {
 172 |     |                     fl.log(
 173 |     |                         "Epoch range exceeds current range on the lower side"
 174 |     |                     );
 175 |     |                 } else if (maxEpochTick > CURRENT_MAX_TICK) {
 176 |     |                     fl.log(
 177 |     |                         "Epoch range exceeds current range on the upper side"
 178 |     |                     );
 179 |     |                 }
 180 |     | 
 181 |     |                 // Check the size of the current range
 182 |     |                 int24 currentRangeSize = CURRENT_MAX_TICK - CURRENT_MIN_TICK;
 183 |     |                 if (currentRangeSize <= 200) {
 184 |     |                     fl.log("Current range is very narrow (<=200 ticks)");
 185 |     |                 } else if (currentRangeSize <= 1000) {
 186 |     |                     fl.log("Current range is narrow (201-1000 ticks)");
 187 |     |                 } else if (currentRangeSize <= 10000) {
 188 |     |                     fl.log("Current range is medium (1001-10000 ticks)");
 189 |     |                 } else {
 190 |     |                     fl.log("Current range is wide (>10000 ticks)");
 191 |     |                 }
 192 |     | 
 193 |     |                 //Should not be covered
 194 |     |                 if (minEpochTick == maxEpochTick) {
 195 |     |                     fl.log("Epoch has zero width");
 196 |     |                 }
 197 |     |                 if (minEpochTick > maxEpochTick) {
 198 |     |                     fl.log(
 199 |     |                         "Invalid epoch range: min tick greater than max tick"
 200 |     |                     );
 201 |     |                 }
 202 |     |             }
 203 |     |         }
 204 |     |     }
 205 |     | }
 206 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/FuzzStorageVariables.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | 
  3 |     | pragma solidity ^0.8.20;
  4 |     | 
  5 |     | import "forge-std/Test.sol";
  6 |     | import "../util/FuzzConstants.sol";
  7 |     | 
  8 |     | import {MockRouter} from "../mocks/MockRouter.sol";
  9 |     | import {Proxy} from "../Proxy.sol";
 10 |     | 
 11 |     | import {ConfigurationModule as EpochConfigurationModule} from "../../../src/contracts/modules/ConfigurationModule.sol";
 12 |     | import {ERC165Module as EpochERC165Module} from "../../../src/contracts/modules/ERC165Module.sol";
 13 |     | import {LiquidityModule as EpochLiquidityModule} from "../../../src/contracts/modules/LiquidityModule.sol";
 14 |     | import {NftModule as EpochNftModule} from "../../../src/contracts/modules/NftModule.sol";
 15 |     | import {TradeModule as EpochTradeModule} from "../../../src/contracts/modules/TradeModule.sol";
 16 |     | import {UMASettlementModule as EpochUMASettlementModule} from "../../../src/contracts/modules/UMASettlementModule.sol";
 17 |     | import {SettlementModule as EpochSettlementModule} from "../../../src/contracts/modules/SettlementModule.sol";
 18 |     | import {ViewsModule as EpochViewsModule} from "../../../src/contracts/modules/ViewsModule.sol";
 19 |     | 
 20 |     | import {UniswapV3Factory} from "../../../uniswapv3/v3-core/UniswapV3Factory.sol";
 21 |     | import {UniswapV3Pool} from "../../../uniswapv3/v3-core/UniswapV3Pool.sol";
 22 |     | import {SwapRouter} from "../../../uniswapv3/v3-periphery/SwapRouter.sol";
 23 |     | import {NonfungiblePositionManager} from "../../../uniswapv3/v3-periphery/NonfungiblePositionManager.sol";
 24 |     | import {Quoter} from "../../../uniswapv3/v3-periphery/lens/Quoter.sol";
 25 |     | import {WETH9 as WETH} from "../mocks/WETH.sol";
 26 |     | 
 27 |     | import {MockUMA} from "../mocks/MockUMA.sol";
 28 |     | import {MockERC20} from "../mocks/MockERC20.sol";
 29 |     | import {MockLensModule} from "../mocks/MockLensModule.sol";
 30 |     | 
 31 |     | contract FuzzStorageVariables is FuzzConstants, Test {
 32 |     |     //foundry mode
 33 |     |     bool REPRO_MODE = true;
 34 |     | 
 35 |     |     //Foil vars
 36 |     |     int24 CURRENT_MAX_TICK;
 37 |     |     int24 CURRENT_MIN_TICK;
 38 |     | 
 39 |     |     mapping(uint => mapping(address => uint[])) internal userLiquidityPositions; // epochId => user => positions
 40 |     |     mapping(uint => mapping(address => uint[])) internal userTradePositions; // epochId => user => positions
 41 |     | 
 42 |     |     mapping(uint => bytes32[]) internal userAssertions;
 43 |     | 
 44 |     |     // Echidna settings
 45 |     |     address internal currentActor;
 46 |     |     bool internal _setActor = true;
 47 |     | 
 48 |     |     UniswapV3Factory internal _uniV3Factory;
 49 |     |     UniswapV3Pool internal _uniV3Pool;
 50 |     |     SwapRouter internal _v3SwapRouter;
 51 |     |     NonfungiblePositionManager internal _positionManager;
 52 |     |     Quoter internal _quoter;
 53 |     | 
 54 |     |     MockRouter internal router;
 55 |     |     address internal foil;
 56 |     | 
 57 |     |     WETH internal weth;
 58 |     |     MockERC20 internal usdc;
 59 |     |     MockERC20 internal wstETH;
 60 |     | 
 61 |     |     EpochConfigurationModule internal epochConfigurationModuleImpl;
 62 |     |     EpochERC165Module internal epochERC165ModuleImpl;
 63 |     |     EpochLiquidityModule internal epochLiquidityModuleImpl;
 64 |     |     EpochNftModule internal epochNftModuleImpl;
 65 |     |     EpochTradeModule internal epochTradeModuleImpl;
 66 |     |     EpochUMASettlementModule internal epochUMASettlementModuleImpl;
 67 |     |     EpochSettlementModule internal epochSettlementModuleImpl;
 68 |     |     EpochViewsModule internal epochViewsModuleImpl;
 69 |     | 
 70 |     |     MockUMA internal uma;
 71 |     | 
 72 |     |     MockLensModule internal lens;
 73 |     | }
 74 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/postconditions/PostconditionsBase.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "../../properties/Properties.sol";
  5 |     | 
  6 |     | abstract contract PostconditionsBase is Properties {
  7 | *   |     function onSuccessInvariantsGeneral(
  8 |     |         bytes memory returnData,
  9 |     |         address actor
 10 |     |     ) internal {
 11 | *   |         invariant_GLOBAL_03();
 12 | *   |         invariant_GLOBAL_04();
 13 |     |     }
 14 |     | 
 15 |     |     function onFailInvariantsGeneral(bytes memory returnData) internal {}
 16 |     | }
 17 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/postconditions/PostconditionsEpochConfigurationModule.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PostconditionsBase.sol";
  5 |     | 
  6 |     | abstract contract PostconditionsEpochConfigurationModule is PostconditionsBase {
  7 |     |     function InitializeMarketPostConditions(
  8 |     |         bool success,
  9 |     |         bytes memory returnData,
 10 |     |         address[] memory actorsToUpdate
 11 |     |     ) internal {
 12 |     |         if (success) {
 13 |     |             _after(actorsToUpdate);
 14 |     | 
 15 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 16 |     |         } else {
 17 |     |             onFailInvariantsGeneral(returnData);
 18 |     |         }
 19 |     |     }
 20 |     | 
 21 |     |     function updateMarketPostConditions(
 22 |     |         bool success,
 23 |     |         bytes memory returnData,
 24 |     |         address[] memory actorsToUpdate
 25 |     |     ) internal {
 26 |     |         if (success) {
 27 |     |             _after(actorsToUpdate);
 28 |     | 
 29 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 30 |     |         } else {
 31 |     |             onFailInvariantsGeneral(returnData);
 32 |     |         }
 33 |     |     }
 34 |     | 
 35 |     |     function createEpochPostConditions(
 36 |     |         bool success,
 37 |     |         bytes memory returnData,
 38 |     |         address[] memory actorsToUpdate
 39 |     |     ) internal {
 40 |     |         if (success) {
 41 |     |             _after(actorsToUpdate);
 42 |     | 
 43 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 44 |     |         } else {
 45 |     |             onFailInvariantsGeneral(returnData);
 46 |     |         }
 47 |     |     }
 48 |     | }
 49 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/postconditions/PostconditionsEpochLiquidityModule.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PostconditionsBase.sol";
  5 |     | 
  6 |     | abstract contract PostconditionsEpochLiquidityModule is PostconditionsBase {
  7 |     |     function createLiquidityPositionPostconditions(
  8 |     |         bool success,
  9 |     |         bytes memory returnData,
 10 |     |         address[] memory actorsToUpdate
 11 |     |     ) internal {
 12 |     |         if (success) {
 13 |     |             _after(actorsToUpdate);
 14 |     |             invariant_LIQUID_01();
 15 |     |             invariant_LIQUID_02();
 16 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 17 |     |         } else {
 18 |     |             onFailInvariantsGeneral(returnData);
 19 |     |         }
 20 |     |     }
 21 |     | 
 22 |     |     function decreaseLiquidityPositionPostConditions(
 23 |     |         bool success,
 24 |     |         bytes memory returnData,
 25 |     |         address[] memory actorsToUpdate
 26 |     |     ) internal {
 27 |     |         if (success) {
 28 |     |             _after(actorsToUpdate);
 29 |     |             invariant_LIQUID_01();
 30 |     |             invariant_LIQUID_02();
 31 |     | 
 32 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 33 |     |         } else {
 34 |     |             onFailInvariantsGeneral(returnData);
 35 |     |         }
 36 |     |     }
 37 |     | 
 38 |     |     function increaseLiquidityPositionPostConditions(
 39 |     |         bool success,
 40 |     |         bytes memory returnData,
 41 |     |         address[] memory actorsToUpdate
 42 |     |     ) internal {
 43 |     |         if (success) {
 44 |     |             _after(actorsToUpdate);
 45 |     |             invariant_LIQUID_01();
 46 |     |             invariant_LIQUID_02();
 47 |     | 
 48 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 49 |     |         } else {
 50 |     |             onFailInvariantsGeneral(returnData);
 51 |     |         }
 52 |     |     }
 53 |     | 
 54 | *   |     function closeLiquidityPositionPostConditions(
 55 |     |         bool success,
 56 |     |         bytes memory returnData,
 57 |     |         address[] memory actorsToUpdate
 58 |     |     ) internal {
 59 |     |         if (success) {
 60 |     |             _after(actorsToUpdate);
 61 | *   |             invariant_LIQUID_01();
 62 |     | 
 63 | *   |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 64 |     |         } else {
 65 |     |             onFailInvariantsGeneral(returnData);
 66 |     |         }
 67 |     |     }
 68 |     | 
 69 |     |     function closeAllLiquidityPositionsPostConditions(
 70 |     |         bool success,
 71 |     |         bytes memory returnData
 72 |     |     ) internal {
 73 |     |         if (success) {
 74 |     |             address[] memory actorsToUpdate = new address[](0);
 75 |     |             _after(actorsToUpdate);
 76 |     |             invariant_LIQUID_03();
 77 |     |             onSuccessInvariantsGeneral(returnData, currentActor);
 78 |     |         } else {
 79 |     |             onFailInvariantsGeneral(returnData);
 80 |     |         }
 81 |     |     }
 82 |     | }
 83 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/postconditions/PostconditionsEpochSettlementModule.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PostconditionsBase.sol";
  5 |     | 
  6 |     | abstract contract PostconditionsEpochSettlementModule is PostconditionsBase {
  7 |     |     function settleLiquidityPositionPostConditions(
  8 |     |         bool success,
  9 |     |         bytes memory returnData,
 10 |     |         address[] memory actorsToUpdate
 11 |     |     ) internal {
 12 |     |         if (success) {
 13 |     |             _after(actorsToUpdate);
 14 |     | 
 15 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 16 |     |         } else {
 17 |     |             invariant_GLOBAL_02(returnData);
 18 |     |             onFailInvariantsGeneral(returnData);
 19 |     |         }
 20 |     |     }
 21 |     |     function settleTradePositionPostConditions(
 22 |     |         bool success,
 23 |     |         bytes memory returnData,
 24 |     |         address[] memory actorsToUpdate
 25 |     |     ) internal {
 26 |     |         if (success) {
 27 |     |             _after(actorsToUpdate);
 28 |     | 
 29 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 30 |     |         } else {
 31 |     |             invariant_GLOBAL_02(returnData);
 32 |     |             onFailInvariantsGeneral(returnData);
 33 |     |         }
 34 |     |     }
 35 |     | }
 36 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/postconditions/PostconditionsEpochTradeModule.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PostconditionsBase.sol";
  5 |     | 
  6 |     | abstract contract PostconditionsEpochTradeModule is PostconditionsBase {
  7 |     |     function createTraderPositionLongPostConditions(
  8 |     |         bool success,
  9 |     |         bytes memory returnData,
 10 |     |         address[] memory actorsToUpdate
 11 |     |     ) internal {
 12 |     |         if (success) {
 13 |     |             _after(actorsToUpdate);
 14 |     |             invariant_TRADE_01();
 15 |     |             invariant_TRADE_02();
 16 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 17 |     |         } else {
 18 |     |             onFailInvariantsGeneral(returnData);
 19 |     |         }
 20 |     |     }
 21 |     | 
 22 |     |     function createTraderPositionShortPostConditions(
 23 |     |         bool success,
 24 |     |         bytes memory returnData,
 25 |     |         address[] memory actorsToUpdate
 26 |     |     ) internal {
 27 |     |         if (success) {
 28 |     |             _after(actorsToUpdate);
 29 |     |             invariant_TRADE_01();
 30 |     |             invariant_TRADE_02();
 31 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 32 |     |         } else {
 33 |     |             onFailInvariantsGeneral(returnData);
 34 |     |         }
 35 |     |     }
 36 |     | 
 37 |     |     function modifyTraderPositionLongPostConditions(
 38 |     |         bool success,
 39 |     |         bytes memory returnData,
 40 |     |         address[] memory actorsToUpdate
 41 |     |     ) internal {
 42 |     |         if (success) {
 43 |     |             _after(actorsToUpdate);
 44 |     |             invariant_TRADE_01();
 45 |     |             invariant_TRADE_02();
 46 |     | 
 47 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 48 |     |         } else {
 49 |     |             invariant_GLOBAL_02(returnData);
 50 |     | 
 51 |     |             onFailInvariantsGeneral(returnData);
 52 |     |         }
 53 |     |     }
 54 |     | 
 55 |     |     function modifyTraderPositionShortPostConditions(
 56 |     |         bool success,
 57 |     |         bytes memory returnData,
 58 |     |         address[] memory actorsToUpdate
 59 |     |     ) internal {
 60 |     |         if (success) {
 61 |     |             _after(actorsToUpdate);
 62 |     |             invariant_TRADE_01();
 63 |     |             invariant_TRADE_02();
 64 |     | 
 65 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 66 |     |         } else {
 67 |     |             invariant_GLOBAL_02(returnData);
 68 |     | 
 69 |     |             onFailInvariantsGeneral(returnData);
 70 |     |         }
 71 |     |     }
 72 |     | 
 73 |     |     function closeTraderPositionPostConditions(
 74 |     |         bool success,
 75 |     |         bytes memory returnData,
 76 |     |         address[] memory actorsToUpdate
 77 |     |     ) internal {
 78 |     |         if (success) {
 79 |     |             _after(actorsToUpdate);
 80 |     |             invariant_TRADE_01();
 81 |     | 
 82 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 83 |     |         } else {
 84 |     |             invariant_GLOBAL_02(returnData);
 85 |     | 
 86 |     |             onFailInvariantsGeneral(returnData);
 87 |     |         }
 88 |     |     }
 89 |     | }
 90 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/postconditions/PostconditionsEpochUMASettlementModule.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PostconditionsBase.sol";
  5 |     | 
  6 |     | abstract contract PostconditionsEpochUMASettlementModule is PostconditionsBase {
  7 |     |     function submitSettlementPricePostConditions(
  8 |     |         bool success,
  9 |     |         bytes memory returnData,
 10 |     |         address[] memory actorsToUpdate
 11 |     |     ) internal {
 12 |     |         if (success) {
 13 |     |             _after(actorsToUpdate);
 14 |     | 
 15 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 16 |     |         } else {
 17 |     |             onFailInvariantsGeneral(returnData);
 18 |     |         }
 19 |     |     }
 20 |     | 
 21 | *   |     function mockDisputeAssertionPostConditions(
 22 |     |         bool success,
 23 |     |         bytes memory returnData,
 24 |     |         address[] memory actorsToUpdate
 25 |     |     ) internal {
 26 | *   |         if (success) {
 27 | *   |             _after(actorsToUpdate);
 28 |     | 
 29 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 30 |     |         } else {
 31 |     |             onFailInvariantsGeneral(returnData);
 32 |     |         }
 33 |     |     }
 34 |     |     function mockSettleAssertionPostConditions(
 35 |     |         bool success,
 36 |     |         bytes memory returnData,
 37 |     |         address[] memory actorsToUpdate
 38 |     |     ) internal {
 39 |     |         if (success) {
 40 |     |             _after(actorsToUpdate);
 41 |     | 
 42 |     |             onSuccessInvariantsGeneral(returnData, actorsToUpdate[0]);
 43 |     |         } else {
 44 |     |             onFailInvariantsGeneral(returnData);
 45 |     |         }
 46 |     |     }
 47 |     | }
 48 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/preconditions/PreconditionsBase.sol
   1 |     | // SPDX-License-Identifier: GPL-3.0
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import "../BeforeAfter.sol";
   5 |     | import "@perimetersec/fuzzlib/src/FuzzLibString.sol";
   6 |     | import {TickMath} from "../../../../src/contracts/external/univ3/TickMath.sol";
   7 |     | 
   8 |     | /* solhint-disable meta-transactions/no-msg-sender */
   9 |     | 
  10 |     | abstract contract PreconditionsBase is BeforeAfter {
  11 |     |     event Clamped(string);
  12 |     | 
  13 |     |     modifier setCurrentActor() {
  14 | *   |         if (_setActor) {
  15 | *   |             if (REPRO_MODE) {
  16 | *   |                 currentActor = USER1; //foundry repros
  17 |     |             } else {
  18 |     |                 currentActor = USERS[block.timestamp % (USERS.length)];
  19 |     |             }
  20 | *   |             vm.prank(currentActor);
  21 |     |         }
  22 |     |         _;
  23 |     |     }
  24 |     | 
  25 |     |     function getTokenAmountsForCollateralAmount(
  26 |     |         uint256 collateralAmount,
  27 |     |         int24 lowerTick,
  28 |     |         int24 upperTick
  29 |     |     )
  30 |     |         internal
  31 |     |         returns (uint256 loanAmount0, uint256 loanAmount1, uint256 liquidity)
  32 |     |     {
  33 |     |         (bool success, bytes memory returnData) = _getLatestEpochCall();
  34 |     |         require(success);
  35 |     | 
  36 |     |         (uint256 epochId, , , address pool, , , , , , , ) = abi.decode(
  37 |     |             returnData,
  38 |     |             (
  39 |     |                 uint256,
  40 |     |                 uint256,
  41 |     |                 uint256,
  42 |     |                 address,
  43 |     |                 address,
  44 |     |                 address,
  45 |     |                 uint256,
  46 |     |                 uint256,
  47 |     |                 bool,
  48 |     |                 uint256,
  49 |     |                 IFoilStructs.EpochParams
  50 |     |             )
  51 |     |         );
  52 |     |         (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3Pool(pool).slot0();
  53 |     | 
  54 |     |         uint160 sqrtPriceAX96 = uint160(TickMath.getSqrtRatioAtTick(lowerTick));
  55 |     |         uint160 sqrtPriceBX96 = uint160(TickMath.getSqrtRatioAtTick(upperTick));
  56 |     | 
  57 |     |         (success, returnData) = _getTokenAmountsCall(
  58 |     |             epochId,
  59 |     |             collateralAmount,
  60 |     |             sqrtPriceX96,
  61 |     |             sqrtPriceAX96,
  62 |     |             sqrtPriceBX96
  63 |     |         );
  64 |     | 
  65 |     |         require(success);
  66 |     | 
  67 |     |         (loanAmount0, loanAmount1, liquidity) = abi.decode(
  68 |     |             returnData,
  69 |     |             (uint256, uint256, uint256)
  70 |     |         );
  71 |     |     }
  72 |     | 
  73 |     |     //based on @fuzzlib
  74 | *   |     function clampInt24(
  75 |     |         int24 value,
  76 |     |         int24 low,
  77 |     |         int24 high,
  78 |     |         bool enableLogs
  79 |     |     ) internal returns (int24) {
  80 |     |         if (value < low || value > high) {
  81 |     |             uint24 range = uint24(uint24(high) - uint24(low) + 1);
  82 |     |             int24 clamped = int24(
  83 |     |                 uint24((uint24(value) - uint24(low)) % range)
  84 |     |             );
  85 |     |             int24 ans = int24(uint24(low) + uint24(clamped));
  86 |     |             if (enableLogs) {
  87 |     |                 string memory valueStr = FuzzLibString.toString(int256(value));
  88 |     |                 string memory ansStr = FuzzLibString.toString(int256(ans));
  89 |     |                 bytes memory message = abi.encodePacked(
  90 |     |                     "Clamping value ",
  91 |     |                     valueStr,
  92 |     |                     " to ",
  93 |     |                     ansStr
  94 |     |                 );
  95 |     |                 emit Clamped(string(message));
  96 |     |             }
  97 |     |             return ans;
  98 |     |         }
  99 |     |         return value;
 100 |     |     }
 101 |     | 
 102 |     |     function clampInt128(
 103 |     |         int128 value,
 104 |     |         int128 low,
 105 |     |         int128 high,
 106 |     |         bool enableLogs
 107 |     |     ) internal returns (int128) {
 108 |     |         if (value < low || value > high) {
 109 |     |             uint128 range = uint128(uint128(high) - uint128(low) + 1);
 110 |     |             int128 clamped = int128(
 111 |     |                 uint128((uint128(value) - uint128(low)) % range)
 112 |     |             );
 113 |     |             int128 ans = int128(uint128(low) + uint128(clamped));
 114 |     |             if (enableLogs) {
 115 |     |                 string memory valueStr = FuzzLibString.toString(int256(value));
 116 |     |                 string memory ansStr = FuzzLibString.toString(int256(ans));
 117 |     |                 bytes memory message = abi.encodePacked(
 118 |     |                     "Clamping value ",
 119 |     |                     valueStr,
 120 |     |                     " to ",
 121 |     |                     ansStr
 122 |     |                 );
 123 |     |                 emit Clamped(string(message));
 124 |     |             }
 125 |     |             return ans;
 126 |     |         }
 127 |     |         return value;
 128 |     |     }
 129 |     | 
 130 | *   |     function addPosition(
 131 |     |         uint epochId,
 132 |     |         address user,
 133 |     |         uint positionId,
 134 |     |         bool isLiquidity
 135 |     |     ) internal {
 136 | *   |         if (isLiquidity) {
 137 |     |             userLiquidityPositions[epochId][user].push(positionId);
 138 |     |         } else {
 139 |     |             userTradePositions[epochId][user].push(positionId);
 140 |     |         }
 141 |     |     }
 142 |     | 
 143 |     |     function deletePosition(
 144 |     |         uint epochId,
 145 |     |         address user,
 146 |     |         uint positionId,
 147 |     |         bool isLiquidity
 148 |     |     ) internal {
 149 |     |         uint[] storage positions = isLiquidity
 150 |     |             ? userLiquidityPositions[epochId][user]
 151 |     |             : userTradePositions[epochId][user];
 152 |     |         for (uint i = 0; i < positions.length; i++) {
 153 |     |             if (positions[i] == positionId) {
 154 |     |                 positions[i] = positions[positions.length - 1];
 155 |     |                 positions.pop();
 156 |     |                 break;
 157 |     |             }
 158 |     |         }
 159 |     |     }
 160 |     | 
 161 |     |     function removeAssertion(bytes32 assertionId) internal {
 162 |     |         bytes32[] storage assertions = userAssertions[getLatestEpoch()];
 163 |     |         for (uint256 i = 0; i < assertions.length; i++) {
 164 |     |             if (assertions[i] == assertionId) {
 165 |     |                 assertions[i] = assertions[assertions.length - 1];
 166 |     |                 assertions.pop();
 167 |     |                 break;
 168 |     |             }
 169 |     |         }
 170 |     |     }
 171 |     | 
 172 | *   |     function getRandomPositionId(
 173 |     |         address user,
 174 |     |         uint256 seed,
 175 |     |         bool isLiquidity
 176 | *   |     ) internal returns (uint) {
 177 | *   |         uint currentEpoch = getLatestEpoch();
 178 |     |         uint[] storage positions = isLiquidity
 179 |     |             ? userLiquidityPositions[currentEpoch][user]
 180 |     |             : userTradePositions[currentEpoch][user];
 181 |     | 
 182 |     |         require(positions.length > 0, "User has no positions");
 183 |     | 
 184 |     |         uint index = seed % positions.length;
 185 |     |         return positions[index];
 186 |     |     }
 187 |     | 
 188 | *   |     function roundUpToNearestValidTick(
 189 |     |         int24 tick,
 190 |     |         int24 tickSpacing
 191 | *   |     ) internal pure returns (int24) {
 192 | *   |         if (tick < 0) {
 193 | *   |             return int24((tick - tickSpacing + 1) / tickSpacing) * tickSpacing;
 194 |     |         } else {
 195 | *   |             return int24((tick + tickSpacing - 1) / tickSpacing) * tickSpacing;
 196 |     |         }
 197 |     |     }
 198 |     | 
 199 | *   |     function getRandomSqrtPriceX96(
 200 |     |         uint160 seed,
 201 |     |         int24 minTick,
 202 |     |         int24 maxTick
 203 | *   |     ) internal returns (uint160) {
 204 | *   |         require(
 205 | *   |             minTick >= CURRENT_MIN_TICK && maxTick <= CURRENT_MAX_TICK,
 206 |     |             "Ticks out of range"
 207 |     |         );
 208 | *   |         uint24 tickCount = uint24((maxTick - minTick) / 200) + 1;
 209 | *   |         uint24 randomTickIndex = uint24(
 210 | *   |             uint256(keccak256(abi.encodePacked(seed))) % tickCount
 211 |     |         );
 212 | *   |         int24 randomTick = minTick + int24(randomTickIndex * 200);
 213 | *   |         return TickMath.getSqrtRatioAtTick(randomTick);
 214 |     |     }
 215 |     | 
 216 |     |     function checkIfTraderPushedPriceOutsideOfBoundaries()
 217 |     |         internal
 218 |     |         returns (bool)
 219 |     |     {
 220 |     |         (bool success, bytes memory returnData) = _getLatestEpochCall();
 221 |     | 
 222 |     |         (uint256 epochId, , , address pool, , , , , , , ) = abi.decode(
 223 |     |             returnData,
 224 |     |             (
 225 |     |                 uint256,
 226 |     |                 uint256,
 227 |     |                 uint256,
 228 |     |                 address,
 229 |     |                 address,
 230 |     |                 address,
 231 |     |                 uint256,
 232 |     |                 uint256,
 233 |     |                 bool,
 234 |     |                 uint256,
 235 |     |                 IFoilStructs.EpochParams
 236 |     |             )
 237 |     |         );
 238 |     |         (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3Pool(pool).slot0();
 239 |     | 
 240 |     |         (success, returnData) = _getCurrentEpochSqrtPriceX96MaxMinCall(epochId);
 241 |     | 
 242 |     |         (uint160 sqrtPriceMinX96, uint160 sqrtPriceMaxX96) = abi.decode(
 243 |     |             returnData,
 244 |     |             (uint160, uint160)
 245 |     |         );
 246 |     |         fl.log(
 247 |     |             "sqrtPriceX96 < sqrtPriceMinX96",
 248 |     |             sqrtPriceX96 < sqrtPriceMinX96
 249 |     |         );
 250 |     |         fl.log(
 251 |     |             "sqrtPriceX96 > sqrtPriceMaxX96",
 252 |     |             sqrtPriceX96 > sqrtPriceMaxX96
 253 |     |         );
 254 |     |         if (sqrtPriceX96 < sqrtPriceMinX96 || sqrtPriceX96 > sqrtPriceMaxX96) {
 255 |     |             return true;
 256 |     |         }
 257 |     |     }
 258 |     | 
 259 |     |     function settleAllPositions() internal {
 260 |     |         (bool success, bytes memory returnData) = _getLatestEpochCall();
 261 |     |         if (success) {
 262 |     |             //epoch should be created
 263 |     |             (uint epochId, , , address pool, , , , , bool settled, , ) = abi
 264 |     |                 .decode(
 265 |     |                     returnData,
 266 |     |                     (
 267 |     |                         uint256,
 268 |     |                         uint256,
 269 |     |                         uint256,
 270 |     |                         address,
 271 |     |                         address,
 272 |     |                         address,
 273 |     |                         uint256,
 274 |     |                         uint256,
 275 |     |                         bool,
 276 |     |                         uint256,
 277 |     |                         IFoilStructs.EpochParams
 278 |     |                     )
 279 |     |                 );
 280 |     |             if (settled == true) {
 281 |     |                 (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3Pool(pool)
 282 |     |                     .slot0();
 283 |     | 
 284 |     |                 (
 285 |     |                     uint[] memory liquidityPositions,
 286 |     |                     uint[] memory tradePositions
 287 |     |                 ) = getAllPositionsIdsOfAllUsers(epochId);
 288 |     | 
 289 |     |                 for (uint i = 0; i < liquidityPositions.length; i++) {
 290 |     |                     (success, returnData) = _getPositionCall(
 291 |     |                         liquidityPositions[i]
 292 |     |                     );
 293 |     | 
 294 |     |                     Position.Data memory positionData = abi.decode(
 295 |     |                         returnData,
 296 |     |                         (Position.Data)
 297 |     |                     );
 298 |     |                     if (positionData.kind != IFoilStructs.PositionKind(0)) {
 299 |     |                         (success, returnData) = _getPositionOwnerCall(
 300 |     |                             positionData.id
 301 |     |                         );
 302 |     |                         assert(success);
 303 |     | 
 304 |     |                         vm.prank(abi.decode(returnData, (address)));
 305 |     |                         (success, returnData) = foil.call(
 306 |     |                             abi.encodeWithSelector(
 307 |     |                                 epochSettlementModuleImpl
 308 |     |                                     .settlePosition
 309 |     |                                     .selector,
 310 |     |                                 positionData.id
 311 |     |                             )
 312 |     |                         );
 313 |     |                         fl.log("Liquidity position");
 314 |     |                         fl.log("Position ID", positionData.id);
 315 |     |                         //NOTE: excluded in remediations
 316 |     |                         // fl.t(
 317 |     |                         //     success,
 318 |     |                         //     "SETTLE-01, It should always be possible to settle all trade positions after the epoch is settled."
 319 |     |                         // );
 320 |     |                     }
 321 |     |                 }
 322 |     | 
 323 |     |                 for (uint i = 0; i < tradePositions.length; i++) {
 324 |     |                     (success, returnData) = _getPositionCall(tradePositions[i]);
 325 |     |                     Position.Data memory positionData = abi.decode(
 326 |     |                         returnData,
 327 |     |                         (Position.Data)
 328 |     |                     );
 329 |     | 
 330 |     |                     if (positionData.kind != IFoilStructs.PositionKind(0)) {
 331 |     |                         (success, returnData) = _getPositionOwnerCall(
 332 |     |                             positionData.id
 333 |     |                         );
 334 |     |                         assert(success);
 335 |     | 
 336 |     |                         vm.prank(abi.decode(returnData, (address)));
 337 |     | 
 338 |     |                         (success, returnData) = foil.call(
 339 |     |                             abi.encodeWithSelector(
 340 |     |                                 epochSettlementModuleImpl
 341 |     |                                     .settlePosition
 342 |     |                                     .selector,
 343 |     |                                 positionData.id
 344 |     |                             )
 345 |     |                         );
 346 |     | 
 347 |     |                         fl.log("Trade position");
 348 |     |                         fl.log("Position ID", positionData.id);
 349 |     |                         //NOTE: excluded in remediations
 350 |     |                         // fl.t(
 351 |     |                         //     success,
 352 |     |                         //     "SETTLE-01, It should always be possible to settle all liquidity positions after the epoch is settled."
 353 |     |                         // );
 354 |     |                     }
 355 |     |                 }
 356 |     |             }
 357 |     |         }
 358 |     |     }
 359 |     |     function isPositionTypeTrade(uint positionId) internal returns (bool) {
 360 |     |         //NOTE: will return false if position type unknown
 361 |     |         (bool success, bytes memory returnData) = _getPositionCall(positionId);
 362 |     |         fl.t(success, "Unable to get position");
 363 |     |         Position.Data memory position = abi.decode(returnData, (Position.Data));
 364 |     | 
 365 |     |         if (position.kind == IFoilStructs.PositionKind.Trade) {
 366 |     |             return true;
 367 |     |         }
 368 |     |         return false;
 369 |     |     }
 370 |     | }
 371 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/preconditions/PreconditionsEpochConfigurationModule.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PreconditionsBase.sol";
  5 |     | 
  6 |     | /* solhint-disable numcast/safe-cast */
  7 |     | 
  8 |     | abstract contract PreconditionsEpochConfigurationModule is PreconditionsBase {
  9 |     |     struct InitializeMarketParams {
 10 |     |         address owner;
 11 |     |         address collateralAsset;
 12 |     |         address uniswapPositionManager;
 13 |     |         address uniswapSwapRouter;
 14 |     |         address optimisticOracleV3;
 15 |     |         IFoilStructs.EpochParams epochParams;
 16 |     |     }
 17 |     | 
 18 |     |     struct CreateEpochParams {
 19 |     |         uint256 startTime;
 20 |     |         uint256 endTime;
 21 |     |         uint160 startingSqrtPriceX96;
 22 |     |     }
 23 |     | 
 24 | *   |     function initializeMarketPreconditions(
 25 |     |         int24 minTick,
 26 |     |         int24 maxTick
 27 |     |     ) internal returns (InitializeMarketParams memory params) {
 28 | *   |         if (minTick > maxTick) {
 29 | *   |             int24 temp = minTick;
 30 | *   |             minTick = maxTick;
 31 |     |             maxTick = temp;
 32 |     |         }
 33 |     | 
 34 | *   |         params.owner = currentActor;
 35 | *   |         params.collateralAsset = address(wstETH);
 36 | *   |         params.uniswapPositionManager = address(_positionManager);
 37 | *   |         params.uniswapSwapRouter = address(_v3SwapRouter);
 38 | *   |         params.optimisticOracleV3 = address(uma);
 39 |     | 
 40 | *   |         CURRENT_MIN_TICK = roundUpToNearestValidTick(minTick, 200);
 41 | *   |         CURRENT_MAX_TICK = roundUpToNearestValidTick(maxTick, 200);
 42 |     | 
 43 | *   |         params.epochParams = IFoilStructs.EpochParams({
 44 | *   |             baseAssetMinPriceTick: CURRENT_MIN_TICK,
 45 | *   |             baseAssetMaxPriceTick: CURRENT_MAX_TICK,
 46 | *   |             feeRate: 10000, //NOTE: don't change, all other fucntion connected to tick spacing 200
 47 | *   |             assertionLiveness: 6 hours,
 48 | *   |             bondCurrency: address(usdc),
 49 | *   |             bondAmount: 5000_000000,
 50 |     |             priceUnit: "wGwei/gas",
 51 | *   |             uniswapPositionManager: params.uniswapPositionManager,
 52 | *   |             uniswapSwapRouter: params.uniswapSwapRouter,
 53 | *   |             uniswapQuoter: address(_quoter),
 54 | *   |             optimisticOracleV3: params.optimisticOracleV3
 55 |     |         });
 56 |     |     }
 57 |     | 
 58 | *   |     function createEpochPreconditions(
 59 |     |         uint160 startingSqrtPriceX96Seed
 60 | *   |     ) internal returns (CreateEpochParams memory params) {
 61 | *   |         params.startTime = block.timestamp;
 62 | *   |         params.endTime = block.timestamp + 30 days;
 63 |     | 
 64 | *   |         params.startingSqrtPriceX96 = getRandomSqrtPriceX96(
 65 | *   |             startingSqrtPriceX96Seed,
 66 | *   |             CURRENT_MIN_TICK,
 67 | *   |             CURRENT_MAX_TICK
 68 |     |         );
 69 |     |     }
 70 |     | }
 71 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/preconditions/PreconditionsEpochLiquidityModule.sol
   1 |     | // SPDX-License-Identifier: GPL-3.0
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import "./PreconditionsBase.sol";
   5 |     | 
   6 |     | /* solhint-disable numcast/safe-cast */
   7 |     | 
   8 |     | abstract contract PreconditionsEpochLiquidityModule is PreconditionsBase {
   9 |     |     //IFoilStructs
  10 |     |     //   struct LiquidityMintParams {
  11 |     |     //     uint256 epochId;
  12 |     |     //     uint256 amountTokenA;
  13 |     |     //     uint256 amountTokenB;
  14 |     |     //     uint256 collateralAmount;
  15 |     |     //     int24 lowerTick;
  16 |     |     //     int24 upperTick;
  17 |     |     //     uint256 minAmountTokenA;
  18 |     |     //     uint256 minAmountTokenB;
  19 |     |     //      uint256 deadline; //added in remediations
  20 |     |     // }
  21 | *   |     function createLiquidityPositionPreconditions(
  22 |     |         uint collateralAmountSeed,
  23 |     |         int24 lowerTickSeed,
  24 |     |         int24 upperTickSeed
  25 | *   |     ) internal returns (IFoilStructs.LiquidityMintParams memory params) {
  26 | *   |         params.epochId = getLatestEpoch();
  27 |     | 
  28 |     |         params.collateralAmount = fl.clamp(
  29 |     |             collateralAmountSeed,
  30 |     |             1,
  31 |     |             weth.balanceOf(currentActor) / 30
  32 |     |         ); //get some part of balance
  33 |     | 
  34 |     |         (bool success, bytes memory returnData) = _getCurrentEpochTicksCall(
  35 |     |             params.epochId
  36 |     |         );
  37 |     |         (int24 minEpochTick, int24 maxEpochTick) = abi.decode(
  38 |     |             returnData,
  39 |     |             (int24, int24)
  40 |     |         );
  41 |     | 
  42 |     |         params.lowerTick = roundUpToNearestValidTick(
  43 |     |             clampInt24(
  44 |     |                 lowerTickSeed,
  45 |     |                 minEpochTick,
  46 |     |                 maxEpochTick,
  47 |     |                 true //enable logs
  48 |     |             ),
  49 |     |             200 //tick spacing for 1% fee uni pool
  50 |     |         );
  51 |     |         params.upperTick = roundUpToNearestValidTick(
  52 |     |             clampInt24(upperTickSeed, minEpochTick, maxEpochTick, true),
  53 |     |             200
  54 |     |         );
  55 |     | 
  56 |     |         if (params.lowerTick > params.upperTick) {
  57 |     |             int24 temp = params.lowerTick;
  58 |     |             params.lowerTick = params.upperTick;
  59 |     |             params.upperTick = temp;
  60 |     |         }
  61 |     | 
  62 |     |         (
  63 |     |             params.amountTokenA,
  64 |     |             params.amountTokenB,
  65 |     | 
  66 |     |         ) = getTokenAmountsForCollateralAmount(
  67 |     |             params.collateralAmount,
  68 |     |             params.lowerTick,
  69 |     |             params.upperTick
  70 |     |         );
  71 |     |         params.collateralAmount = params.collateralAmount + 1e8; //+ dust
  72 |     |         params.minAmountTokenA = 0;
  73 |     |         params.minAmountTokenB = 0;
  74 |     |         params.deadline = collateralAmountSeed;
  75 |     |     }
  76 |     | 
  77 |     |     //  struct LiquidityDecreaseParams {
  78 |     |     //     uint256 positionId;
  79 |     |     //     uint128 liquidity;
  80 |     |     //     uint256 minGasAmount;
  81 |     |     //     uint256 minEthAmount;
  82 |     |     //      uint256 deadline; //added in remediations
  83 |     | 
  84 |     |     // }
  85 |     | 
  86 | *   |     function decreaseLiquidityPositionPreconditions(
  87 |     |         uint seed
  88 | *   |     ) internal returns (IFoilStructs.LiquidityDecreaseParams memory params) {
  89 | *   |         params.positionId = getRandomPositionId(currentActor, seed, true);
  90 |     | 
  91 |     |         (bool success, bytes memory returnData) = _getPositionLiquidityCall(
  92 |     |             params.positionId
  93 |     |         );
  94 |     |         (, , , , params.liquidity) = abi.decode(
  95 |     |             returnData,
  96 |     |             (uint256, uint256, int24, int24, uint128)
  97 |     |         );
  98 |     |         uint liquidity = fl.clamp(seed, 1, uint(params.liquidity * 2), true); // x2 to check if possible to withdraw more
  99 |     | 
 100 |     |         params.liquidity = uint128(liquidity);
 101 |     |         params.minGasAmount = 0;
 102 |     |         params.minEthAmount = 0;
 103 |     |         params.deadline = seed;
 104 |     |     }
 105 |     | 
 106 |     |     //         struct LiquidityIncreaseParams {
 107 |     |     //         uint256 positionId;
 108 |     |     //         uint256 collateralAmount;
 109 |     |     //         uint256 gasTokenAmount;
 110 |     |     //         uint256 ethTokenAmount;
 111 |     |     //         uint256 minGasAmount;
 112 |     |     //         uint256 minEthAmount;
 113 |     |     //      uint256 deadline; //added in remediations
 114 |     | 
 115 |     |     //     }
 116 |     | 
 117 | *   |     function increaseLiquidityPositionPreconditions(
 118 |     |         uint collateralAmountSeed
 119 | *   |     ) internal returns (IFoilStructs.LiquidityIncreaseParams memory params) {
 120 | *   |         params.positionId = getRandomPositionId(
 121 | *   |             currentActor,
 122 | *   |             collateralAmountSeed,
 123 |     |             true
 124 |     |         );
 125 |     | 
 126 |     |         params.collateralAmount = fl.clamp(
 127 |     |             collateralAmountSeed,
 128 |     |             0,
 129 |     |             weth.balanceOf(currentActor) / 30
 130 |     |         ); //get some part of balance
 131 |     |         (bool success, bytes memory returnData) = _getPositionLiquidityCall(
 132 |     |             params.positionId
 133 |     |         );
 134 |     |         (, , int24 lowerTick, int24 upperTick, ) = abi.decode(
 135 |     |             returnData,
 136 |     |             (uint256, uint256, int24, int24, uint128)
 137 |     |         );
 138 |     |         (
 139 |     |             params.gasTokenAmount,
 140 |     |             params.ethTokenAmount,
 141 |     | 
 142 |     |         ) = getTokenAmountsForCollateralAmount(
 143 |     |             params.collateralAmount,
 144 |     |             lowerTick,
 145 |     |             upperTick
 146 |     |         );
 147 |     |         //NOTE: always add dust AFTER Token Amounts For Collateral, usually off by 5-50 wei and InsufficientCollateral error pops
 148 |     |         params.collateralAmount = params.collateralAmount + 1e8; //+ dust
 149 |     | 
 150 |     |         params.minGasAmount = 0;
 151 |     |         params.minEthAmount = 0;
 152 |     |         params.deadline = collateralAmountSeed;
 153 |     |     }
 154 |     | 
 155 | *   |     function closeLiquidityPositionPreconditions(
 156 |     |         uint seed
 157 | *   |     ) internal returns (IFoilStructs.LiquidityDecreaseParams memory params) {
 158 | *   |         params.positionId = getRandomPositionId(currentActor, seed, true);
 159 |     | 
 160 |     |         (bool success, bytes memory returnData) = _getPositionLiquidityCall(
 161 |     |             params.positionId
 162 |     |         );
 163 |     |         (, , , , params.liquidity) = abi.decode(
 164 |     |             returnData,
 165 |     |             (uint256, uint256, int24, int24, uint128)
 166 |     |         );
 167 |     | 
 168 |     |         params.minGasAmount = 0;
 169 |     |         params.minEthAmount = 0;
 170 |     |         params.deadline = seed;
 171 |     |     }
 172 |     | 
 173 | *   |     function closeAllLiquidityPositionsPreconditions(
 174 |     |         uint[] memory positionIds
 175 |     |     ) internal returns (IFoilStructs.LiquidityDecreaseParams[] memory) {
 176 |     |         IFoilStructs.LiquidityDecreaseParams[]
 177 |     |             memory paramsArray = new IFoilStructs.LiquidityDecreaseParams[](0);
 178 |     | 
 179 | *   |         for (uint i = 0; i < positionIds.length; i++) {
 180 |     |             (bool success, bytes memory returnData) = _getPositionLiquidityCall(
 181 |     |                 positionIds[i]
 182 |     |             );
 183 |     | 
 184 |     |             if (!success) {
 185 |     |                 continue;
 186 |     |             }
 187 |     | 
 188 |     |             IFoilStructs.LiquidityDecreaseParams memory params;
 189 |     |             params.positionId = positionIds[i];
 190 |     | 
 191 |     |             (, , , , params.liquidity) = abi.decode(
 192 |     |                 returnData,
 193 |     |                 (uint256, uint256, int24, int24, uint128)
 194 |     |             );
 195 |     | 
 196 |     |             params.minGasAmount = 0;
 197 |     |             params.minEthAmount = 0;
 198 |     |             params.deadline = type(uint256).max;
 199 |     | 
 200 |     |             IFoilStructs.LiquidityDecreaseParams[]
 201 |     |                 memory newParamsArray = new IFoilStructs.LiquidityDecreaseParams[](
 202 |     |                     paramsArray.length + 1
 203 |     |                 );
 204 |     |             for (uint j = 0; j < paramsArray.length; j++) {
 205 |     |                 newParamsArray[j] = paramsArray[j];
 206 |     |             }
 207 |     |             newParamsArray[paramsArray.length] = params;
 208 |     |             paramsArray = newParamsArray;
 209 |     |         }
 210 |     | 
 211 | *   |         return paramsArray;
 212 |     |     }
 213 |     | }
 214 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/preconditions/PreconditionsEpochSettlementModule.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PreconditionsBase.sol";
  5 |     | 
  6 |     | /* solhint-disable numcast/safe-cast */
  7 |     | 
  8 |     | abstract contract PreconditionsEpochSettlementModule is PreconditionsBase {
  9 | *   |     function settleLiquidityPositionPreconditions(
 10 |     |         uint seed
 11 | *   |     ) internal returns (uint) {
 12 |     |         return
 13 | *   |             getRandomPositionId(
 14 | *   |                 currentActor,
 15 | *   |                 seed,
 16 |     |                 true //liquidity
 17 |     |             );
 18 |     |     }
 19 |     | 
 20 | *   |     function settleTradePositionPreconditions(
 21 |     |         uint seed
 22 | *   |     ) internal returns (uint) {
 23 | *   |         return
 24 | *   |             getRandomPositionId(
 25 | *   |                 currentActor,
 26 | *   |                 seed,
 27 |     |                 false //trade
 28 |     |             );
 29 |     |     }
 30 |     | }
 31 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/preconditions/PreconditionsEpochTradeModule.sol
   1 |     | // SPDX-License-Identifier: GPL-3.0
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import "./PreconditionsBase.sol";
   5 |     | 
   6 |     | /* solhint-disable numcast/safe-cast */
   7 |     | 
   8 |     | abstract contract PreconditionsEpochTradeModule is PreconditionsBase {
   9 |     |     struct CreateTraderPositionParams {
  10 |     |         uint256 epochId;
  11 |     |         uint256 collateralAmount;
  12 |     |         int256 tokenAmount;
  13 |     |         int256 tokenAmountLimit;
  14 |     |         uint256 deadline;
  15 |     |     }
  16 |     |     struct ModifyTraderPositionParams {
  17 |     |         uint256 positionId;
  18 |     |         int256 collateralAmount; //now is int
  19 |     |         int256 tokenAmount;
  20 |     |         int256 tokenAmountLimit;
  21 |     |         uint256 deadline;
  22 |     |     }
  23 | *   |     function createTraderPositionLongPreconditions(
  24 |     |         uint collateralAmountSeed,
  25 |     |         uint tokenAmountSeed
  26 | *   |     ) internal returns (CreateTraderPositionParams memory params) {
  27 | *   |         params.epochId = getLatestEpoch();
  28 |     |         params.tokenAmount = int(tokenAmountSeed);
  29 |     | 
  30 |     |         (
  31 |     |             bool success,
  32 |     |             bytes memory returnData
  33 |     |         ) = _quoteCreateTraderPositionCall(params.epochId, params.tokenAmount);
  34 |     | 
  35 |     |         params.collateralAmount = abi.decode(returnData, (uint256)); //getting exact collateral needed
  36 |     | 
  37 |     |         if (collateralAmountSeed % 2 == 0) {
  38 |     |             require(
  39 |     |                 weth.balanceOf(currentActor) / 30 > params.collateralAmount,
  40 |     |                 "modifyTraderPositionLongPreconditions::too much collateral was required"
  41 |     |             );
  42 |     |             //unchanged, faster coverage
  43 |     |         } else {
  44 |     |             /*
  45 |     |              * if collateral needed is < 1/30 of the balance, do not change the value,
  46 |     |              * if more than balance, clamp collateral for a smaller value
  47 |     |              * to create invalid input
  48 |     |              */
  49 |     |             params.collateralAmount = fl.clamp(
  50 |     |                 params.collateralAmount,
  51 |     |                 1,
  52 |     |                 weth.balanceOf(currentActor) / 30
  53 |     |             );
  54 |     |         }
  55 |     |         params.tokenAmountLimit = 0;
  56 |     |         params.deadline = type(uint256).max;
  57 |     |     }
  58 |     | 
  59 | *   |     function createTraderPositionShortPreconditions(
  60 |     |         uint collateralAmountSeed,
  61 |     |         uint tokenAmountSeed
  62 | *   |     ) internal returns (CreateTraderPositionParams memory params) {
  63 | *   |         params.epochId = getLatestEpoch();
  64 |     |         params.tokenAmount = int(tokenAmountSeed + 1) * int(-1); //negative num will trigger _quoteCreateShortPosition
  65 |     | 
  66 |     |         (
  67 |     |             bool success,
  68 |     |             bytes memory returnData
  69 |     |         ) = _quoteCreateTraderPositionCall(params.epochId, params.tokenAmount);
  70 |     | 
  71 |     |         params.collateralAmount = abi.decode(returnData, (uint256)); //getting exact collateral needed
  72 |     | 
  73 |     |         if (collateralAmountSeed % 2 == 0) {
  74 |     |             require(
  75 |     |                 weth.balanceOf(currentActor) / 30 > params.collateralAmount,
  76 |     |                 "modifyTraderPositionLongPreconditions::too much collateral was required"
  77 |     |             );
  78 |     |             //unchanged, faster coverage
  79 |     |         } else {
  80 |     |             /*
  81 |     |              * if collateral needed is < 1/30 of the balance, do not change the value,
  82 |     |              * if more than balance, clamp collateral for a smaller value
  83 |     |              * to create invalid input
  84 |     |              */
  85 |     |             params.collateralAmount = fl.clamp(
  86 |     |                 params.collateralAmount,
  87 |     |                 1,
  88 |     |                 weth.balanceOf(currentActor) / 30
  89 |     |             );
  90 |     |         }
  91 |     | 
  92 |     |         params.tokenAmountLimit = 0;
  93 |     |         params.deadline = type(uint256).max;
  94 |     |     }
  95 |     | 
  96 | *   |     function modifyTraderPositionLongPreconditions(
  97 |     |         uint collateralAmountSeed,
  98 |     |         uint tokenAmountSeed
  99 | *   |     ) internal returns (ModifyTraderPositionParams memory params) {
 100 | *   |         params.positionId = getRandomPositionId(
 101 | *   |             currentActor,
 102 | *   |             collateralAmountSeed,
 103 |     |             false
 104 |     |         );
 105 |     | 
 106 |     |         params.tokenAmount = int(tokenAmountSeed);
 107 |     | 
 108 |     |         (
 109 |     |             bool success,
 110 |     |             bytes memory returnData
 111 |     |         ) = _quoteModifyTraderPositionCall(
 112 |     |                 params.positionId,
 113 |     |                 params.tokenAmount
 114 |     |             );
 115 |     | 
 116 |     |         uint tempCollateralAmount = abi.decode(returnData, (uint256)); //getting exact collateral needed
 117 |     | 
 118 |     |         if (collateralAmountSeed % 3 == 0) {
 119 |     |             require(
 120 |     |                 weth.balanceOf(currentActor) / 30 > tempCollateralAmount,
 121 |     |                 "modifyTraderPositionLongPreconditions::too much collateral was required"
 122 |     |             );
 123 |     |             params.collateralAmount = int(tempCollateralAmount); //unchanged, faster coverage
 124 |     |         } else if (collateralAmountSeed % 3 == 1) {
 125 |     |             /*
 126 |     |              * if collateral needed is < 1/30 of the balance, do not change the value,
 127 |     |              * if more than balance, clamp collateral for a smaller value
 128 |     |              * to create invalid input
 129 |     |              */
 130 |     |             tempCollateralAmount = fl.clamp(
 131 |     |                 tempCollateralAmount,
 132 |     |                 1,
 133 |     |                 weth.balanceOf(currentActor) / 30
 134 |     |             );
 135 |     |             params.collateralAmount = int(tempCollateralAmount);
 136 |     |         } else if (collateralAmountSeed % 3 == 2) {
 137 |     |             params.collateralAmount = int(collateralAmountSeed) % 2 == 0
 138 |     |                 ? int(collateralAmountSeed)
 139 |     |                 : -int(collateralAmountSeed);
 140 |     |         }
 141 |     | 
 142 |     |         params.tokenAmountLimit = 0;
 143 |     |         params.deadline = type(uint256).max;
 144 |     |     }
 145 |     | 
 146 | *   |     function modifyTraderPositionShortPreconditions(
 147 |     |         uint collateralAmountSeed,
 148 |     |         uint tokenAmountSeed
 149 | *   |     ) internal returns (ModifyTraderPositionParams memory params) {
 150 | *   |         params.positionId = getRandomPositionId(
 151 | *   |             currentActor,
 152 | *   |             collateralAmountSeed,
 153 |     |             false
 154 |     |         );
 155 |     |         params.tokenAmount = int(tokenAmountSeed + 1) * int(-1); //filtering zeroes
 156 |     |         fl.log("params.tokenAmoun", params.tokenAmount);
 157 |     | 
 158 |     |         require(
 159 |     |             params.tokenAmount < 0,
 160 |     |             "modifyTraderPositionShortPreconditions::tokenAmount is positive"
 161 |     |         );
 162 |     |         uint a; //coverage checker for optimizer
 163 |     |         (
 164 |     |             bool success,
 165 |     |             bytes memory returnData
 166 |     |         ) = _quoteModifyTraderPositionCall(
 167 |     |                 params.positionId,
 168 |     |                 params.tokenAmount
 169 |     |             );
 170 |     | 
 171 |     |         uint tempCollateralAmount = abi.decode(returnData, (uint256)); //getting exact collateral needed
 172 |     |         a = 1;
 173 |     |         if (collateralAmountSeed % 3 == 0) {
 174 |     |             require(
 175 |     |                 weth.balanceOf(currentActor) / 30 > tempCollateralAmount,
 176 |     |                 "modifyTraderPositionLongPreconditions::too much collateral was required"
 177 |     |             );
 178 |     |             //unchanged, faster coverage
 179 |     |         } else if (collateralAmountSeed % 3 == 1) {
 180 |     |             /*
 181 |     |              * if collateral needed is < 1/30 of the balance, do not change the value,
 182 |     |              * if more than balance, clamp collateral for a smaller value
 183 |     |              * to create invalid input
 184 |     |              */
 185 |     |             tempCollateralAmount = fl.clamp(
 186 |     |                 tempCollateralAmount,
 187 |     |                 1,
 188 |     |                 weth.balanceOf(currentActor) / 30
 189 |     |             );
 190 |     |         } else if (collateralAmountSeed % 3 == 2) {
 191 |     |             params.collateralAmount = int(collateralAmountSeed) % 2 == 0
 192 |     |                 ? int(collateralAmountSeed)
 193 |     |                 : -int(collateralAmountSeed);
 194 |     |         }
 195 |     |         a = 2;
 196 |     |         params.collateralAmount = int(tempCollateralAmount);
 197 |     |         params.tokenAmountLimit = 0;
 198 |     |         params.deadline = type(uint256).max;
 199 |     |         a = 3;
 200 |     |     }
 201 |     | 
 202 | *   |     function closeTraderPositionPreconditions(
 203 |     |         uint collateralAmountSeed
 204 | *   |     ) internal returns (ModifyTraderPositionParams memory params) {
 205 | *   |         params.positionId = getRandomPositionId(
 206 | *   |             currentActor,
 207 | *   |             collateralAmountSeed,
 208 |     |             false
 209 |     |         );
 210 |     | 
 211 |     |         int256 clampedCollateralAmount = int256(
 212 |     |             fl.clamp(
 213 |     |                 int256(collateralAmountSeed),
 214 |     |                 1,
 215 |     |                 int256(weth.balanceOf(currentActor) / 30)
 216 |     |             )
 217 |     |         );
 218 |     | 
 219 |     |         params.collateralAmount = 0; //TradeModule.sol::Closing the position. No need to check collateral limit
 220 |     |         params.tokenAmount = 0;
 221 |     |         params.tokenAmountLimit = 0;
 222 |     |         params.deadline = type(uint256).max;
 223 |     |     }
 224 |     | }
 225 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/helper/preconditions/PreconditionsEpochUMASettlementModule.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PreconditionsBase.sol";
  5 |     | 
  6 |     | /* solhint-disable numcast/safe-cast */
  7 |     | 
  8 |     | abstract contract PreconditionsEpochUMASettlementModule is PreconditionsBase {
  9 |     |     struct SubmitSettlementPriceParams {
 10 |     |         uint256 epochId;
 11 |     |         uint256 settlementPriceD18;
 12 |     |     }
 13 |     | 
 14 |     |     struct MockDisputeAssertionParams {
 15 |     |         bytes32 assertionId;
 16 |     |         address disputer;
 17 |     |     }
 18 |     |     struct MockSettleAssertionParams {
 19 |     |         bytes32 assertionId;
 20 |     |         bool settlementResolution;
 21 |     |     }
 22 | *   |     function submitSettlementPricePreconditions(
 23 |     |         uint settlementPriceD18Seed
 24 |     |     ) internal returns (SubmitSettlementPriceParams memory params) {
 25 | *   |         params.epochId = getLatestEpoch();
 26 |     | 
 27 |     |         (, bytes memory returnData) = _getCurrentPriceCall(params.epochId);
 28 |     | 
 29 |     |         params.settlementPriceD18 = abi.decode(returnData, (uint)); //this is current decimal price;
 30 |     | 
 31 |     |         uint256 action = settlementPriceD18Seed % 5; // 5 actions
 32 |     | 
 33 |     |         if (action == 0) {
 34 |     |             // Increase price
 35 |     |             params.settlementPriceD18 =
 36 |     |                 params.settlementPriceD18 *
 37 |     |                 ((settlementPriceD18Seed % 5) + 1);
 38 |     |         } else if (action == 1) {
 39 |     |             // Decrease price
 40 |     |             if (settlementPriceD18Seed != 0) {
 41 |     |                 params.settlementPriceD18 =
 42 |     |                     params.settlementPriceD18 /
 43 |     |                     ((settlementPriceD18Seed % 5) + 1);
 44 |     |             }
 45 |     |         } else if (action == 2) {
 46 |     |             // Set to a specific value
 47 |     |             params.settlementPriceD18 = settlementPriceD18Seed;
 48 |     |         } else if (action == 3) {
 49 |     |             // Exponential ┗(｀O ´)┛
 50 |     |             params.settlementPriceD18 = params.settlementPriceD18 ** 2;
 51 |     |         } else {
 52 |     |             // Price stays same
 53 |     |         }
 54 |     |     }
 55 |     | 
 56 | *   |     function mockDisputeAssertionPreconditions(
 57 |     |         uint seed
 58 |     |     ) internal returns (MockDisputeAssertionParams memory params) {
 59 | *   |         uint epochId = getLatestEpoch();
 60 |     | 
 61 |     |         params.assertionId = userAssertions[epochId][
 62 |     |             fl.clamp(seed, 0, userAssertions[epochId].length - 1)
 63 |     |         ];
 64 |     | 
 65 |     |         params.disputer = currentActor;
 66 |     |     }
 67 |     | 
 68 | *   |     function mockSettleAssertionPreconditions(
 69 |     |         uint seed
 70 |     |     ) internal returns (MockSettleAssertionParams memory params) {
 71 | *   |         uint epochId = getLatestEpoch();
 72 |     | 
 73 |     |         params.assertionId = userAssertions[epochId][
 74 |     |             fl.clamp(seed, 0, userAssertions[epochId].length - 1)
 75 |     |         ];
 76 |     | 
 77 |     |         params.settlementResolution = seed % 2 == 0;
 78 |     |     }
 79 |     | }
 80 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/mocks/MockERC20.sol
  1 |     | // SPDX-License-Identifier: UNLICENSED
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  4 |     | 
  5 | *   | contract MockERC20 is ERC20 {
  6 |     |     uint8 private _decimals;
  7 |     | 
  8 |     |     constructor(
  9 |     |         string memory name,
 10 |     |         string memory symbol,
 11 |     |         uint8 dec
 12 |     |     ) ERC20(name, symbol) {
 13 |     |         _decimals = dec;
 14 |     |     }
 15 |     | 
 16 | *   |     function decimals() public view virtual override(ERC20) returns (uint8) {
 17 | *   |         return _decimals;
 18 |     |     }
 19 |     | 
 20 |     |     function mint(address account, uint256 amount) external {
 21 |     |         _mint(account, amount);
 22 |     |     }
 23 |     | 
 24 |     |     function burn(address account, uint256 amount) external {
 25 |     |         _burn(account, amount);
 26 |     |     }
 27 |     | }
 28 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/mocks/MockLensModule.sol
  1 |     | //SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.8.11 <0.9.0;
  3 |     | 
  4 |     | import {LiquidityModule as EpochLiquidityModule} from "../../../src/contracts/modules/LiquidityModule.sol";
  5 |     | 
  6 |     | import {Market} from "../../../src/contracts/storage/Market.sol";
  7 |     | import "../../../src/contracts/storage/Position.sol";
  8 |     | import {Epoch} from "../../../src/contracts/storage/Epoch.sol";
  9 |     | import {FullMath} from "../../../src/contracts/external/univ3/FullMath.sol";
 10 |     | import {LiquidityAmounts} from "../../../src/contracts/external/univ3/LiquidityAmounts.sol";
 11 |     | import {Pool} from "../../../src/contracts/libraries/Pool.sol";
 12 |     | 
 13 |     | contract MockLensModule is EpochLiquidityModule {
 14 |     |     using Market for Market.Data;
 15 |     |     using Position for Position.Data;
 16 |     |     using Epoch for Epoch.Data;
 17 |     | 
 18 |     |     function getPositionLiquidity(
 19 |     |         uint positionId
 20 |     |     )
 21 |     |         public
 22 |     |         returns (
 23 |     |             uint256 amount0,
 24 |     |             uint256 amount1,
 25 |     |             int24 lowerTick,
 26 |     |             int24 upperTick,
 27 |     |             uint128 previousLiquidity
 28 |     |         )
 29 |     |     {
 30 |     |         Market.Data storage market = Market.load();
 31 |     |         Position.Data storage position = Position.loadValid(positionId);
 32 |     |         Epoch.Data storage epoch = Epoch.loadValid(position.epochId);
 33 |     | 
 34 |     |         position.preValidateLp(); //this will revert if msg.sender != owner of position
 35 |     |         (amount0, amount1, lowerTick, upperTick, previousLiquidity) = Pool
 36 |     |             .getCurrentPositionTokenAmounts(market, epoch, position);
 37 |     |     }
 38 |     | 
 39 |     |     function getEthToGas(uint ethAmount, uint epochId) public returns (uint) {
 40 |     |         Epoch.Data storage epoch = Epoch.loadValid(epochId);
 41 |     |         uint256 decimalPrice = epoch.getCurrentPoolPrice();
 42 |     |         return FullMath.mulDiv(ethAmount, 1e18, decimalPrice);
 43 |     |     }
 44 |     | 
 45 |     |     function getSettlementPrice(uint epochId) public returns (uint) {
 46 |     |         Epoch.Data storage epoch = Epoch.loadValid(epochId);
 47 |     |         return epoch.settlementPriceD18;
 48 |     |     }
 49 |     | 
 50 |     |     function getCurrentPrice(uint epochId) public returns (uint) {
 51 |     |         Epoch.Data storage epoch = Epoch.loadValid(epochId);
 52 |     |         return epoch.getCurrentPoolPrice();
 53 |     |     }
 54 |     | 
 55 |     |     function getMarketOwner() public returns (address) {
 56 |     |         Market.Data storage market = Market.load();
 57 |     |         return market.owner;
 58 |     |     }
 59 |     | 
 60 |     |     function getCurrentEpochTicks(uint epochId) public returns (int24, int24) {
 61 |     |         Epoch.Data storage epoch = Epoch.loadValid(epochId);
 62 |     |         return (
 63 |     |             epoch.params.baseAssetMinPriceTick,
 64 |     |             epoch.params.baseAssetMaxPriceTick
 65 |     |         );
 66 |     |     }
 67 |     | 
 68 |     |     function getCurrentEpochSqrtPriceX96MaxMin(
 69 |     |         uint epochId
 70 |     |     ) public returns (uint160, uint160) {
 71 |     |         Epoch.Data storage epoch = Epoch.loadValid(epochId);
 72 |     |         return (epoch.sqrtPriceMinX96, epoch.sqrtPriceMaxX96);
 73 |     |     }
 74 |     | 
 75 |     |     function getAmount0ForLiquidity_Foil(
 76 |     |         uint160 sqrtRatioAX96,
 77 |     |         uint160 sqrtRatioBX96,
 78 |     |         uint128 liquidity
 79 |     |     ) public returns (uint256 amount0) {
 80 |     |         return
 81 |     |             LiquidityAmounts.getAmount0ForLiquidity(
 82 |     |                 sqrtRatioAX96,
 83 |     |                 sqrtRatioBX96,
 84 |     |                 liquidity
 85 |     |             );
 86 |     |     }
 87 |     | 
 88 |     |     function getPositionOwner(
 89 |     |         uint256 positionId
 90 |     |     ) public view returns (address) {
 91 |     |         Position.Data storage position = Position.loadValid(positionId);
 92 |     |         return ERC721Storage._ownerOf(position.id);
 93 |     |     }
 94 |     | }
 95 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/mocks/MockRouter.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.20;
  3 |     | 
  4 | *   | contract MockRouter {
  5 |     |     event AddedFunctionAndImplementation(
  6 |     |         bytes4 selector,
  7 |     |         address implementation
  8 |     |     );
  9 |     | 
 10 |     |     error UnknownSelector(bytes4 sel);
 11 |     | 
 12 |     |     // selector => implementation address
 13 |     |     mapping(bytes4 => address) implementations;
 14 |     | 
 15 |     |     function addFunctionAndImplementation(
 16 |     |         bytes4 selector,
 17 |     |         address implementation
 18 |     |     ) external {
 19 |     |         implementations[selector] = implementation;
 20 |     |         emit AddedFunctionAndImplementation(selector, implementation);
 21 |     |         if (implementation == address(0)) {
 22 |     |             revert();
 23 |     |         }
 24 |     |     }
 25 |     | 
 26 |     |     fallback() external payable {
 27 |     |         // Lookup table: Function selector => implementation contract
 28 | *   |         bytes4 selector = msg.sig;
 29 | *   |         address implementation = implementations[selector];
 30 |     | 
 31 | *   |         if (implementation == address(0)) {
 32 |     |             revert UnknownSelector(selector);
 33 |     |         }
 34 |     | 
 35 |     |         // Delegatecall to the implementation contract
 36 |     |         assembly {
 37 | *   |             calldatacopy(0, 0, calldatasize())
 38 |     | 
 39 | *   |             let result := delegatecall(
 40 | *   |                 gas(),
 41 | *   |                 implementation,
 42 | *   |                 0,
 43 | *   |                 calldatasize(),
 44 | *   |                 0,
 45 | *   |                 0
 46 |     |             )
 47 | *   |             returndatacopy(0, 0, returndatasize())
 48 |     | 
 49 | *   |             switch result
 50 | *   |             case 0 {
 51 | *   |                 revert(0, returndatasize())
 52 |     |             }
 53 |     |             default {
 54 | *   |                 return(0, returndatasize())
 55 |     |             }
 56 |     |         }
 57 |     |     }
 58 |     | }
 59 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/mocks/MockUMA.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.20;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
   5 |     | 
   6 |     | import "v3-core/interfaces/IUniswapV3Pool.sol";
   7 |     | import "v3-core/interfaces/IUniswapV3Factory.sol";
   8 |     | import "../../../src/contracts/external/VirtualToken.sol";
   9 |     | import "../../../src/contracts/interfaces/IFoilStructs.sol";
  10 |     | 
  11 |     | contract MockUMA {
  12 |     |     // Structs from Epoch contract
  13 |     |     event AssertionMade(
  14 |     |         bytes32 indexed assertionId,
  15 |     |         bytes32 domainId,
  16 |     |         bytes claim,
  17 |     |         address indexed asserter,
  18 |     |         address callbackRecipient,
  19 |     |         address escalationManager,
  20 |     |         address caller,
  21 |     |         uint64 expirationTime,
  22 |     |         IERC20 currency,
  23 |     |         uint256 bond,
  24 |     |         bytes32 indexed identifier
  25 |     |     );
  26 |     | 
  27 |     |     event AssertionDisputed(
  28 |     |         bytes32 indexed assertionId,
  29 |     |         address indexed caller,
  30 |     |         address indexed disputer
  31 |     |     );
  32 |     | 
  33 |     |     event AssertionSettled(
  34 |     |         bytes32 indexed assertionId,
  35 |     |         address indexed bondRecipient,
  36 |     |         bool disputed,
  37 |     |         bool settlementResolution,
  38 |     |         address settleCaller
  39 |     |     );
  40 |     |     struct Settlement {
  41 |     |         uint256 settlementPriceD18;
  42 |     |         uint256 submissionTime;
  43 |     |         bool disputed;
  44 |     |         address disputer;
  45 |     |     }
  46 |     | 
  47 |     |     struct EpochParams {
  48 |     |         int24 baseAssetMinPriceTick;
  49 |     |         int24 baseAssetMaxPriceTick;
  50 |     |         uint24 feeRate;
  51 |     |         uint64 assertionLiveness;
  52 |     |         address bondCurrency;
  53 |     |         uint256 bondAmount;
  54 |     |         string priceUnit;
  55 |     |     }
  56 |     | 
  57 |     |     struct EpochData {
  58 |     |         uint256 startTime;
  59 |     |         uint256 endTime;
  60 |     |         VirtualToken ethToken;
  61 |     |         VirtualToken gasToken;
  62 |     |         IUniswapV3Pool pool;
  63 |     |         bool settled;
  64 |     |         uint256 settlementPriceD18;
  65 |     |         bytes32 assertionId;
  66 |     |         Settlement settlement;
  67 |     |         EpochParams params;
  68 |     |         uint160 sqrtPriceMinX96;
  69 |     |         uint160 sqrtPriceMaxX96;
  70 |     |         uint256 minPriceD18;
  71 |     |         uint256 maxPriceD18;
  72 |     |     }
  73 |     | 
  74 |     |     struct Assertion {
  75 |     |         EscalationManagerSettings escalationManagerSettings; // Settings related to the escalation manager.
  76 |     |         address asserter; // Address of the asserter.
  77 |     |         uint64 assertionTime; // Time of the assertion.
  78 |     |         bool settled; // True if the request is settled.
  79 |     |         IERC20 currency; // ERC20 token used to pay rewards and fees.
  80 |     |         uint64 expirationTime; // Unix timestamp marking threshold when the assertion can no longer be disputed.
  81 |     |         bool settlementResolution; // Resolution of the assertion (false till resolved).
  82 |     |         bytes32 domainId; // Optional domain that can be used to relate the assertion to others in the escalationManager.
  83 |     |         bytes32 identifier; // UMA DVM identifier to use for price requests in the event of a dispute.
  84 |     |         uint256 bond; // Amount of currency that the asserter has bonded.
  85 |     |         address callbackRecipient; // Address that receives the callback.
  86 |     |         address disputer; // Address of the disputer.
  87 |     |     }
  88 |     |     struct EscalationManagerSettings {
  89 |     |         bool arbitrateViaEscalationManager; // False if the DVM is used as an oracle (EscalationManager on True).
  90 |     |         bool discardOracle; // False if Oracle result is used for resolving assertion after dispute.
  91 |     |         bool validateDisputers; // True if the EM isDisputeAllowed should be checked on disputes.
  92 |     |         address assertingCaller; // Stores msg.sender when assertion was made.
  93 |     |         address escalationManager; // Address of the escalation manager (zero address if not configured).
  94 |     |     }
  95 |     | 
  96 |     |     mapping(bytes32 => Assertion) public assertions;
  97 |     |     mapping(bytes32 => bool) public assertionResults;
  98 |     |     bytes32 public constant defaultIdentifierValue = bytes32("TEST_IDENTIFIER");
  99 |     |     uint256 public constant minimumBondValue = 5000e6;
 100 |     | 
 101 |     |     function assertTruth(
 102 |     |         bytes memory claim,
 103 |     |         address asserter,
 104 |     |         address callbackRecipient,
 105 |     |         address escalationManager,
 106 |     |         uint64 liveness,
 107 |     |         IERC20 currency,
 108 |     |         uint256 bond,
 109 |     |         bytes32 identifier,
 110 |     |         bytes32 domainId
 111 |     |     ) external returns (bytes32) {
 112 |     |         require(bond >= minimumBondValue, "Bond too low");
 113 |     | 
 114 |     |         bytes32 assertionId = keccak256(
 115 |     |             abi.encodePacked(claim, block.timestamp)
 116 |     |         );
 117 |     | 
 118 |     |         assertions[assertionId] = Assertion({
 119 |     |             escalationManagerSettings: EscalationManagerSettings({
 120 |     |                 arbitrateViaEscalationManager: false,
 121 |     |                 discardOracle: false,
 122 |     |                 validateDisputers: false,
 123 |     |                 assertingCaller: msg.sender,
 124 |     |                 escalationManager: escalationManager
 125 |     |             }),
 126 |     |             asserter: asserter,
 127 |     |             assertionTime: uint64(block.timestamp),
 128 |     |             settled: false,
 129 |     |             currency: currency,
 130 |     |             expirationTime: uint64(block.timestamp + liveness),
 131 |     |             settlementResolution: false,
 132 |     |             domainId: domainId,
 133 |     |             identifier: identifier,
 134 |     |             bond: bond,
 135 |     |             callbackRecipient: callbackRecipient,
 136 |     |             disputer: address(0)
 137 |     |         });
 138 |     | 
 139 |     |         emit AssertionMade(
 140 |     |             assertionId,
 141 |     |             domainId,
 142 |     |             claim,
 143 |     |             asserter,
 144 |     |             callbackRecipient,
 145 |     |             escalationManager,
 146 |     |             msg.sender,
 147 |     |             uint64(block.timestamp + liveness),
 148 |     |             currency,
 149 |     |             bond,
 150 |     |             identifier
 151 |     |         );
 152 |     | 
 153 |     |         return assertionId;
 154 |     |     }
 155 |     | 
 156 |     |     function mockDisputeAssertion(
 157 |     |         bytes32 assertionId,
 158 |     |         address disputer
 159 |     |     ) external {
 160 |     |         require(!assertions[assertionId].settled, "Assertion already settled");
 161 |     |         assertions[assertionId].disputer = disputer;
 162 |     |         emit AssertionDisputed(assertionId, msg.sender, disputer);
 163 |     | 
 164 |     |         if (assertions[assertionId].callbackRecipient != address(0)) {
 165 |     |             // Call the assertionDisputedCallback on the callbackRecipient
 166 |     |             (bool success, ) = assertions[assertionId].callbackRecipient.call(
 167 |     |                 abi.encodeWithSignature(
 168 |     |                     "assertionDisputedCallback(bytes32)",
 169 |     |                     assertionId
 170 |     |                 )
 171 |     |             );
 172 |     |             require(success, "Dispute callback failed");
 173 |     |         }
 174 |     |     }
 175 |     | 
 176 |     |     function mockSettleAssertion(
 177 |     |         bytes32 assertionId,
 178 |     |         bool settlementResolution
 179 |     |     ) external {
 180 |     |         require(!assertions[assertionId].settled, "Assertion already settled");
 181 |     |         assertions[assertionId].settled = true;
 182 |     |         assertions[assertionId].settlementResolution = settlementResolution;
 183 |     |         assertionResults[assertionId] = settlementResolution;
 184 |     | 
 185 |     |         emit AssertionSettled(
 186 |     |             assertionId,
 187 |     |             settlementResolution
 188 |     |                 ? assertions[assertionId].asserter
 189 |     |                 : assertions[assertionId].disputer,
 190 |     |             assertions[assertionId].disputer != address(0),
 191 |     |             settlementResolution,
 192 |     |             msg.sender
 193 |     |         );
 194 |     | 
 195 |     |         if (assertions[assertionId].callbackRecipient != address(0)) {
 196 |     |             (bool success, ) = assertions[assertionId].callbackRecipient.call(
 197 |     |                 abi.encodeWithSignature(
 198 |     |                     "assertionResolvedCallback(bytes32,bool)",
 199 |     |                     assertionId,
 200 |     |                     settlementResolution
 201 |     |                 )
 202 |     |             );
 203 |     |             require(success, "Resolution callback failed");
 204 |     |         }
 205 |     |     }
 206 |     | 
 207 |     |     function getAssertionResult(
 208 |     |         bytes32 assertionId
 209 |     |     ) external view returns (bool) {
 210 |     |         require(assertions[assertionId].settled, "Assertion not settled");
 211 |     |         return assertionResults[assertionId];
 212 |     |     }
 213 |     | 
 214 |     |     function defaultIdentifier() external pure returns (bytes32) {
 215 |     |         return defaultIdentifierValue;
 216 |     |     }
 217 |     | 
 218 |     |     function getMinimumBond(address) external pure returns (uint256) {
 219 |     |         return minimumBondValue;
 220 |     |     }
 221 |     | }
 222 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/mocks/WETH.sol
   1 |     | /**
   2 |     |  *Submitted for verification at Etherscan.io on 2017-12-12
   3 |     |  */
   4 |     | 
   5 |     | // Copyright (C) 2015, 2016, 2017 Dapphub
   6 |     | 
   7 |     | // This program is free software: you can redistribute it and/or modify
   8 |     | // it under the terms of the GNU General Public License as published by
   9 |     | // the Free Software Foundation, either version 3 of the License, or
  10 |     | // (at your option) any later version.
  11 |     | 
  12 |     | // This program is distributed in the hope that it will be useful,
  13 |     | // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14 |     | // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15 |     | // GNU General Public License for more details.
  16 |     | 
  17 |     | // You should have received a copy of the GNU General Public License
  18 |     | // along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19 |     | 
  20 |     | pragma solidity ^0.8.13;
  21 |     | 
  22 | *   | contract WETH9 {
  23 | *   |     string public name = "Wrapped Ether";
  24 |     |     string public symbol = "WETH";
  25 |     |     uint8 public decimals = 18;
  26 |     | 
  27 |     |     event Approval(address indexed src, address indexed guy, uint wad);
  28 |     |     event Transfer(address indexed src, address indexed dst, uint wad);
  29 |     |     event Deposit(address indexed dst, uint wad);
  30 |     |     event Withdrawal(address indexed src, uint wad);
  31 |     | 
  32 | *   |     mapping(address => uint) public balanceOf;
  33 |     |     mapping(address => mapping(address => uint)) public allowance;
  34 |     | 
  35 |     |     receive() external payable {
  36 |     |         deposit();
  37 |     |     }
  38 |     | 
  39 |     |     // function zeroOutBalance(address user) public { //@audit NOTE: added by a fuzzer
  40 |     |     //     balanceOf[user] = 0;
  41 |     |     // }
  42 |     | 
  43 |     |     function deposit() public payable {
  44 |     |         balanceOf[msg.sender] += msg.value;
  45 |     |         emit Deposit(msg.sender, msg.value);
  46 |     |     }
  47 |     | 
  48 |     |     function withdraw(uint wad) public {
  49 |     |         require(balanceOf[msg.sender] >= wad);
  50 |     |         balanceOf[msg.sender] -= wad;
  51 |     |         msg.sender.call{value: wad}("");
  52 |     |         emit Withdrawal(msg.sender, wad);
  53 |     |     }
  54 |     | 
  55 | *   |     function totalSupply() public view returns (uint) {
  56 |     |         return address(this).balance;
  57 |     |     }
  58 |     | 
  59 |     |     function approve(address guy, uint wad) public returns (bool) {
  60 |     |         allowance[msg.sender][guy] = wad;
  61 |     |         emit Approval(msg.sender, guy, wad);
  62 |     |         return true;
  63 |     |     }
  64 |     | 
  65 | *   |     function transfer(address dst, uint wad) public returns (bool) {
  66 | *   |         return transferFrom(msg.sender, dst, wad);
  67 |     |     }
  68 |     | 
  69 |     |     function transferFrom(
  70 |     |         address src,
  71 |     |         address dst,
  72 |     |         uint wad
  73 |     |     ) public returns (bool) {
  74 |     |         require(balanceOf[src] >= wad);
  75 |     | 
  76 |     |         if (
  77 |     |             src != msg.sender && allowance[src][msg.sender] != type(uint256).max
  78 |     |         ) {
  79 |     |             require(allowance[src][msg.sender] >= wad);
  80 |     |             allowance[src][msg.sender] -= wad;
  81 |     |         }
  82 |     | 
  83 |     |         balanceOf[src] -= wad;
  84 |     |         balanceOf[dst] += wad;
  85 |     | 
  86 |     |         emit Transfer(src, dst, wad);
  87 |     | 
  88 |     |         return true;
  89 |     |     }
  90 |     | }
  91 |     | 
  92 |     | /*
  93 |     |                     GNU GENERAL PUBLIC LICENSE
  94 |     |                        Version 3, 29 June 2007
  95 |     | 
  96 |     |  Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
  97 |     |  Everyone is permitted to copy and distribute verbatim copies
  98 |     |  of this license document, but changing it is not allowed.
  99 |     | 
 100 |     |                             Preamble
 101 |     | 
 102 |     |   The GNU General Public License is a free, copyleft license for
 103 |     | software and other kinds of works.
 104 |     | 
 105 |     |   The licenses for most software and other practical works are designed
 106 |     | to take away your freedom to share and change the works.  By contrast,
 107 |     | the GNU General Public License is intended to guarantee your freedom to
 108 |     | share and change all versions of a program--to make sure it remains free
 109 |     | software for all its users.  We, the Free Software Foundation, use the
 110 |     | GNU General Public License for most of our software; it applies also to
 111 |     | any other work released this way by its authors.  You can apply it to
 112 |     | your programs, too.
 113 |     | 
 114 |     |   When we speak of free software, we are referring to freedom, not
 115 |     | price.  Our General Public Licenses are designed to make sure that you
 116 |     | have the freedom to distribute copies of free software (and charge for
 117 |     | them if you wish), that you receive source code or can get it if you
 118 |     | want it, that you can change the software or use pieces of it in new
 119 |     | free programs, and that you know you can do these things.
 120 |     | 
 121 |     |   To protect your rights, we need to prevent others from denying you
 122 |     | these rights or asking you to surrender the rights.  Therefore, you have
 123 |     | certain responsibilities if you distribute copies of the software, or if
 124 |     | you modify it: responsibilities to respect the freedom of others.
 125 |     | 
 126 |     |   For example, if you distribute copies of such a program, whether
 127 |     | gratis or for a fee, you must pass on to the recipients the same
 128 |     | freedoms that you received.  You must make sure that they, too, receive
 129 |     | or can get the source code.  And you must show them these terms so they
 130 |     | know their rights.
 131 |     | 
 132 |     |   Developers that use the GNU GPL protect your rights with two steps:
 133 |     | (1) assert copyright on the software, and (2) offer you this License
 134 |     | giving you legal permission to copy, distribute and/or modify it.
 135 |     | 
 136 |     |   For the developers' and authors' protection, the GPL clearly explains
 137 |     | that there is no warranty for this free software.  For both users' and
 138 |     | authors' sake, the GPL requires that modified versions be marked as
 139 |     | changed, so that their problems will not be attributed erroneously to
 140 |     | authors of previous versions.
 141 |     | 
 142 |     |   Some devices are designed to deny users access to install or run
 143 |     | modified versions of the software inside them, although the manufacturer
 144 |     | can do so.  This is fundamentally incompatible with the aim of
 145 |     | protecting users' freedom to change the software.  The systematic
 146 |     | pattern of such abuse occurs in the area of products for individuals to
 147 |     | use, which is precisely where it is most unacceptable.  Therefore, we
 148 |     | have designed this version of the GPL to prohibit the practice for those
 149 |     | products.  If such problems arise substantially in other domains, we
 150 |     | stand ready to extend this provision to those domains in future versions
 151 |     | of the GPL, as needed to protect the freedom of users.
 152 |     | 
 153 |     |   Finally, every program is threatened constantly by software patents.
 154 |     | States should not allow patents to restrict development and use of
 155 |     | software on general-purpose computers, but in those that do, we wish to
 156 |     | avoid the special danger that patents applied to a free program could
 157 |     | make it effectively proprietary.  To prevent this, the GPL assures that
 158 |     | patents cannot be used to render the program non-free.
 159 |     | 
 160 |     |   The precise terms and conditions for copying, distribution and
 161 |     | modification follow.
 162 |     | 
 163 |     |                        TERMS AND CONDITIONS
 164 |     | 
 165 |     |   0. Definitions.
 166 |     | 
 167 |     |   "This License" refers to version 3 of the GNU General Public License.
 168 |     | 
 169 |     |   "Copyright" also means copyright-like laws that apply to other kinds of
 170 |     | works, such as semiconductor masks.
 171 |     | 
 172 |     |   "The Program" refers to any copyrightable work licensed under this
 173 |     | License.  Each licensee is addressed as "you".  "Licensees" and
 174 |     | "recipients" may be individuals or organizations.
 175 |     | 
 176 |     |   To "modify" a work means to copy from or adapt all or part of the work
 177 |     | in a fashion requiring copyright permission, other than the making of an
 178 |     | exact copy.  The resulting work is called a "modified version" of the
 179 |     | earlier work or a work "based on" the earlier work.
 180 |     | 
 181 |     |   A "covered work" means either the unmodified Program or a work based
 182 |     | on the Program.
 183 |     | 
 184 |     |   To "propagate" a work means to do anything with it that, without
 185 |     | permission, would make you directly or secondarily liable for
 186 |     | infringement under applicable copyright law, except executing it on a
 187 |     | computer or modifying a private copy.  Propagation includes copying,
 188 |     | distribution (with or without modification), making available to the
 189 |     | public, and in some countries other activities as well.
 190 |     | 
 191 |     |   To "convey" a work means any kind of propagation that enables other
 192 |     | parties to make or receive copies.  Mere interaction with a user through
 193 |     | a computer network, with no transfer of a copy, is not conveying.
 194 |     | 
 195 |     |   An interactive user interface displays "Appropriate Legal Notices"
 196 |     | to the extent that it includes a convenient and prominently visible
 197 |     | feature that (1) displays an appropriate copyright notice, and (2)
 198 |     | tells the user that there is no warranty for the work (except to the
 199 |     | extent that warranties are provided), that licensees may convey the
 200 |     | work under this License, and how to view a copy of this License.  If
 201 |     | the interface presents a list of user commands or options, such as a
 202 |     | menu, a prominent item in the list meets this criterion.
 203 |     | 
 204 |     |   1. Source Code.
 205 |     | 
 206 |     |   The "source code" for a work means the preferred form of the work
 207 |     | for making modifications to it.  "Object code" means any non-source
 208 |     | form of a work.
 209 |     | 
 210 |     |   A "Standard Interface" means an interface that either is an official
 211 |     | standard defined by a recognized standards body, or, in the case of
 212 |     | interfaces specified for a particular programming language, one that
 213 |     | is widely used among developers working in that language.
 214 |     | 
 215 |     |   The "System Libraries" of an executable work include anything, other
 216 |     | than the work as a whole, that (a) is included in the normal form of
 217 |     | packaging a Major Component, but which is not part of that Major
 218 |     | Component, and (b) serves only to enable use of the work with that
 219 |     | Major Component, or to implement a Standard Interface for which an
 220 |     | implementation is available to the public in source code form.  A
 221 |     | "Major Component", in this context, means a major essential component
 222 |     | (kernel, window system, and so on) of the specific operating system
 223 |     | (if any) on which the executable work runs, or a compiler used to
 224 |     | produce the work, or an object code interpreter used to run it.
 225 |     | 
 226 |     |   The "Corresponding Source" for a work in object code form means all
 227 |     | the source code needed to generate, install, and (for an executable
 228 |     | work) run the object code and to modify the work, including scripts to
 229 |     | control those activities.  However, it does not include the work's
 230 |     | System Libraries, or general-purpose tools or generally available free
 231 |     | programs which are used unmodified in performing those activities but
 232 |     | which are not part of the work.  For example, Corresponding Source
 233 |     | includes interface definition files associated with source files for
 234 |     | the work, and the source code for shared libraries and dynamically
 235 |     | linked subprograms that the work is specifically designed to require,
 236 |     | such as by intimate data communication or control flow between those
 237 |     | subprograms and other parts of the work.
 238 |     | 
 239 |     |   The Corresponding Source need not include anything that users
 240 |     | can regenerate automatically from other parts of the Corresponding
 241 |     | Source.
 242 |     | 
 243 |     |   The Corresponding Source for a work in source code form is that
 244 |     | same work.
 245 |     | 
 246 |     |   2. Basic Permissions.
 247 |     | 
 248 |     |   All rights granted under this License are granted for the term of
 249 |     | copyright on the Program, and are irrevocable provided the stated
 250 |     | conditions are met.  This License explicitly affirms your unlimited
 251 |     | permission to run the unmodified Program.  The output from running a
 252 |     | covered work is covered by this License only if the output, given its
 253 |     | content, constitutes a covered work.  This License acknowledges your
 254 |     | rights of fair use or other equivalent, as provided by copyright law.
 255 |     | 
 256 |     |   You may make, run and propagate covered works that you do not
 257 |     | convey, without conditions so long as your license otherwise remains
 258 |     | in force.  You may convey covered works to others for the sole purpose
 259 |     | of having them make modifications exclusively for you, or provide you
 260 |     | with facilities for running those works, provided that you comply with
 261 |     | the terms of this License in conveying all material for which you do
 262 |     | not control copyright.  Those thus making or running the covered works
 263 |     | for you must do so exclusively on your behalf, under your direction
 264 |     | and control, on terms that prohibit them from making any copies of
 265 |     | your copyrighted material outside their relationship with you.
 266 |     | 
 267 |     |   Conveying under any other circumstances is permitted solely under
 268 |     | the conditions stated below.  Sublicensing is not allowed; section 10
 269 |     | makes it unnecessary.
 270 |     | 
 271 |     |   3. Protecting Users' Legal Rights From Anti-Circumvention Law.
 272 |     | 
 273 |     |   No covered work shall be deemed part of an effective technological
 274 |     | measure under any applicable law fulfilling obligations under article
 275 |     | 11 of the WIPO copyright treaty adopted on 20 December 1996, or
 276 |     | similar laws prohibiting or restricting circumvention of such
 277 |     | measures.
 278 |     | 
 279 |     |   When you convey a covered work, you waive any legal power to forbid
 280 |     | circumvention of technological measures to the extent such circumvention
 281 |     | is effected by exercising rights under this License with respect to
 282 |     | the covered work, and you disclaim any intention to limit operation or
 283 |     | modification of the work as a means of enforcing, against the work's
 284 |     | users, your or third parties' legal rights to forbid circumvention of
 285 |     | technological measures.
 286 |     | 
 287 |     |   4. Conveying Verbatim Copies.
 288 |     | 
 289 |     |   You may convey verbatim copies of the Program's source code as you
 290 |     | receive it, in any medium, provided that you conspicuously and
 291 |     | appropriately publish on each copy an appropriate copyright notice;
 292 |     | keep intact all notices stating that this License and any
 293 |     | non-permissive terms added in accord with section 7 apply to the code;
 294 |     | keep intact all notices of the absence of any warranty; and give all
 295 |     | recipients a copy of this License along with the Program.
 296 |     | 
 297 |     |   You may charge any price or no price for each copy that you convey,
 298 |     | and you may offer support or warranty protection for a fee.
 299 |     | 
 300 |     |   5. Conveying Modified Source Versions.
 301 |     | 
 302 |     |   You may convey a work based on the Program, or the modifications to
 303 |     | produce it from the Program, in the form of source code under the
 304 |     | terms of section 4, provided that you also meet all of these conditions:
 305 |     | 
 306 |     |     a) The work must carry prominent notices stating that you modified
 307 |     |     it, and giving a relevant date.
 308 |     | 
 309 |     |     b) The work must carry prominent notices stating that it is
 310 |     |     released under this License and any conditions added under section
 311 |     |     7.  This requirement modifies the requirement in section 4 to
 312 |     |     "keep intact all notices".
 313 |     | 
 314 |     |     c) You must license the entire work, as a whole, under this
 315 |     |     License to anyone who comes into possession of a copy.  This
 316 |     |     License will therefore apply, along with any applicable section 7
 317 |     |     additional terms, to the whole of the work, and all its parts,
 318 |     |     regardless of how they are packaged.  This License gives no
 319 |     |     permission to license the work in any other way, but it does not
 320 |     |     invalidate such permission if you have separately received it.
 321 |     | 
 322 |     |     d) If the work has interactive user interfaces, each must display
 323 |     |     Appropriate Legal Notices; however, if the Program has interactive
 324 |     |     interfaces that do not display Appropriate Legal Notices, your
 325 |     |     work need not make them do so.
 326 |     | 
 327 |     |   A compilation of a covered work with other separate and independent
 328 |     | works, which are not by their nature extensions of the covered work,
 329 |     | and which are not combined with it such as to form a larger program,
 330 |     | in or on a volume of a storage or distribution medium, is called an
 331 |     | "aggregate" if the compilation and its resulting copyright are not
 332 |     | used to limit the access or legal rights of the compilation's users
 333 |     | beyond what the individual works permit.  Inclusion of a covered work
 334 |     | in an aggregate does not cause this License to apply to the other
 335 |     | parts of the aggregate.
 336 |     | 
 337 |     |   6. Conveying Non-Source Forms.
 338 |     | 
 339 |     |   You may convey a covered work in object code form under the terms
 340 |     | of sections 4 and 5, provided that you also convey the
 341 |     | machine-readable Corresponding Source under the terms of this License,
 342 |     | in one of these ways:
 343 |     | 
 344 |     |     a) Convey the object code in, or embodied in, a physical product
 345 |     |     (including a physical distribution medium), accompanied by the
 346 |     |     Corresponding Source fixed on a durable physical medium
 347 |     |     customarily used for software interchange.
 348 |     | 
 349 |     |     b) Convey the object code in, or embodied in, a physical product
 350 |     |     (including a physical distribution medium), accompanied by a
 351 |     |     written offer, valid for at least three years and valid for as
 352 |     |     long as you offer spare parts or customer support for that product
 353 |     |     model, to give anyone who possesses the object code either (1) a
 354 |     |     copy of the Corresponding Source for all the software in the
 355 |     |     product that is covered by this License, on a durable physical
 356 |     |     medium customarily used for software interchange, for a price no
 357 |     |     more than your reasonable cost of physically performing this
 358 |     |     conveying of source, or (2) access to copy the
 359 |     |     Corresponding Source from a network server at no charge.
 360 |     | 
 361 |     |     c) Convey individual copies of the object code with a copy of the
 362 |     |     written offer to provide the Corresponding Source.  This
 363 |     |     alternative is allowed only occasionally and noncommercially, and
 364 |     |     only if you received the object code with such an offer, in accord
 365 |     |     with subsection 6b.
 366 |     | 
 367 |     |     d) Convey the object code by offering access from a designated
 368 |     |     place (gratis or for a charge), and offer equivalent access to the
 369 |     |     Corresponding Source in the same way through the same place at no
 370 |     |     further charge.  You need not require recipients to copy the
 371 |     |     Corresponding Source along with the object code.  If the place to
 372 |     |     copy the object code is a network server, the Corresponding Source
 373 |     |     may be on a different server (operated by you or a third party)
 374 |     |     that supports equivalent copying facilities, provided you maintain
 375 |     |     clear directions next to the object code saying where to find the
 376 |     |     Corresponding Source.  Regardless of what server hosts the
 377 |     |     Corresponding Source, you remain obligated to ensure that it is
 378 |     |     available for as long as needed to satisfy these requirements.
 379 |     | 
 380 |     |     e) Convey the object code using peer-to-peer transmission, provided
 381 |     |     you inform other peers where the object code and Corresponding
 382 |     |     Source of the work are being offered to the general public at no
 383 |     |     charge under subsection 6d.
 384 |     | 
 385 |     |   A separable portion of the object code, whose source code is excluded
 386 |     | from the Corresponding Source as a System Library, need not be
 387 |     | included in conveying the object code work.
 388 |     | 
 389 |     |   A "User Product" is either (1) a "consumer product", which means any
 390 |     | tangible personal property which is normally used for personal, family,
 391 |     | or household purposes, or (2) anything designed or sold for incorporation
 392 |     | into a dwelling.  In determining whether a product is a consumer product,
 393 |     | doubtful cases shall be resolved in favor of coverage.  For a particular
 394 |     | product received by a particular user, "normally used" refers to a
 395 |     | typical or common use of that class of product, regardless of the status
 396 |     | of the particular user or of the way in which the particular user
 397 |     | actually uses, or expects or is expected to use, the product.  A product
 398 |     | is a consumer product regardless of whether the product has substantial
 399 |     | commercial, industrial or non-consumer uses, unless such uses represent
 400 |     | the only significant mode of use of the product.
 401 |     | 
 402 |     |   "Installation Information" for a User Product means any methods,
 403 |     | procedures, authorization keys, or other information required to install
 404 |     | and execute modified versions of a covered work in that User Product from
 405 |     | a modified version of its Corresponding Source.  The information must
 406 |     | suffice to ensure that the continued functioning of the modified object
 407 |     | code is in no case prevented or interfered with solely because
 408 |     | modification has been made.
 409 |     | 
 410 |     |   If you convey an object code work under this section in, or with, or
 411 |     | specifically for use in, a User Product, and the conveying occurs as
 412 |     | part of a transaction in which the right of possession and use of the
 413 |     | User Product is transferred to the recipient in perpetuity or for a
 414 |     | fixed term (regardless of how the transaction is characterized), the
 415 |     | Corresponding Source conveyed under this section must be accompanied
 416 |     | by the Installation Information.  But this requirement does not apply
 417 |     | if neither you nor any third party retains the ability to install
 418 |     | modified object code on the User Product (for example, the work has
 419 |     | been installed in ROM).
 420 |     | 
 421 |     |   The requirement to provide Installation Information does not include a
 422 |     | requirement to continue to provide support service, warranty, or updates
 423 |     | for a work that has been modified or installed by the recipient, or for
 424 |     | the User Product in which it has been modified or installed.  Access to a
 425 |     | network may be denied when the modification itself materially and
 426 |     | adversely affects the operation of the network or violates the rules and
 427 |     | protocols for communication across the network.
 428 |     | 
 429 |     |   Corresponding Source conveyed, and Installation Information provided,
 430 |     | in accord with this section must be in a format that is publicly
 431 |     | documented (and with an implementation available to the public in
 432 |     | source code form), and must require no special password or key for
 433 |     | unpacking, reading or copying.
 434 |     | 
 435 |     |   7. Additional Terms.
 436 |     | 
 437 |     |   "Additional permissions" are terms that supplement the terms of this
 438 |     | License by making exceptions from one or more of its conditions.
 439 |     | Additional permissions that are applicable to the entire Program shall
 440 |     | be treated as though they were included in this License, to the extent
 441 |     | that they are valid under applicable law.  If additional permissions
 442 |     | apply only to part of the Program, that part may be used separately
 443 |     | under those permissions, but the entire Program remains governed by
 444 |     | this License without regard to the additional permissions.
 445 |     | 
 446 |     |   When you convey a copy of a covered work, you may at your option
 447 |     | remove any additional permissions from that copy, or from any part of
 448 |     | it.  (Additional permissions may be written to require their own
 449 |     | removal in certain cases when you modify the work.)  You may place
 450 |     | additional permissions on material, added by you to a covered work,
 451 |     | for which you have or can give appropriate copyright permission.
 452 |     | 
 453 |     |   Notwithstanding any other provision of this License, for material you
 454 |     | add to a covered work, you may (if authorized by the copyright holders of
 455 |     | that material) supplement the terms of this License with terms:
 456 |     | 
 457 |     |     a) Disclaiming warranty or limiting liability differently from the
 458 |     |     terms of sections 15 and 16 of this License; or
 459 |     | 
 460 |     |     b) Requiring preservation of specified reasonable legal notices or
 461 |     |     author attributions in that material or in the Appropriate Legal
 462 |     |     Notices displayed by works containing it; or
 463 |     | 
 464 |     |     c) Prohibiting misrepresentation of the origin of that material, or
 465 |     |     requiring that modified versions of such material be marked in
 466 |     |     reasonable ways as different from the original version; or
 467 |     | 
 468 |     |     d) Limiting the use for publicity purposes of names of licensors or
 469 |     |     authors of the material; or
 470 |     | 
 471 |     |     e) Declining to grant rights under trademark law for use of some
 472 |     |     trade names, trademarks, or service marks; or
 473 |     | 
 474 |     |     f) Requiring indemnification of licensors and authors of that
 475 |     |     material by anyone who conveys the material (or modified versions of
 476 |     |     it) with contractual assumptions of liability to the recipient, for
 477 |     |     any liability that these contractual assumptions directly impose on
 478 |     |     those licensors and authors.
 479 |     | 
 480 |     |   All other non-permissive additional terms are considered "further
 481 |     | restrictions" within the meaning of section 10.  If the Program as you
 482 |     | received it, or any part of it, contains a notice stating that it is
 483 |     | governed by this License along with a term that is a further
 484 |     | restriction, you may remove that term.  If a license document contains
 485 |     | a further restriction but permits relicensing or conveying under this
 486 |     | License, you may add to a covered work material governed by the terms
 487 |     | of that license document, provided that the further restriction does
 488 |     | not survive such relicensing or conveying.
 489 |     | 
 490 |     |   If you add terms to a covered work in accord with this section, you
 491 |     | must place, in the relevant source files, a statement of the
 492 |     | additional terms that apply to those files, or a notice indicating
 493 |     | where to find the applicable terms.
 494 |     | 
 495 |     |   Additional terms, permissive or non-permissive, may be stated in the
 496 |     | form of a separately written license, or stated as exceptions;
 497 |     | the above requirements apply either way.
 498 |     | 
 499 |     |   8. Termination.
 500 |     | 
 501 |     |   You may not propagate or modify a covered work except as expressly
 502 |     | provided under this License.  Any attempt otherwise to propagate or
 503 |     | modify it is void, and will automatically terminate your rights under
 504 |     | this License (including any patent licenses granted under the third
 505 |     | paragraph of section 11).
 506 |     | 
 507 |     |   However, if you cease all violation of this License, then your
 508 |     | license from a particular copyright holder is reinstated (a)
 509 |     | provisionally, unless and until the copyright holder explicitly and
 510 |     | finally terminates your license, and (b) permanently, if the copyright
 511 |     | holder fails to notify you of the violation by some reasonable means
 512 |     | prior to 60 days after the cessation.
 513 |     | 
 514 |     |   Moreover, your license from a particular copyright holder is
 515 |     | reinstated permanently if the copyright holder notifies you of the
 516 |     | violation by some reasonable means, this is the first time you have
 517 |     | received notice of violation of this License (for any work) from that
 518 |     | copyright holder, and you cure the violation prior to 30 days after
 519 |     | your receipt of the notice.
 520 |     | 
 521 |     |   Termination of your rights under this section does not terminate the
 522 |     | licenses of parties who have received copies or rights from you under
 523 |     | this License.  If your rights have been terminated and not permanently
 524 |     | reinstated, you do not qualify to receive new licenses for the same
 525 |     | material under section 10.
 526 |     | 
 527 |     |   9. Acceptance Not Required for Having Copies.
 528 |     | 
 529 |     |   You are not required to accept this License in order to receive or
 530 |     | run a copy of the Program.  Ancillary propagation of a covered work
 531 |     | occurring solely as a consequence of using peer-to-peer transmission
 532 |     | to receive a copy likewise does not require acceptance.  However,
 533 |     | nothing other than this License grants you permission to propagate or
 534 |     | modify any covered work.  These actions infringe copyright if you do
 535 |     | not accept this License.  Therefore, by modifying or propagating a
 536 |     | covered work, you indicate your acceptance of this License to do so.
 537 |     | 
 538 |     |   10. Automatic Licensing of Downstream Recipients.
 539 |     | 
 540 |     |   Each time you convey a covered work, the recipient automatically
 541 |     | receives a license from the original licensors, to run, modify and
 542 |     | propagate that work, subject to this License.  You are not responsible
 543 |     | for enforcing compliance by third parties with this License.
 544 |     | 
 545 |     |   An "entity transaction" is a transaction transferring control of an
 546 |     | organization, or substantially all assets of one, or subdividing an
 547 |     | organization, or merging organizations.  If propagation of a covered
 548 |     | work results from an entity transaction, each party to that
 549 |     | transaction who receives a copy of the work also receives whatever
 550 |     | licenses to the work the party's predecessor in interest had or could
 551 |     | give under the previous paragraph, plus a right to possession of the
 552 |     | Corresponding Source of the work from the predecessor in interest, if
 553 |     | the predecessor has it or can get it with reasonable efforts.
 554 |     | 
 555 |     |   You may not impose any further restrictions on the exercise of the
 556 |     | rights granted or affirmed under this License.  For example, you may
 557 |     | not impose a license fee, royalty, or other charge for exercise of
 558 |     | rights granted under this License, and you may not initiate litigation
 559 |     | (including a cross-claim or counterclaim in a lawsuit) alleging that
 560 |     | any patent claim is infringed by making, using, selling, offering for
 561 |     | sale, or importing the Program or any portion of it.
 562 |     | 
 563 |     |   11. Patents.
 564 |     | 
 565 |     |   A "contributor" is a copyright holder who authorizes use under this
 566 |     | License of the Program or a work on which the Program is based.  The
 567 |     | work thus licensed is called the contributor's "contributor version".
 568 |     | 
 569 |     |   A contributor's "essential patent claims" are all patent claims
 570 |     | owned or controlled by the contributor, whether already acquired or
 571 |     | hereafter acquired, that would be infringed by some manner, permitted
 572 |     | by this License, of making, using, or selling its contributor version,
 573 |     | but do not include claims that would be infringed only as a
 574 |     | consequence of further modification of the contributor version.  For
 575 |     | purposes of this definition, "control" includes the right to grant
 576 |     | patent sublicenses in a manner consistent with the requirements of
 577 |     | this License.
 578 |     | 
 579 |     |   Each contributor grants you a non-exclusive, worldwide, royalty-free
 580 |     | patent license under the contributor's essential patent claims, to
 581 |     | make, use, sell, offer for sale, import and otherwise run, modify and
 582 |     | propagate the contents of its contributor version.
 583 |     | 
 584 |     |   In the following three paragraphs, a "patent license" is any express
 585 |     | agreement or commitment, however denominated, not to enforce a patent
 586 |     | (such as an express permission to practice a patent or covenant not to
 587 |     | sue for patent infringement).  To "grant" such a patent license to a
 588 |     | party means to make such an agreement or commitment not to enforce a
 589 |     | patent against the party.
 590 |     | 
 591 |     |   If you convey a covered work, knowingly relying on a patent license,
 592 |     | and the Corresponding Source of the work is not available for anyone
 593 |     | to copy, free of charge and under the terms of this License, through a
 594 |     | publicly available network server or other readily accessible means,
 595 |     | then you must either (1) cause the Corresponding Source to be so
 596 |     | available, or (2) arrange to deprive yourself of the benefit of the
 597 |     | patent license for this particular work, or (3) arrange, in a manner
 598 |     | consistent with the requirements of this License, to extend the patent
 599 |     | license to downstream recipients.  "Knowingly relying" means you have
 600 |     | actual knowledge that, but for the patent license, your conveying the
 601 |     | covered work in a country, or your recipient's use of the covered work
 602 |     | in a country, would infringe one or more identifiable patents in that
 603 |     | country that you have reason to believe are valid.
 604 |     | 
 605 |     |   If, pursuant to or in connection with a single transaction or
 606 |     | arrangement, you convey, or propagate by procuring conveyance of, a
 607 |     | covered work, and grant a patent license to some of the parties
 608 |     | receiving the covered work authorizing them to use, propagate, modify
 609 |     | or convey a specific copy of the covered work, then the patent license
 610 |     | you grant is automatically extended to all recipients of the covered
 611 |     | work and works based on it.
 612 |     | 
 613 |     |   A patent license is "discriminatory" if it does not include within
 614 |     | the scope of its coverage, prohibits the exercise of, or is
 615 |     | conditioned on the non-exercise of one or more of the rights that are
 616 |     | specifically granted under this License.  You may not convey a covered
 617 |     | work if you are a party to an arrangement with a third party that is
 618 |     | in the business of distributing software, under which you make payment
 619 |     | to the third party based on the extent of your activity of conveying
 620 |     | the work, and under which the third party grants, to any of the
 621 |     | parties who would receive the covered work from you, a discriminatory
 622 |     | patent license (a) in connection with copies of the covered work
 623 |     | conveyed by you (or copies made from those copies), or (b) primarily
 624 |     | for and in connection with specific products or compilations that
 625 |     | contain the covered work, unless you entered into that arrangement,
 626 |     | or that patent license was granted, prior to 28 March 2007.
 627 |     | 
 628 |     |   Nothing in this License shall be construed as excluding or limiting
 629 |     | any implied license or other defenses to infringement that may
 630 |     | otherwise be available to you under applicable patent law.
 631 |     | 
 632 |     |   12. No Surrender of Others' Freedom.
 633 |     | 
 634 |     |   If conditions are imposed on you (whether by court order, agreement or
 635 |     | otherwise) that contradict the conditions of this License, they do not
 636 |     | excuse you from the conditions of this License.  If you cannot convey a
 637 |     | covered work so as to satisfy simultaneously your obligations under this
 638 |     | License and any other pertinent obligations, then as a consequence you may
 639 |     | not convey it at all.  For example, if you agree to terms that obligate you
 640 |     | to collect a royalty for further conveying from those to whom you convey
 641 |     | the Program, the only way you could satisfy both those terms and this
 642 |     | License would be to refrain entirely from conveying the Program.
 643 |     | 
 644 |     |   13. Use with the GNU Affero General Public License.
 645 |     | 
 646 |     |   Notwithstanding any other provision of this License, you have
 647 |     | permission to link or combine any covered work with a work licensed
 648 |     | under version 3 of the GNU Affero General Public License into a single
 649 |     | combined work, and to convey the resulting work.  The terms of this
 650 |     | License will continue to apply to the part which is the covered work,
 651 |     | but the special requirements of the GNU Affero General Public License,
 652 |     | section 13, concerning interaction through a network will apply to the
 653 |     | combination as such.
 654 |     | 
 655 |     |   14. Revised Versions of this License.
 656 |     | 
 657 |     |   The Free Software Foundation may publish revised and/or new versions of
 658 |     | the GNU General Public License from time to time.  Such new versions will
 659 |     | be similar in spirit to the present version, but may differ in detail to
 660 |     | address new problems or concerns.
 661 |     | 
 662 |     |   Each version is given a distinguishing version number.  If the
 663 |     | Program specifies that a certain numbered version of the GNU General
 664 |     | Public License "or any later version" applies to it, you have the
 665 |     | option of following the terms and conditions either of that numbered
 666 |     | version or of any later version published by the Free Software
 667 |     | Foundation.  If the Program does not specify a version number of the
 668 |     | GNU General Public License, you may choose any version ever published
 669 |     | by the Free Software Foundation.
 670 |     | 
 671 |     |   If the Program specifies that a proxy can decide which future
 672 |     | versions of the GNU General Public License can be used, that proxy's
 673 |     | public statement of acceptance of a version permanently authorizes you
 674 |     | to choose that version for the Program.
 675 |     | 
 676 |     |   Later license versions may give you additional or different
 677 |     | permissions.  However, no additional obligations are imposed on any
 678 |     | author or copyright holder as a result of your choosing to follow a
 679 |     | later version.
 680 |     | 
 681 |     |   15. Disclaimer of Warranty.
 682 |     | 
 683 |     |   THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
 684 |     | APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
 685 |     | HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
 686 |     | OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
 687 |     | THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 688 |     | PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
 689 |     | IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
 690 |     | ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
 691 |     | 
 692 |     |   16. Limitation of Liability.
 693 |     | 
 694 |     |   IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
 695 |     | WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
 696 |     | THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
 697 |     | GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
 698 |     | USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
 699 |     | DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
 700 |     | PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
 701 |     | EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
 702 |     | SUCH DAMAGES.
 703 |     | 
 704 |     |   17. Interpretation of Sections 15 and 16.
 705 |     | 
 706 |     |   If the disclaimer of warranty and limitation of liability provided
 707 |     | above cannot be given local legal effect according to their terms,
 708 |     | reviewing courts shall apply local law that most closely approximates
 709 |     | an absolute waiver of all civil liability in connection with the
 710 |     | Program, unless a warranty or assumption of liability accompanies a
 711 |     | copy of the Program in return for a fee.
 712 |     | 
 713 |     |                      END OF TERMS AND CONDITIONS
 714 |     | 
 715 |     |             How to Apply These Terms to Your New Programs
 716 |     | 
 717 |     |   If you develop a new program, and you want it to be of the greatest
 718 |     | possible use to the public, the best way to achieve this is to make it
 719 |     | free software which everyone can redistribute and change under these terms.
 720 |     | 
 721 |     |   To do so, attach the following notices to the program.  It is safest
 722 |     | to attach them to the start of each source file to most effectively
 723 |     | state the exclusion of warranty; and each file should have at least
 724 |     | the "copyright" line and a pointer to where the full notice is found.
 725 |     | 
 726 |     |     <one line to give the program's name and a brief idea of what it does.>
 727 |     |     Copyright (C) <year>  <name of author>
 728 |     | 
 729 |     |     This program is free software: you can redistribute it and/or modify
 730 |     |     it under the terms of the GNU General Public License as published by
 731 |     |     the Free Software Foundation, either version 3 of the License, or
 732 |     |     (at your option) any later version.
 733 |     | 
 734 |     |     This program is distributed in the hope that it will be useful,
 735 |     |     but WITHOUT ANY WARRANTY; without even the implied warranty of
 736 |     |     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 737 |     |     GNU General Public License for more details.
 738 |     | 
 739 |     |     You should have received a copy of the GNU General Public License
 740 |     |     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 741 |     | 
 742 |     | Also add information on how to contact you by electronic and paper mail.
 743 |     | 
 744 |     |   If the program does terminal interaction, make it output a short
 745 |     | notice like this when it starts in an interactive mode:
 746 |     | 
 747 |     |     <program>  Copyright (C) <year>  <name of author>
 748 |     |     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
 749 |     |     This is free software, and you are welcome to redistribute it
 750 |     |     under certain conditions; type `show c' for details.
 751 |     | 
 752 |     | The hypothetical commands `show w' and `show c' should show the appropriate
 753 |     | parts of the General Public License.  Of course, your program's commands
 754 |     | might be different; for a GUI interface, you would use an "about box".
 755 |     | 
 756 |     |   You should also get your employer (if you work as a programmer) or school,
 757 |     | if any, to sign a "copyright disclaimer" for the program, if necessary.
 758 |     | For more information on this, and how to apply and follow the GNU GPL, see
 759 |     | <http://www.gnu.org/licenses/>.
 760 |     | 
 761 |     |   The GNU General Public License does not permit incorporating your program
 762 |     | into proprietary programs.  If your program is a subroutine library, you
 763 |     | may consider it more useful to permit linking proprietary applications with
 764 |     | the library.  If this is what you want to do, use the GNU Lesser General
 765 |     | Public License instead of this License.  But first, please read
 766 |     | <http://www.gnu.org/philosophy/why-not-lgpl.html>.
 767 |     | 
 768 |     | */
 769 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/properties/Properties.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./Properties_CONF.sol";
  5 |     | import "./Properties_LIQ.sol";
  6 |     | import "./Properties_SET.sol";
  7 |     | import "./Properties_TRD.sol";
  8 |     | import "./Properties_UMA.sol";
  9 |     | 
 10 |     | abstract contract Properties is
 11 |     |     Properties_CONF,
 12 |     |     Properties_LIQ,
 13 |     |     Properties_SET,
 14 |     |     Properties_TRD,
 15 |     |     Properties_UMA
 16 |     | {
 17 |     |     function invariant_GLOBAL_02(bytes memory returnData) internal {
 18 |     |         console.logBytes(returnData);
 19 |     |         if (returnData.length < 4) {} else if (returnData.length >= 4) {
 20 |     |             // Extract error selector
 21 |     |             bytes4 errorSelector;
 22 |     |             assembly {
 23 |     |                 errorSelector := mload(add(returnData, 32))
 24 |     |             }
 25 |     |             if (errorSelector == bytes4(keccak256("Error(string)"))) {
 26 |     |                 string memory errorMessage;
 27 |     |                 assembly {
 28 |     |                     errorMessage := add(returnData, 68) // 4 bytes for selector + 32 bytes for string offset + 32 bytes for string length
 29 |     |                 }
 30 |     |                 if (
 31 |     |                     keccak256(bytes(errorMessage)) ==
 32 |     |                     keccak256(bytes("ERC20: transfer amount exceeds balance"))
 33 |     |                 ) {
 34 |     |                     fl.t(false, GLOBAL_02);
 35 |     |                 }
 36 |     |             }
 37 |     |         }
 38 |     |     }
 39 |     | 
 40 | *   |     function invariant_GLOBAL_03() internal {
 41 | *   |         fl.eq(states[0].secondsInsideLower, 0, GLOBAL_03);
 42 | *   |         fl.eq(states[1].secondsInsideLower, 0, GLOBAL_03);
 43 |     | 
 44 | *   |         fl.eq(states[0].secondsInsideUpper, 0, GLOBAL_03);
 45 | *   |         fl.eq(states[1].secondsInsideUpper, 0, GLOBAL_03);
 46 |     |     }
 47 |     | 
 48 | *   |     function invariant_GLOBAL_04() internal {
 49 | *   |         fl.eq(states[0].sumVEth, states[0].sumVEthMax, GLOBAL_04);
 50 | *   |         fl.eq(states[1].sumVEth, states[1].sumVEthMax, GLOBAL_04);
 51 |     | 
 52 | *   |         fl.eq(states[0].sumVGas, states[0].sumVEthMax, GLOBAL_05);
 53 | *   |         fl.eq(states[1].sumVGas, states[1].sumVEthMax, GLOBAL_05);
 54 |     |     }
 55 |     | }
 56 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/properties/PropertiesBase.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "@perimetersec/fuzzlib/src/FuzzBase.sol";
  5 |     | import "@perimetersec/fuzzlib/src/FuzzLibString.sol";
  6 |     | 
  7 |     | import "./PropertiesDescriptions.sol";
  8 |     | import "../helper/BeforeAfter.sol";
  9 |     | 
 10 |     | abstract contract PropertiesBase is
 11 |     |     FuzzBase,
 12 |     |     BeforeAfter,
 13 |     |     PropertiesDescriptions
 14 |     | {
 15 |     |     function assertApproxEq(
 16 |     |         uint256 a,
 17 |     |         uint256 b,
 18 |     |         uint256 maxDelta,
 19 |     |         string memory reason
 20 |     |     ) internal {
 21 |     |         uint256 dt;
 22 |     |         if (a >= b) dt = a - b;
 23 |     |         else dt = b - a;
 24 |     |         if (dt > maxDelta) {
 25 |     |             bytes memory aBytes = abi.encodePacked(a);
 26 |     |             bytes memory bBytes = abi.encodePacked(b);
 27 |     |             string memory aStr = FuzzLibString.toHexString(aBytes);
 28 |     |             string memory bStr = FuzzLibString.toHexString(bBytes);
 29 |     |             fl.log("Error: a =~ b not satisfied [uint]");
 30 |     |             fl.log("   Value a", a);
 31 |     |             fl.log("   Value b", b);
 32 |     |             fl.log(" Max Delta", maxDelta);
 33 |     |             fl.log("     Delta", dt);
 34 |     |             fl.t(false, reason);
 35 |     |         }
 36 |     |     }
 37 |     | 
 38 |     |     function assertApproxEq(
 39 |     |         int256 a,
 40 |     |         int256 b,
 41 |     |         int256 maxDelta,
 42 |     |         string memory reason
 43 |     |     ) internal {
 44 |     |         int256 dt;
 45 |     |         if (a >= b) dt = a - b;
 46 |     |         else dt = b - a;
 47 |     |         if (dt > maxDelta) {
 48 |     |             bytes memory aBytes = abi.encodePacked(a);
 49 |     |             bytes memory bBytes = abi.encodePacked(b);
 50 |     |             string memory aStr = FuzzLibString.toHexString(aBytes);
 51 |     |             string memory bStr = FuzzLibString.toHexString(bBytes);
 52 |     |             fl.log("Error: a =~ b not satisfied [uint]");
 53 |     |             fl.log("   Value a", a);
 54 |     |             fl.log("   Value b", b);
 55 |     |             fl.log(" Max Delta", maxDelta);
 56 |     |             fl.log("     Delta", dt);
 57 |     |             fl.t(false, reason);
 58 |     |         }
 59 |     |     }
 60 |     |     function greaterThanOrEqualWithToleranceWei(
 61 |     |         uint256 a,
 62 |     |         uint256 b,
 63 |     |         uint256 maxWeiDiff,
 64 |     |         string memory reason
 65 |     |     ) internal {
 66 |     |         if (a >= b) {
 67 |     |             fl.t(true, "Invariant ok, checked for: ");
 68 |     |             fl.log(reason);
 69 |     |             fl.log("a is greater than or equal to b");
 70 |     |             return;
 71 |     |         }
 72 |     | 
 73 |     |         uint256 diff = b - a;
 74 |     | 
 75 |     |         if (diff > maxWeiDiff) {
 76 |     |             fl.log("a: ", a);
 77 |     |             fl.log("b: ", b);
 78 |     |             fl.log("Difference in wei is bigger than expected", diff);
 79 |     |             fl.t(false, reason);
 80 |     |         } else {
 81 |     |             fl.t(true, "Invariant ok, checked for: ");
 82 |     |             fl.log(reason);
 83 |     |             fl.log("Difference in wei: ", diff);
 84 |     |         }
 85 |     |     }
 86 |     | }
 87 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/properties/PropertiesDescriptions.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | abstract contract PropertiesDescriptions {
  5 |     |     string constant GLOBAL_01 =
  6 |     |         "The price of vGAS should always be in range of the configured min/max ticks.";
  7 |     |     string constant GLOBAL_02 =
  8 |     |         "The system should never revert with a `InsufficientBalance` error from the collateral token.";
  9 |     |     string constant GLOBAL_03 =
 10 |     |         "There should never be any liquidity outside of the [min, max] range of an epoch.";
 11 |     |     string constant GLOBAL_04 =
 12 |     |         "The amt of vETH in the system, position manager & swap router should equal the max supply.";
 13 |     |     string constant GLOBAL_05 =
 14 |     |         "The amt of vGAS in the system, position manager & swap router should equal the max supply.";
 15 |     | 
 16 |     |     string constant TRADE_01 =
 17 |     |         "The debt of a trade position should never be > the collateral of the position.";
 18 |     |     string constant TRADE_02 =
 19 |     |         "Long positions have their debt in vETH and own vGAS.";
 20 |     |     string constant TRADE_03 =
 21 |     |         "Short positions have their debt in vGAS and own vETH.";
 22 |     | 
 23 |     |     string constant LIQUID_01 =
 24 |     |         "The debt of a liquidity position should never be > the collateral of the position.";
 25 |     |     string constant LIQUID_02 =
 26 |     |         "A open LP position should not own any vETH or vGAS.";
 27 |     |     string constant LIQUID_03 =
 28 |     |         "After all LP positions have been closed, for the remaining trader positions: net shorts == net longs.";
 29 |     | 
 30 |     |     string constant SETTLE_01 =
 31 |     |         "It should always be possible to close all trade positions after the epoch is settled";
 32 |     | }
 33 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/properties/Properties_CONF.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PropertiesBase.sol";
  5 |     | 
  6 |     | /* solhint-disable numcast/safe-cast */
  7 |     | 
  8 |     | abstract contract Properties_CONF is PropertiesBase {}
  9 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/properties/Properties_LIQ.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PropertiesBase.sol";
  5 |     | 
  6 |     | /* solhint-disable numcast/safe-cast */
  7 |     | 
  8 |     | abstract contract Properties_LIQ is PropertiesBase {
  9 |     |     function invariant_LIQUID_01() internal {
 10 |     |         (uint[] memory liquidityPositions, ) = getAllPositionsIdsOfAllUsers(
 11 |     |             getLatestEpoch()
 12 |     |         );
 13 |     | 
 14 |     |         for (uint i = 0; i < liquidityPositions.length; i++) {
 15 |     |             PositionDataExpanded memory position = states[1].liquidityPositions[
 16 |     |                 liquidityPositions[i]
 17 |     |             ];
 18 |     |             if (!position.positionData.isSettled) {
 19 |     |                 greaterThanOrEqualWithToleranceWei(
 20 |     |                     position.collateral + position.valueOfLp,
 21 |     |                     position.debt,
 22 |     |                     2,
 23 |     |                     LIQUID_01
 24 |     |                 );
 25 |     |             }
 26 |     |         }
 27 |     |     }
 28 |     | 
 29 |     |     function invariant_LIQUID_02() internal {
 30 |     |         (uint[] memory liquidityPositions, ) = getAllPositionsIdsOfAllUsers(
 31 |     |             getLatestEpoch()
 32 |     |         );
 33 |     |         for (uint i = 0; i < liquidityPositions.length; i++) {
 34 |     |             PositionDataExpanded memory positionBefore = states[0]
 35 |     |                 .liquidityPositions[liquidityPositions[i]];
 36 |     | 
 37 |     |             if (!positionBefore.positionData.isSettled) {
 38 |     |                 if (
 39 |     |                     positionBefore.positionData.vEthAmount > 0 ||
 40 |     |                     positionBefore.positionData.vGasAmount > 0
 41 |     |                 ) {
 42 |     |                     fl.log(
 43 |     |                         "LIQUID_02::vEthAmount",
 44 |     |                         positionBefore.positionData.vEthAmount
 45 |     |                     );
 46 |     |                     fl.log(
 47 |     |                         "LIQUID_02::vGasAmount",
 48 |     |                         positionBefore.positionData.vGasAmount
 49 |     |                     );
 50 |     |                 }
 51 |     |                 fl.t(
 52 |     |                     positionBefore.positionData.vEthAmount == 0 &&
 53 |     |                         positionBefore.positionData.vGasAmount == 0,
 54 |     |                     LIQUID_02
 55 |     |                 );
 56 |     |             }
 57 |     | 
 58 |     |             PositionDataExpanded memory positionAfter = states[1]
 59 |     |                 .liquidityPositions[liquidityPositions[i]];
 60 |     | 
 61 |     |             if (!positionAfter.positionData.isSettled) {
 62 |     |                 if (
 63 |     |                     positionAfter.positionData.vEthAmount > 0 ||
 64 |     |                     positionAfter.positionData.vGasAmount > 0
 65 |     |                 ) {
 66 |     |                     fl.log(
 67 |     |                         "LIQUID_02::vEthAmount",
 68 |     |                         positionAfter.positionData.vEthAmount
 69 |     |                     );
 70 |     |                     fl.log(
 71 |     |                         "LIQUID_02::vGasAmount",
 72 |     |                         positionAfter.positionData.vGasAmount
 73 |     |                     );
 74 |     |                 }
 75 |     |                 fl.t(
 76 |     |                     positionAfter.positionData.vEthAmount == 0 &&
 77 |     |                         positionAfter.positionData.vGasAmount == 0,
 78 |     |                     LIQUID_02
 79 |     |                 );
 80 |     |             }
 81 |     |         }
 82 |     |     }
 83 |     | 
 84 |     |     function invariant_LIQUID_03() internal {
 85 | *   |         fl.eq(states[1].totalBorrowedVGas, states[1].totalHeldVGas, LIQUID_03);
 86 |     |     }
 87 |     | }
 88 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/properties/Properties_SET.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PropertiesBase.sol";
  5 |     | 
  6 |     | /* solhint-disable numcast/safe-cast */
  7 |     | 
  8 |     | abstract contract Properties_SET is PropertiesBase {}
  9 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/properties/Properties_TRD.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PropertiesBase.sol";
  5 |     | 
  6 |     | /* solhint-disable numcast/safe-cast */
  7 |     | 
  8 |     | abstract contract Properties_TRD is PropertiesBase {
  9 |     |     function invariant_TRADE_01() internal {
 10 |     |         (, uint[] memory tradePositions) = getAllPositionsIdsOfAllUsers(
 11 |     |             getLatestEpoch()
 12 |     |         );
 13 |     | 
 14 |     |         for (uint i = 0; i < tradePositions.length; i++) {
 15 |     |             PositionDataExpanded memory position = states[1].tradePositions[
 16 |     |                 tradePositions[i]
 17 |     |             ];
 18 |     |             if (!position.positionData.isSettled) {
 19 |     |                 fl.gte(position.collateral, position.debt, TRADE_01);
 20 |     |             }
 21 |     |         }
 22 |     |     }
 23 |     | 
 24 |     |     function invariant_TRADE_02() internal {
 25 |     |         (, uint[] memory tradePositions) = getAllPositionsIdsOfAllUsers(
 26 |     |             getLatestEpoch()
 27 |     |         );
 28 |     | 
 29 |     |         for (uint i = 0; i < tradePositions.length; i++) {
 30 |     |             PositionDataExpanded memory position = states[1].tradePositions[
 31 |     |                 tradePositions[i]
 32 |     |             ];
 33 |     | 
 34 |     |             if (position.positionData.vGasAmount > 0) {
 35 |     |                 if (
 36 |     |                     position.positionData.borrowedVGas > 0 ||
 37 |     |                     position.positionData.vEthAmount > 0
 38 |     |                 ) {
 39 |     |                     fl.log(
 40 |     |                         "TRADE_02::borrowedVGas",
 41 |     |                         position.positionData.borrowedVGas
 42 |     |                     );
 43 |     |                     fl.log(
 44 |     |                         "TRADE_02::vEthAmount",
 45 |     |                         position.positionData.vEthAmount
 46 |     |                     );
 47 |     |                 }
 48 |     |                 fl.t(
 49 |     |                     position.positionData.borrowedVGas == 0 &&
 50 |     |                         position.positionData.vEthAmount == 0,
 51 |     |                     TRADE_02
 52 |     |                 );
 53 |     |             }
 54 |     | 
 55 |     |             if (position.positionData.vEthAmount > 0) {
 56 |     |                 if (
 57 |     |                     position.positionData.borrowedVEth > 0 ||
 58 |     |                     position.positionData.vGasAmount > 0
 59 |     |                 ) {
 60 |     |                     fl.log(
 61 |     |                         "TRADE_02::borrowedVGas",
 62 |     |                         position.positionData.borrowedVEth
 63 |     |                     );
 64 |     |                     fl.log(
 65 |     |                         "TRADE_02::vEthAmount",
 66 |     |                         position.positionData.vGasAmount
 67 |     |                     );
 68 |     |                 }
 69 |     |                 fl.t(
 70 |     |                     position.positionData.borrowedVEth == 0 &&
 71 |     |                         position.positionData.vGasAmount == 0,
 72 |     |                     TRADE_03
 73 |     |                 );
 74 |     |             }
 75 |     |         }
 76 |     |     }
 77 |     | }
 78 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/properties/Properties_UMA.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./PropertiesBase.sol";
  5 |     | 
  6 |     | /* solhint-disable numcast/safe-cast */
  7 |     | 
  8 |     | abstract contract Properties_UMA is PropertiesBase {}
  9 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/util/FunctionCalls.sol
   1 |     | // SPDX-License-Identifier: GPL-3.0
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import "@perimetersec/fuzzlib/src/FuzzBase.sol";
   5 |     | import "../helper/FuzzStorageVariables.sol";
   6 |     | import "../../../src/contracts/interfaces/IFoilStructs.sol";
   7 |     | 
   8 |     | contract FunctionCalls is FuzzBase, FuzzStorageVariables {
   9 |     |     event InitializeMarketCall(
  10 |     |         address owner,
  11 |     |         address collateralAsset,
  12 |     |         address uniswapPositionManager,
  13 |     |         address uniswapSwapRouter,
  14 |     |         address optimisticOracleV3
  15 |     |     );
  16 |     |     event UpdateMarketCall(
  17 |     |         address owner,
  18 |     |         address uniswapPositionManager,
  19 |     |         address uniswapSwapRouter,
  20 |     |         address optimisticOracleV3
  21 |     |     );
  22 |     |     event CreateEpochCall(
  23 |     |         uint256 startTime,
  24 |     |         uint256 endTime,
  25 |     |         uint160 startingSqrtPriceX96
  26 |     |     );
  27 |     | 
  28 |     |     event OnERC721ReceivedCall(
  29 |     |         address operator,
  30 |     |         address from,
  31 |     |         uint256 tokenId,
  32 |     |         bytes data
  33 |     |     );
  34 |     |     event CollectFeesCall(uint256 epochId, uint256 tokenId);
  35 |     |     event DecreaseLiquidityPositionCall(
  36 |     |         uint256 positionId,
  37 |     |         uint256 collateralAmount,
  38 |     |         uint128 liquidity,
  39 |     |         uint256 minGasAmount,
  40 |     |         uint256 minEthAmount
  41 |     |     );
  42 |     |     event IncreaseLiquidityPositionCall(
  43 |     |         uint256 positionId,
  44 |     |         uint256 collateralAmount,
  45 |     |         uint256 gasTokenAmount,
  46 |     |         uint256 ethTokenAmount,
  47 |     |         uint256 minGasAmount,
  48 |     |         uint256 minEthAmount
  49 |     |     );
  50 |     |     event GetTokenAmountsCall(
  51 |     |         uint256 epochId,
  52 |     |         uint256 depositedCollateralAmount,
  53 |     |         uint160 sqrtPriceX96,
  54 |     |         uint160 sqrtPriceAX96,
  55 |     |         uint160 sqrtPriceBX96
  56 |     |     );
  57 |     |     event BalanceOfCall(address holder);
  58 |     |     event OwnerOfCall(uint256 tokenId);
  59 |     |     event NameCall();
  60 |     |     event SymbolCall();
  61 |     |     event TokenURICall(uint256 tokenId);
  62 |     |     event ApproveCall(address to, uint256 tokenId);
  63 |     |     event GetApprovedCall(uint256 tokenId);
  64 |     |     event SetApprovalForAllCall(address operator, bool approved);
  65 |     |     event IsApprovedForAllCall(address holder, address operator);
  66 |     |     event TransferFromCall(address from, address to, uint256 tokenId);
  67 |     |     event SafeTransferFromCall(address from, address to, uint256 tokenId);
  68 |     |     event SafeTransferFromWithDataCall(
  69 |     |         address from,
  70 |     |         address to,
  71 |     |         uint256 tokenId,
  72 |     |         bytes data
  73 |     |     );
  74 |     |     event TokenOfOwnerByIndexCall(address owner, uint256 index);
  75 |     |     event TotalSupplyCall();
  76 |     |     event TokenByIndexCall(uint256 index);
  77 |     | 
  78 |     |     event CreateTraderPositionCall(
  79 |     |         uint256 epochId,
  80 |     |         uint256 collateralAmount,
  81 |     |         int256 tokenAmount,
  82 |     |         int256 tokenAmountLimit
  83 |     |     );
  84 |     |     event ModifyTraderPositionCall(
  85 |     |         uint256 positionId,
  86 |     |         int collateralAmount,
  87 |     |         int256 tokenAmount,
  88 |     |         int256 tokenAmountLimit
  89 |     |     );
  90 |     |     event GetReferencePriceCall(uint256 epochId);
  91 |     |     event GetLongSizeForCollateralCall(uint256 epochId, uint256 collateral);
  92 |     |     event GetShortSizeForCollateralCall(uint256 epochId, uint256 collateral);
  93 |     |     event SubmitSettlementPriceCall(
  94 |     |         uint256 epochId,
  95 |     |         uint256 settlementPriceD18
  96 |     |     );
  97 |     |     event AssertionResolvedCallbackCall(
  98 |     |         bytes32 assertionId,
  99 |     |         bool assertedTruthfully
 100 |     |     );
 101 |     |     event AssertionDisputedCallbackCall(bytes32 assertionId);
 102 |     |     event GetMarketCall();
 103 |     |     event GetEpochCall(uint256 id);
 104 |     |     event GetLatestEpochCall();
 105 |     |     event GetPositionCall(uint256 positionId);
 106 |     |     event GetPositionLiquidityCall(uint256 positionId);
 107 |     |     event GetEthToGasCall(uint256 ethAmount, uint256 epochId);
 108 |     |     event GetCurrentPriceCall();
 109 |     |     event MockDisputeAssertionCall(bytes32 assertionId, address disputer);
 110 |     |     event MockSettleAssertionCall(
 111 |     |         bytes32 assertionId,
 112 |     |         bool settlementResolution
 113 |     |     );
 114 |     |     event GetMarketOwnerCall();
 115 |     |     event SettlePositionCall(uint postionId);
 116 |     |     event GetCurrentEpochTicksCall(uint epochId);
 117 |     |     event getAmount0ForLiquidity_Foil(
 118 |     |         uint160 sqrtRatioAX96,
 119 |     |         uint160 sqrtRatioBX96,
 120 |     |         uint128 liquidity
 121 |     |     );
 122 |     |     event GetCurrentEpochSqrtPriceX96MaxMinCal(uint epochId);
 123 |     |     event GetSettlementPriceCall(uint epochId);
 124 |     |     event QuoteCreateTraderPositionCall(uint epochId, int size);
 125 |     |     event QuoteModifyTraderPositionCall(uint positionId, int size);
 126 |     | 
 127 | *   |     function _initializeMarketCall(
 128 |     |         address owner,
 129 |     |         address collateralAsset,
 130 |     |         IFoilStructs.EpochParams memory epochParams,
 131 |     |         address foilAddresss
 132 | *   |     ) internal returns (bool success, bytes memory returnData) {
 133 | *   |         emit InitializeMarketCall(
 134 |     |             owner,
 135 |     |             collateralAsset,
 136 |     |             address(0),
 137 |     |             address(0),
 138 |     |             address(0)
 139 |     |         );
 140 |     | 
 141 | *   |         (success, returnData) = foil.call(
 142 | *   |             abi.encodeWithSelector(
 143 | *   |                 epochConfigurationModuleImpl.initializeMarket.selector,
 144 | *   |                 owner,
 145 | *   |                 collateralAsset,
 146 | *   |                 epochParams,
 147 | *   |                 foilAddresss
 148 |     |             )
 149 |     |         );
 150 |     |     }
 151 |     | 
 152 | *   |     function _updateMarketCall(
 153 |     |         IFoilStructs.EpochParams memory epochParams
 154 | *   |     ) internal returns (bool success, bytes memory returnData) {
 155 | *   |         emit UpdateMarketCall(address(0), address(0), address(0), address(0));
 156 |     | 
 157 | *   |         (success, returnData) = foil.call(
 158 | *   |             abi.encodeWithSelector(
 159 | *   |                 epochConfigurationModuleImpl.updateMarket.selector,
 160 | *   |                 epochParams
 161 |     |             )
 162 |     |         );
 163 |     |     }
 164 |     | 
 165 | *   |     function _createEpochCall(
 166 |     |         uint256 startTime,
 167 |     |         uint256 endTime,
 168 |     |         uint160 startingSqrtPriceX96,
 169 |     |         uint256 salt
 170 | *   |     ) internal returns (bool success, bytes memory returnData) {
 171 | *   |         emit CreateEpochCall(startTime, endTime, startingSqrtPriceX96);
 172 |     | 
 173 | *   |         (success, returnData) = foil.call(
 174 | *   |             abi.encodeWithSelector(
 175 | *   |                 epochConfigurationModuleImpl.createEpoch.selector,
 176 |     |                 startTime,
 177 |     |                 endTime,
 178 |     |                 startingSqrtPriceX96,
 179 |     |                 salt
 180 |     |             )
 181 |     |         );
 182 |     |     }
 183 |     | 
 184 |     |     function _createLiquidityPositionCall(
 185 |     |         IFoilStructs.LiquidityMintParams memory params
 186 |     |     ) internal returns (bool success, bytes memory returnData) {
 187 |     |         vm.prank(currentActor);
 188 |     |         (success, returnData) = foil.call(
 189 |     |             abi.encodeWithSelector(
 190 |     |                 epochLiquidityModuleImpl.createLiquidityPosition.selector,
 191 |     |                 params
 192 |     |             )
 193 |     |         );
 194 |     |     }
 195 |     | 
 196 | *   |     function _decreaseLiquidityPositionCall(
 197 |     |         IFoilStructs.LiquidityDecreaseParams memory params
 198 |     |     ) internal returns (bool success, bytes memory returnData) {
 199 |     |         vm.prank(currentActor);
 200 | *   |         (success, returnData) = foil.call(
 201 | *   |             abi.encodeWithSelector(
 202 |     |                 epochLiquidityModuleImpl.decreaseLiquidityPosition.selector,
 203 |     |                 params
 204 |     |             )
 205 |     |         );
 206 |     |     }
 207 |     |     function _decreaseLiquidityPositionCallNOPRANK(
 208 |     |         IFoilStructs.LiquidityDecreaseParams memory params
 209 |     |     ) internal returns (bool success, bytes memory returnData) {
 210 |     |         (success, returnData) = foil.call(
 211 |     |             abi.encodeWithSelector(
 212 |     |                 epochLiquidityModuleImpl.decreaseLiquidityPosition.selector,
 213 |     |                 params
 214 |     |             )
 215 |     |         );
 216 |     |     }
 217 |     |     function _increaseLiquidityPositionCall(
 218 |     |         IFoilStructs.LiquidityIncreaseParams memory params
 219 |     |     ) internal returns (bool success, bytes memory returnData) {
 220 |     |         vm.prank(currentActor);
 221 |     |         (success, returnData) = foil.call(
 222 |     |             abi.encodeWithSelector(
 223 |     |                 epochLiquidityModuleImpl.increaseLiquidityPosition.selector,
 224 |     |                 params
 225 |     |             )
 226 |     |         );
 227 |     |     }
 228 |     | 
 229 |     |     function _getTokenAmountsCall(
 230 |     |         uint256 epochId,
 231 |     |         uint256 depositedCollateralAmount,
 232 |     |         uint160 sqrtPriceX96,
 233 |     |         uint160 sqrtPriceAX96,
 234 |     |         uint160 sqrtPriceBX96
 235 |     |     ) internal returns (bool success, bytes memory returnData) {
 236 |     |         emit GetTokenAmountsCall(
 237 |     |             epochId,
 238 |     |             depositedCollateralAmount,
 239 |     |             sqrtPriceX96,
 240 |     |             sqrtPriceAX96,
 241 |     |             sqrtPriceBX96
 242 |     |         );
 243 |     | 
 244 |     |         vm.prank(currentActor);
 245 |     |         (success, returnData) = foil.call(
 246 |     |             abi.encodeWithSelector(
 247 |     |                 epochLiquidityModuleImpl.getTokenAmounts.selector,
 248 |     |                 epochId,
 249 |     |                 depositedCollateralAmount,
 250 |     |                 sqrtPriceX96,
 251 |     |                 sqrtPriceAX96,
 252 |     |                 sqrtPriceBX96
 253 |     |             )
 254 |     |         );
 255 |     |     }
 256 |     | 
 257 |     |     function _balanceOfCall(
 258 |     |         address holder
 259 |     |     ) internal returns (bool success, bytes memory returnData) {
 260 |     |         emit BalanceOfCall(holder);
 261 |     | 
 262 |     |         vm.prank(currentActor);
 263 |     |         (success, returnData) = foil.call(
 264 |     |             abi.encodeWithSelector(
 265 |     |                 epochNftModuleImpl.balanceOf.selector,
 266 |     |                 holder
 267 |     |             )
 268 |     |         );
 269 |     |     }
 270 |     | 
 271 |     |     function _ownerOfCall(
 272 |     |         uint256 tokenId
 273 |     |     ) internal returns (bool success, bytes memory returnData) {
 274 |     |         emit OwnerOfCall(tokenId);
 275 |     | 
 276 |     |         vm.prank(currentActor);
 277 |     |         (success, returnData) = foil.call(
 278 |     |             abi.encodeWithSelector(epochNftModuleImpl.ownerOf.selector, tokenId)
 279 |     |         );
 280 |     |     }
 281 |     | 
 282 |     |     function _nameCall()
 283 |     |         internal
 284 |     |         returns (bool success, bytes memory returnData)
 285 |     |     {
 286 |     |         emit NameCall();
 287 |     | 
 288 |     |         vm.prank(currentActor);
 289 |     |         (success, returnData) = foil.call(
 290 |     |             abi.encodeWithSelector(epochNftModuleImpl.name.selector)
 291 |     |         );
 292 |     |     }
 293 |     | 
 294 |     |     function _symbolCall()
 295 |     |         internal
 296 |     |         returns (bool success, bytes memory returnData)
 297 |     |     {
 298 |     |         emit SymbolCall();
 299 |     | 
 300 |     |         vm.prank(currentActor);
 301 |     |         (success, returnData) = foil.call(
 302 |     |             abi.encodeWithSelector(epochNftModuleImpl.symbol.selector)
 303 |     |         );
 304 |     |     }
 305 |     | 
 306 |     |     function _tokenURICall(
 307 |     |         uint256 tokenId
 308 |     |     ) internal returns (bool success, bytes memory returnData) {
 309 |     |         emit TokenURICall(tokenId);
 310 |     | 
 311 |     |         vm.prank(currentActor);
 312 |     |         (success, returnData) = foil.call(
 313 |     |             abi.encodeWithSelector(
 314 |     |                 epochNftModuleImpl.tokenURI.selector,
 315 |     |                 tokenId
 316 |     |             )
 317 |     |         );
 318 |     |     }
 319 |     | 
 320 |     |     function _approveCall(
 321 |     |         address to,
 322 |     |         uint256 tokenId
 323 |     |     ) internal returns (bool success, bytes memory returnData) {
 324 |     |         emit ApproveCall(to, tokenId);
 325 |     | 
 326 |     |         vm.prank(currentActor);
 327 |     |         (success, returnData) = foil.call(
 328 |     |             abi.encodeWithSelector(
 329 |     |                 epochNftModuleImpl.approve.selector,
 330 |     |                 to,
 331 |     |                 tokenId
 332 |     |             )
 333 |     |         );
 334 |     |     }
 335 |     | 
 336 |     |     function _getApprovedCall(
 337 |     |         uint256 tokenId
 338 |     |     ) internal returns (bool success, bytes memory returnData) {
 339 |     |         emit GetApprovedCall(tokenId);
 340 |     | 
 341 |     |         vm.prank(currentActor);
 342 |     |         (success, returnData) = foil.call(
 343 |     |             abi.encodeWithSelector(
 344 |     |                 epochNftModuleImpl.getApproved.selector,
 345 |     |                 tokenId
 346 |     |             )
 347 |     |         );
 348 |     |     }
 349 |     | 
 350 |     |     function _setApprovalForAllCall(
 351 |     |         address operator,
 352 |     |         bool approved
 353 |     |     ) internal returns (bool success, bytes memory returnData) {
 354 |     |         emit SetApprovalForAllCall(operator, approved);
 355 |     | 
 356 |     |         vm.prank(currentActor);
 357 |     |         (success, returnData) = foil.call(
 358 |     |             abi.encodeWithSelector(
 359 |     |                 epochNftModuleImpl.setApprovalForAll.selector,
 360 |     |                 operator,
 361 |     |                 approved
 362 |     |             )
 363 |     |         );
 364 |     |     }
 365 |     | 
 366 |     |     function _isApprovedForAllCall(
 367 |     |         address holder,
 368 |     |         address operator
 369 |     |     ) internal returns (bool success, bytes memory returnData) {
 370 |     |         emit IsApprovedForAllCall(holder, operator);
 371 |     | 
 372 |     |         vm.prank(currentActor);
 373 |     |         (success, returnData) = foil.call(
 374 |     |             abi.encodeWithSelector(
 375 |     |                 epochNftModuleImpl.isApprovedForAll.selector,
 376 |     |                 holder,
 377 |     |                 operator
 378 |     |             )
 379 |     |         );
 380 |     |     }
 381 |     | 
 382 |     |     function _transferFromCall(
 383 |     |         address from,
 384 |     |         address to,
 385 |     |         uint256 tokenId
 386 |     |     ) internal returns (bool success, bytes memory returnData) {
 387 |     |         emit TransferFromCall(from, to, tokenId);
 388 |     | 
 389 |     |         vm.prank(currentActor);
 390 |     |         (success, returnData) = foil.call(
 391 |     |             abi.encodeWithSelector(
 392 |     |                 epochNftModuleImpl.transferFrom.selector,
 393 |     |                 from,
 394 |     |                 to,
 395 |     |                 tokenId
 396 |     |             )
 397 |     |         );
 398 |     |     }
 399 |     | 
 400 |     |     function _tokenOfOwnerByIndexCall(
 401 |     |         address owner,
 402 |     |         uint256 index
 403 |     |     ) internal returns (bool success, bytes memory returnData) {
 404 |     |         emit TokenOfOwnerByIndexCall(owner, index);
 405 |     | 
 406 |     |         vm.prank(currentActor);
 407 |     |         (success, returnData) = foil.call(
 408 |     |             abi.encodeWithSelector(
 409 |     |                 epochNftModuleImpl.tokenOfOwnerByIndex.selector,
 410 |     |                 owner,
 411 |     |                 index
 412 |     |             )
 413 |     |         );
 414 |     |     }
 415 |     | 
 416 |     |     function _totalSupplyCall()
 417 |     |         internal
 418 |     |         returns (bool success, bytes memory returnData)
 419 |     |     {
 420 |     |         emit TotalSupplyCall();
 421 |     | 
 422 |     |         vm.prank(currentActor);
 423 |     |         (success, returnData) = foil.call(
 424 |     |             abi.encodeWithSelector(epochNftModuleImpl.totalSupply.selector)
 425 |     |         );
 426 |     |     }
 427 |     | 
 428 |     |     function _tokenByIndexCall(
 429 |     |         uint256 index
 430 |     |     ) internal returns (bool success, bytes memory returnData) {
 431 |     |         emit TokenByIndexCall(index);
 432 |     | 
 433 |     |         vm.prank(currentActor);
 434 |     |         (success, returnData) = foil.call(
 435 |     |             abi.encodeWithSelector(
 436 |     |                 epochNftModuleImpl.tokenByIndex.selector,
 437 |     |                 index
 438 |     |             )
 439 |     |         );
 440 |     |     }
 441 |     | 
 442 |     |     function _createTraderPositionCall(
 443 |     |         uint256 epochId,
 444 |     |         int256 tokenAmount,
 445 |     |         uint256 collateralAmount,
 446 |     |         uint256 deadline
 447 |     |     ) internal returns (bool success, bytes memory returnData) {
 448 |     |         emit CreateTraderPositionCall(
 449 |     |             epochId,
 450 |     |             collateralAmount,
 451 |     |             tokenAmount,
 452 |     |             0
 453 |     |         );
 454 |     | 
 455 |     |         vm.prank(currentActor);
 456 |     |         (success, returnData) = foil.call(
 457 |     |             abi.encodeWithSelector(
 458 |     |                 epochTradeModuleImpl.createTraderPosition.selector,
 459 |     |                 epochId,
 460 |     |                 tokenAmount,
 461 |     |                 collateralAmount,
 462 |     |                 deadline
 463 |     |             )
 464 |     |         );
 465 |     |     }
 466 |     | 
 467 | *   |     function _modifyTraderPositionCall(
 468 |     |         uint256 positionId,
 469 |     |         int256 tokenAmount,
 470 |     |         int256 collateralAmount,
 471 |     |         uint256 deadline
 472 |     |     ) internal returns (bool success, bytes memory returnData) {
 473 |     |         emit ModifyTraderPositionCall(
 474 |     |             positionId,
 475 |     |             collateralAmount,
 476 |     |             tokenAmount,
 477 |     |             0
 478 |     |         );
 479 |     | 
 480 |     |         vm.prank(currentActor);
 481 | *   |         (success, returnData) = foil.call(
 482 | *   |             abi.encodeWithSelector(
 483 |     |                 epochTradeModuleImpl.modifyTraderPosition.selector,
 484 |     |                 positionId,
 485 |     |                 tokenAmount,
 486 |     |                 collateralAmount,
 487 |     |                 deadline
 488 |     |             )
 489 |     |         );
 490 |     |     }
 491 |     | 
 492 |     |     function _quoteCreateTraderPositionCall(
 493 |     |         uint256 epochId,
 494 |     |         int256 size
 495 |     |     ) internal returns (bool success, bytes memory returnData) {
 496 |     |         emit QuoteCreateTraderPositionCall(epochId, size);
 497 |     | 
 498 |     |         vm.prank(currentActor);
 499 |     |         (success, returnData) = foil.call(
 500 |     |             abi.encodeWithSelector(
 501 |     |                 epochTradeModuleImpl.quoteCreateTraderPosition.selector,
 502 |     |                 epochId,
 503 |     |                 size
 504 |     |             )
 505 |     |         );
 506 |     |     }
 507 |     | 
 508 |     |     function _quoteModifyTraderPositionCall(
 509 |     |         uint256 positionId,
 510 |     |         int256 size
 511 |     |     ) internal returns (bool success, bytes memory returnData) {
 512 |     |         emit QuoteModifyTraderPositionCall(positionId, size);
 513 |     | 
 514 |     |         vm.prank(currentActor);
 515 |     |         (success, returnData) = foil.call(
 516 |     |             abi.encodeWithSelector(
 517 |     |                 epochTradeModuleImpl.quoteModifyTraderPosition.selector,
 518 |     |                 positionId,
 519 |     |                 size
 520 |     |             )
 521 |     |         );
 522 |     |     }
 523 |     | 
 524 |     |     function _submitSettlementPriceCall(
 525 |     |         uint256 epochId,
 526 |     |         uint256 settlementPriceD18
 527 |     |     ) internal returns (bool success, bytes memory returnData) {
 528 |     |         emit SubmitSettlementPriceCall(epochId, settlementPriceD18);
 529 |     | 
 530 |     |         (success, returnData) = foil.call(
 531 |     |             abi.encodeWithSelector(
 532 |     |                 epochUMASettlementModuleImpl.submitSettlementPrice.selector,
 533 |     |                 epochId,
 534 |     |                 settlementPriceD18
 535 |     |             )
 536 |     |         );
 537 |     |     }
 538 |     | 
 539 |     |     function _assertionResolvedCallbackCall(
 540 |     |         bytes32 assertionId,
 541 |     |         bool assertedTruthfully
 542 |     |     ) internal returns (bool success, bytes memory returnData) {
 543 |     |         emit AssertionResolvedCallbackCall(assertionId, assertedTruthfully);
 544 |     | 
 545 |     |         (success, returnData) = foil.call(
 546 |     |             abi.encodeWithSelector(
 547 |     |                 epochUMASettlementModuleImpl.assertionResolvedCallback.selector,
 548 |     |                 assertionId,
 549 |     |                 assertedTruthfully
 550 |     |             )
 551 |     |         );
 552 |     |     }
 553 |     | 
 554 |     |     function _assertionDisputedCallbackCall(
 555 |     |         bytes32 assertionId
 556 |     |     ) internal returns (bool success, bytes memory returnData) {
 557 |     |         emit AssertionDisputedCallbackCall(assertionId);
 558 |     | 
 559 |     |         (success, returnData) = foil.call(
 560 |     |             abi.encodeWithSelector(
 561 |     |                 epochUMASettlementModuleImpl.assertionDisputedCallback.selector,
 562 |     |                 assertionId
 563 |     |             )
 564 |     |         );
 565 |     |     }
 566 |     | 
 567 |     |     function _settlePositionCall(
 568 |     |         uint256 postionId
 569 |     |     ) internal returns (bool success, bytes memory returnData) {
 570 |     |         emit SettlePositionCall(postionId);
 571 |     |         vm.prank(currentActor);
 572 |     |         (success, returnData) = foil.call(
 573 |     |             abi.encodeWithSelector(
 574 |     |                 epochSettlementModuleImpl.settlePosition.selector,
 575 |     |                 postionId
 576 |     |             )
 577 |     |         );
 578 |     |     }
 579 |     | 
 580 |     |     function _getMarketCall()
 581 |     |         internal
 582 |     |         returns (bool success, bytes memory returnData)
 583 |     |     {
 584 |     |         emit GetMarketCall();
 585 |     | 
 586 |     |         vm.prank(currentActor);
 587 |     |         (success, returnData) = foil.call(
 588 |     |             abi.encodeWithSelector(epochViewsModuleImpl.getMarket.selector)
 589 |     |         );
 590 |     |     }
 591 |     | 
 592 |     |     function _getEpochCall(
 593 |     |         uint256 id
 594 |     |     ) internal returns (bool success, bytes memory returnData) {
 595 |     |         emit GetEpochCall(id);
 596 |     | 
 597 |     |         vm.prank(currentActor);
 598 |     |         (success, returnData) = foil.call(
 599 |     |             abi.encodeWithSelector(epochViewsModuleImpl.getEpoch.selector, id)
 600 |     |         );
 601 |     |     }
 602 |     | 
 603 | *   |     function _getLatestEpochCall()
 604 |     |         internal
 605 | *   |         returns (bool success, bytes memory returnData)
 606 |     |     {
 607 | *   |         emit GetLatestEpochCall();
 608 |     | 
 609 | *   |         (success, returnData) = foil.call(
 610 | *   |             abi.encodeWithSelector(epochViewsModuleImpl.getLatestEpoch.selector)
 611 |     |         );
 612 |     |     }
 613 |     | 
 614 |     |     function _getPositionCall(
 615 |     |         uint256 positionId
 616 |     |     ) internal returns (bool success, bytes memory returnData) {
 617 |     |         emit GetPositionCall(positionId);
 618 |     | 
 619 |     |         vm.prank(currentActor);
 620 |     |         (success, returnData) = foil.call(
 621 |     |             abi.encodeWithSelector(
 622 |     |                 epochViewsModuleImpl.getPosition.selector,
 623 |     |                 positionId
 624 |     |             )
 625 |     |         );
 626 |     |     }
 627 |     | 
 628 |     |     function _getPositionLiquidityCall(
 629 |     |         uint256 positionId
 630 |     |     ) internal returns (bool success, bytes memory returnData) {
 631 |     |         emit GetPositionLiquidityCall(positionId);
 632 |     | 
 633 |     |         vm.prank(currentActor);
 634 |     |         (success, returnData) = foil.call(
 635 |     |             abi.encodeWithSelector(
 636 |     |                 lens.getPositionLiquidity.selector,
 637 |     |                 positionId
 638 |     |             )
 639 |     |         );
 640 |     |     }
 641 |     | 
 642 |     |     function _getPositionOwnerCall(
 643 |     |         uint256 positionId
 644 |     |     ) internal returns (bool success, bytes memory returnData) {
 645 |     |         emit GetPositionLiquidityCall(positionId);
 646 |     | 
 647 |     |         vm.prank(currentActor);
 648 |     |         (success, returnData) = foil.call(
 649 |     |             abi.encodeWithSelector(lens.getPositionOwner.selector, positionId)
 650 |     |         );
 651 |     |     }
 652 |     |     function _getCurrentEpochSqrtPriceX96MaxMinCall(
 653 |     |         uint256 epochId
 654 |     |     ) internal returns (bool success, bytes memory returnData) {
 655 |     |         emit GetCurrentEpochSqrtPriceX96MaxMinCal(epochId);
 656 |     | 
 657 |     |         vm.prank(currentActor);
 658 |     |         (success, returnData) = foil.call(
 659 |     |             abi.encodeWithSelector(
 660 |     |                 lens.getCurrentEpochSqrtPriceX96MaxMin.selector,
 661 |     |                 epochId
 662 |     |             )
 663 |     |         );
 664 |     |     }
 665 |     | 
 666 |     |     function _getEthToGasCall(
 667 |     |         uint256 ethAmount,
 668 |     |         uint256 epochId
 669 |     |     ) internal returns (bool success, bytes memory returnData) {
 670 |     |         emit GetEthToGasCall(ethAmount, epochId);
 671 |     | 
 672 |     |         vm.prank(currentActor);
 673 |     |         (success, returnData) = foil.call(
 674 |     |             abi.encodeWithSelector(
 675 |     |                 lens.getEthToGas.selector,
 676 |     |                 ethAmount,
 677 |     |                 epochId
 678 |     |             )
 679 |     |         );
 680 |     |     }
 681 |     | 
 682 |     |     function _getAmount0ForLiquidity_FoilCall(
 683 |     |         uint160 sqrtRatioAX96,
 684 |     |         uint160 sqrtRatioBX96,
 685 |     |         uint128 liquidity
 686 |     |     ) internal returns (bool success, bytes memory returnData) {
 687 |     |         emit getAmount0ForLiquidity_Foil(
 688 |     |             sqrtRatioAX96,
 689 |     |             sqrtRatioBX96,
 690 |     |             liquidity
 691 |     |         );
 692 |     | 
 693 |     |         vm.prank(currentActor);
 694 |     |         (success, returnData) = foil.call(
 695 |     |             abi.encodeWithSelector(
 696 |     |                 lens.getAmount0ForLiquidity_Foil.selector,
 697 |     |                 sqrtRatioAX96,
 698 |     |                 sqrtRatioBX96,
 699 |     |                 liquidity
 700 |     |             )
 701 |     |         );
 702 |     |     }
 703 |     |     function _getCurrentEpochTicksCall(
 704 |     |         uint256 epochId
 705 |     |     ) internal returns (bool success, bytes memory returnData) {
 706 |     |         emit GetCurrentEpochTicksCall(epochId);
 707 |     | 
 708 |     |         vm.prank(currentActor);
 709 |     |         (success, returnData) = foil.call(
 710 |     |             abi.encodeWithSelector(lens.getCurrentEpochTicks.selector, epochId)
 711 |     |         );
 712 |     |     }
 713 |     | 
 714 |     |     function _getCurrentPriceCall(
 715 |     |         uint epochId
 716 |     |     ) internal returns (bool success, bytes memory returnData) {
 717 |     |         emit GetCurrentPriceCall();
 718 |     | 
 719 |     |         vm.prank(currentActor);
 720 |     |         (success, returnData) = foil.call(
 721 |     |             abi.encodeWithSelector(lens.getCurrentPrice.selector, epochId)
 722 |     |         );
 723 |     |     }
 724 |     |     function _getMarketOwnerCall()
 725 |     |         internal
 726 |     |         returns (bool success, bytes memory returnData)
 727 |     |     {
 728 |     |         emit GetMarketOwnerCall();
 729 |     | 
 730 |     |         vm.prank(currentActor);
 731 |     |         (success, returnData) = foil.call(
 732 |     |             abi.encodeWithSelector(lens.getMarketOwner.selector)
 733 |     |         );
 734 |     |     }
 735 |     |     function _getSettlementPriceCall(
 736 |     |         uint epochId
 737 |     |     ) internal returns (bool success, bytes memory returnData) {
 738 |     |         emit GetSettlementPriceCall(epochId);
 739 |     | 
 740 |     |         vm.prank(currentActor);
 741 |     |         (success, returnData) = foil.call(
 742 |     |             abi.encodeWithSelector(lens.getSettlementPrice.selector, epochId)
 743 |     |         );
 744 |     |     }
 745 |     | 
 746 |     |     function _mockDisputeAssertionCall(
 747 |     |         bytes32 assertionId,
 748 |     |         address disputer
 749 |     |     ) internal returns (bool success, bytes memory returnData) {
 750 |     |         emit MockDisputeAssertionCall(assertionId, disputer);
 751 |     | 
 752 |     |         vm.prank(currentActor);
 753 |     | 
 754 |     |         (success, returnData) = address(uma).call(
 755 |     |             abi.encodeWithSelector(
 756 |     |                 uma.mockDisputeAssertion.selector,
 757 |     |                 assertionId,
 758 |     |                 disputer
 759 |     |             )
 760 |     |         );
 761 |     |     }
 762 |     |     function _mockSettleAssertionCall(
 763 |     |         bytes32 assertionId,
 764 |     |         bool settlementResolution
 765 |     |     ) internal returns (bool success, bytes memory returnData) {
 766 |     |         emit MockSettleAssertionCall(assertionId, settlementResolution);
 767 |     | 
 768 |     |         vm.prank(currentActor);
 769 |     | 
 770 |     |         (success, returnData) = address(uma).call(
 771 |     |             abi.encodeWithSelector(
 772 |     |                 uma.mockSettleAssertion.selector,
 773 |     |                 assertionId,
 774 |     |                 settlementResolution
 775 |     |             )
 776 |     |         );
 777 |     |     }
 778 |     | }
 779 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/test/fuzzing/util/FuzzConstants.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0
  2 |     | pragma solidity ^0.8.20;
  3 |     | 
  4 |     | abstract contract FuzzConstants {
  5 |     |     bool internal constant DEBUG = false;
  6 |     | 
  7 | *   |     address internal constant USER1 = address(0x10000);
  8 |     |     address internal constant USER2 = address(0x20000);
  9 |     |     address internal constant USER3 = address(0x30000);
 10 |     | 
 11 |     |     address[] internal USERS = [USER1, USER2, USER3];
 12 |     |     uint128[] internal ACCOUNTS = [1, 2, 3];
 13 |     | 
 14 |     |     uint internal constant INITIAL_BALANCE = 10_000 ether;
 15 |     | 
 16 |     |     uint internal constant INITIAL_MIN_TICK = 16000;
 17 |     |     uint internal constant INITIAL_MAX_TICK = 29800;
 18 |     | }
 19 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/NoDelegateCall.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity >=0.8.12;
  3 |     | 
  4 |     | /// @title Prevents delegatecall to a contract
  5 |     | /// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract
  6 |     | /// @dev    Changed pragma to >=0.8.12
  7 |     | abstract contract NoDelegateCall {
  8 |     |     /// @dev The original address of this contract
  9 |     |     address private immutable original;
 10 |     | 
 11 |     |     constructor() {
 12 |     |         // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.
 13 |     |         // In other words, this variable won't change when it's checked at runtime.
 14 |     |         original = address(this);
 15 |     |     }
 16 |     | 
 17 |     |     /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,
 18 |     |     ///     and the use of immutable means the address bytes are copied in every place the modifier is used.
 19 | *   |     function checkNotDelegateCall() private view {
 20 | *   |         require(address(this) == original);
 21 |     |     }
 22 |     | 
 23 |     |     /// @notice Prevents delegatecall into the modified method
 24 |     |     modifier noDelegateCall() {
 25 | *   |         checkNotDelegateCall();
 26 |     |         _;
 27 |     |     }
 28 |     | }
 29 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/UniswapV3Factory.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity >=0.8.12;
  3 |     | 
  4 |     | import {IUniswapV3Factory} from
  5 |     |     "./interfaces/IUniswapV3Factory.sol";
  6 |     | 
  7 |     | import {UniswapV3PoolDeployer} from "./UniswapV3PoolDeployer.sol";
  8 |     | import {NoDelegateCall} from "./NoDelegateCall.sol";
  9 |     | import {UniswapV3Pool} from "./UniswapV3Pool.sol";
 10 |     | 
 11 |     | /// @title Canonical Uniswap V3 factory
 12 |     | /// @notice Deploys Uniswap V3 pools and manages ownership and control over pool protocol fees
 13 |     | /// @dev    Changed pragma to >=0.8.12
 14 | *   | contract UniswapV3Factory is IUniswapV3Factory, UniswapV3PoolDeployer, NoDelegateCall {
 15 |     |     /// @inheritdoc IUniswapV3Factory
 16 |     |     address public override owner;
 17 |     | 
 18 |     |     /// @inheritdoc IUniswapV3Factory
 19 |     |     mapping(uint24 => int24) public override feeAmountTickSpacing;
 20 |     |     /// @inheritdoc IUniswapV3Factory
 21 | *   |     mapping(address => mapping(address => mapping(uint24 => address))) public override getPool;
 22 |     | 
 23 |     |     constructor() {
 24 |     |         owner = msg.sender;
 25 |     |         emit OwnerChanged(address(0), msg.sender);
 26 |     | 
 27 |     |         feeAmountTickSpacing[500] = 10;
 28 |     |         emit FeeAmountEnabled(500, 10);
 29 |     |         feeAmountTickSpacing[3000] = 60;
 30 |     |         emit FeeAmountEnabled(3000, 60);
 31 |     |         feeAmountTickSpacing[10_000] = 200;
 32 |     |         emit FeeAmountEnabled(10_000, 200);
 33 |     |     }
 34 |     | 
 35 |     |     /// @inheritdoc IUniswapV3Factory
 36 | *   |     function createPool(
 37 |     |         address tokenA,
 38 |     |         address tokenB,
 39 |     |         uint24 fee
 40 | *   |     ) external override noDelegateCall returns (address pool) {
 41 | *   |         require(tokenA != tokenB);
 42 | *   |         (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
 43 | *   |         require(token0 != address(0));
 44 | *   |         int24 tickSpacing = feeAmountTickSpacing[fee];
 45 | *   |         require(tickSpacing != 0);
 46 | *   |         require(getPool[token0][token1][fee] == address(0));
 47 | *   |         pool = deploy(address(this), token0, token1, fee, tickSpacing);
 48 | *   |         getPool[token0][token1][fee] = pool;
 49 |     |         // populate mapping in the reverse direction, deliberate choice to avoid the cost of comparing addresses
 50 | *   |         getPool[token1][token0][fee] = pool;
 51 | *   |         emit PoolCreated(token0, token1, fee, tickSpacing, pool);
 52 |     |     }
 53 |     | 
 54 |     |     /// @inheritdoc IUniswapV3Factory
 55 |     |     function setOwner(address _owner) external override {
 56 |     |         require(msg.sender == owner);
 57 |     |         emit OwnerChanged(owner, _owner);
 58 |     |         owner = _owner;
 59 |     |     }
 60 |     | 
 61 |     |     /// @inheritdoc IUniswapV3Factory
 62 |     |     function enableFeeAmount(uint24 fee, int24 tickSpacing) public override {
 63 |     |         require(msg.sender == owner);
 64 |     |         require(fee < 1_000_000);
 65 |     |         // tick spacing is capped at 16384 to prevent the situation where tickSpacing is so large that
 66 |     |         // TickBitmap#nextInitializedTickWithinOneWord overflows int24 container from a valid tick
 67 |     |         // 16384 ticks represents a >5x price change with ticks of 1 bips
 68 |     |         require(tickSpacing > 0 && tickSpacing < 16_384);
 69 |     |         require(feeAmountTickSpacing[fee] == 0);
 70 |     | 
 71 |     |         feeAmountTickSpacing[fee] = tickSpacing;
 72 |     |         emit FeeAmountEnabled(fee, tickSpacing);
 73 |     |     }
 74 |     | }
 75 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/UniswapV3Pool.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import './interfaces/IUniswapV3Pool.sol';
   5 |     | 
   6 |     | import './NoDelegateCall.sol';
   7 |     | 
   8 |     | import './libraries/LowGasSafeMath.sol';
   9 |     | import './libraries/SafeCast.sol';
  10 |     | import './libraries/Tick.sol';
  11 |     | import './libraries/TickBitmap.sol';
  12 |     | import './libraries/Position.sol';
  13 |     | import './libraries/Oracle.sol';
  14 |     | 
  15 |     | import './libraries/FullMath.sol';
  16 |     | import './libraries/FixedPoint128.sol';
  17 |     | import './libraries/TransferHelper.sol';
  18 |     | import './libraries/TickMath.sol';
  19 |     | import './libraries/LiquidityMath.sol';
  20 |     | import './libraries/SqrtPriceMath.sol';
  21 |     | import './libraries/SwapMath.sol';
  22 |     | 
  23 |     | import './interfaces/IUniswapV3PoolDeployer.sol';
  24 |     | import './interfaces/IUniswapV3Factory.sol';
  25 |     | import './interfaces/IERC20Minimal.sol';
  26 |     | import './interfaces/callback/IUniswapV3MintCallback.sol';
  27 |     | import './interfaces/callback/IUniswapV3SwapCallback.sol';
  28 |     | import './interfaces/callback/IUniswapV3FlashCallback.sol';
  29 |     | 
  30 | *   | contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
  31 |     |     using LowGasSafeMath for uint256;
  32 |     |     using LowGasSafeMath for int256;
  33 |     |     using SafeCast for uint256;
  34 |     |     using SafeCast for int256;
  35 |     |     using Tick for mapping(int24 => Tick.Info);
  36 |     |     using TickBitmap for mapping(int16 => uint256);
  37 |     |     using Position for mapping(bytes32 => Position.Info);
  38 |     |     using Position for Position.Info;
  39 |     |     using Oracle for Oracle.Observation[65535];
  40 |     | 
  41 |     |     /// @inheritdoc IUniswapV3PoolImmutables
  42 |     |     address public immutable override factory;
  43 |     |     /// @inheritdoc IUniswapV3PoolImmutables
  44 | *   |     address public immutable override token0;
  45 |     |     /// @inheritdoc IUniswapV3PoolImmutables
  46 |     |     address public immutable override token1;
  47 |     |     /// @inheritdoc IUniswapV3PoolImmutables
  48 |     |     uint24 public immutable override fee;
  49 |     | 
  50 |     |     /// @inheritdoc IUniswapV3PoolImmutables
  51 | *   |     int24 public immutable override tickSpacing;
  52 |     | 
  53 |     |     /// @inheritdoc IUniswapV3PoolImmutables
  54 | *   |     uint128 public immutable override maxLiquidityPerTick;
  55 |     | 
  56 |     |     struct Slot0 {
  57 |     |         // the current price
  58 |     |         uint160 sqrtPriceX96;
  59 |     |         // the current tick
  60 |     |         int24 tick;
  61 |     |         // the most-recently updated index of the observations array
  62 |     |         uint16 observationIndex;
  63 |     |         // the current maximum number of observations that are being stored
  64 |     |         uint16 observationCardinality;
  65 |     |         // the next maximum number of observations to store, triggered in observations.write
  66 |     |         uint16 observationCardinalityNext;
  67 |     |         // the current protocol fee as a percentage of the swap fee taken on withdrawal
  68 |     |         // represented as an integer denominator (1/x)%
  69 |     |         uint8 feeProtocol;
  70 |     |         // whether the pool is locked
  71 |     |         bool unlocked;
  72 |     |     }
  73 |     |     /// @inheritdoc IUniswapV3PoolState
  74 | *   |     Slot0 public override slot0;
  75 |     | 
  76 |     |     /// @inheritdoc IUniswapV3PoolState
  77 |     |     uint256 public override feeGrowthGlobal0X128;
  78 |     |     /// @inheritdoc IUniswapV3PoolState
  79 | *   |     uint256 public override feeGrowthGlobal1X128;
  80 |     | 
  81 |     |     // accumulated protocol fees in token0/token1 units
  82 |     |     struct ProtocolFees {
  83 |     |         uint128 token0;
  84 |     |         uint128 token1;
  85 |     |     }
  86 |     |     /// @inheritdoc IUniswapV3PoolState
  87 | *   |     ProtocolFees public override protocolFees;
  88 |     | 
  89 |     |     /// @inheritdoc IUniswapV3PoolState
  90 | *   |     uint128 public override liquidity;
  91 |     | 
  92 |     |     /// @inheritdoc IUniswapV3PoolState
  93 |     |     mapping(int24 => Tick.Info) public override ticks;
  94 |     |     /// @inheritdoc IUniswapV3PoolState
  95 | *   |     mapping(int16 => uint256) public override tickBitmap;
  96 |     |     /// @inheritdoc IUniswapV3PoolState
  97 | *   |     mapping(bytes32 => Position.Info) public override positions;
  98 |     |     /// @inheritdoc IUniswapV3PoolState
  99 | *   |     Oracle.Observation[65535] public override observations;
 100 |     | 
 101 |     |     /// @dev Mutually exclusive reentrancy protection into the pool to/from a method. This method also prevents entrance
 102 |     |     /// to a function before the pool is initialized. The reentrancy guard is required throughout the contract because
 103 |     |     /// we use balance checks to determine the payment status of interactions such as mint, swap and flash.
 104 |     |     modifier lock() {
 105 |     |         require(slot0.unlocked, 'LOK');
 106 |     |         slot0.unlocked = false;
 107 |     |         _;
 108 |     |         slot0.unlocked = true;
 109 |     |     }
 110 |     | 
 111 |     |     /// @dev Prevents calling a function from anyone except the address returned by IUniswapV3Factory#owner()
 112 |     |     modifier onlyFactoryOwner() {
 113 |     |         require(msg.sender == IUniswapV3Factory(factory).owner());
 114 |     |         _;
 115 |     |     }
 116 |     | 
 117 |     |     constructor() {
 118 |     |         int24 _tickSpacing;
 119 |     |         (factory, token0, token1, fee, _tickSpacing) = IUniswapV3PoolDeployer(msg.sender).parameters();
 120 |     |         tickSpacing = _tickSpacing;
 121 |     | 
 122 |     |         maxLiquidityPerTick = Tick.tickSpacingToMaxLiquidityPerTick(_tickSpacing);
 123 |     |     }
 124 |     | 
 125 |     |     /// @dev Common checks for valid tick inputs.
 126 |     |     function checkTicks(int24 tickLower, int24 tickUpper) private pure {
 127 |     |         require(tickLower < tickUpper, 'TLU');
 128 |     |         require(tickLower >= TickMath.MIN_TICK, 'TLM');
 129 |     |         require(tickUpper <= TickMath.MAX_TICK, 'TUM');
 130 |     |     }
 131 |     | 
 132 |     |     /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.
 133 |     |     function _blockTimestamp() internal view virtual returns (uint32) {
 134 | *   |         return uint32(block.timestamp); // truncation is desired
 135 |     |     }
 136 |     | 
 137 |     |     /// @dev Get the pool's balance of token0
 138 |     |     /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize
 139 |     |     /// check
 140 |     |     function balance0() private view returns (uint256) {
 141 |     |         (bool success, bytes memory data) =
 142 |     |             token0.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));
 143 |     |         require(success && data.length >= 32);
 144 |     |         return abi.decode(data, (uint256));
 145 |     |     }
 146 |     | 
 147 |     |     /// @dev Get the pool's balance of token1
 148 |     |     /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize
 149 |     |     /// check
 150 |     |     function balance1() private view returns (uint256) {
 151 |     |         (bool success, bytes memory data) =
 152 |     |             token1.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));
 153 |     |         require(success && data.length >= 32);
 154 |     |         return abi.decode(data, (uint256));
 155 |     |     }
 156 |     | 
 157 |     |     /// @inheritdoc IUniswapV3PoolDerivedState
 158 |     |     function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)
 159 |     |         external
 160 |     |         view
 161 |     |         override
 162 |     |         noDelegateCall
 163 |     |         returns (
 164 |     |             int56 tickCumulativeInside,
 165 |     |             uint160 secondsPerLiquidityInsideX128,
 166 |     |             uint32 secondsInside
 167 |     |         )
 168 |     |     {
 169 |     |         checkTicks(tickLower, tickUpper);
 170 |     | 
 171 |     |         int56 tickCumulativeLower;
 172 |     |         int56 tickCumulativeUpper;
 173 |     |         uint160 secondsPerLiquidityOutsideLowerX128;
 174 |     |         uint160 secondsPerLiquidityOutsideUpperX128;
 175 |     |         uint32 secondsOutsideLower;
 176 |     |         uint32 secondsOutsideUpper;
 177 |     | 
 178 |     |         {
 179 |     |             Tick.Info storage lower = ticks[tickLower];
 180 |     |             Tick.Info storage upper = ticks[tickUpper];
 181 |     |             bool initializedLower;
 182 |     |             (tickCumulativeLower, secondsPerLiquidityOutsideLowerX128, secondsOutsideLower, initializedLower) = (
 183 |     |                 lower.tickCumulativeOutside,
 184 |     |                 lower.secondsPerLiquidityOutsideX128,
 185 |     |                 lower.secondsOutside,
 186 |     |                 lower.initialized
 187 |     |             );
 188 |     |             require(initializedLower);
 189 |     | 
 190 |     |             bool initializedUpper;
 191 |     |             (tickCumulativeUpper, secondsPerLiquidityOutsideUpperX128, secondsOutsideUpper, initializedUpper) = (
 192 |     |                 upper.tickCumulativeOutside,
 193 |     |                 upper.secondsPerLiquidityOutsideX128,
 194 |     |                 upper.secondsOutside,
 195 |     |                 upper.initialized
 196 |     |             );
 197 |     |             require(initializedUpper);
 198 |     |         }
 199 |     | 
 200 |     |         Slot0 memory _slot0 = slot0;
 201 |     | 
 202 |     |         if (_slot0.tick < tickLower) {
 203 |     |             return (
 204 |     |                 tickCumulativeLower - tickCumulativeUpper,
 205 |     |                 secondsPerLiquidityOutsideLowerX128 - secondsPerLiquidityOutsideUpperX128,
 206 |     |                 secondsOutsideLower - secondsOutsideUpper
 207 |     |             );
 208 |     |         } else if (_slot0.tick < tickUpper) {
 209 |     |             uint32 time = _blockTimestamp();
 210 |     |             (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =
 211 |     |                 observations.observeSingle(
 212 |     |                     time,
 213 |     |                     0,
 214 |     |                     _slot0.tick,
 215 |     |                     _slot0.observationIndex,
 216 |     |                     liquidity,
 217 |     |                     _slot0.observationCardinality
 218 |     |                 );
 219 |     |             return (
 220 |     |                 tickCumulative - tickCumulativeLower - tickCumulativeUpper,
 221 |     |                 secondsPerLiquidityCumulativeX128 -
 222 |     |                     secondsPerLiquidityOutsideLowerX128 -
 223 |     |                     secondsPerLiquidityOutsideUpperX128,
 224 |     |                 time - secondsOutsideLower - secondsOutsideUpper
 225 |     |             );
 226 |     |         } else {
 227 |     |             return (
 228 |     |                 tickCumulativeUpper - tickCumulativeLower,
 229 |     |                 secondsPerLiquidityOutsideUpperX128 - secondsPerLiquidityOutsideLowerX128,
 230 |     |                 secondsOutsideUpper - secondsOutsideLower
 231 |     |             );
 232 |     |         }
 233 |     |     }
 234 |     | 
 235 |     |     /// @inheritdoc IUniswapV3PoolDerivedState
 236 | *   |     function observe(uint32[] calldata secondsAgos)
 237 |     |         external
 238 |     |         view
 239 |     |         override
 240 |     |         noDelegateCall
 241 |     |         returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)
 242 |     |     {
 243 |     |         return
 244 |     |             observations.observe(
 245 |     |                 _blockTimestamp(),
 246 |     |                 secondsAgos,
 247 |     |                 slot0.tick,
 248 |     |                 slot0.observationIndex,
 249 |     |                 liquidity,
 250 |     |                 slot0.observationCardinality
 251 |     |             );
 252 |     |     }
 253 |     | 
 254 |     |     /// @inheritdoc IUniswapV3PoolActions
 255 | *   |     function increaseObservationCardinalityNext(uint16 observationCardinalityNext)
 256 |     |         external
 257 |     |         override
 258 |     |         lock
 259 |     |         noDelegateCall
 260 |     |     {
 261 |     |         uint16 observationCardinalityNextOld = slot0.observationCardinalityNext; // for the event
 262 |     |         uint16 observationCardinalityNextNew =
 263 |     |             observations.grow(observationCardinalityNextOld, observationCardinalityNext);
 264 |     |         slot0.observationCardinalityNext = observationCardinalityNextNew;
 265 |     |         if (observationCardinalityNextOld != observationCardinalityNextNew)
 266 |     |             emit IncreaseObservationCardinalityNext(observationCardinalityNextOld, observationCardinalityNextNew);
 267 |     |     }
 268 |     | 
 269 |     |     /// @inheritdoc IUniswapV3PoolActions
 270 |     |     /// @dev not locked because it initializes unlocked
 271 | *   |     function initialize(uint160 sqrtPriceX96) external override {
 272 | *   |         require(slot0.sqrtPriceX96 == 0, 'AI');
 273 |     | 
 274 | *   |         int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);
 275 |     | 
 276 | *   |         (uint16 cardinality, uint16 cardinalityNext) = observations.initialize(_blockTimestamp());
 277 |     | 
 278 | *   |         slot0 = Slot0({
 279 |     |             sqrtPriceX96: sqrtPriceX96,
 280 |     |             tick: tick,
 281 |     |             observationIndex: 0,
 282 |     |             observationCardinality: cardinality,
 283 |     |             observationCardinalityNext: cardinalityNext,
 284 |     |             feeProtocol: 0,
 285 |     |             unlocked: true
 286 |     |         });
 287 |     | 
 288 | *   |         emit Initialize(sqrtPriceX96, tick);
 289 |     |     }
 290 |     | 
 291 |     |     struct ModifyPositionParams {
 292 |     |         // the address that owns the position
 293 |     |         address owner;
 294 |     |         // the lower and upper tick of the position
 295 |     |         int24 tickLower;
 296 |     |         int24 tickUpper;
 297 |     |         // any change in liquidity
 298 |     |         int128 liquidityDelta;
 299 |     |     }
 300 |     | 
 301 |     |     event Message(string a);
 302 |     |     event MessageUint160(string a, uint160 b);
 303 |     |     event MessageUint128(string a, int128 b);
 304 |     | 
 305 |     |     /// @dev Effect some changes to a position
 306 |     |     /// @param params the position details and the change to the position's liquidity to effect
 307 |     |     /// @return position a storage pointer referencing the position with the given owner and tick range
 308 |     |     /// @return amount0 the amount of token0 owed to the pool, negative if the pool should pay the recipient
 309 |     |     /// @return amount1 the amount of token1 owed to the pool, negative if the pool should pay the recipient
 310 |     |     function _modifyPosition(ModifyPositionParams memory params)
 311 |     |         private
 312 |     |         noDelegateCall
 313 |     |         returns (
 314 |     |             Position.Info storage position,
 315 |     |             int256 amount0,
 316 |     |             int256 amount1
 317 |     |         )
 318 |     |     {
 319 |     |         checkTicks(params.tickLower, params.tickUpper);
 320 |     | 
 321 |     |         Slot0 memory _slot0 = slot0; // SLOAD for gas optimization
 322 |     | 
 323 |     |         emit Message("HERE");
 324 |     |         position = _updatePosition(
 325 |     |             params.owner,
 326 |     |             params.tickLower,
 327 |     |             params.tickUpper,
 328 |     |             params.liquidityDelta,
 329 |     |             _slot0.tick
 330 |     |         );
 331 |     |         emit Message("HERE1");
 332 |     |         if (params.liquidityDelta != 0) {
 333 |     |             if (_slot0.tick < params.tickLower) {
 334 |     |                 // current tick is below the passed range; liquidity can only become in range by crossing from left to
 335 |     |                 // right, when we'll need _more_ token0 (it's becoming more valuable) so user must provide it
 336 |     |                 emit Message("HERE2");
 337 |     |                 amount0 = SqrtPriceMath.getAmount0Delta(
 338 |     |                     TickMath.getSqrtRatioAtTick(params.tickLower),
 339 |     |                     TickMath.getSqrtRatioAtTick(params.tickUpper),
 340 |     |                     params.liquidityDelta
 341 |     |                 );
 342 |     |                 emit Message("HERE3");
 343 |     |             } else if (_slot0.tick < params.tickUpper) {
 344 |     |                 emit Message("HERE4");
 345 |     |                 // current tick is inside the passed range
 346 |     |                 uint128 liquidityBefore = liquidity; // SLOAD for gas optimization
 347 |     | 
 348 |     |                 // write an oracle entry
 349 |     |                 (slot0.observationIndex, slot0.observationCardinality) = observations.write(
 350 |     |                     _slot0.observationIndex,
 351 |     |                     _blockTimestamp(),
 352 |     |                     _slot0.tick,
 353 |     |                     liquidityBefore,
 354 |     |                     _slot0.observationCardinality,
 355 |     |                     _slot0.observationCardinalityNext
 356 |     |                 );
 357 |     |                 emit Message("HERE4a");
 358 |     |                 emit MessageUint160("sqrtA", _slot0.sqrtPriceX96);
 359 |     |                 emit MessageUint160("sqrtB", TickMath.getSqrtRatioAtTick(params.tickUpper));
 360 |     |                 emit MessageUint128("liquidity", params.liquidityDelta);
 361 |     |                 amount0 = SqrtPriceMath.getAmount0Delta(
 362 |     |                     _slot0.sqrtPriceX96,
 363 |     |                     TickMath.getSqrtRatioAtTick(params.tickUpper),
 364 |     |                     params.liquidityDelta
 365 |     |                 );
 366 |     |                 emit Message("HERE4b");
 367 |     |                 amount1 = SqrtPriceMath.getAmount1Delta(
 368 |     |                     TickMath.getSqrtRatioAtTick(params.tickLower),
 369 |     |                     _slot0.sqrtPriceX96,
 370 |     |                     params.liquidityDelta
 371 |     |                 );
 372 |     |                 emit Message("HERE4c");
 373 |     | 
 374 |     |                 liquidity = LiquidityMath.addDelta(liquidityBefore, params.liquidityDelta);
 375 |     |                 emit Message("HERE5");
 376 |     |             } else {
 377 |     |                 // current tick is above the passed range; liquidity can only become in range by crossing from right to
 378 |     |                 // left, when we'll need _more_ token1 (it's becoming more valuable) so user must provide it
 379 |     |                 emit Message("HERE6");
 380 |     |                 amount1 = SqrtPriceMath.getAmount1Delta(
 381 |     |                     TickMath.getSqrtRatioAtTick(params.tickLower),
 382 |     |                     TickMath.getSqrtRatioAtTick(params.tickUpper),
 383 |     |                     params.liquidityDelta
 384 |     |                 );
 385 |     |                 emit Message("HERE7");
 386 |     |             }
 387 |     |         }
 388 |     |         emit Message("HERE8");
 389 |     |     }
 390 |     | 
 391 |     |     /// @dev Gets and updates a position with the given liquidity delta
 392 |     |     /// @param owner the owner of the position
 393 |     |     /// @param tickLower the lower tick of the position's tick range
 394 |     |     /// @param tickUpper the upper tick of the position's tick range
 395 |     |     /// @param tick the current tick, passed to avoid sloads
 396 |     |     function _updatePosition(
 397 |     |         address owner,
 398 |     |         int24 tickLower,
 399 |     |         int24 tickUpper,
 400 |     |         int128 liquidityDelta,
 401 |     |         int24 tick
 402 |     |     ) private returns (Position.Info storage position) {
 403 |     |         position = positions.get(owner, tickLower, tickUpper);
 404 |     | 
 405 |     |         uint256 _feeGrowthGlobal0X128 = feeGrowthGlobal0X128; // SLOAD for gas optimization
 406 |     |         uint256 _feeGrowthGlobal1X128 = feeGrowthGlobal1X128; // SLOAD for gas optimization
 407 |     | 
 408 |     |         // if we need to update the ticks, do it
 409 |     |         bool flippedLower;
 410 |     |         bool flippedUpper;
 411 |     |         if (liquidityDelta != 0) {
 412 |     |             uint32 time = _blockTimestamp();
 413 |     |             (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =
 414 |     |                 observations.observeSingle(
 415 |     |                     time,
 416 |     |                     0,
 417 |     |                     slot0.tick,
 418 |     |                     slot0.observationIndex,
 419 |     |                     liquidity,
 420 |     |                     slot0.observationCardinality
 421 |     |                 );
 422 |     | 
 423 |     |             flippedLower = ticks.update(
 424 |     |                 tickLower,
 425 |     |                 tick,
 426 |     |                 liquidityDelta,
 427 |     |                 _feeGrowthGlobal0X128,
 428 |     |                 _feeGrowthGlobal1X128,
 429 |     |                 secondsPerLiquidityCumulativeX128,
 430 |     |                 tickCumulative,
 431 |     |                 time,
 432 |     |                 false,
 433 |     |                 maxLiquidityPerTick
 434 |     |             );
 435 |     |             flippedUpper = ticks.update(
 436 |     |                 tickUpper,
 437 |     |                 tick,
 438 |     |                 liquidityDelta,
 439 |     |                 _feeGrowthGlobal0X128,
 440 |     |                 _feeGrowthGlobal1X128,
 441 |     |                 secondsPerLiquidityCumulativeX128,
 442 |     |                 tickCumulative,
 443 |     |                 time,
 444 |     |                 true,
 445 |     |                 maxLiquidityPerTick
 446 |     |             );
 447 |     | 
 448 |     |             if (flippedLower) {
 449 |     |                 tickBitmap.flipTick(tickLower, tickSpacing);
 450 |     |             }
 451 |     |             if (flippedUpper) {
 452 |     |                 tickBitmap.flipTick(tickUpper, tickSpacing);
 453 |     |             }
 454 |     |         }
 455 |     | 
 456 |     |         (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) =
 457 |     |             ticks.getFeeGrowthInside(tickLower, tickUpper, tick, _feeGrowthGlobal0X128, _feeGrowthGlobal1X128);
 458 |     | 
 459 |     |         position.update(liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);
 460 |     | 
 461 |     |         // clear any tick data that is no longer needed
 462 |     |         if (liquidityDelta < 0) {
 463 |     |             if (flippedLower) {
 464 |     |                 ticks.clear(tickLower);
 465 |     |             }
 466 |     |             if (flippedUpper) {
 467 |     |                 ticks.clear(tickUpper);
 468 |     |             }
 469 |     |         }
 470 |     |     }
 471 |     | 
 472 |     |     /// @inheritdoc IUniswapV3PoolActions
 473 |     |     /// @dev noDelegateCall is applied indirectly via _modifyPosition
 474 | *   |     function mint(
 475 |     |         address recipient,
 476 |     |         int24 tickLower,
 477 |     |         int24 tickUpper,
 478 |     |         uint128 amount,
 479 |     |         bytes calldata data
 480 |     |     ) external override lock returns (uint256 amount0, uint256 amount1) {
 481 |     |         require(amount > 0);
 482 |     |         (, int256 amount0Int, int256 amount1Int) =
 483 |     |             _modifyPosition(
 484 |     |                 ModifyPositionParams({
 485 |     |                     owner: recipient,
 486 |     |                     tickLower: tickLower,
 487 |     |                     tickUpper: tickUpper,
 488 |     |                     liquidityDelta: int256(int128(amount)).toInt128()
 489 |     |                 })
 490 |     |             );
 491 |     | 
 492 |     |         amount0 = uint256(amount0Int);
 493 |     |         amount1 = uint256(amount1Int);
 494 |     | 
 495 |     |         uint256 balance0Before;
 496 |     |         uint256 balance1Before;
 497 |     |         if (amount0 > 0) balance0Before = balance0();
 498 |     |         if (amount1 > 0) balance1Before = balance1();
 499 |     |         IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);
 500 |     |         if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), 'M0');
 501 |     |         if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), 'M1');
 502 |     | 
 503 |     |         emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);
 504 |     |     }
 505 |     | 
 506 |     |     /// @inheritdoc IUniswapV3PoolActions
 507 | *   |     function collect(
 508 |     |         address recipient,
 509 |     |         int24 tickLower,
 510 |     |         int24 tickUpper,
 511 |     |         uint128 amount0Requested,
 512 |     |         uint128 amount1Requested
 513 |     |     ) external override lock returns (uint128 amount0, uint128 amount1) {
 514 |     |         // we don't need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}
 515 |     |         Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);
 516 |     | 
 517 |     |         amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;
 518 |     |         amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;
 519 |     | 
 520 |     |         if (amount0 > 0) {
 521 |     |             position.tokensOwed0 -= amount0;
 522 |     |             TransferHelper.safeTransfer(token0, recipient, amount0);
 523 |     |         }
 524 |     |         if (amount1 > 0) {
 525 |     |             position.tokensOwed1 -= amount1;
 526 |     |             TransferHelper.safeTransfer(token1, recipient, amount1);
 527 |     |         }
 528 |     | 
 529 |     |         emit Collect(msg.sender, recipient, tickLower, tickUpper, amount0, amount1);
 530 |     |     }
 531 |     | 
 532 |     |     /// @inheritdoc IUniswapV3PoolActions
 533 |     |     /// @dev noDelegateCall is applied indirectly via _modifyPosition
 534 | *   |     function burn(
 535 |     |         int24 tickLower,
 536 |     |         int24 tickUpper,
 537 |     |         uint128 amount
 538 |     |     ) external override lock returns (uint256 amount0, uint256 amount1) {
 539 |     |         (Position.Info storage position, int256 amount0Int, int256 amount1Int) =
 540 |     |             _modifyPosition(
 541 |     |                 ModifyPositionParams({
 542 |     |                     owner: msg.sender,
 543 |     |                     tickLower: tickLower,
 544 |     |                     tickUpper: tickUpper,
 545 |     |                     liquidityDelta: -int256(int128(amount)).toInt128()
 546 |     |                 })
 547 |     |             );
 548 |     | 
 549 |     |         amount0 = uint256(-amount0Int);
 550 |     |         amount1 = uint256(-amount1Int);
 551 |     | 
 552 |     |         if (amount0 > 0 || amount1 > 0) {
 553 |     |             (position.tokensOwed0, position.tokensOwed1) = (
 554 |     |                 position.tokensOwed0 + uint128(amount0),
 555 |     |                 position.tokensOwed1 + uint128(amount1)
 556 |     |             );
 557 |     |         }
 558 |     | 
 559 |     |         emit Burn(msg.sender, tickLower, tickUpper, amount, amount0, amount1);
 560 |     |     }
 561 |     | 
 562 |     |     struct SwapCache {
 563 |     |         // the protocol fee for the input token
 564 |     |         uint8 feeProtocol;
 565 |     |         // liquidity at the beginning of the swap
 566 |     |         uint128 liquidityStart;
 567 |     |         // the timestamp of the current block
 568 |     |         uint32 blockTimestamp;
 569 |     |         // the current value of the tick accumulator, computed only if we cross an initialized tick
 570 |     |         int56 tickCumulative;
 571 |     |         // the current value of seconds per liquidity accumulator, computed only if we cross an initialized tick
 572 |     |         uint160 secondsPerLiquidityCumulativeX128;
 573 |     |         // whether we've computed and cached the above two accumulators
 574 |     |         bool computedLatestObservation;
 575 |     |     }
 576 |     | 
 577 |     |     // the top level state of the swap, the results of which are recorded in storage at the end
 578 |     |     struct SwapState {
 579 |     |         // the amount remaining to be swapped in/out of the input/output asset
 580 |     |         int256 amountSpecifiedRemaining;
 581 |     |         // the amount already swapped out/in of the output/input asset
 582 |     |         int256 amountCalculated;
 583 |     |         // current sqrt(price)
 584 |     |         uint160 sqrtPriceX96;
 585 |     |         // the tick associated with the current price
 586 |     |         int24 tick;
 587 |     |         // the global fee growth of the input token
 588 |     |         uint256 feeGrowthGlobalX128;
 589 |     |         // amount of input token paid as protocol fee
 590 |     |         uint128 protocolFee;
 591 |     |         // the current liquidity in range
 592 |     |         uint128 liquidity;
 593 |     |     }
 594 |     | 
 595 |     |     struct StepComputations {
 596 |     |         // the price at the beginning of the step
 597 |     |         uint160 sqrtPriceStartX96;
 598 |     |         // the next tick to swap to from the current tick in the swap direction
 599 |     |         int24 tickNext;
 600 |     |         // whether tickNext is initialized or not
 601 |     |         bool initialized;
 602 |     |         // sqrt(price) for the next tick (1/0)
 603 |     |         uint160 sqrtPriceNextX96;
 604 |     |         // how much is being swapped in in this step
 605 |     |         uint256 amountIn;
 606 |     |         // how much is being swapped out
 607 |     |         uint256 amountOut;
 608 |     |         // how much fee is being paid in
 609 |     |         uint256 feeAmount;
 610 |     |     }
 611 |     | 
 612 |     |     /// @inheritdoc IUniswapV3PoolActions
 613 | *   |     function swap(
 614 |     |         address recipient,
 615 |     |         bool zeroForOne,
 616 |     |         int256 amountSpecified,
 617 |     |         uint160 sqrtPriceLimitX96,
 618 |     |         bytes calldata data
 619 |     |     ) external override noDelegateCall returns (int256 amount0, int256 amount1) {
 620 |     |         require(amountSpecified != 0, 'AS');
 621 |     | 
 622 |     |         Slot0 memory slot0Start = slot0;
 623 |     | 
 624 |     |         require(slot0Start.unlocked, 'LOK');
 625 |     |         require(
 626 |     |             zeroForOne
 627 |     |                 ? sqrtPriceLimitX96 < slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO
 628 |     |                 : sqrtPriceLimitX96 > slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,
 629 |     |             'SPL'
 630 |     |         );
 631 |     | 
 632 |     |         slot0.unlocked = false;
 633 |     | 
 634 |     |         SwapCache memory cache =
 635 |     |             SwapCache({
 636 |     |                 liquidityStart: liquidity,
 637 |     |                 blockTimestamp: _blockTimestamp(),
 638 |     |                 feeProtocol: zeroForOne ? (slot0Start.feeProtocol % 16) : (slot0Start.feeProtocol >> 4),
 639 |     |                 secondsPerLiquidityCumulativeX128: 0,
 640 |     |                 tickCumulative: 0,
 641 |     |                 computedLatestObservation: false
 642 |     |             });
 643 |     | 
 644 |     |         bool exactInput = amountSpecified > 0;
 645 |     | 
 646 |     |         SwapState memory state =
 647 |     |             SwapState({
 648 |     |                 amountSpecifiedRemaining: amountSpecified,
 649 |     |                 amountCalculated: 0,
 650 |     |                 sqrtPriceX96: slot0Start.sqrtPriceX96,
 651 |     |                 tick: slot0Start.tick,
 652 |     |                 feeGrowthGlobalX128: zeroForOne ? feeGrowthGlobal0X128 : feeGrowthGlobal1X128,
 653 |     |                 protocolFee: 0,
 654 |     |                 liquidity: cache.liquidityStart
 655 |     |             });
 656 |     | 
 657 |     |         // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit
 658 |     |         while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {
 659 |     |             StepComputations memory step;
 660 |     | 
 661 |     |             step.sqrtPriceStartX96 = state.sqrtPriceX96;
 662 |     | 
 663 |     |             (step.tickNext, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(
 664 |     |                 state.tick,
 665 |     |                 tickSpacing,
 666 |     |                 zeroForOne
 667 |     |             );
 668 |     | 
 669 |     |             // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds
 670 |     |             if (step.tickNext < TickMath.MIN_TICK) {
 671 |     |                 step.tickNext = TickMath.MIN_TICK;
 672 |     |             } else if (step.tickNext > TickMath.MAX_TICK) {
 673 |     |                 step.tickNext = TickMath.MAX_TICK;
 674 |     |             }
 675 |     | 
 676 |     |             // get the price for the next tick
 677 |     |             step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);
 678 |     | 
 679 |     |             // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted
 680 |     |             (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(
 681 |     |                 state.sqrtPriceX96,
 682 |     |                 (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)
 683 |     |                     ? sqrtPriceLimitX96
 684 |     |                     : step.sqrtPriceNextX96,
 685 |     |                 state.liquidity,
 686 |     |                 state.amountSpecifiedRemaining,
 687 |     |                 fee
 688 |     |             );
 689 |     | 
 690 |     |             if (exactInput) {
 691 |     |                 state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();
 692 |     |                 state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());
 693 |     |             } else {
 694 |     |                 state.amountSpecifiedRemaining += step.amountOut.toInt256();
 695 |     |                 state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());
 696 |     |             }
 697 |     | 
 698 |     |             // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee
 699 |     |             if (cache.feeProtocol > 0) {
 700 |     |                 uint256 delta = step.feeAmount / cache.feeProtocol;
 701 |     |                 step.feeAmount -= delta;
 702 |     |                 state.protocolFee += uint128(delta);
 703 |     |             }
 704 |     | 
 705 |     |             // update global fee tracker
 706 |     |             if (state.liquidity > 0)
 707 |     |                 state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);
 708 |     | 
 709 |     |             // shift tick if we reached the next price
 710 |     |             if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {
 711 |     |                 // if the tick is initialized, run the tick transition
 712 |     |                 if (step.initialized) {
 713 |     |                     // check for the placeholder value, which we replace with the actual value the first time the swap
 714 |     |                     // crosses an initialized tick
 715 |     |                     if (!cache.computedLatestObservation) {
 716 |     |                         (cache.tickCumulative, cache.secondsPerLiquidityCumulativeX128) = observations.observeSingle(
 717 |     |                             cache.blockTimestamp,
 718 |     |                             0,
 719 |     |                             slot0Start.tick,
 720 |     |                             slot0Start.observationIndex,
 721 |     |                             cache.liquidityStart,
 722 |     |                             slot0Start.observationCardinality
 723 |     |                         );
 724 |     |                         cache.computedLatestObservation = true;
 725 |     |                     }
 726 |     |                     int128 liquidityNet =
 727 |     |                         ticks.cross(
 728 |     |                             step.tickNext,
 729 |     |                             (zeroForOne ? state.feeGrowthGlobalX128 : feeGrowthGlobal0X128),
 730 |     |                             (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128),
 731 |     |                             cache.secondsPerLiquidityCumulativeX128,
 732 |     |                             cache.tickCumulative,
 733 |     |                             cache.blockTimestamp
 734 |     |                         );
 735 |     |                     // if we're moving leftward, we interpret liquidityNet as the opposite sign
 736 |     |                     // safe because liquidityNet cannot be type(int128).min
 737 |     |                     if (zeroForOne) liquidityNet = -liquidityNet;
 738 |     | 
 739 |     |                     state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);
 740 |     |                 }
 741 |     | 
 742 |     |                 state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;
 743 |     |             } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {
 744 |     |                 // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved
 745 |     |                 state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);
 746 |     |             }
 747 |     |         }
 748 |     | 
 749 |     |         // update tick and write an oracle entry if the tick change
 750 |     |         if (state.tick != slot0Start.tick) {
 751 |     |             (uint16 observationIndex, uint16 observationCardinality) =
 752 |     |                 observations.write(
 753 |     |                     slot0Start.observationIndex,
 754 |     |                     cache.blockTimestamp,
 755 |     |                     slot0Start.tick,
 756 |     |                     cache.liquidityStart,
 757 |     |                     slot0Start.observationCardinality,
 758 |     |                     slot0Start.observationCardinalityNext
 759 |     |                 );
 760 |     |             (slot0.sqrtPriceX96, slot0.tick, slot0.observationIndex, slot0.observationCardinality) = (
 761 |     |                 state.sqrtPriceX96,
 762 |     |                 state.tick,
 763 |     |                 observationIndex,
 764 |     |                 observationCardinality
 765 |     |             );
 766 |     |         } else {
 767 |     |             // otherwise just update the price
 768 |     |             slot0.sqrtPriceX96 = state.sqrtPriceX96;
 769 |     |         }
 770 |     | 
 771 |     |         // update liquidity if it changed
 772 |     |         if (cache.liquidityStart != state.liquidity) liquidity = state.liquidity;
 773 |     | 
 774 |     |         // update fee growth global and, if necessary, protocol fees
 775 |     |         // overflow is acceptable, protocol has to withdraw before it hits type(uint128).max fees
 776 |     |         if (zeroForOne) {
 777 |     |             feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;
 778 |     |             if (state.protocolFee > 0) protocolFees.token0 += state.protocolFee;
 779 |     |         } else {
 780 |     |             feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;
 781 |     |             if (state.protocolFee > 0) protocolFees.token1 += state.protocolFee;
 782 |     |         }
 783 |     | 
 784 |     |         (amount0, amount1) = zeroForOne == exactInput
 785 |     |             ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)
 786 |     |             : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);
 787 |     | 
 788 |     |         // do the transfers and collect payment
 789 |     |         if (zeroForOne) {
 790 |     |             if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));
 791 |     | 
 792 |     |             uint256 balance0Before = balance0();
 793 |     |             IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);
 794 |     |             require(balance0Before.add(uint256(amount0)) <= balance0(), 'IIA');
 795 |     |         } else {
 796 |     |             if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));
 797 |     | 
 798 |     |             uint256 balance1Before = balance1();
 799 |     |             IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);
 800 |     |             require(balance1Before.add(uint256(amount1)) <= balance1(), 'IIA');
 801 |     |         }
 802 |     | 
 803 |     |         emit Swap(msg.sender, recipient, amount0, amount1, state.sqrtPriceX96, state.liquidity, state.tick);
 804 |     |         slot0.unlocked = true;
 805 |     |     }
 806 |     | 
 807 |     |     /// @inheritdoc IUniswapV3PoolActions
 808 | *   |     function flash(
 809 |     |         address recipient,
 810 |     |         uint256 amount0,
 811 |     |         uint256 amount1,
 812 |     |         bytes calldata data
 813 |     |     ) external override lock noDelegateCall {
 814 |     |         uint128 _liquidity = liquidity;
 815 |     |         require(_liquidity > 0, 'L');
 816 |     | 
 817 |     |         uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);
 818 |     |         uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);
 819 |     |         uint256 balance0Before = balance0();
 820 |     |         uint256 balance1Before = balance1();
 821 |     | 
 822 |     |         if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);
 823 |     |         if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);
 824 |     | 
 825 |     |         IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);
 826 |     | 
 827 |     |         uint256 balance0After = balance0();
 828 |     |         uint256 balance1After = balance1();
 829 |     | 
 830 |     |         require(balance0Before.add(fee0) <= balance0After, 'F0');
 831 |     |         require(balance1Before.add(fee1) <= balance1After, 'F1');
 832 |     | 
 833 |     |         // sub is safe because we know balanceAfter is gt balanceBefore by at least fee
 834 |     |         uint256 paid0 = balance0After - balance0Before;
 835 |     |         uint256 paid1 = balance1After - balance1Before;
 836 |     | 
 837 |     |         if (paid0 > 0) {
 838 |     |             uint8 feeProtocol0 = slot0.feeProtocol % 16;
 839 |     |             uint256 fees0 = feeProtocol0 == 0 ? 0 : paid0 / feeProtocol0;
 840 |     |             if (uint128(fees0) > 0) protocolFees.token0 += uint128(fees0);
 841 |     |             feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0, FixedPoint128.Q128, _liquidity);
 842 |     |         }
 843 |     |         if (paid1 > 0) {
 844 |     |             uint8 feeProtocol1 = slot0.feeProtocol >> 4;
 845 |     |             uint256 fees1 = feeProtocol1 == 0 ? 0 : paid1 / feeProtocol1;
 846 |     |             if (uint128(fees1) > 0) protocolFees.token1 += uint128(fees1);
 847 |     |             feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1, FixedPoint128.Q128, _liquidity);
 848 |     |         }
 849 |     | 
 850 |     |         emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);
 851 |     |     }
 852 |     | 
 853 |     |     /// @inheritdoc IUniswapV3PoolOwnerActions
 854 | *   |     function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external override lock onlyFactoryOwner {
 855 |     |         require(
 856 |     |             (feeProtocol0 == 0 || (feeProtocol0 >= 4 && feeProtocol0 <= 10)) &&
 857 |     |                 (feeProtocol1 == 0 || (feeProtocol1 >= 4 && feeProtocol1 <= 10))
 858 |     |         );
 859 |     |         uint8 feeProtocolOld = slot0.feeProtocol;
 860 |     |         slot0.feeProtocol = feeProtocol0 + (feeProtocol1 << 4);
 861 |     |         emit SetFeeProtocol(feeProtocolOld % 16, feeProtocolOld >> 4, feeProtocol0, feeProtocol1);
 862 |     |     }
 863 |     | 
 864 |     |     /// @inheritdoc IUniswapV3PoolOwnerActions
 865 | *   |     function collectProtocol(
 866 |     |         address recipient,
 867 |     |         uint128 amount0Requested,
 868 |     |         uint128 amount1Requested
 869 |     |     ) external override lock onlyFactoryOwner returns (uint128 amount0, uint128 amount1) {
 870 |     |         amount0 = amount0Requested > protocolFees.token0 ? protocolFees.token0 : amount0Requested;
 871 |     |         amount1 = amount1Requested > protocolFees.token1 ? protocolFees.token1 : amount1Requested;
 872 |     | 
 873 |     |         if (amount0 > 0) {
 874 |     |             if (amount0 == protocolFees.token0) amount0--; // ensure that the slot is not cleared, for gas savings
 875 |     |             protocolFees.token0 -= amount0;
 876 |     |             TransferHelper.safeTransfer(token0, recipient, amount0);
 877 |     |         }
 878 |     |         if (amount1 > 0) {
 879 |     |             if (amount1 == protocolFees.token1) amount1--; // ensure that the slot is not cleared, for gas savings
 880 |     |             protocolFees.token1 -= amount1;
 881 |     |             TransferHelper.safeTransfer(token1, recipient, amount1);
 882 |     |         }
 883 |     | 
 884 |     |         emit CollectProtocol(msg.sender, recipient, amount0, amount1);
 885 |     |     }
 886 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/UniswapV3PoolDeployer.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity >=0.8.12;
  3 |     | 
  4 |     | import {IUniswapV3PoolDeployer} from
  5 |     |     "./interfaces/IUniswapV3PoolDeployer.sol";
  6 |     | 
  7 |     | import {UniswapV3Pool} from "./UniswapV3Pool.sol";
  8 |     | 
  9 |     | /// @dev    Changed pragma to >=0.8.12
 10 |     | contract UniswapV3PoolDeployer is IUniswapV3PoolDeployer {
 11 |     |     struct Parameters {
 12 |     |         address factory;
 13 |     |         address token0;
 14 |     |         address token1;
 15 |     |         uint24 fee;
 16 |     |         int24 tickSpacing;
 17 |     |     }
 18 |     | 
 19 |     |     /// @inheritdoc IUniswapV3PoolDeployer
 20 | *   |     Parameters public override parameters;
 21 |     | 
 22 |     |     /// @dev Deploys a pool with the given parameters by transiently setting the parameters storage slot and then
 23 |     |     /// clearing it after deploying the pool.
 24 |     |     /// @param factory The contract address of the Uniswap V3 factory
 25 |     |     /// @param token0 The first token of the pool by address sort order
 26 |     |     /// @param token1 The second token of the pool by address sort order
 27 |     |     /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip
 28 |     |     /// @param tickSpacing The spacing between usable ticks
 29 | *   |     function deploy(
 30 |     |         address factory,
 31 |     |         address token0,
 32 |     |         address token1,
 33 |     |         uint24 fee,
 34 |     |         int24 tickSpacing
 35 |     |     ) internal returns (address pool) {
 36 | *   |         parameters = Parameters({
 37 |     |             factory: factory,
 38 |     |             token0: token0,
 39 |     |             token1: token1,
 40 |     |             fee: fee,
 41 |     |             tickSpacing: tickSpacing
 42 |     |         });
 43 | *   |         pool = address(new UniswapV3Pool{salt: keccak256(abi.encode(token0, token1, fee))}());
 44 | *   |         delete parameters;
 45 |     |     }
 46 |     | }
 47 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/IERC20Minimal.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Minimal ERC20 interface for Uniswap
  5 |     | /// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3
  6 |     | interface IERC20Minimal {
  7 |     |     /// @notice Returns the balance of a token
  8 |     |     /// @param account The account for which to look up the number of tokens it has, i.e. its balance
  9 |     |     /// @return The number of tokens held by the account
 10 |     |     function balanceOf(address account) external view returns (uint256);
 11 |     | 
 12 |     |     /// @notice Transfers the amount of token from the `msg.sender` to the recipient
 13 |     |     /// @param recipient The account that will receive the amount transferred
 14 |     |     /// @param amount The number of tokens to send from the sender to the recipient
 15 |     |     /// @return Returns true for a successful transfer, false for an unsuccessful transfer
 16 |     |     function transfer(address recipient, uint256 amount) external returns (bool);
 17 |     | 
 18 |     |     /// @notice Returns the current allowance given to a spender by an owner
 19 |     |     /// @param owner The account of the token owner
 20 |     |     /// @param spender The account of the token spender
 21 |     |     /// @return The current allowance granted by `owner` to `spender`
 22 |     |     function allowance(address owner, address spender) external view returns (uint256);
 23 |     | 
 24 |     |     /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`
 25 |     |     /// @param spender The account which will be allowed to spend a given amount of the owners tokens
 26 |     |     /// @param amount The amount of tokens allowed to be used by `spender`
 27 |     |     /// @return Returns true for a successful approval, false for unsuccessful
 28 |     |     function approve(address spender, uint256 amount) external returns (bool);
 29 |     | 
 30 |     |     /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`
 31 |     |     /// @param sender The account from which the transfer will be initiated
 32 |     |     /// @param recipient The recipient of the transfer
 33 |     |     /// @param amount The amount of the transfer
 34 |     |     /// @return Returns true for a successful transfer, false for unsuccessful
 35 |     |     function transferFrom(
 36 |     |         address sender,
 37 |     |         address recipient,
 38 |     |         uint256 amount
 39 |     |     ) external returns (bool);
 40 |     | 
 41 |     |     /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.
 42 |     |     /// @param from The account from which the tokens were sent, i.e. the balance decreased
 43 |     |     /// @param to The account to which the tokens were sent, i.e. the balance increased
 44 |     |     /// @param value The amount of tokens that were transferred
 45 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 46 |     | 
 47 |     |     /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.
 48 |     |     /// @param owner The account that approved spending of its tokens
 49 |     |     /// @param spender The account for which the spending allowance was modified
 50 |     |     /// @param value The new allowance from the owner to the spender
 51 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 52 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/IUniswapV3Factory.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title The interface for the Uniswap V3 Factory
  5 |     | /// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees
  6 |     | interface IUniswapV3Factory {
  7 |     |     /// @notice Emitted when the owner of the factory is changed
  8 |     |     /// @param oldOwner The owner before the owner was changed
  9 |     |     /// @param newOwner The owner after the owner was changed
 10 |     |     event OwnerChanged(address indexed oldOwner, address indexed newOwner);
 11 |     | 
 12 |     |     /// @notice Emitted when a pool is created
 13 |     |     /// @param token0 The first token of the pool by address sort order
 14 |     |     /// @param token1 The second token of the pool by address sort order
 15 |     |     /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip
 16 |     |     /// @param tickSpacing The minimum number of ticks between initialized ticks
 17 |     |     /// @param pool The address of the created pool
 18 |     |     event PoolCreated(
 19 |     |         address indexed token0,
 20 |     |         address indexed token1,
 21 |     |         uint24 indexed fee,
 22 |     |         int24 tickSpacing,
 23 |     |         address pool
 24 |     |     );
 25 |     | 
 26 |     |     /// @notice Emitted when a new fee amount is enabled for pool creation via the factory
 27 |     |     /// @param fee The enabled fee, denominated in hundredths of a bip
 28 |     |     /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee
 29 |     |     event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);
 30 |     | 
 31 |     |     /// @notice Returns the current owner of the factory
 32 |     |     /// @dev Can be changed by the current owner via setOwner
 33 |     |     /// @return The address of the factory owner
 34 |     |     function owner() external view returns (address);
 35 |     | 
 36 |     |     /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled
 37 |     |     /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context
 38 |     |     /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee
 39 |     |     /// @return The tick spacing
 40 |     |     function feeAmountTickSpacing(uint24 fee) external view returns (int24);
 41 |     | 
 42 |     |     /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist
 43 |     |     /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order
 44 |     |     /// @param tokenA The contract address of either token0 or token1
 45 |     |     /// @param tokenB The contract address of the other token
 46 |     |     /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip
 47 |     |     /// @return pool The pool address
 48 |     |     function getPool(
 49 |     |         address tokenA,
 50 |     |         address tokenB,
 51 |     |         uint24 fee
 52 |     |     ) external view returns (address pool);
 53 |     | 
 54 |     |     /// @notice Creates a pool for the given two tokens and fee
 55 |     |     /// @param tokenA One of the two tokens in the desired pool
 56 |     |     /// @param tokenB The other of the two tokens in the desired pool
 57 |     |     /// @param fee The desired fee for the pool
 58 |     |     /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved
 59 |     |     /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments
 60 |     |     /// are invalid.
 61 |     |     /// @return pool The address of the newly created pool
 62 |     |     function createPool(
 63 |     |         address tokenA,
 64 |     |         address tokenB,
 65 |     |         uint24 fee
 66 |     |     ) external returns (address pool);
 67 |     | 
 68 |     |     /// @notice Updates the owner of the factory
 69 |     |     /// @dev Must be called by the current owner
 70 |     |     /// @param _owner The new owner of the factory
 71 |     |     function setOwner(address _owner) external;
 72 |     | 
 73 |     |     /// @notice Enables a fee amount with the given tickSpacing
 74 |     |     /// @dev Fee amounts may never be removed once enabled
 75 |     |     /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)
 76 |     |     /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount
 77 |     |     function enableFeeAmount(uint24 fee, int24 tickSpacing) external;
 78 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/IUniswapV3Pool.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | import './pool/IUniswapV3PoolImmutables.sol';
  5 |     | import './pool/IUniswapV3PoolState.sol';
  6 |     | import './pool/IUniswapV3PoolDerivedState.sol';
  7 |     | import './pool/IUniswapV3PoolActions.sol';
  8 |     | import './pool/IUniswapV3PoolOwnerActions.sol';
  9 |     | import './pool/IUniswapV3PoolEvents.sol';
 10 |     | 
 11 |     | /// @title The interface for a Uniswap V3 Pool
 12 |     | /// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform
 13 |     | /// to the ERC20 specification
 14 |     | /// @dev The pool interface is broken up into many smaller pieces
 15 |     | interface IUniswapV3Pool is
 16 |     |     IUniswapV3PoolImmutables,
 17 |     |     IUniswapV3PoolState,
 18 |     |     IUniswapV3PoolDerivedState,
 19 |     |     IUniswapV3PoolActions,
 20 |     |     IUniswapV3PoolOwnerActions,
 21 |     |     IUniswapV3PoolEvents
 22 |     | {
 23 |     | 
 24 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/IUniswapV3PoolDeployer.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title An interface for a contract that is capable of deploying Uniswap V3 Pools
  5 |     | /// @notice A contract that constructs a pool must implement this to pass arguments to the pool
  6 |     | /// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash
  7 |     | /// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain
  8 |     | interface IUniswapV3PoolDeployer {
  9 |     |     /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.
 10 |     |     /// @dev Called by the pool constructor to fetch the parameters of the pool
 11 |     |     /// Returns factory The factory address
 12 |     |     /// Returns token0 The first token of the pool by address sort order
 13 |     |     /// Returns token1 The second token of the pool by address sort order
 14 |     |     /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip
 15 |     |     /// Returns tickSpacing The minimum number of ticks between initialized ticks
 16 |     |     function parameters()
 17 |     |         external
 18 |     |         view
 19 |     |         returns (
 20 |     |             address factory,
 21 |     |             address token0,
 22 |     |             address token1,
 23 |     |             uint24 fee,
 24 |     |             int24 tickSpacing
 25 |     |         );
 26 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/callback/IUniswapV3FlashCallback.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Callback for IUniswapV3PoolActions#flash
  5 |     | /// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface
  6 |     | interface IUniswapV3FlashCallback {
  7 |     |     /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.
  8 |     |     /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.
  9 |     |     /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.
 10 |     |     /// @param fee0 The fee amount in token0 due to the pool by the end of the flash
 11 |     |     /// @param fee1 The fee amount in token1 due to the pool by the end of the flash
 12 |     |     /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call
 13 |     |     function uniswapV3FlashCallback(
 14 |     |         uint256 fee0,
 15 |     |         uint256 fee1,
 16 |     |         bytes calldata data
 17 |     |     ) external;
 18 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/callback/IUniswapV3MintCallback.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Callback for IUniswapV3PoolActions#mint
  5 |     | /// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface
  6 |     | interface IUniswapV3MintCallback {
  7 |     |     /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.
  8 |     |     /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.
  9 |     |     /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.
 10 |     |     /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity
 11 |     |     /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity
 12 |     |     /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call
 13 |     |     function uniswapV3MintCallback(
 14 |     |         uint256 amount0Owed,
 15 |     |         uint256 amount1Owed,
 16 |     |         bytes calldata data
 17 |     |     ) external;
 18 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/callback/IUniswapV3SwapCallback.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Callback for IUniswapV3PoolActions#swap
  5 |     | /// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface
  6 |     | interface IUniswapV3SwapCallback {
  7 |     |     /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.
  8 |     |     /// @dev In the implementation you must pay the pool tokens owed for the swap.
  9 |     |     /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.
 10 |     |     /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.
 11 |     |     /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by
 12 |     |     /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.
 13 |     |     /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by
 14 |     |     /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.
 15 |     |     /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call
 16 |     |     function uniswapV3SwapCallback(
 17 |     |         int256 amount0Delta,
 18 |     |         int256 amount1Delta,
 19 |     |         bytes calldata data
 20 |     |     ) external;
 21 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/pool/IUniswapV3PoolActions.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.8.0;
   3 |     | 
   4 |     | /// @title Permissionless pool actions
   5 |     | /// @notice Contains pool methods that can be called by anyone
   6 |     | interface IUniswapV3PoolActions {
   7 |     |     /// @notice Sets the initial price for the pool
   8 |     |     /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value
   9 |     |     /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96
  10 |     |     function initialize(uint160 sqrtPriceX96) external;
  11 |     | 
  12 |     |     /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position
  13 |     |     /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback
  14 |     |     /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends
  15 |     |     /// on tickLower, tickUpper, the amount of liquidity, and the current price.
  16 |     |     /// @param recipient The address for which the liquidity will be created
  17 |     |     /// @param tickLower The lower tick of the position in which to add liquidity
  18 |     |     /// @param tickUpper The upper tick of the position in which to add liquidity
  19 |     |     /// @param amount The amount of liquidity to mint
  20 |     |     /// @param data Any data that should be passed through to the callback
  21 |     |     /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback
  22 |     |     /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback
  23 |     |     function mint(
  24 |     |         address recipient,
  25 |     |         int24 tickLower,
  26 |     |         int24 tickUpper,
  27 |     |         uint128 amount,
  28 |     |         bytes calldata data
  29 |     |     ) external returns (uint256 amount0, uint256 amount1);
  30 |     | 
  31 |     |     /// @notice Collects tokens owed to a position
  32 |     |     /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.
  33 |     |     /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or
  34 |     |     /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the
  35 |     |     /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.
  36 |     |     /// @param recipient The address which should receive the fees collected
  37 |     |     /// @param tickLower The lower tick of the position for which to collect fees
  38 |     |     /// @param tickUpper The upper tick of the position for which to collect fees
  39 |     |     /// @param amount0Requested How much token0 should be withdrawn from the fees owed
  40 |     |     /// @param amount1Requested How much token1 should be withdrawn from the fees owed
  41 |     |     /// @return amount0 The amount of fees collected in token0
  42 |     |     /// @return amount1 The amount of fees collected in token1
  43 |     |     function collect(
  44 |     |         address recipient,
  45 |     |         int24 tickLower,
  46 |     |         int24 tickUpper,
  47 |     |         uint128 amount0Requested,
  48 |     |         uint128 amount1Requested
  49 |     |     ) external returns (uint128 amount0, uint128 amount1);
  50 |     | 
  51 |     |     /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position
  52 |     |     /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0
  53 |     |     /// @dev Fees must be collected separately via a call to #collect
  54 |     |     /// @param tickLower The lower tick of the position for which to burn liquidity
  55 |     |     /// @param tickUpper The upper tick of the position for which to burn liquidity
  56 |     |     /// @param amount How much liquidity to burn
  57 |     |     /// @return amount0 The amount of token0 sent to the recipient
  58 |     |     /// @return amount1 The amount of token1 sent to the recipient
  59 |     |     function burn(
  60 |     |         int24 tickLower,
  61 |     |         int24 tickUpper,
  62 |     |         uint128 amount
  63 |     |     ) external returns (uint256 amount0, uint256 amount1);
  64 |     | 
  65 |     |     /// @notice Swap token0 for token1, or token1 for token0
  66 |     |     /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback
  67 |     |     /// @param recipient The address to receive the output of the swap
  68 |     |     /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0
  69 |     |     /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)
  70 |     |     /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this
  71 |     |     /// value after the swap. If one for zero, the price cannot be greater than this value after the swap
  72 |     |     /// @param data Any data to be passed through to the callback
  73 |     |     /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive
  74 |     |     /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive
  75 |     |     function swap(
  76 |     |         address recipient,
  77 |     |         bool zeroForOne,
  78 |     |         int256 amountSpecified,
  79 |     |         uint160 sqrtPriceLimitX96,
  80 |     |         bytes calldata data
  81 |     |     ) external returns (int256 amount0, int256 amount1);
  82 |     | 
  83 |     |     /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback
  84 |     |     /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback
  85 |     |     /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling
  86 |     |     /// with 0 amount{0,1} and sending the donation amount(s) from the callback
  87 |     |     /// @param recipient The address which will receive the token0 and token1 amounts
  88 |     |     /// @param amount0 The amount of token0 to send
  89 |     |     /// @param amount1 The amount of token1 to send
  90 |     |     /// @param data Any data to be passed through to the callback
  91 |     |     function flash(
  92 |     |         address recipient,
  93 |     |         uint256 amount0,
  94 |     |         uint256 amount1,
  95 |     |         bytes calldata data
  96 |     |     ) external;
  97 |     | 
  98 |     |     /// @notice Increase the maximum number of price and liquidity observations that this pool will store
  99 |     |     /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to
 100 |     |     /// the input observationCardinalityNext.
 101 |     |     /// @param observationCardinalityNext The desired minimum number of observations for the pool to store
 102 |     |     function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;
 103 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/pool/IUniswapV3PoolDerivedState.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Pool state that is not stored
  5 |     | /// @notice Contains view functions to provide information about the pool that is computed rather than stored on the
  6 |     | /// blockchain. The functions here may have variable gas costs.
  7 |     | interface IUniswapV3PoolDerivedState {
  8 |     |     /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp
  9 |     |     /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing
 10 |     |     /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,
 11 |     |     /// you must call it with secondsAgos = [3600, 0].
 12 |     |     /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in
 13 |     |     /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.
 14 |     |     /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned
 15 |     |     /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp
 16 |     |     /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block
 17 |     |     /// timestamp
 18 |     |     function observe(uint32[] calldata secondsAgos)
 19 |     |         external
 20 |     |         view
 21 |     |         returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);
 22 |     | 
 23 |     |     /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range
 24 |     |     /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.
 25 |     |     /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first
 26 |     |     /// snapshot is taken and the second snapshot is taken.
 27 |     |     /// @param tickLower The lower tick of the range
 28 |     |     /// @param tickUpper The upper tick of the range
 29 |     |     /// @return tickCumulativeInside The snapshot of the tick accumulator for the range
 30 |     |     /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range
 31 |     |     /// @return secondsInside The snapshot of seconds per liquidity for the range
 32 |     |     function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)
 33 |     |         external
 34 |     |         view
 35 |     |         returns (
 36 |     |             int56 tickCumulativeInside,
 37 |     |             uint160 secondsPerLiquidityInsideX128,
 38 |     |             uint32 secondsInside
 39 |     |         );
 40 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/pool/IUniswapV3PoolEvents.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.8.0;
   3 |     | 
   4 |     | /// @title Events emitted by a pool
   5 |     | /// @notice Contains all events emitted by the pool
   6 |     | interface IUniswapV3PoolEvents {
   7 |     |     /// @notice Emitted exactly once by a pool when #initialize is first called on the pool
   8 |     |     /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize
   9 |     |     /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96
  10 |     |     /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool
  11 |     |     event Initialize(uint160 sqrtPriceX96, int24 tick);
  12 |     | 
  13 |     |     /// @notice Emitted when liquidity is minted for a given position
  14 |     |     /// @param sender The address that minted the liquidity
  15 |     |     /// @param owner The owner of the position and recipient of any minted liquidity
  16 |     |     /// @param tickLower The lower tick of the position
  17 |     |     /// @param tickUpper The upper tick of the position
  18 |     |     /// @param amount The amount of liquidity minted to the position range
  19 |     |     /// @param amount0 How much token0 was required for the minted liquidity
  20 |     |     /// @param amount1 How much token1 was required for the minted liquidity
  21 |     |     event Mint(
  22 |     |         address sender,
  23 |     |         address indexed owner,
  24 |     |         int24 indexed tickLower,
  25 |     |         int24 indexed tickUpper,
  26 |     |         uint128 amount,
  27 |     |         uint256 amount0,
  28 |     |         uint256 amount1
  29 |     |     );
  30 |     | 
  31 |     |     /// @notice Emitted when fees are collected by the owner of a position
  32 |     |     /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees
  33 |     |     /// @param owner The owner of the position for which fees are collected
  34 |     |     /// @param tickLower The lower tick of the position
  35 |     |     /// @param tickUpper The upper tick of the position
  36 |     |     /// @param amount0 The amount of token0 fees collected
  37 |     |     /// @param amount1 The amount of token1 fees collected
  38 |     |     event Collect(
  39 |     |         address indexed owner,
  40 |     |         address recipient,
  41 |     |         int24 indexed tickLower,
  42 |     |         int24 indexed tickUpper,
  43 |     |         uint128 amount0,
  44 |     |         uint128 amount1
  45 |     |     );
  46 |     | 
  47 |     |     /// @notice Emitted when a position's liquidity is removed
  48 |     |     /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect
  49 |     |     /// @param owner The owner of the position for which liquidity is removed
  50 |     |     /// @param tickLower The lower tick of the position
  51 |     |     /// @param tickUpper The upper tick of the position
  52 |     |     /// @param amount The amount of liquidity to remove
  53 |     |     /// @param amount0 The amount of token0 withdrawn
  54 |     |     /// @param amount1 The amount of token1 withdrawn
  55 |     |     event Burn(
  56 |     |         address indexed owner,
  57 |     |         int24 indexed tickLower,
  58 |     |         int24 indexed tickUpper,
  59 |     |         uint128 amount,
  60 |     |         uint256 amount0,
  61 |     |         uint256 amount1
  62 |     |     );
  63 |     | 
  64 |     |     /// @notice Emitted by the pool for any swaps between token0 and token1
  65 |     |     /// @param sender The address that initiated the swap call, and that received the callback
  66 |     |     /// @param recipient The address that received the output of the swap
  67 |     |     /// @param amount0 The delta of the token0 balance of the pool
  68 |     |     /// @param amount1 The delta of the token1 balance of the pool
  69 |     |     /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96
  70 |     |     /// @param liquidity The liquidity of the pool after the swap
  71 |     |     /// @param tick The log base 1.0001 of price of the pool after the swap
  72 |     |     event Swap(
  73 |     |         address indexed sender,
  74 |     |         address indexed recipient,
  75 |     |         int256 amount0,
  76 |     |         int256 amount1,
  77 |     |         uint160 sqrtPriceX96,
  78 |     |         uint128 liquidity,
  79 |     |         int24 tick
  80 |     |     );
  81 |     | 
  82 |     |     /// @notice Emitted by the pool for any flashes of token0/token1
  83 |     |     /// @param sender The address that initiated the swap call, and that received the callback
  84 |     |     /// @param recipient The address that received the tokens from flash
  85 |     |     /// @param amount0 The amount of token0 that was flashed
  86 |     |     /// @param amount1 The amount of token1 that was flashed
  87 |     |     /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee
  88 |     |     /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee
  89 |     |     event Flash(
  90 |     |         address indexed sender,
  91 |     |         address indexed recipient,
  92 |     |         uint256 amount0,
  93 |     |         uint256 amount1,
  94 |     |         uint256 paid0,
  95 |     |         uint256 paid1
  96 |     |     );
  97 |     | 
  98 |     |     /// @notice Emitted by the pool for increases to the number of observations that can be stored
  99 |     |     /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index
 100 |     |     /// just before a mint/swap/burn.
 101 |     |     /// @param observationCardinalityNextOld The previous value of the next observation cardinality
 102 |     |     /// @param observationCardinalityNextNew The updated value of the next observation cardinality
 103 |     |     event IncreaseObservationCardinalityNext(
 104 |     |         uint16 observationCardinalityNextOld,
 105 |     |         uint16 observationCardinalityNextNew
 106 |     |     );
 107 |     | 
 108 |     |     /// @notice Emitted when the protocol fee is changed by the pool
 109 |     |     /// @param feeProtocol0Old The previous value of the token0 protocol fee
 110 |     |     /// @param feeProtocol1Old The previous value of the token1 protocol fee
 111 |     |     /// @param feeProtocol0New The updated value of the token0 protocol fee
 112 |     |     /// @param feeProtocol1New The updated value of the token1 protocol fee
 113 |     |     event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);
 114 |     | 
 115 |     |     /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner
 116 |     |     /// @param sender The address that collects the protocol fees
 117 |     |     /// @param recipient The address that receives the collected protocol fees
 118 |     |     /// @param amount0 The amount of token0 protocol fees that is withdrawn
 119 |     |     /// @param amount0 The amount of token1 protocol fees that is withdrawn
 120 |     |     event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);
 121 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/pool/IUniswapV3PoolImmutables.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Pool state that never changes
  5 |     | /// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values
  6 |     | interface IUniswapV3PoolImmutables {
  7 |     |     /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface
  8 |     |     /// @return The contract address
  9 |     |     function factory() external view returns (address);
 10 |     | 
 11 |     |     /// @notice The first of the two tokens of the pool, sorted by address
 12 |     |     /// @return The token contract address
 13 |     |     function token0() external view returns (address);
 14 |     | 
 15 |     |     /// @notice The second of the two tokens of the pool, sorted by address
 16 |     |     /// @return The token contract address
 17 |     |     function token1() external view returns (address);
 18 |     | 
 19 |     |     /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6
 20 |     |     /// @return The fee
 21 |     |     function fee() external view returns (uint24);
 22 |     | 
 23 |     |     /// @notice The pool tick spacing
 24 |     |     /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive
 25 |     |     /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...
 26 |     |     /// This value is an int24 to avoid casting even though it is always positive.
 27 |     |     /// @return The tick spacing
 28 |     |     function tickSpacing() external view returns (int24);
 29 |     | 
 30 |     |     /// @notice The maximum amount of position liquidity that can use any tick in the range
 31 |     |     /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and
 32 |     |     /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool
 33 |     |     /// @return The max amount of liquidity per tick
 34 |     |     function maxLiquidityPerTick() external view returns (uint128);
 35 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/pool/IUniswapV3PoolOwnerActions.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Permissioned pool actions
  5 |     | /// @notice Contains pool methods that may only be called by the factory owner
  6 |     | interface IUniswapV3PoolOwnerActions {
  7 |     |     /// @notice Set the denominator of the protocol's % share of the fees
  8 |     |     /// @param feeProtocol0 new protocol fee for token0 of the pool
  9 |     |     /// @param feeProtocol1 new protocol fee for token1 of the pool
 10 |     |     function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;
 11 |     | 
 12 |     |     /// @notice Collect the protocol fee accrued to the pool
 13 |     |     /// @param recipient The address to which collected protocol fees should be sent
 14 |     |     /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1
 15 |     |     /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0
 16 |     |     /// @return amount0 The protocol fee collected in token0
 17 |     |     /// @return amount1 The protocol fee collected in token1
 18 |     |     function collectProtocol(
 19 |     |         address recipient,
 20 |     |         uint128 amount0Requested,
 21 |     |         uint128 amount1Requested
 22 |     |     ) external returns (uint128 amount0, uint128 amount1);
 23 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/interfaces/pool/IUniswapV3PoolState.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.8.0;
   3 |     | 
   4 |     | /// @title Pool state that can change
   5 |     | /// @notice These methods compose the pool's state, and can change with any frequency including multiple times
   6 |     | /// per transaction
   7 |     | interface IUniswapV3PoolState {
   8 |     |     /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas
   9 |     |     /// when accessed externally.
  10 |     |     /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value
  11 |     |     /// tick The current tick of the pool, i.e. according to the last tick transition that was run.
  12 |     |     /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick
  13 |     |     /// boundary.
  14 |     |     /// observationIndex The index of the last oracle observation that was written,
  15 |     |     /// observationCardinality The current maximum number of observations stored in the pool,
  16 |     |     /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.
  17 |     |     /// feeProtocol The protocol fee for both tokens of the pool.
  18 |     |     /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0
  19 |     |     /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.
  20 |     |     /// unlocked Whether the pool is currently locked to reentrancy
  21 |     |     function slot0()
  22 |     |         external
  23 |     |         view
  24 |     |         returns (
  25 |     |             uint160 sqrtPriceX96,
  26 |     |             int24 tick,
  27 |     |             uint16 observationIndex,
  28 |     |             uint16 observationCardinality,
  29 |     |             uint16 observationCardinalityNext,
  30 |     |             uint8 feeProtocol,
  31 |     |             bool unlocked
  32 |     |         );
  33 |     | 
  34 |     |     /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool
  35 |     |     /// @dev This value can overflow the uint256
  36 |     |     function feeGrowthGlobal0X128() external view returns (uint256);
  37 |     | 
  38 |     |     /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool
  39 |     |     /// @dev This value can overflow the uint256
  40 |     |     function feeGrowthGlobal1X128() external view returns (uint256);
  41 |     | 
  42 |     |     /// @notice The amounts of token0 and token1 that are owed to the protocol
  43 |     |     /// @dev Protocol fees will never exceed uint128 max in either token
  44 |     |     function protocolFees() external view returns (uint128 token0, uint128 token1);
  45 |     | 
  46 |     |     /// @notice The currently in range liquidity available to the pool
  47 |     |     /// @dev This value has no relationship to the total liquidity across all ticks
  48 |     |     function liquidity() external view returns (uint128);
  49 |     | 
  50 |     |     /// @notice Look up information about a specific tick in the pool
  51 |     |     /// @param tick The tick to look up
  52 |     |     /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or
  53 |     |     /// tick upper,
  54 |     |     /// liquidityNet how much liquidity changes when the pool price crosses the tick,
  55 |     |     /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,
  56 |     |     /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,
  57 |     |     /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick
  58 |     |     /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,
  59 |     |     /// secondsOutside the seconds spent on the other side of the tick from the current tick,
  60 |     |     /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.
  61 |     |     /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.
  62 |     |     /// In addition, these values are only relative and must be used only in comparison to previous snapshots for
  63 |     |     /// a specific position.
  64 |     |     function ticks(int24 tick)
  65 |     |         external
  66 |     |         view
  67 |     |         returns (
  68 |     |             uint128 liquidityGross,
  69 |     |             int128 liquidityNet,
  70 |     |             uint256 feeGrowthOutside0X128,
  71 |     |             uint256 feeGrowthOutside1X128,
  72 |     |             int56 tickCumulativeOutside,
  73 |     |             uint160 secondsPerLiquidityOutsideX128,
  74 |     |             uint32 secondsOutside,
  75 |     |             bool initialized
  76 |     |         );
  77 |     | 
  78 |     |     /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information
  79 |     |     function tickBitmap(int16 wordPosition) external view returns (uint256);
  80 |     | 
  81 |     |     /// @notice Returns the information about a position by the position's key
  82 |     |     /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper
  83 |     |     /// @return _liquidity The amount of liquidity in the position,
  84 |     |     /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,
  85 |     |     /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,
  86 |     |     /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,
  87 |     |     /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke
  88 |     |     function positions(bytes32 key)
  89 |     |         external
  90 |     |         view
  91 |     |         returns (
  92 |     |             uint128 _liquidity,
  93 |     |             uint256 feeGrowthInside0LastX128,
  94 |     |             uint256 feeGrowthInside1LastX128,
  95 |     |             uint128 tokensOwed0,
  96 |     |             uint128 tokensOwed1
  97 |     |         );
  98 |     | 
  99 |     |     /// @notice Returns data about a specific observation index
 100 |     |     /// @param index The element of the observations array to fetch
 101 |     |     /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time
 102 |     |     /// ago, rather than at a specific index in the array.
 103 |     |     /// @return blockTimestamp The timestamp of the observation,
 104 |     |     /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,
 105 |     |     /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,
 106 |     |     /// Returns initialized whether the observation has been initialized and the values are safe to use
 107 |     |     function observations(uint256 index)
 108 |     |         external
 109 |     |         view
 110 |     |         returns (
 111 |     |             uint32 blockTimestamp,
 112 |     |             int56 tickCumulative,
 113 |     |             uint160 secondsPerLiquidityCumulativeX128,
 114 |     |             bool initialized
 115 |     |         );
 116 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/BitMath.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title BitMath
  5 |     | /// @dev This library provides functionality for computing bit properties of an unsigned integer
  6 |     | library BitMath {
  7 |     |     /// @notice Returns the index of the most significant bit of the number,
  8 |     |     ///     where the least significant bit is at index 0 and the most significant bit is at index 255
  9 |     |     /// @dev The function satisfies the property:
 10 |     |     ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)
 11 |     |     /// @param x the value for which to compute the most significant bit, must be greater than 0
 12 |     |     /// @return r the index of the most significant bit
 13 |     |     function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {
 14 |     |         require(x > 0);
 15 |     | 
 16 |     |         if (x >= 0x100000000000000000000000000000000) {
 17 |     |             x >>= 128;
 18 |     |             r += 128;
 19 |     |         }
 20 |     |         if (x >= 0x10000000000000000) {
 21 |     |             x >>= 64;
 22 |     |             r += 64;
 23 |     |         }
 24 |     |         if (x >= 0x100000000) {
 25 |     |             x >>= 32;
 26 |     |             r += 32;
 27 |     |         }
 28 |     |         if (x >= 0x10000) {
 29 |     |             x >>= 16;
 30 |     |             r += 16;
 31 |     |         }
 32 |     |         if (x >= 0x100) {
 33 |     |             x >>= 8;
 34 |     |             r += 8;
 35 |     |         }
 36 |     |         if (x >= 0x10) {
 37 |     |             x >>= 4;
 38 |     |             r += 4;
 39 |     |         }
 40 |     |         if (x >= 0x4) {
 41 |     |             x >>= 2;
 42 |     |             r += 2;
 43 |     |         }
 44 |     |         if (x >= 0x2) r += 1;
 45 |     |     }
 46 |     | 
 47 |     |     /// @notice Returns the index of the least significant bit of the number,
 48 |     |     ///     where the least significant bit is at index 0 and the most significant bit is at index 255
 49 |     |     /// @dev The function satisfies the property:
 50 |     |     ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)
 51 |     |     /// @param x the value for which to compute the least significant bit, must be greater than 0
 52 |     |     /// @return r the index of the least significant bit
 53 |     |     function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {
 54 |     |         require(x > 0);
 55 |     | 
 56 |     |         r = 255;
 57 |     |         if (x & type(uint128).max > 0) {
 58 |     |             r -= 128;
 59 |     |         } else {
 60 |     |             x >>= 128;
 61 |     |         }
 62 |     |         if (x & type(uint64).max > 0) {
 63 |     |             r -= 64;
 64 |     |         } else {
 65 |     |             x >>= 64;
 66 |     |         }
 67 |     |         if (x & type(uint32).max > 0) {
 68 |     |             r -= 32;
 69 |     |         } else {
 70 |     |             x >>= 32;
 71 |     |         }
 72 |     |         if (x & type(uint16).max > 0) {
 73 |     |             r -= 16;
 74 |     |         } else {
 75 |     |             x >>= 16;
 76 |     |         }
 77 |     |         if (x & type(uint8).max > 0) {
 78 |     |             r -= 8;
 79 |     |         } else {
 80 |     |             x >>= 8;
 81 |     |         }
 82 |     |         if (x & 0xf > 0) {
 83 |     |             r -= 4;
 84 |     |         } else {
 85 |     |             x >>= 4;
 86 |     |         }
 87 |     |         if (x & 0x3 > 0) {
 88 |     |             r -= 2;
 89 |     |         } else {
 90 |     |             x >>= 2;
 91 |     |         }
 92 |     |         if (x & 0x1 > 0) r -= 1;
 93 |     |     }
 94 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/FixedPoint128.sol
 1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
 2 |     | pragma solidity >=0.8.0;
 3 |     | 
 4 |     | /// @title FixedPoint128
 5 |     | /// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)
 6 |     | library FixedPoint128 {
 7 |     |     uint256 internal constant Q128 = 0x100000000000000000000000000000000;
 8 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/FixedPoint96.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title FixedPoint96
  5 |     | /// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)
  6 |     | /// @dev Used in SqrtPriceMath.sol
  7 |     | library FixedPoint96 {
  8 |     |     uint8 internal constant RESOLUTION = 96;
  9 |     |     uint256 internal constant Q96 = 0x1000000000000000000000000;
 10 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/FullMath.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.8.0;
   3 |     | 
   4 |     | /// @title Contains 512-bit math functions
   5 |     | /// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision
   6 |     | /// @dev Handles "phantom overflow" i.e., allows multiplication and division where an intermediate value overflows 256 bits
   7 |     | library FullMath {
   8 |     |     /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
   9 |     |     /// @param a The multiplicand
  10 |     |     /// @param b The multiplier
  11 |     |     /// @param denominator The divisor
  12 |     |     /// @return result The 256-bit result
  13 |     |     /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv
  14 | *   |     function mulDiv(
  15 |     |         uint256 a,
  16 |     |         uint256 b,
  17 |     |         uint256 denominator
  18 |     |     ) internal pure returns (uint256 result) {
  19 |     |         unchecked{
  20 |     |         // 512-bit multiply [prod1 prod0] = a * b
  21 |     |         // Compute the product mod 2**256 and mod 2**256 - 1
  22 |     |         // then use the Chinese Remainder Theorem to reconstruct
  23 |     |         // the 512 bit result. The result is stored in two 256
  24 |     |         // variables such that product = prod1 * 2**256 + prod0
  25 |     |         uint256 prod0; // Least significant 256 bits of the product
  26 |     |         uint256 prod1; // Most significant 256 bits of the product
  27 |     |         assembly {
  28 |     |             let mm := mulmod(a, b, not(0))
  29 |     |             prod0 := mul(a, b)
  30 |     |             prod1 := sub(sub(mm, prod0), lt(mm, prod0))
  31 |     |         }
  32 |     | 
  33 |     |         // Handle non-overflow cases, 256 by 256 division
  34 |     |         if (prod1 == 0) {
  35 |     |             require(denominator > 0);
  36 |     |             assembly {
  37 |     |                 result := div(prod0, denominator)
  38 |     |             }
  39 |     |             return result;
  40 |     |         }
  41 |     | 
  42 |     |         // Make sure the result is less than 2**256.
  43 |     |         // Also prevents denominator == 0
  44 |     |         require(denominator > prod1);
  45 |     | 
  46 |     |         ///////////////////////////////////////////////
  47 |     |         // 512 by 256 division.
  48 |     |         ///////////////////////////////////////////////
  49 |     | 
  50 |     |         // Make division exact by subtracting the remainder from [prod1 prod0]
  51 |     |         // Compute remainder using mulmod
  52 |     |         uint256 remainder;
  53 |     |         assembly {
  54 |     |             remainder := mulmod(a, b, denominator)
  55 |     |         }
  56 |     |         // Subtract 256 bit number from 512 bit number
  57 |     |         assembly {
  58 |     |             prod1 := sub(prod1, gt(remainder, prod0))
  59 |     |             prod0 := sub(prod0, remainder)
  60 |     |         }
  61 |     | 
  62 |     |         // Factor powers of two out of denominator
  63 |     |         // Compute largest power of two divisor of denominator.
  64 |     |         // Always >= 1.
  65 |     |         uint256 twos = uint256(-int256(denominator) & int256(denominator));
  66 |     |         // Divide denominator by power of two
  67 |     |         assembly {
  68 |     |             denominator := div(denominator, twos)
  69 |     |         }
  70 |     | 
  71 |     |         // Divide [prod1 prod0] by the factors of two
  72 |     |         assembly {
  73 |     |             prod0 := div(prod0, twos)
  74 |     |         }
  75 |     |         // Shift in bits from prod1 into prod0. For this we need
  76 |     |         // to flip `twos` such that it is 2**256 / twos.
  77 |     |         // If twos is zero, then it becomes one
  78 |     |         assembly {
  79 |     |             twos := add(div(sub(0, twos), twos), 1)
  80 |     |         }
  81 |     |         prod0 |= prod1 * twos;
  82 |     | 
  83 |     |         // Invert denominator mod 2**256
  84 |     |         // Now that denominator is an odd number, it has an inverse
  85 |     |         // modulo 2**256 such that denominator * inv = 1 mod 2**256.
  86 |     |         // Compute the inverse by starting with a seed that is correct
  87 |     |         // correct for four bits. That is, denominator * inv = 1 mod 2**4
  88 |     |         uint256 inv = (3 * denominator) ^ 2;
  89 |     |         // Now use Newton-Raphson iteration to improve the precision.
  90 |     |         // Thanks to Hensel's lifting lemma, this also works in modular
  91 |     |         // arithmetic, doubling the correct bits in each step.
  92 |     |         inv *= 2 - denominator * inv; // inverse mod 2**8
  93 |     |         inv *= 2 - denominator * inv; // inverse mod 2**16
  94 |     |         inv *= 2 - denominator * inv; // inverse mod 2**32
  95 |     |         inv *= 2 - denominator * inv; // inverse mod 2**64
  96 |     |         inv *= 2 - denominator * inv; // inverse mod 2**128
  97 |     |         inv *= 2 - denominator * inv; // inverse mod 2**256
  98 |     | 
  99 |     |         // Because the division is now exact we can divide by multiplying
 100 |     |         // with the modular inverse of denominator. This will give us the
 101 |     |         // correct result modulo 2**256. Since the precoditions guarantee
 102 |     |         // that the outcome is less than 2**256, this is the final result.
 103 |     |         // We don't need to compute the high bits of the result and prod1
 104 |     |         // is no longer required.
 105 |     |         result = prod0 * inv;
 106 |     |         }
 107 |     |         return result;
 108 |     |     }
 109 |     | 
 110 |     |     /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
 111 |     |     /// @param a The multiplicand
 112 |     |     /// @param b The multiplier
 113 |     |     /// @param denominator The divisor
 114 |     |     /// @return result The 256-bit result
 115 |     |     function mulDivRoundingUp(
 116 |     |         uint256 a,
 117 |     |         uint256 b,
 118 |     |         uint256 denominator
 119 |     |     ) internal pure returns (uint256 result) {
 120 |     |         result = mulDiv(a, b, denominator);
 121 |     |         if (mulmod(a, b, denominator) > 0) {
 122 |     |             require(result < type(uint256).max);
 123 |     |             result++;
 124 |     |         }
 125 |     |     }
 126 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/LiquidityMath.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Math library for liquidity
  5 |     | library LiquidityMath {
  6 |     |     /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows
  7 |     |     /// @param x The liquidity before change
  8 |     |     /// @param y The delta by which liquidity should be changed
  9 |     |     /// @return z The liquidity delta
 10 |     |     function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {
 11 |     |         if (y < 0) {
 12 |     |             require((z = x - uint128(-y)) < x, 'LS');
 13 |     |         } else {
 14 |     |             require((z = x + uint128(y)) >= x, 'LA');
 15 |     |         }
 16 |     |     }
 17 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/LowGasSafeMath.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Optimized overflow and underflow safe math operations
  5 |     | /// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost
  6 |     | library LowGasSafeMath {
  7 |     |     /// @notice Returns x + y, reverts if sum overflows uint256
  8 |     |     /// @param x The augend
  9 |     |     /// @param y The addend
 10 |     |     /// @return z The sum of x and y
 11 |     |     function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
 12 |     |         require((z = x + y) >= x);
 13 |     |     }
 14 |     | 
 15 |     |     /// @notice Returns x - y, reverts if underflows
 16 |     |     /// @param x The minuend
 17 |     |     /// @param y The subtrahend
 18 |     |     /// @return z The difference of x and y
 19 |     |     function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
 20 |     |         require((z = x - y) <= x);
 21 |     |     }
 22 |     | 
 23 |     |     /// @notice Returns x * y, reverts if overflows
 24 |     |     /// @param x The multiplicand
 25 |     |     /// @param y The multiplier
 26 |     |     /// @return z The product of x and y
 27 |     |     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
 28 |     |         require(x == 0 || (z = x * y) / x == y);
 29 |     |     }
 30 |     | 
 31 |     |     /// @notice Returns x + y, reverts if overflows or underflows
 32 |     |     /// @param x The augend
 33 |     |     /// @param y The addend
 34 |     |     /// @return z The sum of x and y
 35 |     |     function add(int256 x, int256 y) internal pure returns (int256 z) {
 36 |     |         require((z = x + y) >= x == (y >= 0));
 37 |     |     }
 38 |     | 
 39 |     |     /// @notice Returns x - y, reverts if overflows or underflows
 40 |     |     /// @param x The minuend
 41 |     |     /// @param y The subtrahend
 42 |     |     /// @return z The difference of x and y
 43 | *   |     function sub(int256 x, int256 y) internal pure returns (int256 z) {
 44 | *   |         require((z = x - y) <= x == (y >= 0));
 45 |     |     }
 46 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/Oracle.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity >=0.8.0;
   3 |     | 
   4 |     | /// @title Oracle
   5 |     | /// @notice Provides price and liquidity data useful for a wide variety of system designs
   6 |     | /// @dev Instances of stored oracle data, "observations", are collected in the oracle array
   7 |     | /// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the
   8 |     | /// maximum length of the oracle array. New slots will be added when the array is fully populated.
   9 |     | /// Observations are overwritten when the full length of the oracle array is populated.
  10 |     | /// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()
  11 |     | library Oracle {
  12 |     |     struct Observation {
  13 |     |         // the block timestamp of the observation
  14 |     |         uint32 blockTimestamp;
  15 |     |         // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized
  16 |     |         int56 tickCumulative;
  17 |     |         // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized
  18 |     |         uint160 secondsPerLiquidityCumulativeX128;
  19 |     |         // whether or not the observation is initialized
  20 |     |         bool initialized;
  21 |     |     }
  22 |     | 
  23 |     |     /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values
  24 |     |     /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows
  25 |     |     /// @param last The specified observation to be transformed
  26 |     |     /// @param blockTimestamp The timestamp of the new observation
  27 |     |     /// @param tick The active tick at the time of the new observation
  28 |     |     /// @param liquidity The total in-range liquidity at the time of the new observation
  29 |     |     /// @return Observation The newly populated observation
  30 |     |     function transform(
  31 |     |         Observation memory last,
  32 |     |         uint32 blockTimestamp,
  33 |     |         int24 tick,
  34 |     |         uint128 liquidity
  35 |     |     ) private pure returns (Observation memory) {
  36 |     |         uint32 delta = blockTimestamp - last.blockTimestamp;
  37 |     |         return
  38 |     |             Observation({
  39 |     |                 blockTimestamp: blockTimestamp,
  40 |     |                 tickCumulative: last.tickCumulative + int56(tick) * int56(int32(delta)),
  41 |     |                 secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +
  42 |     |                     ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),
  43 |     |                 initialized: true
  44 |     |             });
  45 |     |     }
  46 |     | 
  47 |     |     /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array
  48 |     |     /// @param self The stored oracle array
  49 |     |     /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32
  50 |     |     /// @return cardinality The number of populated elements in the oracle array
  51 |     |     /// @return cardinalityNext The new length of the oracle array, independent of population
  52 |     |     function initialize(Observation[65535] storage self, uint32 time)
  53 |     |         internal
  54 |     |         returns (uint16 cardinality, uint16 cardinalityNext)
  55 |     |     {
  56 | *   |         self[0] = Observation({
  57 |     |             blockTimestamp: time,
  58 |     |             tickCumulative: 0,
  59 |     |             secondsPerLiquidityCumulativeX128: 0,
  60 | *   |             initialized: true
  61 |     |         });
  62 |     |         return (1, 1);
  63 |     |     }
  64 |     | 
  65 |     |     /// @notice Writes an oracle observation to the array
  66 |     |     /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.
  67 |     |     /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality
  68 |     |     /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.
  69 |     |     /// @param self The stored oracle array
  70 |     |     /// @param index The index of the observation that was most recently written to the observations array
  71 |     |     /// @param blockTimestamp The timestamp of the new observation
  72 |     |     /// @param tick The active tick at the time of the new observation
  73 |     |     /// @param liquidity The total in-range liquidity at the time of the new observation
  74 |     |     /// @param cardinality The number of populated elements in the oracle array
  75 |     |     /// @param cardinalityNext The new length of the oracle array, independent of population
  76 |     |     /// @return indexUpdated The new index of the most recently written element in the oracle array
  77 |     |     /// @return cardinalityUpdated The new cardinality of the oracle array
  78 |     |     function write(
  79 |     |         Observation[65535] storage self,
  80 |     |         uint16 index,
  81 |     |         uint32 blockTimestamp,
  82 |     |         int24 tick,
  83 |     |         uint128 liquidity,
  84 |     |         uint16 cardinality,
  85 |     |         uint16 cardinalityNext
  86 |     |     ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {
  87 |     |         Observation memory last = self[index];
  88 |     | 
  89 |     |         // early return if we've already written an observation this block
  90 |     |         if (last.blockTimestamp == blockTimestamp) return (index, cardinality);
  91 |     | 
  92 |     |         // if the conditions are right, we can bump the cardinality
  93 |     |         if (cardinalityNext > cardinality && index == (cardinality - 1)) {
  94 |     |             cardinalityUpdated = cardinalityNext;
  95 |     |         } else {
  96 |     |             cardinalityUpdated = cardinality;
  97 |     |         }
  98 |     | 
  99 |     |         indexUpdated = (index + 1) % cardinalityUpdated;
 100 |     |         self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);
 101 |     |     }
 102 |     | 
 103 |     |     /// @notice Prepares the oracle array to store up to `next` observations
 104 |     |     /// @param self The stored oracle array
 105 |     |     /// @param current The current next cardinality of the oracle array
 106 |     |     /// @param next The proposed next cardinality which will be populated in the oracle array
 107 |     |     /// @return next The next cardinality which will be populated in the oracle array
 108 |     |     function grow(
 109 |     |         Observation[65535] storage self,
 110 |     |         uint16 current,
 111 |     |         uint16 next
 112 |     |     ) internal returns (uint16) {
 113 |     |         require(current > 0, 'I');
 114 |     |         // no-op if the passed next value isn't greater than the current next value
 115 |     |         if (next <= current) return current;
 116 |     |         // store in each slot to prevent fresh SSTOREs in swaps
 117 |     |         // this data will not be used because the initialized boolean is still false
 118 |     |         for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;
 119 |     |         return next;
 120 |     |     }
 121 |     | 
 122 |     |     /// @notice comparator for 32-bit timestamps
 123 |     |     /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time
 124 |     |     /// @param time A timestamp truncated to 32 bits
 125 |     |     /// @param a A comparison timestamp from which to determine the relative position of `time`
 126 |     |     /// @param b From which to determine the relative position of `time`
 127 |     |     /// @return bool Whether `a` is chronologically <= `b`
 128 |     |     function lte(
 129 |     |         uint32 time,
 130 |     |         uint32 a,
 131 |     |         uint32 b
 132 |     |     ) private pure returns (bool) {
 133 |     |         // if there hasn't been overflow, no need to adjust
 134 |     |         if (a <= time && b <= time) return a <= b;
 135 |     | 
 136 |     |         uint256 aAdjusted = a > time ? a : a + 2**32;
 137 |     |         uint256 bAdjusted = b > time ? b : b + 2**32;
 138 |     | 
 139 |     |         return aAdjusted <= bAdjusted;
 140 |     |     }
 141 |     | 
 142 |     |     /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.
 143 |     |     /// The result may be the same observation, or adjacent observations.
 144 |     |     /// @dev The answer must be contained in the array, used when the target is located within the stored observation
 145 |     |     /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation
 146 |     |     /// @param self The stored oracle array
 147 |     |     /// @param time The current block.timestamp
 148 |     |     /// @param target The timestamp at which the reserved observation should be for
 149 |     |     /// @param index The index of the observation that was most recently written to the observations array
 150 |     |     /// @param cardinality The number of populated elements in the oracle array
 151 |     |     /// @return beforeOrAt The observation recorded before, or at, the target
 152 |     |     /// @return atOrAfter The observation recorded at, or after, the target
 153 |     |     function binarySearch(
 154 |     |         Observation[65535] storage self,
 155 |     |         uint32 time,
 156 |     |         uint32 target,
 157 |     |         uint16 index,
 158 |     |         uint16 cardinality
 159 |     |     ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {
 160 |     |         uint256 l = (index + 1) % cardinality; // oldest observation
 161 |     |         uint256 r = l + cardinality - 1; // newest observation
 162 |     |         uint256 i;
 163 |     |         while (true) {
 164 |     |             i = (l + r) / 2;
 165 |     | 
 166 |     |             beforeOrAt = self[i % cardinality];
 167 |     | 
 168 |     |             // we've landed on an uninitialized tick, keep searching higher (more recently)
 169 |     |             if (!beforeOrAt.initialized) {
 170 |     |                 l = i + 1;
 171 |     |                 continue;
 172 |     |             }
 173 |     | 
 174 |     |             atOrAfter = self[(i + 1) % cardinality];
 175 |     | 
 176 |     |             bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);
 177 |     | 
 178 |     |             // check if we've found the answer!
 179 |     |             if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;
 180 |     | 
 181 |     |             if (!targetAtOrAfter) r = i - 1;
 182 |     |             else l = i + 1;
 183 |     |         }
 184 |     |     }
 185 |     | 
 186 |     |     /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied
 187 |     |     /// @dev Assumes there is at least 1 initialized observation.
 188 |     |     /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.
 189 |     |     /// @param self The stored oracle array
 190 |     |     /// @param time The current block.timestamp
 191 |     |     /// @param target The timestamp at which the reserved observation should be for
 192 |     |     /// @param tick The active tick at the time of the returned or simulated observation
 193 |     |     /// @param index The index of the observation that was most recently written to the observations array
 194 |     |     /// @param liquidity The total pool liquidity at the time of the call
 195 |     |     /// @param cardinality The number of populated elements in the oracle array
 196 |     |     /// @return beforeOrAt The observation which occurred at, or before, the given timestamp
 197 |     |     /// @return atOrAfter The observation which occurred at, or after, the given timestamp
 198 |     |     function getSurroundingObservations(
 199 |     |         Observation[65535] storage self,
 200 |     |         uint32 time,
 201 |     |         uint32 target,
 202 |     |         int24 tick,
 203 |     |         uint16 index,
 204 |     |         uint128 liquidity,
 205 |     |         uint16 cardinality
 206 |     |     ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {
 207 |     |         // optimistically set before to the newest observation
 208 |     |         beforeOrAt = self[index];
 209 |     | 
 210 |     |         // if the target is chronologically at or after the newest observation, we can early return
 211 |     |         if (lte(time, beforeOrAt.blockTimestamp, target)) {
 212 |     |             if (beforeOrAt.blockTimestamp == target) {
 213 |     |                 // if newest observation equals target, we're in the same block, so we can ignore atOrAfter
 214 |     |                 return (beforeOrAt, atOrAfter);
 215 |     |             } else {
 216 |     |                 // otherwise, we need to transform
 217 |     |                 return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));
 218 |     |             }
 219 |     |         }
 220 |     | 
 221 |     |         // now, set before to the oldest observation
 222 |     |         beforeOrAt = self[(index + 1) % cardinality];
 223 |     |         if (!beforeOrAt.initialized) beforeOrAt = self[0];
 224 |     | 
 225 |     |         // ensure that the target is chronologically at or after the oldest observation
 226 |     |         require(lte(time, beforeOrAt.blockTimestamp, target), 'OLD');
 227 |     | 
 228 |     |         // if we've reached this point, we have to binary search
 229 |     |         return binarySearch(self, time, target, index, cardinality);
 230 |     |     }
 231 |     | 
 232 |     |     /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.
 233 |     |     /// 0 may be passed as `secondsAgo' to return the current cumulative values.
 234 |     |     /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values
 235 |     |     /// at exactly the timestamp between the two observations.
 236 |     |     /// @param self The stored oracle array
 237 |     |     /// @param time The current block timestamp
 238 |     |     /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation
 239 |     |     /// @param tick The current tick
 240 |     |     /// @param index The index of the observation that was most recently written to the observations array
 241 |     |     /// @param liquidity The current in-range pool liquidity
 242 |     |     /// @param cardinality The number of populated elements in the oracle array
 243 |     |     /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`
 244 |     |     /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`
 245 |     |     function observeSingle(
 246 |     |         Observation[65535] storage self,
 247 |     |         uint32 time,
 248 |     |         uint32 secondsAgo,
 249 |     |         int24 tick,
 250 |     |         uint16 index,
 251 |     |         uint128 liquidity,
 252 |     |         uint16 cardinality
 253 |     |     ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {
 254 |     |         if (secondsAgo == 0) {
 255 |     |             Observation memory last = self[index];
 256 |     |             if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);
 257 |     |             return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);
 258 |     |         }
 259 |     | 
 260 |     |         uint32 target = time - secondsAgo;
 261 |     | 
 262 |     |         (Observation memory beforeOrAt, Observation memory atOrAfter) =
 263 |     |             getSurroundingObservations(self, time, target, tick, index, liquidity, cardinality);
 264 |     | 
 265 |     |         if (target == beforeOrAt.blockTimestamp) {
 266 |     |             // we're at the left boundary
 267 |     |             return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);
 268 |     |         } else if (target == atOrAfter.blockTimestamp) {
 269 |     |             // we're at the right boundary
 270 |     |             return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);
 271 |     |         } else {
 272 |     |             // we're in the middle
 273 |     |             uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;
 274 |     |             uint32 targetDelta = target - beforeOrAt.blockTimestamp;
 275 |     |             return (
 276 |     |                 beforeOrAt.tickCumulative +
 277 |     |                     ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / int56(int32(observationTimeDelta))) *
 278 |     |                     int56(int32(targetDelta)),
 279 |     |                 beforeOrAt.secondsPerLiquidityCumulativeX128 +
 280 |     |                     uint160(
 281 |     |                         (uint256(
 282 |     |                             atOrAfter.secondsPerLiquidityCumulativeX128 - beforeOrAt.secondsPerLiquidityCumulativeX128
 283 |     |                         ) * targetDelta) / observationTimeDelta
 284 |     |                     )
 285 |     |             );
 286 |     |         }
 287 |     |     }
 288 |     | 
 289 |     |     /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`
 290 |     |     /// @dev Reverts if `secondsAgos` > oldest observation
 291 |     |     /// @param self The stored oracle array
 292 |     |     /// @param time The current block.timestamp
 293 |     |     /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation
 294 |     |     /// @param tick The current tick
 295 |     |     /// @param index The index of the observation that was most recently written to the observations array
 296 |     |     /// @param liquidity The current in-range pool liquidity
 297 |     |     /// @param cardinality The number of populated elements in the oracle array
 298 |     |     /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`
 299 |     |     /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`
 300 |     |     function observe(
 301 |     |         Observation[65535] storage self,
 302 |     |         uint32 time,
 303 |     |         uint32[] memory secondsAgos,
 304 |     |         int24 tick,
 305 |     |         uint16 index,
 306 |     |         uint128 liquidity,
 307 |     |         uint16 cardinality
 308 |     |     ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {
 309 |     |         require(cardinality > 0, 'I');
 310 |     | 
 311 |     |         tickCumulatives = new int56[](secondsAgos.length);
 312 |     |         secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);
 313 |     |         for (uint256 i = 0; i < secondsAgos.length; i++) {
 314 |     |             (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(
 315 |     |                 self,
 316 |     |                 time,
 317 |     |                 secondsAgos[i],
 318 |     |                 tick,
 319 |     |                 index,
 320 |     |                 liquidity,
 321 |     |                 cardinality
 322 |     |             );
 323 |     |         }
 324 |     |     }
 325 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/Position.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | import './FullMath.sol';
  5 |     | import './FixedPoint128.sol';
  6 |     | import './LiquidityMath.sol';
  7 |     | 
  8 |     | /// @title Position
  9 |     | /// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary
 10 |     | /// @dev Positions store additional state for tracking fees owed to the position
 11 |     | library Position {
 12 |     |     // info stored for each user's position
 13 |     |     struct Info {
 14 |     |         // the amount of liquidity owned by this position
 15 |     |         uint128 liquidity;
 16 |     |         // fee growth per unit of liquidity as of the last update to liquidity or fees owed
 17 |     |         uint256 feeGrowthInside0LastX128;
 18 |     |         uint256 feeGrowthInside1LastX128;
 19 |     |         // the fees owed to the position owner in token0/token1
 20 |     |         uint128 tokensOwed0;
 21 |     |         uint128 tokensOwed1;
 22 |     |     }
 23 |     | 
 24 |     |     /// @notice Returns the Info struct of a position, given an owner and position boundaries
 25 |     |     /// @param self The mapping containing all user positions
 26 |     |     /// @param owner The address of the position owner
 27 |     |     /// @param tickLower The lower tick boundary of the position
 28 |     |     /// @param tickUpper The upper tick boundary of the position
 29 |     |     /// @return position The position info struct of the given owners' position
 30 |     |     function get(
 31 |     |         mapping(bytes32 => Info) storage self,
 32 |     |         address owner,
 33 |     |         int24 tickLower,
 34 |     |         int24 tickUpper
 35 |     |     ) internal view returns (Position.Info storage position) {
 36 |     |         position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];
 37 |     |     }
 38 |     | 
 39 |     |     /// @notice Credits accumulated fees to a user's position
 40 |     |     /// @param self The individual position to update
 41 |     |     /// @param liquidityDelta The change in pool liquidity as a result of the position update
 42 |     |     /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries
 43 |     |     /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries
 44 |     |     function update(
 45 |     |         Info storage self,
 46 |     |         int128 liquidityDelta,
 47 |     |         uint256 feeGrowthInside0X128,
 48 |     |         uint256 feeGrowthInside1X128
 49 |     |     ) internal {
 50 |     |         Info memory _self = self;
 51 |     | 
 52 |     |         uint128 liquidityNext;
 53 |     |         if (liquidityDelta == 0) {
 54 |     |             require(_self.liquidity > 0, 'NP'); // disallow pokes for 0 liquidity positions
 55 |     |             liquidityNext = _self.liquidity;
 56 |     |         } else {
 57 |     |             liquidityNext = LiquidityMath.addDelta(_self.liquidity, liquidityDelta);
 58 |     |         }
 59 |     | 
 60 |     |         // calculate accumulated fees
 61 |     |         uint128 tokensOwed0 =
 62 |     |             uint128(
 63 |     |                 FullMath.mulDiv(
 64 |     |                     feeGrowthInside0X128 - _self.feeGrowthInside0LastX128,
 65 |     |                     _self.liquidity,
 66 |     |                     FixedPoint128.Q128
 67 |     |                 )
 68 |     |             );
 69 |     |         uint128 tokensOwed1 =
 70 |     |             uint128(
 71 |     |                 FullMath.mulDiv(
 72 |     |                     feeGrowthInside1X128 - _self.feeGrowthInside1LastX128,
 73 |     |                     _self.liquidity,
 74 |     |                     FixedPoint128.Q128
 75 |     |                 )
 76 |     |             );
 77 |     | 
 78 |     |         // update the position
 79 |     |         if (liquidityDelta != 0) self.liquidity = liquidityNext;
 80 |     |         self.feeGrowthInside0LastX128 = feeGrowthInside0X128;
 81 |     |         self.feeGrowthInside1LastX128 = feeGrowthInside1X128;
 82 |     |         if (tokensOwed0 > 0 || tokensOwed1 > 0) {
 83 |     |             // overflow is acceptable, have to withdraw before you hit type(uint128).max fees
 84 |     |             self.tokensOwed0 += tokensOwed0;
 85 |     |             self.tokensOwed1 += tokensOwed1;
 86 |     |         }
 87 |     |     }
 88 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/SafeCast.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Safe casting methods
  5 |     | /// @notice Contains methods for safely casting between types
  6 |     | library SafeCast {
  7 |     |     /// @notice Cast a uint256 to a uint160, revert on overflow
  8 |     |     /// @param y The uint256 to be downcasted
  9 |     |     /// @return z The downcasted integer, now type uint160
 10 |     |     function toUint160(uint256 y) internal pure returns (uint160 z) {
 11 |     |         require((z = uint160(y)) == y);
 12 |     |     }
 13 |     | 
 14 |     |     /// @notice Cast a int256 to a int128, revert on overflow or underflow
 15 |     |     /// @param y The int256 to be downcasted
 16 |     |     /// @return z The downcasted integer, now type int128
 17 |     |     function toInt128(int256 y) internal pure returns (int128 z) {
 18 |     |         require((z = int128(y)) == y);
 19 |     |     }
 20 |     | 
 21 |     |     /// @notice Cast a uint256 to a int256, revert on overflow
 22 |     |     /// @param y The uint256 to be casted
 23 |     |     /// @return z The casted integer, now type int256
 24 |     |     function toInt256(uint256 y) internal pure returns (int256 z) {
 25 |     |         require(y < 2**255);
 26 |     |         z = int256(y);
 27 |     |     }
 28 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/SqrtPriceMath.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity >=0.8.0;
   3 |     | 
   4 |     | import './LowGasSafeMath.sol';
   5 |     | import './SafeCast.sol';
   6 |     | 
   7 |     | import './FullMath.sol';
   8 |     | import './UnsafeMath.sol';
   9 |     | import './FixedPoint96.sol';
  10 |     | 
  11 |     | /// @title Functions based on Q64.96 sqrt price and liquidity
  12 |     | /// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas
  13 |     | library SqrtPriceMath {
  14 |     |     using LowGasSafeMath for uint256;
  15 |     |     using SafeCast for uint256;
  16 |     | 
  17 |     |     /// @notice Gets the next sqrt price given a delta of token0
  18 |     |     /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least
  19 |     |     /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the
  20 |     |     /// price less in order to not send too much output.
  21 |     |     /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),
  22 |     |     /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).
  23 |     |     /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta
  24 |     |     /// @param liquidity The amount of usable liquidity
  25 |     |     /// @param amount How much of token0 to add or remove from virtual reserves
  26 |     |     /// @param add Whether to add or remove the amount of token0
  27 |     |     /// @return The price after adding or removing amount, depending on add
  28 |     |     function getNextSqrtPriceFromAmount0RoundingUp(
  29 |     |         uint160 sqrtPX96,
  30 |     |         uint128 liquidity,
  31 |     |         uint256 amount,
  32 |     |         bool add
  33 |     |     ) internal pure returns (uint160) {
  34 |     |         // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price
  35 |     |         if (amount == 0) return sqrtPX96;
  36 |     |         uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;
  37 |     | 
  38 |     |         if (add) {
  39 |     |             uint256 product;
  40 |     |             if ((product = amount * sqrtPX96) / amount == sqrtPX96) {
  41 |     |                 uint256 denominator = numerator1 + product;
  42 |     |                 if (denominator >= numerator1)
  43 |     |                     // always fits in 160 bits
  44 |     |                     return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));
  45 |     |             }
  46 |     | 
  47 |     |             return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));
  48 |     |         } else {
  49 |     |             uint256 product;
  50 |     |             // if the product overflows, we know the denominator underflows
  51 |     |             // in addition, we must check that the denominator does not underflow
  52 |     |             require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);
  53 |     |             uint256 denominator = numerator1 - product;
  54 |     |             return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();
  55 |     |         }
  56 |     |     }
  57 |     | 
  58 |     |     /// @notice Gets the next sqrt price given a delta of token1
  59 |     |     /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least
  60 |     |     /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the
  61 |     |     /// price less in order to not send too much output.
  62 |     |     /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity
  63 |     |     /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta
  64 |     |     /// @param liquidity The amount of usable liquidity
  65 |     |     /// @param amount How much of token1 to add, or remove, from virtual reserves
  66 |     |     /// @param add Whether to add, or remove, the amount of token1
  67 |     |     /// @return The price after adding or removing `amount`
  68 |     |     function getNextSqrtPriceFromAmount1RoundingDown(
  69 |     |         uint160 sqrtPX96,
  70 |     |         uint128 liquidity,
  71 |     |         uint256 amount,
  72 |     |         bool add
  73 |     |     ) internal pure returns (uint160) {
  74 |     |         // if we're adding (subtracting), rounding down requires rounding the quotient down (up)
  75 |     |         // in both cases, avoid a mulDiv for most inputs
  76 |     |         if (add) {
  77 |     |             uint256 quotient =
  78 |     |                 (
  79 |     |                     amount <= type(uint160).max
  80 |     |                         ? (amount << FixedPoint96.RESOLUTION) / liquidity
  81 |     |                         : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)
  82 |     |                 );
  83 |     | 
  84 |     |             return uint256(sqrtPX96).add(quotient).toUint160();
  85 |     |         } else {
  86 |     |             uint256 quotient =
  87 |     |                 (
  88 |     |                     amount <= type(uint160).max
  89 |     |                         ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)
  90 |     |                         : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)
  91 |     |                 );
  92 |     | 
  93 |     |             require(sqrtPX96 > quotient);
  94 |     |             // always fits 160 bits
  95 |     |             return uint160(sqrtPX96 - quotient);
  96 |     |         }
  97 |     |     }
  98 |     | 
  99 |     |     /// @notice Gets the next sqrt price given an input amount of token0 or token1
 100 |     |     /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds
 101 |     |     /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount
 102 |     |     /// @param liquidity The amount of usable liquidity
 103 |     |     /// @param amountIn How much of token0, or token1, is being swapped in
 104 |     |     /// @param zeroForOne Whether the amount in is token0 or token1
 105 |     |     /// @return sqrtQX96 The price after adding the input amount to token0 or token1
 106 |     |     function getNextSqrtPriceFromInput(
 107 |     |         uint160 sqrtPX96,
 108 |     |         uint128 liquidity,
 109 |     |         uint256 amountIn,
 110 |     |         bool zeroForOne
 111 |     |     ) internal pure returns (uint160 sqrtQX96) {
 112 |     |         require(sqrtPX96 > 0);
 113 |     |         require(liquidity > 0);
 114 |     | 
 115 |     |         // round to make sure that we don't pass the target price
 116 |     |         return
 117 |     |             zeroForOne
 118 |     |                 ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)
 119 |     |                 : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);
 120 |     |     }
 121 |     | 
 122 |     |     /// @notice Gets the next sqrt price given an output amount of token0 or token1
 123 |     |     /// @dev Throws if price or liquidity are 0 or the next price is out of bounds
 124 |     |     /// @param sqrtPX96 The starting price before accounting for the output amount
 125 |     |     /// @param liquidity The amount of usable liquidity
 126 |     |     /// @param amountOut How much of token0, or token1, is being swapped out
 127 |     |     /// @param zeroForOne Whether the amount out is token0 or token1
 128 |     |     /// @return sqrtQX96 The price after removing the output amount of token0 or token1
 129 |     |     function getNextSqrtPriceFromOutput(
 130 |     |         uint160 sqrtPX96,
 131 |     |         uint128 liquidity,
 132 |     |         uint256 amountOut,
 133 |     |         bool zeroForOne
 134 |     |     ) internal pure returns (uint160 sqrtQX96) {
 135 |     |         require(sqrtPX96 > 0);
 136 |     |         require(liquidity > 0);
 137 |     | 
 138 |     |         // round to make sure that we pass the target price
 139 |     |         return
 140 |     |             zeroForOne
 141 |     |                 ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)
 142 |     |                 : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);
 143 |     |     }
 144 |     |     
 145 |     |     event Message(string a);
 146 |     |     event MessageUint160(string a, uint160 b);
 147 |     |     event MessageUint256(string a, uint256 b);
 148 |     | 
 149 |     | 
 150 |     |     /// @notice Gets the amount0 delta between two prices
 151 |     |     /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),
 152 |     |     /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))
 153 |     |     /// @param sqrtRatioAX96 A sqrt price
 154 |     |     /// @param sqrtRatioBX96 Another sqrt price
 155 |     |     /// @param liquidity The amount of usable liquidity
 156 |     |     /// @param roundUp Whether to round the amount up or down
 157 |     |     /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices
 158 |     |     function getAmount0Delta(
 159 |     |         uint160 sqrtRatioAX96,
 160 |     |         uint160 sqrtRatioBX96,
 161 |     |         uint128 liquidity,
 162 |     |         bool roundUp
 163 |     |     ) internal returns (uint256 amount0) {
 164 |     |         if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
 165 |     | 
 166 |     |         emit Message("HERE9");
 167 |     |         uint256 numerator1;
 168 |     |         unchecked {
 169 |     |             numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;
 170 |     |         }
 171 |     |         emit MessageUint256("numerator1", numerator1);
 172 |     |         uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;
 173 |     |         emit MessageUint256("numerator2", numerator2);
 174 |     |         require(sqrtRatioAX96 > 0);
 175 |     | 
 176 |     |         return
 177 |     |             roundUp
 178 |     |                 ? UnsafeMath.divRoundingUp(
 179 |     |                     FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),
 180 |     |                     sqrtRatioAX96
 181 |     |                 )
 182 |     |                 : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;
 183 |     |     }
 184 |     | 
 185 |     |     /// @notice Gets the amount1 delta between two prices
 186 |     |     /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))
 187 |     |     /// @param sqrtRatioAX96 A sqrt price
 188 |     |     /// @param sqrtRatioBX96 Another sqrt price
 189 |     |     /// @param liquidity The amount of usable liquidity
 190 |     |     /// @param roundUp Whether to round the amount up, or down
 191 |     |     /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices
 192 |     |     function getAmount1Delta(
 193 |     |         uint160 sqrtRatioAX96,
 194 |     |         uint160 sqrtRatioBX96,
 195 |     |         uint128 liquidity,
 196 |     |         bool roundUp
 197 |     |     ) internal pure returns (uint256 amount1) {
 198 |     |         if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
 199 |     | 
 200 |     |         return
 201 |     |             roundUp
 202 |     |                 ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)
 203 |     |                 : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);
 204 |     |     }
 205 |     | 
 206 |     |     /// @notice Helper that gets signed token0 delta
 207 |     |     /// @param sqrtRatioAX96 A sqrt price
 208 |     |     /// @param sqrtRatioBX96 Another sqrt price
 209 |     |     /// @param liquidity The change in liquidity for which to compute the amount0 delta
 210 |     |     /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices
 211 |     |     function getAmount0Delta(
 212 |     |         uint160 sqrtRatioAX96,
 213 |     |         uint160 sqrtRatioBX96,
 214 |     |         int128 liquidity
 215 |     |     ) internal  returns (int256 amount0) {
 216 |     |         return
 217 |     |             liquidity < 0
 218 |     |                 ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()
 219 |     |                 : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();
 220 |     |     }
 221 |     | 
 222 |     |     /// @notice Helper that gets signed token1 delta
 223 |     |     /// @param sqrtRatioAX96 A sqrt price
 224 |     |     /// @param sqrtRatioBX96 Another sqrt price
 225 |     |     /// @param liquidity The change in liquidity for which to compute the amount1 delta
 226 |     |     /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices
 227 |     |     function getAmount1Delta(
 228 |     |         uint160 sqrtRatioAX96,
 229 |     |         uint160 sqrtRatioBX96,
 230 |     |         int128 liquidity
 231 |     |     ) internal pure returns (int256 amount1) {
 232 |     |         return
 233 |     |             liquidity < 0
 234 |     |                 ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()
 235 |     |                 : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();
 236 |     |     }
 237 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/SwapMath.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | import './FullMath.sol';
  5 |     | import './SqrtPriceMath.sol';
  6 |     | 
  7 |     | /// @title Computes the result of a swap within ticks
  8 |     | /// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.
  9 |     | library SwapMath {
 10 |     |     /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap
 11 |     |     /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive
 12 |     |     /// @param sqrtRatioCurrentX96 The current sqrt price of the pool
 13 |     |     /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred
 14 |     |     /// @param liquidity The usable liquidity
 15 |     |     /// @param amountRemaining How much input or output amount is remaining to be swapped in/out
 16 |     |     /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip
 17 |     |     /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target
 18 |     |     /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap
 19 |     |     /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap
 20 |     |     /// @return feeAmount The amount of input that will be taken as a fee
 21 |     |     function computeSwapStep(
 22 |     |         uint160 sqrtRatioCurrentX96,
 23 |     |         uint160 sqrtRatioTargetX96,
 24 |     |         uint128 liquidity,
 25 |     |         int256 amountRemaining,
 26 |     |         uint24 feePips
 27 |     |     )
 28 |     |         internal
 29 |     |         returns (
 30 |     |             uint160 sqrtRatioNextX96,
 31 |     |             uint256 amountIn,
 32 |     |             uint256 amountOut,
 33 |     |             uint256 feeAmount
 34 |     |         )
 35 |     |     {
 36 |     |         bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;
 37 |     |         bool exactIn = amountRemaining >= 0;
 38 |     | 
 39 |     |         if (exactIn) {
 40 |     |             uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);
 41 |     |             amountIn = zeroForOne
 42 |     |                 ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)
 43 |     |                 : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);
 44 |     |             if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;
 45 |     |             else
 46 |     |                 sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(
 47 |     |                     sqrtRatioCurrentX96,
 48 |     |                     liquidity,
 49 |     |                     amountRemainingLessFee,
 50 |     |                     zeroForOne
 51 |     |                 );
 52 |     |         } else {
 53 |     |             amountOut = zeroForOne
 54 |     |                 ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)
 55 |     |                 : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);
 56 |     |             if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;
 57 |     |             else
 58 |     |                 sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(
 59 |     |                     sqrtRatioCurrentX96,
 60 |     |                     liquidity,
 61 |     |                     uint256(-amountRemaining),
 62 |     |                     zeroForOne
 63 |     |                 );
 64 |     |         }
 65 |     | 
 66 |     |         bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;
 67 |     | 
 68 |     |         // get the input/output amounts
 69 |     |         if (zeroForOne) {
 70 |     |             amountIn = max && exactIn
 71 |     |                 ? amountIn
 72 |     |                 : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);
 73 |     |             amountOut = max && !exactIn
 74 |     |                 ? amountOut
 75 |     |                 : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);
 76 |     |         } else {
 77 |     |             amountIn = max && exactIn
 78 |     |                 ? amountIn
 79 |     |                 : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);
 80 |     |             amountOut = max && !exactIn
 81 |     |                 ? amountOut
 82 |     |                 : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);
 83 |     |         }
 84 |     | 
 85 |     |         // cap the output amount to not exceed the remaining output amount
 86 |     |         if (!exactIn && amountOut > uint256(-amountRemaining)) {
 87 |     |             amountOut = uint256(-amountRemaining);
 88 |     |         }
 89 |     | 
 90 |     |         if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {
 91 |     |             // we didn't reach the target, so take the remainder of the maximum input as fee
 92 |     |             feeAmount = uint256(amountRemaining) - amountIn;
 93 |     |         } else {
 94 |     |             feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);
 95 |     |         }
 96 |     |     }
 97 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/Tick.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity >=0.8.0;
   3 |     | 
   4 |     | import './LowGasSafeMath.sol';
   5 |     | import './SafeCast.sol';
   6 |     | 
   7 |     | import './TickMath.sol';
   8 |     | import './LiquidityMath.sol';
   9 |     | 
  10 |     | /// @title Tick
  11 |     | /// @notice Contains functions for managing tick processes and relevant calculations
  12 |     | library Tick {
  13 |     |     using LowGasSafeMath for int256;
  14 |     |     using SafeCast for int256;
  15 |     | 
  16 |     |     // info stored for each initialized individual tick
  17 |     |     struct Info {
  18 |     |         // the total position liquidity that references this tick
  19 |     |         uint128 liquidityGross;
  20 |     |         // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),
  21 |     |         int128 liquidityNet;
  22 |     |         // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)
  23 |     |         // only has relative meaning, not absolute — the value depends on when the tick is initialized
  24 |     |         uint256 feeGrowthOutside0X128;
  25 |     |         uint256 feeGrowthOutside1X128;
  26 |     |         // the cumulative tick value on the other side of the tick
  27 |     |         int56 tickCumulativeOutside;
  28 |     |         // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)
  29 |     |         // only has relative meaning, not absolute — the value depends on when the tick is initialized
  30 |     |         uint160 secondsPerLiquidityOutsideX128;
  31 |     |         // the seconds spent on the other side of the tick (relative to the current tick)
  32 |     |         // only has relative meaning, not absolute — the value depends on when the tick is initialized
  33 |     |         uint32 secondsOutside;
  34 |     |         // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0
  35 |     |         // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks
  36 |     |         bool initialized;
  37 |     |     }
  38 |     | 
  39 |     |     /// @notice Derives max liquidity per tick from given tick spacing
  40 |     |     /// @dev Executed within the pool constructor
  41 |     |     /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`
  42 |     |     ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...
  43 |     |     /// @return The max liquidity per tick
  44 |     |     function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {
  45 |     |         int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;
  46 |     |         int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;
  47 |     |         uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;
  48 |     |         return type(uint128).max / numTicks;
  49 |     |     }
  50 |     | 
  51 |     |     /// @notice Retrieves fee growth data
  52 |     |     /// @param self The mapping containing all tick information for initialized ticks
  53 |     |     /// @param tickLower The lower tick boundary of the position
  54 |     |     /// @param tickUpper The upper tick boundary of the position
  55 |     |     /// @param tickCurrent The current tick
  56 |     |     /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0
  57 |     |     /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1
  58 |     |     /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries
  59 |     |     /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries
  60 |     |     function getFeeGrowthInside(
  61 |     |         mapping(int24 => Tick.Info) storage self,
  62 |     |         int24 tickLower,
  63 |     |         int24 tickUpper,
  64 |     |         int24 tickCurrent,
  65 |     |         uint256 feeGrowthGlobal0X128,
  66 |     |         uint256 feeGrowthGlobal1X128
  67 |     |     ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {
  68 |     |         Info storage lower = self[tickLower];
  69 |     |         Info storage upper = self[tickUpper];
  70 |     | 
  71 |     |         // calculate fee growth below
  72 |     |         uint256 feeGrowthBelow0X128;
  73 |     |         uint256 feeGrowthBelow1X128;
  74 |     |         if (tickCurrent >= tickLower) {
  75 |     |             feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;
  76 |     |             feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;
  77 |     |         } else {
  78 |     |             feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;
  79 |     |             feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;
  80 |     |         }
  81 |     | 
  82 |     |         // calculate fee growth above
  83 |     |         uint256 feeGrowthAbove0X128;
  84 |     |         uint256 feeGrowthAbove1X128;
  85 |     |         if (tickCurrent < tickUpper) {
  86 |     |             feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;
  87 |     |             feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;
  88 |     |         } else {
  89 |     |             feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;
  90 |     |             feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;
  91 |     |         }
  92 |     | 
  93 |     |         feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;
  94 |     |         feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;
  95 |     |     }
  96 |     | 
  97 |     |     /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa
  98 |     |     /// @param self The mapping containing all tick information for initialized ticks
  99 |     |     /// @param tick The tick that will be updated
 100 |     |     /// @param tickCurrent The current tick
 101 |     |     /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)
 102 |     |     /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0
 103 |     |     /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1
 104 |     |     /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool
 105 |     |     /// @param tickCumulative The tick * time elapsed since the pool was first initialized
 106 |     |     /// @param time The current block timestamp cast to a uint32
 107 |     |     /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick
 108 |     |     /// @param maxLiquidity The maximum liquidity allocation for a single tick
 109 |     |     /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa
 110 |     |     function update(
 111 |     |         mapping(int24 => Tick.Info) storage self,
 112 |     |         int24 tick,
 113 |     |         int24 tickCurrent,
 114 |     |         int128 liquidityDelta,
 115 |     |         uint256 feeGrowthGlobal0X128,
 116 |     |         uint256 feeGrowthGlobal1X128,
 117 |     |         uint160 secondsPerLiquidityCumulativeX128,
 118 |     |         int56 tickCumulative,
 119 |     |         uint32 time,
 120 |     |         bool upper,
 121 |     |         uint128 maxLiquidity
 122 |     |     ) internal returns (bool flipped) {
 123 |     |         Tick.Info storage info = self[tick];
 124 |     | 
 125 |     |         uint128 liquidityGrossBefore = info.liquidityGross;
 126 |     |         uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);
 127 |     | 
 128 |     |         require(liquidityGrossAfter <= maxLiquidity, 'LO');
 129 |     | 
 130 |     |         flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);
 131 |     | 
 132 |     |         if (liquidityGrossBefore == 0) {
 133 |     |             // by convention, we assume that all growth before a tick was initialized happened _below_ the tick
 134 |     |             if (tick <= tickCurrent) {
 135 |     |                 info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;
 136 |     |                 info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;
 137 |     |                 info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;
 138 |     |                 info.tickCumulativeOutside = tickCumulative;
 139 |     |                 info.secondsOutside = time;
 140 |     |             }
 141 |     |             info.initialized = true;
 142 |     |         }
 143 |     | 
 144 |     |         info.liquidityGross = liquidityGrossAfter;
 145 |     | 
 146 |     |         // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)
 147 |     |         info.liquidityNet = upper
 148 |     |             ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()
 149 |     |             : int256(info.liquidityNet).add(liquidityDelta).toInt128();
 150 |     |     }
 151 |     | 
 152 |     |     /// @notice Clears tick data
 153 |     |     /// @param self The mapping containing all initialized tick information for initialized ticks
 154 |     |     /// @param tick The tick that will be cleared
 155 |     |     function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {
 156 |     |         delete self[tick];
 157 |     |     }
 158 |     | 
 159 |     |     /// @notice Transitions to next tick as needed by price movement
 160 |     |     /// @param self The mapping containing all tick information for initialized ticks
 161 |     |     /// @param tick The destination tick of the transition
 162 |     |     /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0
 163 |     |     /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1
 164 |     |     /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity
 165 |     |     /// @param tickCumulative The tick * time elapsed since the pool was first initialized
 166 |     |     /// @param time The current block.timestamp
 167 |     |     /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)
 168 |     |     function cross(
 169 |     |         mapping(int24 => Tick.Info) storage self,
 170 |     |         int24 tick,
 171 |     |         uint256 feeGrowthGlobal0X128,
 172 |     |         uint256 feeGrowthGlobal1X128,
 173 |     |         uint160 secondsPerLiquidityCumulativeX128,
 174 |     |         int56 tickCumulative,
 175 |     |         uint32 time
 176 |     |     ) internal returns (int128 liquidityNet) {
 177 |     |         Tick.Info storage info = self[tick];
 178 |     |         info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;
 179 |     |         info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;
 180 |     |         info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128 - info.secondsPerLiquidityOutsideX128;
 181 |     |         info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;
 182 |     |         info.secondsOutside = time - info.secondsOutside;
 183 |     |         liquidityNet = info.liquidityNet;
 184 |     |     }
 185 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/TickBitmap.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | import './BitMath.sol';
  5 |     | 
  6 |     | /// @title Packed tick initialized state library
  7 |     | /// @notice Stores a packed mapping of tick index to its initialized state
  8 |     | /// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.
  9 |     | library TickBitmap {
 10 |     |     /// @notice Computes the position in the mapping where the initialized bit for a tick lives
 11 |     |     /// @param tick The tick for which to compute the position
 12 |     |     /// @return wordPos The key in the mapping containing the word in which the bit is stored
 13 |     |     /// @return bitPos The bit position in the word where the flag is stored
 14 |     |     function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {
 15 |     |         wordPos = int16(tick >> 8);
 16 |     |         bitPos = uint8(uint24(tick % 256));
 17 |     |     }
 18 |     | 
 19 |     |     /// @notice Flips the initialized state for a given tick from false to true, or vice versa
 20 |     |     /// @param self The mapping in which to flip the tick
 21 |     |     /// @param tick The tick to flip
 22 |     |     /// @param tickSpacing The spacing between usable ticks
 23 |     |     function flipTick(
 24 |     |         mapping(int16 => uint256) storage self,
 25 |     |         int24 tick,
 26 |     |         int24 tickSpacing
 27 |     |     ) internal {
 28 |     |         require(tick % tickSpacing == 0); // ensure that the tick is spaced
 29 |     |         (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);
 30 |     |         uint256 mask = 1 << bitPos;
 31 |     |         self[wordPos] ^= mask;
 32 |     |     }
 33 |     | 
 34 |     |     /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either
 35 |     |     /// to the left (less than or equal to) or right (greater than) of the given tick
 36 |     |     /// @param self The mapping in which to compute the next initialized tick
 37 |     |     /// @param tick The starting tick
 38 |     |     /// @param tickSpacing The spacing between usable ticks
 39 |     |     /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)
 40 |     |     /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick
 41 |     |     /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks
 42 |     |     function nextInitializedTickWithinOneWord(
 43 |     |         mapping(int16 => uint256) storage self,
 44 |     |         int24 tick,
 45 |     |         int24 tickSpacing,
 46 |     |         bool lte
 47 |     |     ) internal view returns (int24 next, bool initialized) {
 48 |     |         int24 compressed = tick / tickSpacing;
 49 |     |         if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity
 50 |     | 
 51 |     |         if (lte) {
 52 |     |             (int16 wordPos, uint8 bitPos) = position(compressed);
 53 |     |             // all the 1s at or to the right of the current bitPos
 54 |     |             uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);
 55 |     |             uint256 masked = self[wordPos] & mask;
 56 |     | 
 57 |     |             // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word
 58 |     |             initialized = masked != 0;
 59 |     |             // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick
 60 |     |             next = initialized
 61 |     |                 ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing
 62 |     |                 : (compressed - int24(uint24(bitPos))) * tickSpacing;
 63 |     |         } else {
 64 |     |             // start from the word of the next tick, since the current tick state doesn't matter
 65 |     |             (int16 wordPos, uint8 bitPos) = position(compressed + 1);
 66 |     |             // all the 1s at or to the left of the bitPos
 67 |     |             uint256 mask = ~((1 << bitPos) - 1);
 68 |     |             uint256 masked = self[wordPos] & mask;
 69 |     | 
 70 |     |             // if there are no initialized ticks to the left of the current tick, return leftmost in the word
 71 |     |             initialized = masked != 0;
 72 |     |             // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick
 73 |     |             next = initialized
 74 |     |                 ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing
 75 |     |                 : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;
 76 |     |         }
 77 |     |     }
 78 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/TickMath.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.8.0;
   3 |     | 
   4 |     | /// @title Math library for computing sqrt prices from ticks and vice versa
   5 |     | /// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports
   6 |     | /// prices between 2**-128 and 2**128
   7 |     | library TickMath {
   8 |     |     /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128
   9 |     |     int24 internal constant MIN_TICK = -887272;
  10 |     |     /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128
  11 | *   |     int24 internal constant MAX_TICK = -MIN_TICK;
  12 |     | 
  13 |     |     /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)
  14 | *   |     uint160 internal constant MIN_SQRT_RATIO = 4295128739;
  15 |     |     /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)
  16 |     |     uint160 internal constant MAX_SQRT_RATIO =
  17 | *   |         1461446703485210103287273052203988822378723970342;
  18 |     | 
  19 |     |     /// @notice Calculates sqrt(1.0001^tick) * 2^96
  20 |     |     /// @dev Throws if |tick| > max tick
  21 |     |     /// @param tick The input tick for the above formula
  22 |     |     /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)
  23 |     |     /// at the given tick
  24 | *   |     function getSqrtRatioAtTick(
  25 |     |         int24 tick
  26 | *   |     ) internal pure returns (uint160 sqrtPriceX96) {
  27 | *   |         uint256 absTick = tick < 0
  28 | *   |             ? uint256(-int256(tick))
  29 | *   |             : uint256(int256(tick));
  30 | *   |         require(absTick <= uint256(uint24(MAX_TICK)), "T");
  31 |     | 
  32 | *   |         uint256 ratio = absTick & 0x1 != 0
  33 |     |             ? 0xfffcb933bd6fad37aa2d162d1a594001
  34 |     |             : 0x100000000000000000000000000000000;
  35 | *   |         if (absTick & 0x2 != 0)
  36 |     |             ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;
  37 | *   |         if (absTick & 0x4 != 0)
  38 |     |             ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;
  39 | *   |         if (absTick & 0x8 != 0)
  40 | *   |             ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;
  41 | *   |         if (absTick & 0x10 != 0)
  42 | *   |             ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;
  43 | *   |         if (absTick & 0x20 != 0)
  44 | *   |             ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;
  45 | *   |         if (absTick & 0x40 != 0)
  46 | *   |             ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;
  47 | *   |         if (absTick & 0x80 != 0)
  48 | *   |             ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;
  49 | *   |         if (absTick & 0x100 != 0)
  50 | *   |             ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;
  51 | *   |         if (absTick & 0x200 != 0)
  52 | *   |             ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;
  53 | *   |         if (absTick & 0x400 != 0)
  54 | *   |             ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;
  55 | *   |         if (absTick & 0x800 != 0)
  56 | *   |             ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;
  57 | *   |         if (absTick & 0x1000 != 0)
  58 | *   |             ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;
  59 | *   |         if (absTick & 0x2000 != 0)
  60 | *   |             ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;
  61 | *   |         if (absTick & 0x4000 != 0)
  62 | *   |             ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;
  63 | *   |         if (absTick & 0x8000 != 0)
  64 | *   |             ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;
  65 | *   |         if (absTick & 0x10000 != 0)
  66 | *   |             ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;
  67 | *   |         if (absTick & 0x20000 != 0)
  68 | *   |             ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;
  69 | *   |         if (absTick & 0x40000 != 0)
  70 | *   |             ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;
  71 | *   |         if (absTick & 0x80000 != 0)
  72 | *   |             ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;
  73 |     | 
  74 | *   |         if (tick > 0) ratio = type(uint256).max / ratio;
  75 |     | 
  76 |     |         // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.
  77 |     |         // we then downcast because we know the result always fits within 160 bits due to our tick input constraint
  78 |     |         // we round up in the division so getTickAtSqrtRatio of the output price is always consistent
  79 | *   |         sqrtPriceX96 = uint160(
  80 | *   |             (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)
  81 |     |         );
  82 |     |     }
  83 |     | 
  84 |     |     /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio
  85 |     |     /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may
  86 |     |     /// ever return.
  87 |     |     /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96
  88 |     |     /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio
  89 | *   |     function getTickAtSqrtRatio(
  90 |     |         uint160 sqrtPriceX96
  91 | *   |     ) internal pure returns (int24 tick) {
  92 |     |         // second inequality must be < because the price can never reach the price at the max tick
  93 | *   |         require(
  94 | *   |             sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,
  95 |     |             "R"
  96 |     |         );
  97 | *   |         uint256 ratio = uint256(sqrtPriceX96) << 32;
  98 |     | 
  99 |     |         uint256 r = ratio;
 100 |     |         uint256 msb = 0;
 101 |     | 
 102 |     |         assembly {
 103 | *   |             let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))
 104 |     |             msb := or(msb, f)
 105 | *   |             r := shr(f, r)
 106 |     |         }
 107 |     |         assembly {
 108 | *   |             let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))
 109 | *   |             msb := or(msb, f)
 110 | *   |             r := shr(f, r)
 111 |     |         }
 112 |     |         assembly {
 113 | *   |             let f := shl(5, gt(r, 0xFFFFFFFF))
 114 | *   |             msb := or(msb, f)
 115 | *   |             r := shr(f, r)
 116 |     |         }
 117 |     |         assembly {
 118 | *   |             let f := shl(4, gt(r, 0xFFFF))
 119 | *   |             msb := or(msb, f)
 120 | *   |             r := shr(f, r)
 121 |     |         }
 122 |     |         assembly {
 123 | *   |             let f := shl(3, gt(r, 0xFF))
 124 | *   |             msb := or(msb, f)
 125 | *   |             r := shr(f, r)
 126 |     |         }
 127 |     |         assembly {
 128 | *   |             let f := shl(2, gt(r, 0xF))
 129 | *   |             msb := or(msb, f)
 130 | *   |             r := shr(f, r)
 131 |     |         }
 132 |     |         assembly {
 133 | *   |             let f := shl(1, gt(r, 0x3))
 134 | *   |             msb := or(msb, f)
 135 | *   |             r := shr(f, r)
 136 |     |         }
 137 |     |         assembly {
 138 | *   |             let f := gt(r, 0x1)
 139 | *   |             msb := or(msb, f)
 140 |     |         }
 141 |     | 
 142 | *   |         if (msb >= 128) r = ratio >> (msb - 127);
 143 |     |         else r = ratio << (127 - msb);
 144 |     | 
 145 | *   |         int256 log_2 = (int256(msb) - 128) << 64;
 146 |     | 
 147 |     |         assembly {
 148 | *   |             r := shr(127, mul(r, r))
 149 | *   |             let f := shr(128, r)
 150 | *   |             log_2 := or(log_2, shl(63, f))
 151 | *   |             r := shr(f, r)
 152 |     |         }
 153 |     |         assembly {
 154 | *   |             r := shr(127, mul(r, r))
 155 | *   |             let f := shr(128, r)
 156 | *   |             log_2 := or(log_2, shl(62, f))
 157 | *   |             r := shr(f, r)
 158 |     |         }
 159 |     |         assembly {
 160 | *   |             r := shr(127, mul(r, r))
 161 | *   |             let f := shr(128, r)
 162 | *   |             log_2 := or(log_2, shl(61, f))
 163 | *   |             r := shr(f, r)
 164 |     |         }
 165 |     |         assembly {
 166 | *   |             r := shr(127, mul(r, r))
 167 | *   |             let f := shr(128, r)
 168 | *   |             log_2 := or(log_2, shl(60, f))
 169 | *   |             r := shr(f, r)
 170 |     |         }
 171 |     |         assembly {
 172 | *   |             r := shr(127, mul(r, r))
 173 | *   |             let f := shr(128, r)
 174 | *   |             log_2 := or(log_2, shl(59, f))
 175 | *   |             r := shr(f, r)
 176 |     |         }
 177 |     |         assembly {
 178 | *   |             r := shr(127, mul(r, r))
 179 | *   |             let f := shr(128, r)
 180 | *   |             log_2 := or(log_2, shl(58, f))
 181 | *   |             r := shr(f, r)
 182 |     |         }
 183 |     |         assembly {
 184 | *   |             r := shr(127, mul(r, r))
 185 | *   |             let f := shr(128, r)
 186 | *   |             log_2 := or(log_2, shl(57, f))
 187 | *   |             r := shr(f, r)
 188 |     |         }
 189 |     |         assembly {
 190 | *   |             r := shr(127, mul(r, r))
 191 | *   |             let f := shr(128, r)
 192 | *   |             log_2 := or(log_2, shl(56, f))
 193 | *   |             r := shr(f, r)
 194 |     |         }
 195 |     |         assembly {
 196 | *   |             r := shr(127, mul(r, r))
 197 | *   |             let f := shr(128, r)
 198 | *   |             log_2 := or(log_2, shl(55, f))
 199 | *   |             r := shr(f, r)
 200 |     |         }
 201 |     |         assembly {
 202 | *   |             r := shr(127, mul(r, r))
 203 | *   |             let f := shr(128, r)
 204 | *   |             log_2 := or(log_2, shl(54, f))
 205 | *   |             r := shr(f, r)
 206 |     |         }
 207 |     |         assembly {
 208 | *   |             r := shr(127, mul(r, r))
 209 | *   |             let f := shr(128, r)
 210 | *   |             log_2 := or(log_2, shl(53, f))
 211 | *   |             r := shr(f, r)
 212 |     |         }
 213 |     |         assembly {
 214 | *   |             r := shr(127, mul(r, r))
 215 | *   |             let f := shr(128, r)
 216 | *   |             log_2 := or(log_2, shl(52, f))
 217 | *   |             r := shr(f, r)
 218 |     |         }
 219 |     |         assembly {
 220 | *   |             r := shr(127, mul(r, r))
 221 | *   |             let f := shr(128, r)
 222 | *   |             log_2 := or(log_2, shl(51, f))
 223 | *   |             r := shr(f, r)
 224 |     |         }
 225 |     |         assembly {
 226 | *   |             r := shr(127, mul(r, r))
 227 | *   |             let f := shr(128, r)
 228 | *   |             log_2 := or(log_2, shl(50, f))
 229 |     |         }
 230 |     | 
 231 | *   |         int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number
 232 |     | 
 233 | *   |         int24 tickLow = int24(
 234 | *   |             (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128
 235 |     |         );
 236 | *   |         int24 tickHi = int24(
 237 | *   |             (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128
 238 |     |         );
 239 |     | 
 240 | *   |         tick = tickLow == tickHi
 241 |     |             ? tickLow
 242 | *   |             : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96
 243 | *   |                 ? tickHi
 244 |     |                 : tickLow;
 245 |     |     }
 246 |     | }
 247 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/TransferHelper.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "@openzeppelin/contracts-v4/token/ERC20/IERC20.sol";
  5 |     | 
  6 |     | library TransferHelper {
  7 |     |     /// @notice Transfers tokens from the targeted address to the given destination
  8 |     |     /// @notice Errors with 'STF' if transfer fails
  9 |     |     /// @param token The contract address of the token to be transferred
 10 |     |     /// @param from The originating address from which the tokens will be transferred
 11 |     |     /// @param to The destination address of the transfer
 12 |     |     /// @param value The amount to be transferred
 13 |     |     function safeTransferFrom(
 14 |     |         address token,
 15 |     |         address from,
 16 |     |         address to,
 17 |     |         uint256 value
 18 |     |     ) internal {
 19 |     |         (bool success, bytes memory data) = token.call(
 20 |     |             abi.encodeWithSelector(
 21 |     |                 IERC20.transferFrom.selector,
 22 |     |                 from,
 23 |     |                 to,
 24 |     |                 value
 25 |     |             )
 26 |     |         );
 27 |     |         require(
 28 |     |             success && (data.length == 0 || abi.decode(data, (bool))),
 29 |     |             "STF"
 30 |     |         );
 31 |     |     }
 32 |     | 
 33 |     |     /// @notice Transfers tokens from msg.sender to a recipient
 34 |     |     /// @dev Errors with ST if transfer fails
 35 |     |     /// @param token The contract address of the token which will be transferred
 36 |     |     /// @param to The recipient of the transfer
 37 |     |     /// @param value The value of the transfer
 38 |     |     function safeTransfer(address token, address to, uint256 value) internal {
 39 |     |         (bool success, bytes memory data) = token.call(
 40 |     |             abi.encodeWithSelector(IERC20.transfer.selector, to, value)
 41 |     |         );
 42 |     |         require(
 43 |     |             success && (data.length == 0 || abi.decode(data, (bool))),
 44 |     |             "ST"
 45 |     |         );
 46 |     |     }
 47 |     | 
 48 |     |     /// @notice Approves the stipulated contract to spend the given allowance in the given token
 49 |     |     /// @dev Errors with 'SA' if transfer fails
 50 |     |     /// @param token The contract address of the token to be approved
 51 |     |     /// @param to The target of the approval
 52 |     |     /// @param value The amount of the given token the target will be allowed to spend
 53 |     |     function safeApprove(address token, address to, uint256 value) internal {
 54 |     |         (bool success, bytes memory data) = token.call(
 55 |     |             abi.encodeWithSelector(IERC20.approve.selector, to, value)
 56 |     |         );
 57 |     |         require(
 58 |     |             success && (data.length == 0 || abi.decode(data, (bool))),
 59 |     |             "SA"
 60 |     |         );
 61 |     |     }
 62 |     | 
 63 |     |     /// @notice Transfers ETH to the recipient address
 64 |     |     /// @dev Fails with `STE`
 65 |     |     /// @param to The destination of the transfer
 66 |     |     /// @param value The value to be transferred
 67 |     |     function safeTransferETH(address to, uint256 value) internal {
 68 |     |         (bool success, ) = to.call{value: value}(new bytes(0));
 69 |     |         require(success, "STE");
 70 |     |     }
 71 |     | }
 72 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-core/libraries/UnsafeMath.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Math functions that do not check inputs or outputs
  5 |     | /// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks
  6 |     | library UnsafeMath {
  7 |     |     /// @notice Returns ceil(x / y)
  8 |     |     /// @dev division by 0 has unspecified behavior, and must be checked externally
  9 |     |     /// @param x The dividend
 10 |     |     /// @param y The divisor
 11 |     |     /// @return z The quotient, ceil(x / y)
 12 |     |     function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {
 13 |     |         assembly {
 14 |     |             z := add(div(x, y), gt(mod(x, y), 0))
 15 |     |         }
 16 |     |     }
 17 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/NonfungiblePositionManager.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.8.0;
   3 |     | pragma abicoder v2;
   4 |     | 
   5 |     | import "v3-core/interfaces/IUniswapV3Pool.sol";
   6 |     | import "v3-core/libraries/FixedPoint128.sol";
   7 |     | import "v3-core/libraries/FullMath.sol";
   8 |     | 
   9 |     | import "./interfaces/INonfungiblePositionManager.sol";
  10 |     | import "./interfaces/INonfungibleTokenPositionDescriptor.sol";
  11 |     | import "./libraries/PositionKey.sol";
  12 |     | import "./libraries/PoolAddress.sol";
  13 |     | import "./base/LiquidityManagement.sol";
  14 |     | import "./base/PeripheryImmutableState.sol";
  15 |     | import "./base/Multicall.sol";
  16 |     | import "./base/ERC721Permit.sol";
  17 |     | import "./base/PeripheryValidation.sol";
  18 |     | import "./base/SelfPermit.sol";
  19 |     | import "./base/PoolInitializer.sol";
  20 |     | 
  21 |     | /// @title NFT positions
  22 |     | /// @notice Wraps Uniswap V3 positions in the ERC721 non-fungible token interface
  23 | *   | contract NonfungiblePositionManager is
  24 |     |     INonfungiblePositionManager,
  25 |     |     Multicall,
  26 |     |     ERC721Permit,
  27 |     |     PeripheryImmutableState,
  28 |     |     PoolInitializer,
  29 |     |     LiquidityManagement,
  30 |     |     PeripheryValidation,
  31 |     |     SelfPermit
  32 |     | {
  33 |     |     // details about the uniswap position
  34 |     |     struct Position {
  35 |     |         // the nonce for permits
  36 |     |         uint96 nonce;
  37 |     |         // the address that is approved for spending this token
  38 |     |         address operator;
  39 |     |         // the ID of the pool with which this token is connected
  40 |     |         uint80 poolId;
  41 |     |         // the tick range of the position
  42 |     |         int24 tickLower;
  43 |     |         int24 tickUpper;
  44 |     |         // the liquidity of the position
  45 |     |         uint128 liquidity;
  46 |     |         // the fee growth of the aggregate position as of the last action on the individual position
  47 |     |         uint256 feeGrowthInside0LastX128;
  48 |     |         uint256 feeGrowthInside1LastX128;
  49 |     |         // how many uncollected tokens are owed to the position, as of the last computation
  50 |     |         uint128 tokensOwed0;
  51 |     |         uint128 tokensOwed1;
  52 |     |     }
  53 |     | 
  54 |     |     /// @dev IDs of pools assigned by this contract
  55 |     |     mapping(address => uint80) private _poolIds;
  56 |     | 
  57 |     |     /// @dev Pool keys by pool ID, to save on SSTOREs for position data
  58 |     |     mapping(uint80 => PoolAddress.PoolKey) private _poolIdToPoolKey;
  59 |     | 
  60 |     |     /// @dev The token ID position data
  61 |     |     mapping(uint256 => Position) private _positions;
  62 |     | 
  63 |     |     /// @dev The ID of the next token that will be minted. Skips 0
  64 |     |     uint176 private _nextId = 1;
  65 |     |     /// @dev The ID of the next pool that is used for the first time. Skips 0
  66 |     |     uint80 private _nextPoolId = 1;
  67 |     | 
  68 |     |     /// @dev The address of the token descriptor contract, which handles generating token URIs for position tokens
  69 |     |     // address private immutable _tokenDescriptor;
  70 |     | 
  71 |     |     constructor(
  72 |     |         address _factory,
  73 |     |         address _WETH9
  74 |     |     )
  75 |     |         // address _tokenDescriptor_
  76 |     |         ERC721Permit("Uniswap V3 Positions NFT-V1", "UNI-V3-POS", "1")
  77 |     |         PeripheryImmutableState(_factory, _WETH9)
  78 |     |     {
  79 |     |         // _tokenDescriptor = _tokenDescriptor_;
  80 |     |     }
  81 |     | 
  82 |     |     /// @inheritdoc INonfungiblePositionManager
  83 |     |     function positions(
  84 |     |         uint256 tokenId
  85 |     |     )
  86 |     |         external
  87 |     |         view
  88 |     |         override
  89 |     |         returns (
  90 |     |             uint96 nonce,
  91 |     |             address operator,
  92 |     |             address token0,
  93 |     |             address token1,
  94 |     |             uint24 fee,
  95 |     |             int24 tickLower,
  96 |     |             int24 tickUpper,
  97 |     |             uint128 liquidity,
  98 |     |             uint256 feeGrowthInside0LastX128,
  99 |     |             uint256 feeGrowthInside1LastX128,
 100 |     |             uint128 tokensOwed0,
 101 |     |             uint128 tokensOwed1
 102 |     |         )
 103 |     |     {
 104 |     |         Position memory position = _positions[tokenId];
 105 |     |         require(position.poolId != 0, "Invalid token ID");
 106 |     |         PoolAddress.PoolKey memory poolKey = _poolIdToPoolKey[position.poolId];
 107 |     |         return (
 108 |     |             position.nonce,
 109 |     |             position.operator,
 110 |     |             poolKey.token0,
 111 |     |             poolKey.token1,
 112 |     |             poolKey.fee,
 113 |     |             position.tickLower,
 114 |     |             position.tickUpper,
 115 |     |             position.liquidity,
 116 |     |             position.feeGrowthInside0LastX128,
 117 |     |             position.feeGrowthInside1LastX128,
 118 |     |             position.tokensOwed0,
 119 |     |             position.tokensOwed1
 120 |     |         );
 121 |     |     }
 122 |     | 
 123 |     |     /// @dev Caches a pool key
 124 |     |     function cachePoolKey(
 125 |     |         address pool,
 126 |     |         PoolAddress.PoolKey memory poolKey
 127 |     |     ) private returns (uint80 poolId) {
 128 |     |         poolId = _poolIds[pool];
 129 |     |         if (poolId == 0) {
 130 |     |             _poolIds[pool] = (poolId = _nextPoolId++);
 131 |     |             _poolIdToPoolKey[poolId] = poolKey;
 132 |     |         }
 133 |     |     }
 134 |     | 
 135 |     |     /// @inheritdoc INonfungiblePositionManager
 136 |     |     function mint(
 137 |     |         MintParams calldata params
 138 |     |     )
 139 |     |         external
 140 |     |         payable
 141 |     |         override
 142 |     |         checkDeadline(params.deadline)
 143 |     |         returns (
 144 |     |             uint256 tokenId,
 145 |     |             uint128 liquidity,
 146 |     |             uint256 amount0,
 147 |     |             uint256 amount1
 148 |     |         )
 149 |     |     {
 150 |     |         IUniswapV3Pool pool;
 151 |     |         (liquidity, amount0, amount1, pool) = addLiquidity(
 152 |     |             AddLiquidityParams({
 153 |     |                 token0: params.token0,
 154 |     |                 token1: params.token1,
 155 |     |                 fee: params.fee,
 156 |     |                 recipient: address(this),
 157 |     |                 tickLower: params.tickLower,
 158 |     |                 tickUpper: params.tickUpper,
 159 |     |                 amount0Desired: params.amount0Desired,
 160 |     |                 amount1Desired: params.amount1Desired,
 161 |     |                 amount0Min: params.amount0Min,
 162 |     |                 amount1Min: params.amount1Min
 163 |     |             })
 164 |     |         );
 165 |     | 
 166 |     |         _mint(params.recipient, (tokenId = _nextId++));
 167 |     | 
 168 |     |         bytes32 positionKey = PositionKey.compute(
 169 |     |             address(this),
 170 |     |             params.tickLower,
 171 |     |             params.tickUpper
 172 |     |         );
 173 |     |         (
 174 |     |             ,
 175 |     |             uint256 feeGrowthInside0LastX128,
 176 |     |             uint256 feeGrowthInside1LastX128,
 177 |     |             ,
 178 |     | 
 179 |     |         ) = pool.positions(positionKey);
 180 |     | 
 181 |     |         // idempotent set
 182 |     |         uint80 poolId = cachePoolKey(
 183 |     |             address(pool),
 184 |     |             PoolAddress.PoolKey({
 185 |     |                 token0: params.token0,
 186 |     |                 token1: params.token1,
 187 |     |                 fee: params.fee
 188 |     |             })
 189 |     |         );
 190 |     | 
 191 |     |         _positions[tokenId] = Position({
 192 |     |             nonce: 0,
 193 |     |             operator: address(0),
 194 |     |             poolId: poolId,
 195 |     |             tickLower: params.tickLower,
 196 |     |             tickUpper: params.tickUpper,
 197 |     |             liquidity: liquidity,
 198 |     |             feeGrowthInside0LastX128: feeGrowthInside0LastX128,
 199 |     |             feeGrowthInside1LastX128: feeGrowthInside1LastX128,
 200 |     |             tokensOwed0: 0,
 201 |     |             tokensOwed1: 0
 202 |     |         });
 203 |     | 
 204 |     |         emit IncreaseLiquidity(tokenId, liquidity, amount0, amount1);
 205 |     |     }
 206 |     | 
 207 |     |     modifier isAuthorizedForToken(uint256 tokenId) {
 208 |     |         require(_isApprovedOrOwner(msg.sender, tokenId), "Not approved");
 209 |     |         _;
 210 |     |     }
 211 |     | 
 212 |     |     // function tokenURI(
 213 |     |     //     uint256 tokenId
 214 |     |     // ) public view override(ERC721, IERC721Metadata) returns (string memory) {
 215 |     |     //     require(_exists(tokenId));
 216 |     |     //     return
 217 |     |     //         INonfungibleTokenPositionDescriptor(_tokenDescriptor).tokenURI(
 218 |     |     //             this,
 219 |     |     //             tokenId
 220 |     |     //         );
 221 |     |     // }
 222 |     | 
 223 |     |     // save bytecode by removing implementation of unused method
 224 |     |     function baseURI() public pure returns (string memory) {}
 225 |     | 
 226 |     |     /// @inheritdoc INonfungiblePositionManager
 227 |     |     function increaseLiquidity(
 228 |     |         IncreaseLiquidityParams calldata params
 229 |     |     )
 230 |     |         external
 231 |     |         payable
 232 |     |         override
 233 |     |         checkDeadline(params.deadline)
 234 |     |         returns (uint128 liquidity, uint256 amount0, uint256 amount1)
 235 |     |     {
 236 |     |         Position storage position = _positions[params.tokenId];
 237 |     | 
 238 |     |         PoolAddress.PoolKey memory poolKey = _poolIdToPoolKey[position.poolId];
 239 |     | 
 240 |     |         IUniswapV3Pool pool;
 241 |     |         (liquidity, amount0, amount1, pool) = addLiquidity(
 242 |     |             AddLiquidityParams({
 243 |     |                 token0: poolKey.token0,
 244 |     |                 token1: poolKey.token1,
 245 |     |                 fee: poolKey.fee,
 246 |     |                 tickLower: position.tickLower,
 247 |     |                 tickUpper: position.tickUpper,
 248 |     |                 amount0Desired: params.amount0Desired,
 249 |     |                 amount1Desired: params.amount1Desired,
 250 |     |                 amount0Min: params.amount0Min,
 251 |     |                 amount1Min: params.amount1Min,
 252 |     |                 recipient: address(this)
 253 |     |             })
 254 |     |         );
 255 |     | 
 256 |     |         bytes32 positionKey = PositionKey.compute(
 257 |     |             address(this),
 258 |     |             position.tickLower,
 259 |     |             position.tickUpper
 260 |     |         );
 261 |     | 
 262 |     |         // this is now updated to the current transaction
 263 |     |         (
 264 |     |             ,
 265 |     |             uint256 feeGrowthInside0LastX128,
 266 |     |             uint256 feeGrowthInside1LastX128,
 267 |     |             ,
 268 |     | 
 269 |     |         ) = pool.positions(positionKey);
 270 |     | 
 271 |     |         position.tokensOwed0 += uint128(
 272 |     |             FullMath.mulDiv(
 273 |     |                 feeGrowthInside0LastX128 - position.feeGrowthInside0LastX128,
 274 |     |                 position.liquidity,
 275 |     |                 FixedPoint128.Q128
 276 |     |             )
 277 |     |         );
 278 |     |         position.tokensOwed1 += uint128(
 279 |     |             FullMath.mulDiv(
 280 |     |                 feeGrowthInside1LastX128 - position.feeGrowthInside1LastX128,
 281 |     |                 position.liquidity,
 282 |     |                 FixedPoint128.Q128
 283 |     |             )
 284 |     |         );
 285 |     | 
 286 |     |         position.feeGrowthInside0LastX128 = feeGrowthInside0LastX128;
 287 |     |         position.feeGrowthInside1LastX128 = feeGrowthInside1LastX128;
 288 |     |         position.liquidity += liquidity;
 289 |     | 
 290 |     |         emit IncreaseLiquidity(params.tokenId, liquidity, amount0, amount1);
 291 |     |     }
 292 |     | 
 293 |     |     /// @inheritdoc INonfungiblePositionManager
 294 |     |     function decreaseLiquidity(
 295 |     |         DecreaseLiquidityParams calldata params
 296 |     |     )
 297 |     |         external
 298 |     |         payable
 299 |     |         override
 300 |     |         isAuthorizedForToken(params.tokenId)
 301 |     |         checkDeadline(params.deadline)
 302 |     |         returns (uint256 amount0, uint256 amount1)
 303 |     |     {
 304 |     |         require(params.liquidity > 0);
 305 |     |         Position storage position = _positions[params.tokenId];
 306 |     | 
 307 |     |         uint128 positionLiquidity = position.liquidity;
 308 |     |         require(positionLiquidity >= params.liquidity);
 309 |     | 
 310 |     |         PoolAddress.PoolKey memory poolKey = _poolIdToPoolKey[position.poolId];
 311 |     |         IUniswapV3Pool pool = IUniswapV3Pool(
 312 |     |             IUniswapV3Factory(factory).getPool(
 313 |     |                 poolKey.token0,
 314 |     |                 poolKey.token1,
 315 |     |                 poolKey.fee
 316 |     |             )
 317 |     |         );
 318 |     |         (amount0, amount1) = pool.burn(
 319 |     |             position.tickLower,
 320 |     |             position.tickUpper,
 321 |     |             params.liquidity
 322 |     |         );
 323 |     | 
 324 |     |         require(
 325 |     |             amount0 >= params.amount0Min && amount1 >= params.amount1Min,
 326 |     |             "Price slippage check"
 327 |     |         );
 328 |     | 
 329 |     |         bytes32 positionKey = PositionKey.compute(
 330 |     |             address(this),
 331 |     |             position.tickLower,
 332 |     |             position.tickUpper
 333 |     |         );
 334 |     |         // this is now updated to the current transaction
 335 |     |         (
 336 |     |             ,
 337 |     |             uint256 feeGrowthInside0LastX128,
 338 |     |             uint256 feeGrowthInside1LastX128,
 339 |     |             ,
 340 |     | 
 341 |     |         ) = pool.positions(positionKey);
 342 |     | 
 343 |     |         position.tokensOwed0 +=
 344 |     |             uint128(amount0) +
 345 |     |             uint128(
 346 |     |                 FullMath.mulDiv(
 347 |     |                     feeGrowthInside0LastX128 -
 348 |     |                         position.feeGrowthInside0LastX128,
 349 |     |                     positionLiquidity,
 350 |     |                     FixedPoint128.Q128
 351 |     |                 )
 352 |     |             );
 353 |     |         position.tokensOwed1 +=
 354 |     |             uint128(amount1) +
 355 |     |             uint128(
 356 |     |                 FullMath.mulDiv(
 357 |     |                     feeGrowthInside1LastX128 -
 358 |     |                         position.feeGrowthInside1LastX128,
 359 |     |                     positionLiquidity,
 360 |     |                     FixedPoint128.Q128
 361 |     |                 )
 362 |     |             );
 363 |     | 
 364 |     |         position.feeGrowthInside0LastX128 = feeGrowthInside0LastX128;
 365 |     |         position.feeGrowthInside1LastX128 = feeGrowthInside1LastX128;
 366 |     |         // subtraction is safe because we checked positionLiquidity is gte params.liquidity
 367 |     |         position.liquidity = positionLiquidity - params.liquidity;
 368 |     | 
 369 |     |         emit DecreaseLiquidity(
 370 |     |             params.tokenId,
 371 |     |             params.liquidity,
 372 |     |             amount0,
 373 |     |             amount1
 374 |     |         );
 375 |     |     }
 376 |     | 
 377 |     |     /// @inheritdoc INonfungiblePositionManager
 378 |     |     function collect(
 379 |     |         CollectParams calldata params
 380 |     |     )
 381 |     |         external
 382 |     |         payable
 383 |     |         override
 384 |     |         isAuthorizedForToken(params.tokenId)
 385 |     |         returns (uint256 amount0, uint256 amount1)
 386 |     |     {
 387 |     |         require(params.amount0Max > 0 || params.amount1Max > 0);
 388 |     |         // allow collecting to the nft position manager address with address 0
 389 |     |         address recipient = params.recipient == address(0)
 390 |     |             ? address(this)
 391 |     |             : params.recipient;
 392 |     | 
 393 |     |         Position storage position = _positions[params.tokenId];
 394 |     | 
 395 |     |         PoolAddress.PoolKey memory poolKey = _poolIdToPoolKey[position.poolId];
 396 |     | 
 397 |     |         IUniswapV3Pool pool = IUniswapV3Pool(
 398 |     |             IUniswapV3Factory(factory).getPool(
 399 |     |                 poolKey.token0,
 400 |     |                 poolKey.token1,
 401 |     |                 poolKey.fee
 402 |     |             )
 403 |     |         );
 404 |     | 
 405 |     |         (uint128 tokensOwed0, uint128 tokensOwed1) = (
 406 |     |             position.tokensOwed0,
 407 |     |             position.tokensOwed1
 408 |     |         );
 409 |     | 
 410 |     |         // trigger an update of the position fees owed and fee growth snapshots if it has any liquidity
 411 |     |         if (position.liquidity > 0) {
 412 |     |             pool.burn(position.tickLower, position.tickUpper, 0);
 413 |     |             (
 414 |     |                 ,
 415 |     |                 uint256 feeGrowthInside0LastX128,
 416 |     |                 uint256 feeGrowthInside1LastX128,
 417 |     |                 ,
 418 |     | 
 419 |     |             ) = pool.positions(
 420 |     |                     PositionKey.compute(
 421 |     |                         address(this),
 422 |     |                         position.tickLower,
 423 |     |                         position.tickUpper
 424 |     |                     )
 425 |     |                 );
 426 |     | 
 427 |     |             tokensOwed0 += uint128(
 428 |     |                 FullMath.mulDiv(
 429 |     |                     feeGrowthInside0LastX128 -
 430 |     |                         position.feeGrowthInside0LastX128,
 431 |     |                     position.liquidity,
 432 |     |                     FixedPoint128.Q128
 433 |     |                 )
 434 |     |             );
 435 |     |             tokensOwed1 += uint128(
 436 |     |                 FullMath.mulDiv(
 437 |     |                     feeGrowthInside1LastX128 -
 438 |     |                         position.feeGrowthInside1LastX128,
 439 |     |                     position.liquidity,
 440 |     |                     FixedPoint128.Q128
 441 |     |                 )
 442 |     |             );
 443 |     | 
 444 |     |             position.feeGrowthInside0LastX128 = feeGrowthInside0LastX128;
 445 |     |             position.feeGrowthInside1LastX128 = feeGrowthInside1LastX128;
 446 |     |         }
 447 |     | 
 448 |     |         // compute the arguments to give to the pool#collect method
 449 |     |         (uint128 amount0Collect, uint128 amount1Collect) = (
 450 |     |             params.amount0Max > tokensOwed0 ? tokensOwed0 : params.amount0Max,
 451 |     |             params.amount1Max > tokensOwed1 ? tokensOwed1 : params.amount1Max
 452 |     |         );
 453 |     | 
 454 |     |         // the actual amounts collected are returned
 455 |     |         (amount0, amount1) = pool.collect(
 456 |     |             recipient,
 457 |     |             position.tickLower,
 458 |     |             position.tickUpper,
 459 |     |             amount0Collect,
 460 |     |             amount1Collect
 461 |     |         );
 462 |     | 
 463 |     |         // sometimes there will be a few less wei than expected due to rounding down in core, but we just subtract the full amount expected
 464 |     |         // instead of the actual amount so we can burn the token
 465 |     |         (position.tokensOwed0, position.tokensOwed1) = (
 466 |     |             tokensOwed0 - amount0Collect,
 467 |     |             tokensOwed1 - amount1Collect
 468 |     |         );
 469 |     | 
 470 |     |         emit Collect(params.tokenId, recipient, amount0Collect, amount1Collect);
 471 |     |     }
 472 |     | 
 473 |     |     /// @inheritdoc INonfungiblePositionManager
 474 |     |     function burn(
 475 |     |         uint256 tokenId
 476 |     |     ) external payable override isAuthorizedForToken(tokenId) {
 477 |     |         Position storage position = _positions[tokenId];
 478 |     |         require(
 479 |     |             position.liquidity == 0 &&
 480 |     |                 position.tokensOwed0 == 0 &&
 481 |     |                 position.tokensOwed1 == 0,
 482 |     |             "Not cleared"
 483 |     |         );
 484 |     |         delete _positions[tokenId];
 485 |     |         _burn(tokenId);
 486 |     |     }
 487 |     | 
 488 |     |     function _getAndIncrementNonce(
 489 |     |         uint256 tokenId
 490 |     |     ) internal override returns (uint256) {
 491 |     |         return uint256(_positions[tokenId].nonce++);
 492 |     |     }
 493 |     | 
 494 |     |     /// @inheritdoc IERC721
 495 | *   |     function getApproved(
 496 |     |         uint256 tokenId
 497 |     |     ) public view override(ERC721, IERC721) returns (address) {
 498 |     |         require(
 499 |     |             _exists(tokenId),
 500 |     |             "ERC721: approved query for nonexistent token"
 501 |     |         );
 502 |     | 
 503 |     |         return _positions[tokenId].operator;
 504 |     |     }
 505 |     | 
 506 |     |     /// @dev Overrides _approve to use the operator in the position, which is packed with the position permit nonce
 507 |     |     function _approve(address to, uint256 tokenId) internal override(ERC721) {
 508 |     |         _positions[tokenId].operator = to;
 509 |     |         emit Approval(ownerOf(tokenId), to, tokenId);
 510 |     |     }
 511 |     | }
 512 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/SwapRouter.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity ^0.8.0;
   3 |     | pragma abicoder v2;
   4 |     | 
   5 |     | import "v3-core/libraries/SafeCast.sol";
   6 |     | import "v3-core/libraries/TickMath.sol";
   7 |     | import "v3-core/interfaces/IUniswapV3Pool.sol";
   8 |     | import "v3-core/interfaces/IUniswapV3Factory.sol";
   9 |     | 
  10 |     | import "./interfaces/ISwapRouter.sol";
  11 |     | import "./base/PeripheryImmutableState.sol";
  12 |     | import "./base/PeripheryValidation.sol";
  13 |     | import "./base/PeripheryPaymentsWithFee.sol";
  14 |     | import "./base/Multicall.sol";
  15 |     | import "./base/SelfPermit.sol";
  16 |     | import "./libraries/Path.sol";
  17 |     | import "./libraries/CallbackValidation.sol";
  18 |     | import "./interfaces/external/IWETH9.sol";
  19 |     | 
  20 |     | /// @title Uniswap V3 Swap Router
  21 |     | /// @notice Router for stateless execution of swaps against Uniswap V3
  22 |     | contract SwapRouter is
  23 |     |     ISwapRouter,
  24 |     |     PeripheryImmutableState,
  25 |     |     PeripheryValidation,
  26 |     |     PeripheryPaymentsWithFee,
  27 |     |     Multicall,
  28 |     |     SelfPermit
  29 |     | {
  30 |     |     using Path for bytes;
  31 |     |     using SafeCast for uint256;
  32 |     |     event logInt(string msg, int256 num);
  33 |     | 
  34 |     |     /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap
  35 |     |     /// can never actually be this value
  36 |     |     uint256 private constant DEFAULT_AMOUNT_IN_CACHED = type(uint256).max;
  37 |     | 
  38 |     |     /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.
  39 |     |     uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED;
  40 |     | 
  41 |     |     constructor(
  42 |     |         address _factory,
  43 |     |         address _WETH9
  44 |     |     ) PeripheryImmutableState(_factory, _WETH9) {}
  45 |     | 
  46 |     |     /// @dev Returns the pool for the given token pair and fee. The pool contract may or may not exist.
  47 |     |     function getPool(
  48 |     |         address tokenA,
  49 |     |         address tokenB,
  50 |     |         uint24 fee
  51 |     |     ) private view returns (IUniswapV3Pool) {
  52 |     |         return
  53 |     |             IUniswapV3Pool(
  54 |     |                 IUniswapV3Factory(factory).getPool(tokenA, tokenB, fee)
  55 |     |             );
  56 |     |     }
  57 |     | 
  58 |     |     struct SwapCallbackData {
  59 |     |         bytes path;
  60 |     |         address payer;
  61 |     |     }
  62 |     | 
  63 |     |     /// @inheritdoc IUniswapV3SwapCallback
  64 |     |     function uniswapV3SwapCallback(
  65 |     |         int256 amount0Delta,
  66 |     |         int256 amount1Delta,
  67 |     |         bytes calldata _data
  68 |     |     ) external override {
  69 |     |         emit logInt("uniswapV3SwapCallback::amount0Delta", amount0Delta);
  70 |     |         emit logInt("uniswapV3SwapCallback::amount1Delta", amount1Delta);
  71 |     | 
  72 |     |         require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported
  73 |     |         SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));
  74 |     |         (address tokenIn, address tokenOut, uint24 fee) = data
  75 |     |             .path
  76 |     |             .decodeFirstPool();
  77 |     |         CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);
  78 |     | 
  79 |     |         (bool isExactInput, uint256 amountToPay) = amount0Delta > 0
  80 |     |             ? (tokenIn < tokenOut, uint256(amount0Delta))
  81 |     |             : (tokenOut < tokenIn, uint256(amount1Delta));
  82 |     |         if (isExactInput) {
  83 |     |             pay(tokenIn, data.payer, msg.sender, amountToPay);
  84 |     |         } else {
  85 |     |             // either initiate the next swap or pay
  86 |     |             if (data.path.hasMultiplePools()) {
  87 |     |                 data.path = data.path.skipToken();
  88 |     |                 exactOutputInternal(amountToPay, msg.sender, 0, data);
  89 |     |             } else {
  90 |     |                 amountInCached = amountToPay;
  91 |     |                 tokenIn = tokenOut; // swap in/out because exact output swaps are reversed
  92 |     |                 pay(tokenIn, data.payer, msg.sender, amountToPay);
  93 |     |             }
  94 |     |         }
  95 |     |     }
  96 |     | 
  97 |     |     /// @dev Performs a single exact input swap
  98 |     |     function exactInputInternal(
  99 |     |         uint256 amountIn,
 100 |     |         address recipient,
 101 |     |         uint160 sqrtPriceLimitX96,
 102 |     |         SwapCallbackData memory data
 103 |     |     ) private returns (uint256 amountOut) {
 104 |     |         // allow swapping to the router address with address 0
 105 |     |         if (recipient == address(0)) recipient = address(this);
 106 |     | 
 107 |     |         (address tokenIn, address tokenOut, uint24 fee) = data
 108 |     |             .path
 109 |     |             .decodeFirstPool();
 110 |     | 
 111 |     |         bool zeroForOne = tokenIn < tokenOut;
 112 |     | 
 113 |     |         (int256 amount0, int256 amount1) = getPool(tokenIn, tokenOut, fee).swap(
 114 |     |             recipient,
 115 |     |             zeroForOne,
 116 |     |             amountIn.toInt256(),
 117 |     |             sqrtPriceLimitX96 == 0
 118 |     |                 ? (
 119 |     |                     zeroForOne
 120 |     |                         ? TickMath.MIN_SQRT_RATIO + 1
 121 |     |                         : TickMath.MAX_SQRT_RATIO - 1
 122 |     |                 )
 123 |     |                 : sqrtPriceLimitX96,
 124 |     |             abi.encode(data)
 125 |     |         );
 126 |     | 
 127 |     |         return uint256(-(zeroForOne ? amount1 : amount0));
 128 |     |     }
 129 |     | 
 130 |     |     /// @inheritdoc ISwapRouter
 131 |     |     function exactInputSingle(
 132 |     |         ExactInputSingleParams calldata params
 133 |     |     )
 134 |     |         external
 135 |     |         payable
 136 |     |         override
 137 |     |         checkDeadline(params.deadline)
 138 |     |         returns (uint256 amountOut)
 139 |     |     {
 140 |     |         amountOut = exactInputInternal(
 141 |     |             params.amountIn,
 142 |     |             params.recipient,
 143 |     |             params.sqrtPriceLimitX96,
 144 |     |             SwapCallbackData({
 145 |     |                 path: abi.encodePacked(
 146 |     |                     params.tokenIn,
 147 |     |                     params.fee,
 148 |     |                     params.tokenOut
 149 |     |                 ),
 150 |     |                 payer: msg.sender
 151 |     |             })
 152 |     |         );
 153 |     |         require(amountOut >= params.amountOutMinimum, "Too little received");
 154 |     |     }
 155 |     | 
 156 |     |     /// @inheritdoc ISwapRouter
 157 |     |     function exactInput(
 158 |     |         ExactInputParams memory params
 159 |     |     )
 160 |     |         external
 161 |     |         payable
 162 |     |         override
 163 |     |         checkDeadline(params.deadline)
 164 |     |         returns (uint256 amountOut)
 165 |     |     {
 166 |     |         address payer = msg.sender; // msg.sender pays for the first hop
 167 |     | 
 168 |     |         while (true) {
 169 |     |             bool hasMultiplePools = params.path.hasMultiplePools();
 170 |     | 
 171 |     |             // the outputs of prior swaps become the inputs to subsequent ones
 172 |     |             params.amountIn = exactInputInternal(
 173 |     |                 params.amountIn,
 174 |     |                 hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies
 175 |     |                 0,
 176 |     |                 SwapCallbackData({
 177 |     |                     path: params.path.getFirstPool(), // only the first pool in the path is necessary
 178 |     |                     payer: payer
 179 |     |                 })
 180 |     |             );
 181 |     | 
 182 |     |             // decide whether to continue or terminate
 183 |     |             if (hasMultiplePools) {
 184 |     |                 payer = address(this); // at this point, the caller has paid
 185 |     |                 params.path = params.path.skipToken();
 186 |     |             } else {
 187 |     |                 amountOut = params.amountIn;
 188 |     |                 break;
 189 |     |             }
 190 |     |         }
 191 |     | 
 192 |     |         require(amountOut >= params.amountOutMinimum, "Too little received");
 193 |     |     }
 194 |     | 
 195 |     |     /// @dev Performs a single exact output swap
 196 |     |     function exactOutputInternal(
 197 |     |         uint256 amountOut,
 198 |     |         address recipient,
 199 |     |         uint160 sqrtPriceLimitX96,
 200 |     |         SwapCallbackData memory data
 201 |     |     ) private returns (uint256 amountIn) {
 202 |     |         // allow swapping to the router address with address 0
 203 |     |         if (recipient == address(0)) recipient = address(this);
 204 |     | 
 205 |     |         (address tokenOut, address tokenIn, uint24 fee) = data
 206 |     |             .path
 207 |     |             .decodeFirstPool();
 208 |     | 
 209 |     |         bool zeroForOne = tokenIn < tokenOut;
 210 |     | 
 211 |     |         (int256 amount0Delta, int256 amount1Delta) = getPool(
 212 |     |             tokenIn,
 213 |     |             tokenOut,
 214 |     |             fee
 215 |     |         ).swap(
 216 |     |                 recipient,
 217 |     |                 zeroForOne,
 218 |     |                 -amountOut.toInt256(),
 219 |     |                 sqrtPriceLimitX96 == 0
 220 |     |                     ? (
 221 |     |                         zeroForOne
 222 |     |                             ? TickMath.MIN_SQRT_RATIO + 1
 223 |     |                             : TickMath.MAX_SQRT_RATIO - 1
 224 |     |                     )
 225 |     |                     : sqrtPriceLimitX96,
 226 |     |                 abi.encode(data)
 227 |     |             );
 228 |     | 
 229 |     |         uint256 amountOutReceived;
 230 |     |         (amountIn, amountOutReceived) = zeroForOne
 231 |     |             ? (uint256(amount0Delta), uint256(-amount1Delta))
 232 |     |             : (uint256(amount1Delta), uint256(-amount0Delta));
 233 |     |         // it's technically possible to not receive the full output amount,
 234 |     |         // so if no price limit has been specified, require this possibility away
 235 |     |         if (sqrtPriceLimitX96 == 0) require(amountOutReceived == amountOut);
 236 |     |     }
 237 |     | 
 238 |     |     /// @inheritdoc ISwapRouter
 239 |     |     function exactOutputSingle(
 240 |     |         ExactOutputSingleParams calldata params
 241 |     |     )
 242 |     |         external
 243 |     |         payable
 244 |     |         override
 245 |     |         checkDeadline(params.deadline)
 246 |     |         returns (uint256 amountIn)
 247 |     |     {
 248 |     |         // avoid an SLOAD by using the swap return data
 249 |     |         amountIn = exactOutputInternal(
 250 |     |             params.amountOut,
 251 |     |             params.recipient,
 252 |     |             params.sqrtPriceLimitX96,
 253 |     |             SwapCallbackData({
 254 |     |                 path: abi.encodePacked(
 255 |     |                     params.tokenOut,
 256 |     |                     params.fee,
 257 |     |                     params.tokenIn
 258 |     |                 ),
 259 |     |                 payer: msg.sender
 260 |     |             })
 261 |     |         );
 262 |     | 
 263 |     |         require(amountIn <= params.amountInMaximum, "Too much requested");
 264 |     |         // has to be reset even though we don't use it in the single hop case
 265 |     |         amountInCached = DEFAULT_AMOUNT_IN_CACHED;
 266 |     |     }
 267 |     | 
 268 |     |     /// @inheritdoc ISwapRouter
 269 |     |     function exactOutput(
 270 |     |         ExactOutputParams calldata params
 271 |     |     )
 272 |     |         external
 273 |     |         payable
 274 |     |         override
 275 |     |         checkDeadline(params.deadline)
 276 |     |         returns (uint256 amountIn)
 277 |     |     {
 278 |     |         // it's okay that the payer is fixed to msg.sender here, as they're only paying for the "final" exact output
 279 |     |         // swap, which happens first, and subsequent swaps are paid for within nested callback frames
 280 |     |         exactOutputInternal(
 281 |     |             params.amountOut,
 282 |     |             params.recipient,
 283 |     |             0,
 284 |     |             SwapCallbackData({path: params.path, payer: msg.sender})
 285 |     |         );
 286 |     | 
 287 |     |         amountIn = amountInCached;
 288 |     |         require(amountIn <= params.amountInMaximum, "Too much requested");
 289 |     |         amountInCached = DEFAULT_AMOUNT_IN_CACHED;
 290 |     |     }
 291 |     | }
 292 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/base/BlockTimestamp.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | /// @title Function for getting block timestamp
  5 |     | /// @dev Base contract that is overridden for tests
  6 |     | abstract contract BlockTimestamp {
  7 |     |     /// @dev Method that exists purely to be overridden for tests
  8 |     |     /// @return The current block timestamp
  9 |     |     function _blockTimestamp() internal view virtual returns (uint256) {
 10 |     |         return block.timestamp;
 11 |     |     }
 12 |     | }
 13 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/base/ERC721Permit.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import "@openzeppelin/contracts-v4/token/ERC721/extensions/ERC721Enumerable.sol";
   5 |     | import "@openzeppelin/contracts-v4/utils/Address.sol";
   6 |     | 
   7 |     | import "../libraries/ChainId.sol";
   8 |     | import "../interfaces/external/IERC1271.sol";
   9 |     | import "../interfaces/IERC721Permit.sol";
  10 |     | import "./BlockTimestamp.sol";
  11 |     | 
  12 |     | /// @title ERC721 with permit
  13 |     | /// @notice Nonfungible tokens that support an approve via signature, i.e. permit
  14 |     | abstract contract ERC721Permit is
  15 |     |     BlockTimestamp,
  16 |     |     ERC721Enumerable,
  17 |     |     IERC721Permit
  18 |     | {
  19 |     |     /// @dev Gets the current nonce for a token ID and then increments it, returning the original value
  20 |     |     function _getAndIncrementNonce(
  21 |     |         uint256 tokenId
  22 |     |     ) internal virtual returns (uint256);
  23 |     | 
  24 |     |     /// @dev The hash of the name used in the permit signature verification
  25 |     |     bytes32 private immutable nameHash;
  26 |     | 
  27 |     |     /// @dev The hash of the version string used in the permit signature verification
  28 |     |     bytes32 private immutable versionHash;
  29 |     | 
  30 |     |     /// @notice Computes the nameHash and versionHash
  31 |     |     constructor(
  32 |     |         string memory name_,
  33 |     |         string memory symbol_,
  34 |     |         string memory version_
  35 |     |     ) ERC721(name_, symbol_) {
  36 |     |         nameHash = keccak256(bytes(name_));
  37 |     |         versionHash = keccak256(bytes(version_));
  38 |     |     }
  39 |     | 
  40 |     |     /// @inheritdoc IERC721Permit
  41 |     |     function DOMAIN_SEPARATOR() public view override returns (bytes32) {
  42 |     |         return
  43 |     |             keccak256(
  44 |     |                 abi.encode(
  45 |     |                     // keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')
  46 |     |                     0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,
  47 |     |                     nameHash,
  48 |     |                     versionHash,
  49 |     |                     ChainId.get(),
  50 |     |                     address(this)
  51 |     |                 )
  52 |     |             );
  53 |     |     }
  54 |     | 
  55 |     |     /// @inheritdoc IERC721Permit
  56 |     |     /// @dev Value is equal to keccak256("Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)");
  57 |     |     bytes32 public constant override PERMIT_TYPEHASH =
  58 |     |         0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;
  59 |     | 
  60 |     |     /// @inheritdoc IERC721Permit
  61 |     |     function permit(
  62 |     |         address spender,
  63 |     |         uint256 tokenId,
  64 |     |         uint256 deadline,
  65 |     |         uint8 v,
  66 |     |         bytes32 r,
  67 |     |         bytes32 s
  68 |     |     ) external payable override {
  69 |     |         require(_blockTimestamp() <= deadline, "Permit expired");
  70 |     | 
  71 |     |         bytes32 digest = keccak256(
  72 |     |             abi.encodePacked(
  73 |     |                 "\x19\x01",
  74 |     |                 DOMAIN_SEPARATOR(),
  75 |     |                 keccak256(
  76 |     |                     abi.encode(
  77 |     |                         PERMIT_TYPEHASH,
  78 |     |                         spender,
  79 |     |                         tokenId,
  80 |     |                         _getAndIncrementNonce(tokenId),
  81 |     |                         deadline
  82 |     |                     )
  83 |     |                 )
  84 |     |             )
  85 |     |         );
  86 |     |         address owner = ownerOf(tokenId);
  87 |     |         require(spender != owner, "ERC721Permit: approval to current owner");
  88 |     | 
  89 |     |         if (Address.isContract(owner)) {
  90 |     |             require(
  91 |     |                 IERC1271(owner).isValidSignature(
  92 |     |                     digest,
  93 |     |                     abi.encodePacked(r, s, v)
  94 |     |                 ) == 0x1626ba7e,
  95 |     |                 "Unauthorized"
  96 |     |             );
  97 |     |         } else {
  98 |     |             address recoveredAddress = ecrecover(digest, v, r, s);
  99 |     |             require(recoveredAddress != address(0), "Invalid signature");
 100 |     |             require(recoveredAddress == owner, "Unauthorized");
 101 |     |         }
 102 |     | 
 103 |     |         _approve(spender, tokenId);
 104 |     |     }
 105 |     | }
 106 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/base/LiquidityManagement.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | pragma abicoder v2;
  4 |     | 
  5 |     | import 'v3-core/interfaces/IUniswapV3Factory.sol';
  6 |     | import 'v3-core/interfaces/callback/IUniswapV3MintCallback.sol';
  7 |     | import 'v3-core/libraries/TickMath.sol';
  8 |     | 
  9 |     | import '../libraries/PoolAddress.sol';
 10 |     | import '../libraries/CallbackValidation.sol';
 11 |     | import '../libraries/LiquidityAmounts.sol';
 12 |     | 
 13 |     | import './PeripheryPayments.sol';
 14 |     | import './PeripheryImmutableState.sol';
 15 |     | 
 16 |     | /// @title Liquidity management functions
 17 |     | /// @notice Internal functions for safely managing liquidity in Uniswap V3
 18 |     | abstract contract LiquidityManagement is IUniswapV3MintCallback, PeripheryImmutableState, PeripheryPayments {
 19 |     |     struct MintCallbackData {
 20 |     |         PoolAddress.PoolKey poolKey;
 21 |     |         address payer;
 22 |     |     }
 23 |     | 
 24 |     |     /// @inheritdoc IUniswapV3MintCallback
 25 |     |     function uniswapV3MintCallback(
 26 |     |         uint256 amount0Owed,
 27 |     |         uint256 amount1Owed,
 28 |     |         bytes calldata data
 29 |     |     ) external override {
 30 |     |         MintCallbackData memory decoded = abi.decode(data, (MintCallbackData));
 31 |     |         CallbackValidation.verifyCallback(factory, decoded.poolKey);
 32 |     | 
 33 |     |         if (amount0Owed > 0) pay(decoded.poolKey.token0, decoded.payer, msg.sender, amount0Owed);
 34 |     |         if (amount1Owed > 0) pay(decoded.poolKey.token1, decoded.payer, msg.sender, amount1Owed);
 35 |     |     }
 36 |     | 
 37 |     |     struct AddLiquidityParams {
 38 |     |         address token0;
 39 |     |         address token1;
 40 |     |         uint24 fee;
 41 |     |         address recipient;
 42 |     |         int24 tickLower;
 43 |     |         int24 tickUpper;
 44 |     |         uint256 amount0Desired;
 45 |     |         uint256 amount1Desired;
 46 |     |         uint256 amount0Min;
 47 |     |         uint256 amount1Min;
 48 |     |     }
 49 |     | 
 50 |     |     /// @notice Add liquidity to an initialized pool
 51 |     |     function addLiquidity(AddLiquidityParams memory params)
 52 |     |         internal
 53 |     |         returns (
 54 |     |             uint128 liquidity,
 55 |     |             uint256 amount0,
 56 |     |             uint256 amount1,
 57 |     |             IUniswapV3Pool pool
 58 |     |         )
 59 |     |     {
 60 |     |         PoolAddress.PoolKey memory poolKey = PoolAddress.PoolKey({
 61 |     |             token0: params.token0,
 62 |     |             token1: params.token1,
 63 |     |             fee: params.fee
 64 |     |         });
 65 |     | 
 66 |     |         pool = IUniswapV3Pool(IUniswapV3Factory(factory).getPool(poolKey.token0, poolKey.token1, poolKey.fee));
 67 |     | 
 68 |     |         // compute the liquidity amount
 69 |     |         {
 70 |     |             (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();
 71 |     |             uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(params.tickLower);
 72 |     |             uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(params.tickUpper);
 73 |     | 
 74 |     |             liquidity = LiquidityAmounts.getLiquidityForAmounts(
 75 |     |                 sqrtPriceX96,
 76 |     |                 sqrtRatioAX96,
 77 |     |                 sqrtRatioBX96,
 78 |     |                 params.amount0Desired,
 79 |     |                 params.amount1Desired
 80 |     |             );
 81 |     |         }
 82 |     | 
 83 |     |         (amount0, amount1) = pool.mint(
 84 |     |             params.recipient,
 85 |     |             params.tickLower,
 86 |     |             params.tickUpper,
 87 |     |             liquidity,
 88 |     |             abi.encode(MintCallbackData({poolKey: poolKey, payer: msg.sender}))
 89 |     |         );
 90 |     | 
 91 |     |         require(amount0 >= params.amount0Min && amount1 >= params.amount1Min, 'Price slippage check');
 92 |     |     }
 93 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/base/Multicall.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | pragma abicoder v2;
  4 |     | 
  5 |     | import "../interfaces/IMulticall.sol";
  6 |     | 
  7 |     | /// @title Multicall
  8 |     | /// @notice Enables calling multiple methods in a single call to the contract
  9 |     | abstract contract Multicall is IMulticall {
 10 |     |     /// @inheritdoc IMulticall
 11 |     |     function multicall(bytes[] calldata data)
 12 |     |         public
 13 |     |         payable
 14 |     |         override
 15 |     |         returns (bytes[] memory results)
 16 |     |     {
 17 |     |         results = new bytes[](data.length);
 18 |     |         for (uint256 i = 0; i < data.length; i++) {
 19 |     |             (bool success, bytes memory result) = address(this).delegatecall(data[i]);
 20 |     | 
 21 |     |             if (!success) {
 22 |     |                 // Next 5 lines from https://ethereum.stackexchange.com/a/83577
 23 |     |                 if (result.length < 68) revert();
 24 |     |                 assembly {
 25 |     |                     result := add(result, 0x04)
 26 |     |                 }
 27 |     |                 revert(abi.decode(result, (string)));
 28 |     |             }
 29 |     | 
 30 |     |             results[i] = result;
 31 |     |         }
 32 |     |     }
 33 |     | }
 34 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/base/PeripheryImmutableState.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "../interfaces/IPeripheryImmutableState.sol";
  5 |     | 
  6 |     | /// @title Immutable state
  7 |     | /// @notice Immutable state used by periphery contracts
  8 |     | abstract contract PeripheryImmutableState is IPeripheryImmutableState {
  9 |     |     /// @inheritdoc IPeripheryImmutableState
 10 | *   |     address public immutable override factory;
 11 |     |     /// @inheritdoc IPeripheryImmutableState
 12 |     |     address public immutable override WETH9;
 13 |     | 
 14 |     |     constructor(address _factory, address _WETH9) {
 15 |     |         factory = _factory;
 16 |     |         WETH9 = _WETH9;
 17 |     |     }
 18 |     | }
 19 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/base/PeripheryPayments.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "@openzeppelin/contracts-v4/token/ERC20/IERC20.sol";
  5 |     | 
  6 |     | import "../interfaces/IPeripheryPayments.sol";
  7 |     | import "../interfaces/external/IWETH9.sol";
  8 |     | 
  9 |     | import "../libraries/TransferHelper.sol";
 10 |     | 
 11 |     | import "./PeripheryImmutableState.sol";
 12 |     | 
 13 |     | abstract contract PeripheryPayments is
 14 |     |     IPeripheryPayments,
 15 |     |     PeripheryImmutableState
 16 |     | {
 17 |     |     receive() external payable {
 18 |     |         require(msg.sender == WETH9, "Not WETH9");
 19 |     |     }
 20 |     | 
 21 |     |     /// @inheritdoc IPeripheryPayments
 22 |     |     function unwrapWETH9(
 23 |     |         uint256 amountMinimum,
 24 |     |         address recipient
 25 |     |     ) public payable override {
 26 |     |         uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));
 27 |     |         require(balanceWETH9 >= amountMinimum, "Insufficient WETH9");
 28 |     | 
 29 |     |         if (balanceWETH9 > 0) {
 30 |     |             IWETH9(WETH9).withdraw(balanceWETH9);
 31 |     |             TransferHelper.safeTransferETH(recipient, balanceWETH9);
 32 |     |         }
 33 |     |     }
 34 |     | 
 35 |     |     /// @inheritdoc IPeripheryPayments
 36 |     |     function sweepToken(
 37 |     |         address token,
 38 |     |         uint256 amountMinimum,
 39 |     |         address recipient
 40 |     |     ) public payable override {
 41 |     |         uint256 balanceToken = IERC20(token).balanceOf(address(this));
 42 |     |         require(balanceToken >= amountMinimum, "Insufficient token");
 43 |     | 
 44 |     |         if (balanceToken > 0) {
 45 |     |             TransferHelper.safeTransfer(token, recipient, balanceToken);
 46 |     |         }
 47 |     |     }
 48 |     | 
 49 |     |     /// @inheritdoc IPeripheryPayments
 50 |     |     function refundETH() external payable override {
 51 |     |         if (address(this).balance > 0) {
 52 |     |             TransferHelper.safeTransferETH(msg.sender, address(this).balance);
 53 |     |         }
 54 |     |     }
 55 |     | 
 56 |     |     /// @param token The token to pay
 57 |     |     /// @param payer The entity that must pay
 58 |     |     /// @param recipient The entity that will receive payment
 59 |     |     /// @param value The amount to pay
 60 |     |     function pay(
 61 |     |         address token,
 62 |     |         address payer,
 63 |     |         address recipient,
 64 |     |         uint256 value
 65 |     |     ) internal {
 66 |     |         if (token == WETH9 && address(this).balance >= value) {
 67 |     |             // pay with WETH9
 68 |     |             IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay
 69 |     |             IWETH9(WETH9).transfer(recipient, value);
 70 |     |         } else if (payer == address(this)) {
 71 |     |             // pay with tokens already in the contract (for the exact input multihop case)
 72 |     |             TransferHelper.safeTransfer(token, recipient, value);
 73 |     |         } else {
 74 |     |             // pull payment
 75 |     |             TransferHelper.safeTransferFrom(token, payer, recipient, value);
 76 |     |         }
 77 |     |     }
 78 |     | }
 79 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/base/PeripheryPaymentsWithFee.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "@openzeppelin/contracts-v4/token/ERC721/ERC721.sol";
  5 |     | import "../libraries/LowGasSafeMath.sol";
  6 |     | 
  7 |     | import "./PeripheryPayments.sol";
  8 |     | import "../interfaces/IPeripheryPaymentsWithFee.sol";
  9 |     | 
 10 |     | import "../interfaces/external/IWETH9.sol";
 11 |     | import "../libraries/TransferHelper.sol";
 12 |     | 
 13 |     | abstract contract PeripheryPaymentsWithFee is
 14 |     |     PeripheryPayments,
 15 |     |     IPeripheryPaymentsWithFee
 16 |     | {
 17 |     |     using LowGasSafeMath for uint256;
 18 |     | 
 19 |     |     /// @inheritdoc IPeripheryPaymentsWithFee
 20 |     |     function unwrapWETH9WithFee(
 21 |     |         uint256 amountMinimum,
 22 |     |         address recipient,
 23 |     |         uint256 feeBips,
 24 |     |         address feeRecipient
 25 |     |     ) public payable override {
 26 |     |         require(feeBips > 0 && feeBips <= 100);
 27 |     | 
 28 |     |         uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));
 29 |     |         require(balanceWETH9 >= amountMinimum, "Insufficient WETH9");
 30 |     | 
 31 |     |         if (balanceWETH9 > 0) {
 32 |     |             IWETH9(WETH9).withdraw(balanceWETH9);
 33 |     |             uint256 feeAmount = balanceWETH9.mul(feeBips) / 10_000;
 34 |     |             if (feeAmount > 0)
 35 |     |                 TransferHelper.safeTransferETH(feeRecipient, feeAmount);
 36 |     |             TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount);
 37 |     |         }
 38 |     |     }
 39 |     | 
 40 |     |     /// @inheritdoc IPeripheryPaymentsWithFee
 41 |     |     function sweepTokenWithFee(
 42 |     |         address token,
 43 |     |         uint256 amountMinimum,
 44 |     |         address recipient,
 45 |     |         uint256 feeBips,
 46 |     |         address feeRecipient
 47 |     |     ) public payable override {
 48 |     |         require(feeBips > 0 && feeBips <= 100);
 49 |     | 
 50 |     |         uint256 balanceToken = IERC20(token).balanceOf(address(this));
 51 |     |         require(balanceToken >= amountMinimum, "Insufficient token");
 52 |     | 
 53 |     |         if (balanceToken > 0) {
 54 |     |             uint256 feeAmount = balanceToken.mul(feeBips) / 10_000;
 55 |     |             if (feeAmount > 0)
 56 |     |                 TransferHelper.safeTransfer(token, feeRecipient, feeAmount);
 57 |     |             TransferHelper.safeTransfer(
 58 |     |                 token,
 59 |     |                 recipient,
 60 |     |                 balanceToken - feeAmount
 61 |     |             );
 62 |     |         }
 63 |     |     }
 64 |     | }
 65 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/base/PeripheryValidation.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./BlockTimestamp.sol";
  5 |     | 
  6 |     | abstract contract PeripheryValidation is BlockTimestamp {
  7 |     |     modifier checkDeadline(uint256 deadline) {
  8 |     |         require(_blockTimestamp() <= deadline, "Transaction too old");
  9 |     |         _;
 10 |     |     }
 11 |     | }
 12 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/base/PoolInitializer.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import 'v3-core/interfaces/IUniswapV3Factory.sol';
  5 |     | import 'v3-core/interfaces/IUniswapV3Pool.sol';
  6 |     | 
  7 |     | import './PeripheryImmutableState.sol';
  8 |     | import '../interfaces/IPoolInitializer.sol';
  9 |     | 
 10 |     | /// @title Creates and initializes V3 Pools
 11 |     | abstract contract PoolInitializer is IPoolInitializer, PeripheryImmutableState {
 12 |     |     /// @inheritdoc IPoolInitializer
 13 |     |     function createAndInitializePoolIfNecessary(
 14 |     |         address token0,
 15 |     |         address token1,
 16 |     |         uint24 fee,
 17 |     |         uint160 sqrtPriceX96
 18 |     |     ) external payable override returns (address pool) {
 19 |     |         require(token0 < token1);
 20 |     |         pool = IUniswapV3Factory(factory).getPool(token0, token1, fee);
 21 |     | 
 22 |     |         if (pool == address(0)) {
 23 |     |             pool = IUniswapV3Factory(factory).createPool(token0, token1, fee);
 24 |     |             IUniswapV3Pool(pool).initialize(sqrtPriceX96);
 25 |     |         } else {
 26 |     |             (uint160 sqrtPriceX96Existing, , , , , , ) = IUniswapV3Pool(pool).slot0();
 27 |     |             if (sqrtPriceX96Existing == 0) {
 28 |     |                 IUniswapV3Pool(pool).initialize(sqrtPriceX96);
 29 |     |             }
 30 |     |         }
 31 |     |     }
 32 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/base/SelfPermit.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "@openzeppelin/contracts-v4/token/ERC20/IERC20.sol";
  5 |     | import "@openzeppelin/contracts-v4/token/ERC20/extensions/IERC20Permit.sol";
  6 |     | 
  7 |     | import "../interfaces/ISelfPermit.sol";
  8 |     | import "../interfaces/external/IERC20PermitAllowed.sol";
  9 |     | 
 10 |     | /// @title Self Permit
 11 |     | /// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route
 12 |     | /// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function
 13 |     | /// that requires an approval in a single transaction.
 14 |     | abstract contract SelfPermit is ISelfPermit {
 15 |     |     /// @inheritdoc ISelfPermit
 16 |     |     function selfPermit(
 17 |     |         address token,
 18 |     |         uint256 value,
 19 |     |         uint256 deadline,
 20 |     |         uint8 v,
 21 |     |         bytes32 r,
 22 |     |         bytes32 s
 23 |     |     ) public payable override {
 24 |     |         IERC20Permit(token).permit(
 25 |     |             msg.sender,
 26 |     |             address(this),
 27 |     |             value,
 28 |     |             deadline,
 29 |     |             v,
 30 |     |             r,
 31 |     |             s
 32 |     |         );
 33 |     |     }
 34 |     | 
 35 |     |     /// @inheritdoc ISelfPermit
 36 |     |     function selfPermitIfNecessary(
 37 |     |         address token,
 38 |     |         uint256 value,
 39 |     |         uint256 deadline,
 40 |     |         uint8 v,
 41 |     |         bytes32 r,
 42 |     |         bytes32 s
 43 |     |     ) external payable override {
 44 |     |         if (IERC20(token).allowance(msg.sender, address(this)) < value) {
 45 |     |             selfPermit(token, value, deadline, v, r, s);
 46 |     |         }
 47 |     |     }
 48 |     | 
 49 |     |     /// @inheritdoc ISelfPermit
 50 |     |     function selfPermitAllowed(
 51 |     |         address token,
 52 |     |         uint256 nonce,
 53 |     |         uint256 expiry,
 54 |     |         uint8 v,
 55 |     |         bytes32 r,
 56 |     |         bytes32 s
 57 |     |     ) public payable override {
 58 |     |         IERC20PermitAllowed(token).permit(
 59 |     |             msg.sender,
 60 |     |             address(this),
 61 |     |             nonce,
 62 |     |             expiry,
 63 |     |             true,
 64 |     |             v,
 65 |     |             r,
 66 |     |             s
 67 |     |         );
 68 |     |     }
 69 |     | 
 70 |     |     /// @inheritdoc ISelfPermit
 71 |     |     function selfPermitAllowedIfNecessary(
 72 |     |         address token,
 73 |     |         uint256 nonce,
 74 |     |         uint256 expiry,
 75 |     |         uint8 v,
 76 |     |         bytes32 r,
 77 |     |         bytes32 s
 78 |     |     ) external payable override {
 79 |     |         if (
 80 |     |             IERC20(token).allowance(msg.sender, address(this)) <
 81 |     |             type(uint256).max
 82 |     |         ) {
 83 |     |             selfPermitAllowed(token, nonce, expiry, v, r, s);
 84 |     |         }
 85 |     |     }
 86 |     | }
 87 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/IERC721Permit.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | import "@openzeppelin/contracts-v4/token/ERC721/IERC721.sol";
  5 |     | 
  6 |     | /// @title ERC721 with permit
  7 |     | /// @notice Extension to ERC721 that includes a permit function for signature based approvals
  8 |     | interface IERC721Permit is IERC721 {
  9 |     |     /// @notice The permit typehash used in the permit signature
 10 |     |     /// @return The typehash for the permit
 11 |     |     function PERMIT_TYPEHASH() external pure returns (bytes32);
 12 |     | 
 13 |     |     /// @notice The domain separator used in the permit signature
 14 |     |     /// @return The domain seperator used in encoding of permit signature
 15 |     |     function DOMAIN_SEPARATOR() external view returns (bytes32);
 16 |     | 
 17 |     |     /// @notice Approve of a specific token ID for spending by spender via signature
 18 |     |     /// @param spender The account that is being approved
 19 |     |     /// @param tokenId The ID of the token that is being approved for spending
 20 |     |     /// @param deadline The deadline timestamp by which the call must be mined for the approve to work
 21 |     |     /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`
 22 |     |     /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`
 23 |     |     /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`
 24 |     |     function permit(
 25 |     |         address spender,
 26 |     |         uint256 tokenId,
 27 |     |         uint256 deadline,
 28 |     |         uint8 v,
 29 |     |         bytes32 r,
 30 |     |         bytes32 s
 31 |     |     ) external payable;
 32 |     | }
 33 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/IMulticall.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | pragma abicoder v2;
  4 |     | 
  5 |     | /// @title Multicall interface
  6 |     | /// @notice Enables calling multiple methods in a single call to the contract
  7 |     | interface IMulticall {
  8 |     |     /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed
  9 |     |     /// @dev The `msg.value` should not be trusted for any method callable from multicall.
 10 |     |     /// @param data The encoded function data for each of the calls to make to this contract
 11 |     |     /// @return results The results from each of the calls passed in via data
 12 |     |     function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);
 13 |     | }
 14 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/INonfungiblePositionManager.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.8.0;
   3 |     | pragma abicoder v2;
   4 |     | 
   5 |     | import "@openzeppelin/contracts-v4/token/ERC721/extensions/IERC721Metadata.sol";
   6 |     | import "@openzeppelin/contracts-v4/token/ERC721/extensions/IERC721Enumerable.sol";
   7 |     | 
   8 |     | import "./IPoolInitializer.sol";
   9 |     | import "./IERC721Permit.sol";
  10 |     | import "./IPeripheryPayments.sol";
  11 |     | import "./IPeripheryImmutableState.sol";
  12 |     | import "../libraries/PoolAddress.sol";
  13 |     | 
  14 |     | /// @title Non-fungible token for positions
  15 |     | /// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred
  16 |     | /// and authorized.
  17 |     | interface INonfungiblePositionManager is
  18 |     |     IPoolInitializer,
  19 |     |     IPeripheryPayments,
  20 |     |     IPeripheryImmutableState,
  21 |     |     IERC721Metadata,
  22 |     |     IERC721Enumerable,
  23 |     |     IERC721Permit
  24 |     | {
  25 |     |     /// @notice Emitted when liquidity is increased for a position NFT
  26 |     |     /// @dev Also emitted when a token is minted
  27 |     |     /// @param tokenId The ID of the token for which liquidity was increased
  28 |     |     /// @param liquidity The amount by which liquidity for the NFT position was increased
  29 |     |     /// @param amount0 The amount of token0 that was paid for the increase in liquidity
  30 |     |     /// @param amount1 The amount of token1 that was paid for the increase in liquidity
  31 |     |     event IncreaseLiquidity(
  32 |     |         uint256 indexed tokenId,
  33 |     |         uint128 liquidity,
  34 |     |         uint256 amount0,
  35 |     |         uint256 amount1
  36 |     |     );
  37 |     |     /// @notice Emitted when liquidity is decreased for a position NFT
  38 |     |     /// @param tokenId The ID of the token for which liquidity was decreased
  39 |     |     /// @param liquidity The amount by which liquidity for the NFT position was decreased
  40 |     |     /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity
  41 |     |     /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity
  42 |     |     event DecreaseLiquidity(
  43 |     |         uint256 indexed tokenId,
  44 |     |         uint128 liquidity,
  45 |     |         uint256 amount0,
  46 |     |         uint256 amount1
  47 |     |     );
  48 |     |     /// @notice Emitted when tokens are collected for a position NFT
  49 |     |     /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior
  50 |     |     /// @param tokenId The ID of the token for which underlying tokens were collected
  51 |     |     /// @param recipient The address of the account that received the collected tokens
  52 |     |     /// @param amount0 The amount of token0 owed to the position that was collected
  53 |     |     /// @param amount1 The amount of token1 owed to the position that was collected
  54 |     |     event Collect(
  55 |     |         uint256 indexed tokenId,
  56 |     |         address recipient,
  57 |     |         uint256 amount0,
  58 |     |         uint256 amount1
  59 |     |     );
  60 |     | 
  61 |     |     /// @notice Returns the position information associated with a given token ID.
  62 |     |     /// @dev Throws if the token ID is not valid.
  63 |     |     /// @param tokenId The ID of the token that represents the position
  64 |     |     /// @return nonce The nonce for permits
  65 |     |     /// @return operator The address that is approved for spending
  66 |     |     /// @return token0 The address of the token0 for a specific pool
  67 |     |     /// @return token1 The address of the token1 for a specific pool
  68 |     |     /// @return fee The fee associated with the pool
  69 |     |     /// @return tickLower The lower end of the tick range for the position
  70 |     |     /// @return tickUpper The higher end of the tick range for the position
  71 |     |     /// @return liquidity The liquidity of the position
  72 |     |     /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position
  73 |     |     /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position
  74 |     |     /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation
  75 |     |     /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation
  76 |     |     function positions(
  77 |     |         uint256 tokenId
  78 |     |     )
  79 |     |         external
  80 |     |         view
  81 |     |         returns (
  82 |     |             uint96 nonce,
  83 |     |             address operator,
  84 |     |             address token0,
  85 |     |             address token1,
  86 |     |             uint24 fee,
  87 |     |             int24 tickLower,
  88 |     |             int24 tickUpper,
  89 |     |             uint128 liquidity,
  90 |     |             uint256 feeGrowthInside0LastX128,
  91 |     |             uint256 feeGrowthInside1LastX128,
  92 |     |             uint128 tokensOwed0,
  93 |     |             uint128 tokensOwed1
  94 |     |         );
  95 |     | 
  96 |     |     struct MintParams {
  97 |     |         address token0;
  98 |     |         address token1;
  99 |     |         uint24 fee;
 100 |     |         int24 tickLower;
 101 |     |         int24 tickUpper;
 102 |     |         uint256 amount0Desired;
 103 |     |         uint256 amount1Desired;
 104 |     |         uint256 amount0Min;
 105 |     |         uint256 amount1Min;
 106 |     |         address recipient;
 107 |     |         uint256 deadline;
 108 |     |     }
 109 |     | 
 110 |     |     /// @notice Creates a new position wrapped in a NFT
 111 |     |     /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized
 112 |     |     /// a method does not exist, i.e. the pool is assumed to be initialized.
 113 |     |     /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata
 114 |     |     /// @return tokenId The ID of the token that represents the minted position
 115 |     |     /// @return liquidity The amount of liquidity for this position
 116 |     |     /// @return amount0 The amount of token0
 117 |     |     /// @return amount1 The amount of token1
 118 |     |     function mint(
 119 |     |         MintParams calldata params
 120 |     |     )
 121 |     |         external
 122 |     |         payable
 123 |     |         returns (
 124 |     |             uint256 tokenId,
 125 |     |             uint128 liquidity,
 126 |     |             uint256 amount0,
 127 |     |             uint256 amount1
 128 |     |         );
 129 |     | 
 130 |     |     struct IncreaseLiquidityParams {
 131 |     |         uint256 tokenId;
 132 |     |         uint256 amount0Desired;
 133 |     |         uint256 amount1Desired;
 134 |     |         uint256 amount0Min;
 135 |     |         uint256 amount1Min;
 136 |     |         uint256 deadline;
 137 |     |     }
 138 |     | 
 139 |     |     /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`
 140 |     |     /// @param params tokenId The ID of the token for which liquidity is being increased,
 141 |     |     /// amount0Desired The desired amount of token0 to be spent,
 142 |     |     /// amount1Desired The desired amount of token1 to be spent,
 143 |     |     /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,
 144 |     |     /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,
 145 |     |     /// deadline The time by which the transaction must be included to effect the change
 146 |     |     /// @return liquidity The new liquidity amount as a result of the increase
 147 |     |     /// @return amount0 The amount of token0 to acheive resulting liquidity
 148 |     |     /// @return amount1 The amount of token1 to acheive resulting liquidity
 149 |     |     function increaseLiquidity(
 150 |     |         IncreaseLiquidityParams calldata params
 151 |     |     )
 152 |     |         external
 153 |     |         payable
 154 |     |         returns (uint128 liquidity, uint256 amount0, uint256 amount1);
 155 |     | 
 156 |     |     struct DecreaseLiquidityParams {
 157 |     |         uint256 tokenId;
 158 |     |         uint128 liquidity;
 159 |     |         uint256 amount0Min;
 160 |     |         uint256 amount1Min;
 161 |     |         uint256 deadline;
 162 |     |     }
 163 |     | 
 164 |     |     /// @notice Decreases the amount of liquidity in a position and accounts it to the position
 165 |     |     /// @param params tokenId The ID of the token for which liquidity is being decreased,
 166 |     |     /// amount The amount by which liquidity will be decreased,
 167 |     |     /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,
 168 |     |     /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,
 169 |     |     /// deadline The time by which the transaction must be included to effect the change
 170 |     |     /// @return amount0 The amount of token0 accounted to the position's tokens owed
 171 |     |     /// @return amount1 The amount of token1 accounted to the position's tokens owed
 172 |     |     function decreaseLiquidity(
 173 |     |         DecreaseLiquidityParams calldata params
 174 |     |     ) external payable returns (uint256 amount0, uint256 amount1);
 175 |     | 
 176 |     |     struct CollectParams {
 177 |     |         uint256 tokenId;
 178 |     |         address recipient;
 179 |     |         uint128 amount0Max;
 180 |     |         uint128 amount1Max;
 181 |     |     }
 182 |     | 
 183 |     |     /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient
 184 |     |     /// @param params tokenId The ID of the NFT for which tokens are being collected,
 185 |     |     /// recipient The account that should receive the tokens,
 186 |     |     /// amount0Max The maximum amount of token0 to collect,
 187 |     |     /// amount1Max The maximum amount of token1 to collect
 188 |     |     /// @return amount0 The amount of fees collected in token0
 189 |     |     /// @return amount1 The amount of fees collected in token1
 190 |     |     function collect(
 191 |     |         CollectParams calldata params
 192 |     |     ) external payable returns (uint256 amount0, uint256 amount1);
 193 |     | 
 194 |     |     /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens
 195 |     |     /// must be collected first.
 196 |     |     /// @param tokenId The ID of the token that is being burned
 197 |     |     function burn(uint256 tokenId) external payable;
 198 |     | }
 199 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/INonfungibleTokenPositionDescriptor.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | import './INonfungiblePositionManager.sol';
  5 |     | 
  6 |     | /// @title Describes position NFT tokens via URI
  7 |     | interface INonfungibleTokenPositionDescriptor {
  8 |     |     /// @notice Produces the URI describing a particular token ID for a position manager
  9 |     |     /// @dev Note this URI may be a data: URI with the JSON contents directly inlined
 10 |     |     /// @param positionManager The position manager for which to describe the token
 11 |     |     /// @param tokenId The ID of the token for which to produce a description, which may not be valid
 12 |     |     /// @return The URI of the ERC721-compliant metadata
 13 |     |     function tokenURI(INonfungiblePositionManager positionManager, uint256 tokenId)
 14 |     |         external
 15 |     |         view
 16 |     |         returns (string memory);
 17 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/IPeripheryImmutableState.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | /// @title Immutable state
  5 |     | /// @notice Functions that return immutable state of the router
  6 |     | interface IPeripheryImmutableState {
  7 |     |     /// @return Returns the address of the Uniswap V3 factory
  8 |     |     function factory() external view returns (address);
  9 |     | 
 10 |     |     /// @return Returns the address of WETH9
 11 |     |     function WETH9() external view returns (address);
 12 |     | }
 13 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/IPeripheryPayments.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | /// @title Periphery Payments
  5 |     | /// @notice Functions to ease deposits and withdrawals of ETH
  6 |     | interface IPeripheryPayments {
  7 |     |     /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.
  8 |     |     /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.
  9 |     |     /// @param amountMinimum The minimum amount of WETH9 to unwrap
 10 |     |     /// @param recipient The address receiving ETH
 11 |     |     function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;
 12 |     | 
 13 |     |     /// @notice Refunds any ETH balance held by this contract to the `msg.sender`
 14 |     |     /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps
 15 |     |     /// that use ether for the input amount
 16 |     |     function refundETH() external payable;
 17 |     | 
 18 |     |     /// @notice Transfers the full amount of a token held by this contract to recipient
 19 |     |     /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users
 20 |     |     /// @param token The contract address of the token which will be transferred to `recipient`
 21 |     |     /// @param amountMinimum The minimum amount of token required for a transfer
 22 |     |     /// @param recipient The destination address of the token
 23 |     |     function sweepToken(address token, uint256 amountMinimum, address recipient) external payable;
 24 |     | }
 25 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/IPeripheryPaymentsWithFee.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./IPeripheryPayments.sol";
  5 |     | 
  6 |     | /// @title Periphery Payments
  7 |     | /// @notice Functions to ease deposits and withdrawals of ETH
  8 |     | interface IPeripheryPaymentsWithFee is IPeripheryPayments {
  9 |     |     /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between
 10 |     |     /// 0 (exclusive), and 1 (inclusive) going to feeRecipient
 11 |     |     /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.
 12 |     |     function unwrapWETH9WithFee(
 13 |     |         uint256 amountMinimum,
 14 |     |         address recipient,
 15 |     |         uint256 feeBips,
 16 |     |         address feeRecipient
 17 |     |     ) external payable;
 18 |     | 
 19 |     |     /// @notice Transfers the full amount of a token held by this contract to recipient, with a percentage between
 20 |     |     /// 0 (exclusive) and 1 (inclusive) going to feeRecipient
 21 |     |     /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users
 22 |     |     function sweepTokenWithFee(
 23 |     |         address token,
 24 |     |         uint256 amountMinimum,
 25 |     |         address recipient,
 26 |     |         uint256 feeBips,
 27 |     |         address feeRecipient
 28 |     |     ) external payable;
 29 |     | }
 30 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/IPoolInitializer.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | pragma abicoder v2;
  4 |     | 
  5 |     | /// @title Creates and initializes V3 Pools
  6 |     | /// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that
  7 |     | /// require the pool to exist.
  8 |     | interface IPoolInitializer {
  9 |     |     /// @notice Creates a new pool if it does not exist, then initializes if not initialized
 10 |     |     /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool
 11 |     |     /// @param token0 The contract address of token0 of the pool
 12 |     |     /// @param token1 The contract address of token1 of the pool
 13 |     |     /// @param fee The fee amount of the v3 pool for the specified token pair
 14 |     |     /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value
 15 |     |     /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary
 16 |     |     function createAndInitializePoolIfNecessary(
 17 |     |         address token0,
 18 |     |         address token1,
 19 |     |         uint24 fee,
 20 |     |         uint160 sqrtPriceX96
 21 |     |     ) external payable returns (address pool);
 22 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/IQuoter.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | pragma abicoder v2;
  4 |     | 
  5 |     | /// @title Quoter Interface
  6 |     | /// @notice Supports quoting the calculated amounts from exact input or exact output swaps
  7 |     | /// @dev These functions are not marked view because they rely on calling non-view functions and reverting
  8 |     | /// to compute the result. They are also not gas efficient and should not be called on-chain.
  9 |     | interface IQuoter {
 10 |     |     /// @notice Returns the amount out received for a given exact input swap without executing the swap
 11 |     |     /// @param path The path of the swap, i.e. each token pair and the pool fee
 12 |     |     /// @param amountIn The amount of the first token to swap
 13 |     |     /// @return amountOut The amount of the last token that would be received
 14 |     |     function quoteExactInput(
 15 |     |         bytes memory path,
 16 |     |         uint256 amountIn
 17 |     |     ) external returns (uint256 amountOut);
 18 |     | 
 19 |     |     /// @notice Returns the amount out received for a given exact input but for a swap of a single pool
 20 |     |     /// @param tokenIn The token being swapped in
 21 |     |     /// @param tokenOut The token being swapped out
 22 |     |     /// @param fee The fee of the token pool to consider for the pair
 23 |     |     /// @param amountIn The desired input amount
 24 |     |     /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap
 25 |     |     /// @return amountOut The amount of `tokenOut` that would be received
 26 |     |     function quoteExactInputSingle(
 27 |     |         address tokenIn,
 28 |     |         address tokenOut,
 29 |     |         uint24 fee,
 30 |     |         uint256 amountIn,
 31 |     |         uint160 sqrtPriceLimitX96
 32 |     |     ) external returns (uint256 amountOut);
 33 |     | 
 34 |     |     /// @notice Returns the amount in required for a given exact output swap without executing the swap
 35 |     |     /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order
 36 |     |     /// @param amountOut The amount of the last token to receive
 37 |     |     /// @return amountIn The amount of first token required to be paid
 38 |     |     function quoteExactOutput(
 39 |     |         bytes memory path,
 40 |     |         uint256 amountOut
 41 |     |     ) external returns (uint256 amountIn);
 42 |     | 
 43 |     |     /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool
 44 |     |     /// @param tokenIn The token being swapped in
 45 |     |     /// @param tokenOut The token being swapped out
 46 |     |     /// @param fee The fee of the token pool to consider for the pair
 47 |     |     /// @param amountOut The desired output amount
 48 |     |     /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap
 49 |     |     /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`
 50 |     |     function quoteExactOutputSingle(
 51 |     |         address tokenIn,
 52 |     |         address tokenOut,
 53 |     |         uint24 fee,
 54 |     |         uint256 amountOut,
 55 |     |         uint160 sqrtPriceLimitX96
 56 |     |     ) external returns (uint256 amountIn);
 57 |     | }
 58 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/ISelfPermit.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | /// @title Self Permit
  5 |     | /// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route
  6 |     | interface ISelfPermit {
  7 |     |     /// @notice Permits this contract to spend a given token from `msg.sender`
  8 |     |     /// @dev The `owner` is always msg.sender and the `spender` is always address(this).
  9 |     |     /// @param token The address of the token spent
 10 |     |     /// @param value The amount that can be spent of token
 11 |     |     /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp
 12 |     |     /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`
 13 |     |     /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`
 14 |     |     /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`
 15 |     |     function selfPermit(
 16 |     |         address token,
 17 |     |         uint256 value,
 18 |     |         uint256 deadline,
 19 |     |         uint8 v,
 20 |     |         bytes32 r,
 21 |     |         bytes32 s
 22 |     |     ) external payable;
 23 |     | 
 24 |     |     /// @notice Permits this contract to spend a given token from `msg.sender`
 25 |     |     /// @dev The `owner` is always msg.sender and the `spender` is always address(this).
 26 |     |     /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit
 27 |     |     /// @param token The address of the token spent
 28 |     |     /// @param value The amount that can be spent of token
 29 |     |     /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp
 30 |     |     /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`
 31 |     |     /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`
 32 |     |     /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`
 33 |     |     function selfPermitIfNecessary(
 34 |     |         address token,
 35 |     |         uint256 value,
 36 |     |         uint256 deadline,
 37 |     |         uint8 v,
 38 |     |         bytes32 r,
 39 |     |         bytes32 s
 40 |     |     ) external payable;
 41 |     | 
 42 |     |     /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter
 43 |     |     /// @dev The `owner` is always msg.sender and the `spender` is always address(this)
 44 |     |     /// @param token The address of the token spent
 45 |     |     /// @param nonce The current nonce of the owner
 46 |     |     /// @param expiry The timestamp at which the permit is no longer valid
 47 |     |     /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`
 48 |     |     /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`
 49 |     |     /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`
 50 |     |     function selfPermitAllowed(
 51 |     |         address token,
 52 |     |         uint256 nonce,
 53 |     |         uint256 expiry,
 54 |     |         uint8 v,
 55 |     |         bytes32 r,
 56 |     |         bytes32 s
 57 |     |     ) external payable;
 58 |     | 
 59 |     |     /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter
 60 |     |     /// @dev The `owner` is always msg.sender and the `spender` is always address(this)
 61 |     |     /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.
 62 |     |     /// @param token The address of the token spent
 63 |     |     /// @param nonce The current nonce of the owner
 64 |     |     /// @param expiry The timestamp at which the permit is no longer valid
 65 |     |     /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`
 66 |     |     /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`
 67 |     |     /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`
 68 |     |     function selfPermitAllowedIfNecessary(
 69 |     |         address token,
 70 |     |         uint256 nonce,
 71 |     |         uint256 expiry,
 72 |     |         uint8 v,
 73 |     |         bytes32 r,
 74 |     |         bytes32 s
 75 |     |     ) external payable;
 76 |     | }
 77 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/ISwapRouter.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | pragma abicoder v2;
  4 |     | 
  5 |     | import "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol";
  6 |     | 
  7 |     | /// @title Router token swapping functionality
  8 |     | /// @notice Functions for swapping tokens via Uniswap V3
  9 |     | interface ISwapRouter is IUniswapV3SwapCallback {
 10 |     |     struct ExactInputSingleParams {
 11 |     |         address tokenIn;
 12 |     |         address tokenOut;
 13 |     |         uint24 fee;
 14 |     |         address recipient;
 15 |     |         uint256 deadline;
 16 |     |         uint256 amountIn;
 17 |     |         uint256 amountOutMinimum;
 18 |     |         uint160 sqrtPriceLimitX96;
 19 |     |     }
 20 |     | 
 21 |     |     /// @notice Swaps `amountIn` of one token for as much as possible of another token
 22 |     |     /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata
 23 |     |     /// @return amountOut The amount of the received token
 24 |     |     function exactInputSingle(ExactInputSingleParams calldata params)
 25 |     |         external
 26 |     |         payable
 27 |     |         returns (uint256 amountOut);
 28 |     | 
 29 |     |     struct ExactInputParams {
 30 |     |         bytes path;
 31 |     |         address recipient;
 32 |     |         uint256 deadline;
 33 |     |         uint256 amountIn;
 34 |     |         uint256 amountOutMinimum;
 35 |     |     }
 36 |     | 
 37 |     |     /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path
 38 |     |     /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata
 39 |     |     /// @return amountOut The amount of the received token
 40 |     |     function exactInput(ExactInputParams calldata params)
 41 |     |         external
 42 |     |         payable
 43 |     |         returns (uint256 amountOut);
 44 |     | 
 45 |     |     struct ExactOutputSingleParams {
 46 |     |         address tokenIn;
 47 |     |         address tokenOut;
 48 |     |         uint24 fee;
 49 |     |         address recipient;
 50 |     |         uint256 deadline;
 51 |     |         uint256 amountOut;
 52 |     |         uint256 amountInMaximum;
 53 |     |         uint160 sqrtPriceLimitX96;
 54 |     |     }
 55 |     | 
 56 |     |     /// @notice Swaps as little as possible of one token for `amountOut` of another token
 57 |     |     /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata
 58 |     |     /// @return amountIn The amount of the input token
 59 |     |     function exactOutputSingle(ExactOutputSingleParams calldata params)
 60 |     |         external
 61 |     |         payable
 62 |     |         returns (uint256 amountIn);
 63 |     | 
 64 |     |     struct ExactOutputParams {
 65 |     |         bytes path;
 66 |     |         address recipient;
 67 |     |         uint256 deadline;
 68 |     |         uint256 amountOut;
 69 |     |         uint256 amountInMaximum;
 70 |     |     }
 71 |     | 
 72 |     |     /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)
 73 |     |     /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata
 74 |     |     /// @return amountIn The amount of the input token
 75 |     |     function exactOutput(ExactOutputParams calldata params)
 76 |     |         external
 77 |     |         payable
 78 |     |         returns (uint256 amountIn);
 79 |     | }
 80 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/external/IERC1271.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Interface for verifying contract-based account signatures
  5 |     | /// @notice Interface that verifies provided signature for the data
  6 |     | /// @dev Interface defined by EIP-1271
  7 |     | interface IERC1271 {
  8 |     |     /// @notice Returns whether the provided signature is valid for the provided data
  9 |     |     /// @dev MUST return the bytes4 magic value 0x1626ba7e when function passes.
 10 |     |     /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).
 11 |     |     /// MUST allow external calls.
 12 |     |     /// @param hash Hash of the data to be signed
 13 |     |     /// @param signature Signature byte array associated with _data
 14 |     |     /// @return magicValue The bytes4 magic value 0x1626ba7e
 15 |     |     function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);
 16 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/external/IERC20PermitAllowed.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | /// @title Interface for permit
  5 |     | /// @notice Interface used by DAI/CHAI for permit
  6 |     | interface IERC20PermitAllowed {
  7 |     |     /// @notice Approve the spender to spend some tokens via the holder signature
  8 |     |     /// @dev This is the permit interface used by DAI and CHAI
  9 |     |     /// @param holder The address of the token holder, the token owner
 10 |     |     /// @param spender The address of the token spender
 11 |     |     /// @param nonce The holder's nonce, increases at each call to permit
 12 |     |     /// @param expiry The timestamp at which the permit is no longer valid
 13 |     |     /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0
 14 |     |     /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`
 15 |     |     /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`
 16 |     |     /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`
 17 |     |     function permit(
 18 |     |         address holder,
 19 |     |         address spender,
 20 |     |         uint256 nonce,
 21 |     |         uint256 expiry,
 22 |     |         bool allowed,
 23 |     |         uint8 v,
 24 |     |         bytes32 r,
 25 |     |         bytes32 s
 26 |     |     ) external;
 27 |     | }
 28 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/interfaces/external/IWETH9.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "@openzeppelin/contracts-v4/token/ERC20/IERC20.sol";
  5 |     | 
  6 |     | /// @title Interface for WETH9
  7 |     | interface IWETH9 is IERC20 {
  8 |     |     /// @notice Deposit ether to get wrapped ether
  9 |     |     function deposit() external payable;
 10 |     | 
 11 |     |     /// @notice Withdraw wrapped ether to get ether
 12 |     |     function withdraw(uint256) external;
 13 |     | }
 14 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/lens/Quoter.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity ^0.8.0;
   3 |     | pragma abicoder v2;
   4 |     | 
   5 |     | import "v3-core/libraries/SafeCast.sol";
   6 |     | import "v3-core/libraries/TickMath.sol";
   7 |     | import "v3-core/interfaces/IUniswapV3Pool.sol";
   8 |     | import "v3-core/interfaces/callback/IUniswapV3SwapCallback.sol";
   9 |     | 
  10 |     | import "../interfaces/IQuoter.sol";
  11 |     | import "../base/PeripheryImmutableState.sol";
  12 |     | import "../libraries/Path.sol";
  13 |     | import "../libraries/PoolAddress.sol";
  14 |     | import "../libraries/CallbackValidation.sol";
  15 |     | 
  16 |     | import {console} from "forge-std/Test.sol";
  17 |     | 
  18 |     | /// @title Provides quotes for swaps
  19 |     | /// @notice Allows getting the expected amount out or amount in for a given swap without executing the swap
  20 |     | /// @dev These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute
  21 |     | /// the swap and check the amounts in the callback.
  22 |     | contract Quoter is IQuoter, IUniswapV3SwapCallback, PeripheryImmutableState {
  23 |     |     using Path for bytes;
  24 |     |     using SafeCast for uint256;
  25 |     | 
  26 |     |     /// @dev Transient storage variable used to check a safety condition in exact output swaps.
  27 |     |     uint256 private amountOutCached;
  28 |     | 
  29 |     |     constructor(
  30 |     |         address _factory,
  31 |     |         address _WETH9
  32 |     |     ) PeripheryImmutableState(_factory, _WETH9) {}
  33 |     | 
  34 |     |     function getPool(
  35 |     |         //@audit hotfix by fuzzer
  36 |     |         address tokenA,
  37 |     |         address tokenB,
  38 |     |         uint24 fee
  39 |     |     ) private view returns (IUniswapV3Pool) {
  40 |     |         address pool = IUniswapV3Factory(factory).getPool(tokenA, tokenB, fee);
  41 |     |         return IUniswapV3Pool(pool);
  42 |     |     }
  43 |     | 
  44 |     |     // function getPool(
  45 |     |     //     address tokenA,
  46 |     |     //     address tokenB,
  47 |     |     //     uint24 fee
  48 |     |     // ) private view returns (IUniswapV3Pool) {
  49 |     |     //     return
  50 |     |     //         IUniswapV3Pool(
  51 |     |     //             PoolAddress.computeAddress(
  52 |     |     //                 factory,
  53 |     |     //                 PoolAddress.getPoolKey(tokenA, tokenB, fee)
  54 |     |     //             )
  55 |     |     //         );
  56 |     |     // }
  57 |     | 
  58 |     |     function uniswapV3SwapCallback(
  59 |     |         int256 amount0Delta,
  60 |     |         int256 amount1Delta,
  61 |     |         bytes memory path
  62 |     |     ) external view override {
  63 |     |         console.log(
  64 |     |             "Quoter::uniswapV3SwapCallback::amount0Delta",
  65 |     |             amount0Delta
  66 |     |         );
  67 |     |         console.log(
  68 |     |             "Quoter::uniswapV3SwapCallback::amount1Delta",
  69 |     |             amount1Delta
  70 |     |         );
  71 |     | 
  72 |     |         require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported
  73 |     |         (address tokenIn, address tokenOut, uint24 fee) = path
  74 |     |             .decodeFirstPool();
  75 |     |         console.log("Quoter::uniswapV3SwapCallback::tokenIn", tokenIn);
  76 |     |         console.log("Quoter::uniswapV3SwapCallback::tokenOut", tokenOut);
  77 |     |         console.log("Quoter::uniswapV3SwapCallback::fee", fee);
  78 |     | 
  79 |     |         CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);
  80 |     | 
  81 |     |         (
  82 |     |             bool isExactInput,
  83 |     |             uint256 amountToPay,
  84 |     |             uint256 amountReceived
  85 |     |         ) = amount0Delta > 0
  86 |     |                 ? (
  87 |     |                     tokenIn < tokenOut,
  88 |     |                     uint256(amount0Delta),
  89 |     |                     uint256(-amount1Delta)
  90 |     |                 )
  91 |     |                 : (
  92 |     |                     tokenOut < tokenIn,
  93 |     |                     uint256(amount1Delta),
  94 |     |                     uint256(-amount0Delta)
  95 |     |                 );
  96 |     | 
  97 |     |         console.log(
  98 |     |             "Quoter::uniswapV3SwapCallback::isExactInput",
  99 |     |             isExactInput
 100 |     |         );
 101 |     |         console.log("Quoter::uniswapV3SwapCallback::amountToPay", amountToPay);
 102 |     |         console.log(
 103 |     |             "Quoter::uniswapV3SwapCallback::amountReceived",
 104 |     |             amountReceived
 105 |     |         );
 106 |     | 
 107 |     |         if (isExactInput) {
 108 |     |             assembly {
 109 |     |                 let ptr := mload(0x40)
 110 |     |                 mstore(ptr, amountReceived)
 111 |     |                 revert(ptr, 32)
 112 |     |             }
 113 |     |         } else {
 114 |     |             // if the cache has been populated, ensure that the full output amount has been received
 115 |     |             if (amountOutCached != 0) {
 116 |     |                 console.log(
 117 |     |                     "Quoter::uniswapV3SwapCallback::amountOutCached",
 118 |     |                     amountOutCached
 119 |     |                 );
 120 |     |                 require(amountReceived == amountOutCached);
 121 |     |             }
 122 |     |             assembly {
 123 |     |                 let ptr := mload(0x40)
 124 |     |                 mstore(ptr, amountToPay)
 125 |     |                 revert(ptr, 32)
 126 |     |             }
 127 |     |         }
 128 |     |     }
 129 |     | 
 130 |     |     /// @inheritdoc IUniswapV3SwapCallback
 131 |     |     // function uniswapV3SwapCallback(
 132 |     |     //     int256 amount0Delta,
 133 |     |     //     int256 amount1Delta,
 134 |     |     //     bytes memory path
 135 |     |     // ) external view override {
 136 |     |     //     require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported
 137 |     |     //     (address tokenIn, address tokenOut, uint24 fee) = path
 138 |     |     //         .decodeFirstPool();
 139 |     |     //     CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);
 140 |     | 
 141 |     |     //     (
 142 |     |     //         bool isExactInput,
 143 |     |     //         uint256 amountToPay,
 144 |     |     //         uint256 amountReceived
 145 |     |     //     ) = amount0Delta > 0
 146 |     |     //             ? (
 147 |     |     //                 tokenIn < tokenOut,
 148 |     |     //                 uint256(amount0Delta),
 149 |     |     //                 uint256(-amount1Delta)
 150 |     |     //             )
 151 |     |     //             : (
 152 |     |     //                 tokenOut < tokenIn,
 153 |     |     //                 uint256(amount1Delta),
 154 |     |     //                 uint256(-amount0Delta)
 155 |     |     //             );
 156 |     |     //     if (isExactInput) {
 157 |     |     //         assembly {
 158 |     |     //             let ptr := mload(0x40)
 159 |     |     //             mstore(ptr, amountReceived)
 160 |     |     //             revert(ptr, 32)
 161 |     |     //         }
 162 |     |     //     } else {
 163 |     |     //         // if the cache has been populated, ensure that the full output amount has been received
 164 |     |     //         if (amountOutCached != 0)
 165 |     |     //             require(amountReceived == amountOutCached);
 166 |     |     //         assembly {
 167 |     |     //             let ptr := mload(0x40)
 168 |     |     //             mstore(ptr, amountToPay)
 169 |     |     //             revert(ptr, 32)
 170 |     |     //         }
 171 |     |     //     }
 172 |     |     // }
 173 |     | 
 174 |     |     /// @dev Parses a revert reason that should contain the numeric quote
 175 |     |     function parseRevertReason(
 176 |     |         bytes memory reason
 177 |     |     ) private pure returns (uint256) {
 178 |     |         if (reason.length != 32) {
 179 |     |             if (reason.length < 68) revert("Unexpected error");
 180 |     |             assembly {
 181 |     |                 reason := add(reason, 0x04)
 182 |     |             }
 183 |     |             revert(abi.decode(reason, (string)));
 184 |     |         }
 185 |     |         return abi.decode(reason, (uint256));
 186 |     |     }
 187 |     | 
 188 |     |     /// @inheritdoc IQuoter
 189 |     |     function quoteExactInputSingle(
 190 |     |         address tokenIn,
 191 |     |         address tokenOut,
 192 |     |         uint24 fee,
 193 |     |         uint256 amountIn,
 194 |     |         uint160 sqrtPriceLimitX96
 195 |     |     ) public override returns (uint256 amountOut) {
 196 |     |         bool zeroForOne = tokenIn < tokenOut;
 197 |     | 
 198 |     |         try
 199 |     |             getPool(tokenIn, tokenOut, fee).swap(
 200 |     |                 address(this), // address(0) might cause issues with some tokens
 201 |     |                 zeroForOne,
 202 |     |                 amountIn.toInt256(),
 203 |     |                 sqrtPriceLimitX96 == 0
 204 |     |                     ? (
 205 |     |                         zeroForOne
 206 |     |                             ? TickMath.MIN_SQRT_RATIO + 1
 207 |     |                             : TickMath.MAX_SQRT_RATIO - 1
 208 |     |                     )
 209 |     |                     : sqrtPriceLimitX96,
 210 |     |                 abi.encodePacked(tokenIn, fee, tokenOut)
 211 |     |             )
 212 |     |         {} catch (bytes memory reason) {
 213 |     |             return parseRevertReason(reason);
 214 |     |         }
 215 |     |     }
 216 |     | 
 217 |     |     /// @inheritdoc IQuoter
 218 |     |     function quoteExactInput(
 219 |     |         bytes memory path,
 220 |     |         uint256 amountIn
 221 |     |     ) external override returns (uint256 amountOut) {
 222 |     |         while (true) {
 223 |     |             bool hasMultiplePools = path.hasMultiplePools();
 224 |     | 
 225 |     |             (address tokenIn, address tokenOut, uint24 fee) = path
 226 |     |                 .decodeFirstPool();
 227 |     | 
 228 |     |             // the outputs of prior swaps become the inputs to subsequent ones
 229 |     |             amountIn = quoteExactInputSingle(
 230 |     |                 tokenIn,
 231 |     |                 tokenOut,
 232 |     |                 fee,
 233 |     |                 amountIn,
 234 |     |                 0
 235 |     |             );
 236 |     | 
 237 |     |             // decide whether to continue or terminate
 238 |     |             if (hasMultiplePools) {
 239 |     |                 path = path.skipToken();
 240 |     |             } else {
 241 |     |                 return amountIn;
 242 |     |             }
 243 |     |         }
 244 |     |     }
 245 |     | 
 246 |     |     /// @inheritdoc IQuoter
 247 |     |     function quoteExactOutputSingle(
 248 |     |         address tokenIn,
 249 |     |         address tokenOut,
 250 |     |         uint24 fee,
 251 |     |         uint256 amountOut,
 252 |     |         uint160 sqrtPriceLimitX96
 253 |     |     ) public override returns (uint256 amountIn) {
 254 |     |         bool zeroForOne = tokenIn < tokenOut;
 255 |     | 
 256 |     |         // if no price limit has been specified, cache the output amount for comparison in the swap callback
 257 |     |         if (sqrtPriceLimitX96 == 0) amountOutCached = amountOut;
 258 |     |         try
 259 |     |             getPool(tokenIn, tokenOut, fee).swap(
 260 |     |                 address(this), // address(0) might cause issues with some tokens
 261 |     |                 zeroForOne,
 262 |     |                 -amountOut.toInt256(),
 263 |     |                 sqrtPriceLimitX96 == 0
 264 |     |                     ? (
 265 |     |                         zeroForOne
 266 |     |                             ? TickMath.MIN_SQRT_RATIO + 1
 267 |     |                             : TickMath.MAX_SQRT_RATIO - 1
 268 |     |                     )
 269 |     |                     : sqrtPriceLimitX96,
 270 |     |                 abi.encodePacked(tokenOut, fee, tokenIn)
 271 |     |             )
 272 |     |         {} catch (bytes memory reason) {
 273 |     |             if (sqrtPriceLimitX96 == 0) delete amountOutCached; // clear cache
 274 |     |             return parseRevertReason(reason);
 275 |     |         }
 276 |     |     }
 277 |     | 
 278 |     |     /// @inheritdoc IQuoter
 279 |     |     function quoteExactOutput(
 280 |     |         bytes memory path,
 281 |     |         uint256 amountOut
 282 |     |     ) external override returns (uint256 amountIn) {
 283 |     |         while (true) {
 284 |     |             bool hasMultiplePools = path.hasMultiplePools();
 285 |     | 
 286 |     |             (address tokenOut, address tokenIn, uint24 fee) = path
 287 |     |                 .decodeFirstPool();
 288 |     | 
 289 |     |             // the inputs of prior swaps become the outputs of subsequent ones
 290 |     |             amountOut = quoteExactOutputSingle(
 291 |     |                 tokenIn,
 292 |     |                 tokenOut,
 293 |     |                 fee,
 294 |     |                 amountOut,
 295 |     |                 0
 296 |     |             );
 297 |     | 
 298 |     |             // decide whether to continue or terminate
 299 |     |             if (hasMultiplePools) {
 300 |     |                 path = path.skipToken();
 301 |     |             } else {
 302 |     |                 return amountOut;
 303 |     |             }
 304 |     |         }
 305 |     |     }
 306 |     | }
 307 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/libraries/BytesLib.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | /*
   3 |     |  * @title Solidity Bytes Arrays Utils
   4 |     |  * @author Gonçalo Sá <goncalo.sa@consensys.net>
   5 |     |  *
   6 |     |  * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.
   7 |     |  *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.
   8 |     |  */
   9 |     | pragma solidity ^0.8.0;
  10 |     | 
  11 |     | library BytesLib {
  12 |     |     function slice(
  13 |     |         bytes memory _bytes,
  14 |     |         uint256 _start,
  15 |     |         uint256 _length
  16 |     |     ) internal pure returns (bytes memory) {
  17 |     |         require(_length + 31 >= _length, "slice_overflow");
  18 |     |         require(_start + _length >= _start, "slice_overflow");
  19 |     |         require(_bytes.length >= _start + _length, "slice_outOfBounds");
  20 |     | 
  21 |     |         bytes memory tempBytes;
  22 |     | 
  23 |     |         assembly {
  24 |     |             switch iszero(_length)
  25 |     |             case 0 {
  26 |     |                 // Get a location of some free memory and store it in tempBytes as
  27 |     |                 // Solidity does for memory variables.
  28 |     |                 tempBytes := mload(0x40)
  29 |     | 
  30 |     |                 // The first word of the slice result is potentially a partial
  31 |     |                 // word read from the original array. To read it, we calculate
  32 |     |                 // the length of that partial word and start copying that many
  33 |     |                 // bytes into the array. The first word we copy will start with
  34 |     |                 // data we don't care about, but the last `lengthmod` bytes will
  35 |     |                 // land at the beginning of the contents of the new array. When
  36 |     |                 // we're done copying, we overwrite the full first word with
  37 |     |                 // the actual length of the slice.
  38 |     |                 let lengthmod := and(_length, 31)
  39 |     | 
  40 |     |                 // The multiplication in the next line is necessary
  41 |     |                 // because when slicing multiples of 32 bytes (lengthmod == 0)
  42 |     |                 // the following copy loop was copying the origin's length
  43 |     |                 // and then ending prematurely not copying everything it should.
  44 |     |                 let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))
  45 |     |                 let end := add(mc, _length)
  46 |     | 
  47 |     |                 for {
  48 |     |                     // The multiplication in the next line has the same exact purpose
  49 |     |                     // as the one above.
  50 |     |                     let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)
  51 |     |                 } lt(mc, end) {
  52 |     |                     mc := add(mc, 0x20)
  53 |     |                     cc := add(cc, 0x20)
  54 |     |                 } { mstore(mc, mload(cc)) }
  55 |     | 
  56 |     |                 mstore(tempBytes, _length)
  57 |     | 
  58 |     |                 //update free-memory pointer
  59 |     |                 //allocating the array padded to 32 bytes like the compiler does now
  60 |     |                 mstore(0x40, and(add(mc, 31), not(31)))
  61 |     |             }
  62 |     |             //if we want a zero-length slice let's just return a zero-length array
  63 |     |             default {
  64 |     |                 tempBytes := mload(0x40)
  65 |     |                 //zero out the 32 bytes slice we are about to return
  66 |     |                 //we need to do it because Solidity does not garbage collect
  67 |     |                 mstore(tempBytes, 0)
  68 |     | 
  69 |     |                 mstore(0x40, add(tempBytes, 0x20))
  70 |     |             }
  71 |     |         }
  72 |     | 
  73 |     |         return tempBytes;
  74 |     |     }
  75 |     | 
  76 |     |     function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {
  77 |     |         require(_start + 20 >= _start, "toAddress_overflow");
  78 |     |         require(_bytes.length >= _start + 20, "toAddress_outOfBounds");
  79 |     |         address tempAddress;
  80 |     | 
  81 |     |         assembly {
  82 |     |             tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)
  83 |     |         }
  84 |     | 
  85 |     |         return tempAddress;
  86 |     |     }
  87 |     | 
  88 |     |     function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {
  89 |     |         require(_start + 3 >= _start, "toUint24_overflow");
  90 |     |         require(_bytes.length >= _start + 3, "toUint24_outOfBounds");
  91 |     |         uint24 tempUint;
  92 |     | 
  93 |     |         assembly {
  94 |     |             tempUint := mload(add(add(_bytes, 0x3), _start))
  95 |     |         }
  96 |     | 
  97 |     |         return tempUint;
  98 |     |     }
  99 |     | }
 100 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/libraries/CallbackValidation.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "v3-core/interfaces/IUniswapV3Pool.sol";
  5 |     | import "v3-core/interfaces/IUniswapV3Factory.sol";
  6 |     | import "./PoolAddress.sol";
  7 |     | 
  8 |     | /// @notice Provides validation for callbacks from Uniswap V3 Pools
  9 |     | library CallbackValidation {
 10 |     |     /// @notice Returns the address of a valid Uniswap V3 Pool
 11 |     |     /// @param factory The contract address of the Uniswap V3 factory
 12 |     |     /// @param tokenA The contract address of either token0 or token1
 13 |     |     /// @param tokenB The contract address of the other token
 14 |     |     /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip
 15 |     |     /// @return pool The V3 pool contract address
 16 |     |     function verifyCallback(
 17 |     |         address factory,
 18 |     |         address tokenA,
 19 |     |         address tokenB,
 20 |     |         uint24 fee
 21 |     |     ) internal view returns (IUniswapV3Pool pool) {
 22 |     |         pool = IUniswapV3Pool(IUniswapV3Factory(factory).getPool(tokenA, tokenB, fee));
 23 |     |         require(msg.sender == address(pool));
 24 |     |     }
 25 |     | 
 26 |     |     /// @notice Returns the address of a valid Uniswap V3 Pool
 27 |     |     /// @param factory The contract address of the Uniswap V3 factory
 28 |     |     /// @param poolKey The identifying key of the V3 pool
 29 |     |     /// @return pool The V3 pool contract address
 30 |     |     function verifyCallback(
 31 |     |         address factory,
 32 |     |         PoolAddress.PoolKey memory poolKey
 33 |     |     ) internal view returns (IUniswapV3Pool pool) {
 34 |     |         pool = IUniswapV3Pool(IUniswapV3Factory(factory).getPool(poolKey.token0, poolKey.token1, poolKey.fee));
 35 |     |         require(msg.sender == address(pool));
 36 |     |     }
 37 |     | }
 38 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/libraries/ChainId.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | /// @title Function for getting the current chain ID
  5 |     | library ChainId {
  6 |     |     /// @dev Gets the current chain ID
  7 |     |     /// @return chainId The current chain ID
  8 |     |     function get() internal view returns (uint256 chainId) {
  9 |     |         assembly {
 10 |     |             chainId := chainid()
 11 |     |         }
 12 |     |     }
 13 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/libraries/LiquidityAmounts.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.8.0;
   3 |     | 
   4 |     | import "v3-core/libraries/FullMath.sol";
   5 |     | import "v3-core/libraries/FixedPoint96.sol";
   6 |     | 
   7 |     | /// @title Liquidity amount functions
   8 |     | /// @notice Provides functions for computing liquidity amounts from token amounts and prices
   9 |     | library LiquidityAmounts {
  10 |     |     /// @notice Downcasts uint256 to uint128
  11 |     |     /// @param x The uint258 to be downcasted
  12 |     |     /// @return y The passed value, downcasted to uint128
  13 |     |     function toUint128(uint256 x) private pure returns (uint128 y) {
  14 |     |         require((y = uint128(x)) == x);
  15 |     |     }
  16 |     | 
  17 |     |     /// @notice Computes the amount of liquidity received for a given amount of token0 and price range
  18 |     |     /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))
  19 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
  20 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
  21 |     |     /// @param amount0 The amount0 being sent in
  22 |     |     /// @return liquidity The amount of returned liquidity
  23 |     |     function getLiquidityForAmount0(
  24 |     |         uint160 sqrtRatioAX96,
  25 |     |         uint160 sqrtRatioBX96,
  26 |     |         uint256 amount0
  27 |     |     ) internal pure returns (uint128 liquidity) {
  28 |     |         if (sqrtRatioAX96 > sqrtRatioBX96)
  29 |     |             (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
  30 |     |         uint256 intermediate = FullMath.mulDiv(
  31 |     |             sqrtRatioAX96,
  32 |     |             sqrtRatioBX96,
  33 |     |             FixedPoint96.Q96
  34 |     |         );
  35 |     |         unchecked {
  36 |     |             return
  37 |     |                 toUint128(
  38 |     |                     FullMath.mulDiv(
  39 |     |                         amount0,
  40 |     |                         intermediate,
  41 |     |                         sqrtRatioBX96 - sqrtRatioAX96
  42 |     |                     )
  43 |     |                 );
  44 |     |         }
  45 |     |     }
  46 |     | 
  47 |     |     /// @notice Computes the amount of liquidity received for a given amount of token1 and price range
  48 |     |     /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).
  49 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
  50 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
  51 |     |     /// @param amount1 The amount1 being sent in
  52 |     |     /// @return liquidity The amount of returned liquidity
  53 |     |     function getLiquidityForAmount1(
  54 |     |         uint160 sqrtRatioAX96,
  55 |     |         uint160 sqrtRatioBX96,
  56 |     |         uint256 amount1
  57 |     |     ) internal pure returns (uint128 liquidity) {
  58 |     |         if (sqrtRatioAX96 > sqrtRatioBX96)
  59 |     |             (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
  60 |     |         unchecked {
  61 |     |             return
  62 |     |                 toUint128(
  63 |     |                     FullMath.mulDiv(
  64 |     |                         amount1,
  65 |     |                         FixedPoint96.Q96,
  66 |     |                         sqrtRatioBX96 - sqrtRatioAX96
  67 |     |                     )
  68 |     |                 );
  69 |     |         }
  70 |     |     }
  71 |     | 
  72 |     |     /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current
  73 |     |     /// pool prices and the prices at the tick boundaries
  74 |     |     /// @param sqrtRatioX96 A sqrt price representing the current pool prices
  75 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
  76 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
  77 |     |     /// @param amount0 The amount of token0 being sent in
  78 |     |     /// @param amount1 The amount of token1 being sent in
  79 |     |     /// @return liquidity The maximum amount of liquidity received
  80 |     |     function getLiquidityForAmounts(
  81 |     |         uint160 sqrtRatioX96,
  82 |     |         uint160 sqrtRatioAX96,
  83 |     |         uint160 sqrtRatioBX96,
  84 |     |         uint256 amount0,
  85 |     |         uint256 amount1
  86 |     |     ) internal pure returns (uint128 liquidity) {
  87 |     |         if (sqrtRatioAX96 > sqrtRatioBX96)
  88 |     |             (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
  89 |     | 
  90 |     |         if (sqrtRatioX96 <= sqrtRatioAX96) {
  91 |     |             liquidity = getLiquidityForAmount0(
  92 |     |                 sqrtRatioAX96,
  93 |     |                 sqrtRatioBX96,
  94 |     |                 amount0
  95 |     |             );
  96 |     |         } else if (sqrtRatioX96 < sqrtRatioBX96) {
  97 |     |             uint128 liquidity0 = getLiquidityForAmount0(
  98 |     |                 sqrtRatioX96,
  99 |     |                 sqrtRatioBX96,
 100 |     |                 amount0
 101 |     |             );
 102 |     |             uint128 liquidity1 = getLiquidityForAmount1(
 103 |     |                 sqrtRatioAX96,
 104 |     |                 sqrtRatioX96,
 105 |     |                 amount1
 106 |     |             );
 107 |     | 
 108 |     |             liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;
 109 |     |         } else {
 110 |     |             liquidity = getLiquidityForAmount1(
 111 |     |                 sqrtRatioAX96,
 112 |     |                 sqrtRatioBX96,
 113 |     |                 amount1
 114 |     |             );
 115 |     |         }
 116 |     |     }
 117 |     | 
 118 |     |     /// @notice Computes the amount of token0 for a given amount of liquidity and a price range
 119 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
 120 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
 121 |     |     /// @param liquidity The liquidity being valued
 122 |     |     /// @return amount0 The amount of token0
 123 |     |     function getAmount0ForLiquidity(
 124 |     |         uint160 sqrtRatioAX96,
 125 |     |         uint160 sqrtRatioBX96,
 126 |     |         uint128 liquidity
 127 |     |     ) internal pure returns (uint256 amount0) {
 128 |     |         unchecked {
 129 |     |             if (sqrtRatioAX96 > sqrtRatioBX96)
 130 |     |                 (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
 131 |     | 
 132 |     |             return
 133 |     |                 FullMath.mulDiv(
 134 |     |                     uint256(liquidity) << FixedPoint96.RESOLUTION,
 135 |     |                     sqrtRatioBX96 - sqrtRatioAX96,
 136 |     |                     sqrtRatioBX96
 137 |     |                 ) / sqrtRatioAX96;
 138 |     |         }
 139 |     |     }
 140 |     | 
 141 |     |     /// @notice Computes the amount of token1 for a given amount of liquidity and a price range
 142 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
 143 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
 144 |     |     /// @param liquidity The liquidity being valued
 145 |     |     /// @return amount1 The amount of token1
 146 |     |     function getAmount1ForLiquidity(
 147 |     |         uint160 sqrtRatioAX96,
 148 |     |         uint160 sqrtRatioBX96,
 149 |     |         uint128 liquidity
 150 |     |     ) internal pure returns (uint256 amount1) {
 151 |     |         if (sqrtRatioAX96 > sqrtRatioBX96)
 152 |     |             (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
 153 |     | 
 154 |     |         unchecked {
 155 |     |             return
 156 |     |                 FullMath.mulDiv(
 157 |     |                     liquidity,
 158 |     |                     sqrtRatioBX96 - sqrtRatioAX96,
 159 |     |                     FixedPoint96.Q96
 160 |     |                 );
 161 |     |         }
 162 |     |     }
 163 |     | 
 164 |     |     /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current
 165 |     |     /// pool prices and the prices at the tick boundaries
 166 |     |     /// @param sqrtRatioX96 A sqrt price representing the current pool prices
 167 |     |     /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
 168 |     |     /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
 169 |     |     /// @param liquidity The liquidity being valued
 170 |     |     /// @return amount0 The amount of token0
 171 |     |     /// @return amount1 The amount of token1
 172 |     |     function getAmountsForLiquidity(
 173 |     |         uint160 sqrtRatioX96,
 174 |     |         uint160 sqrtRatioAX96,
 175 |     |         uint160 sqrtRatioBX96,
 176 |     |         uint128 liquidity
 177 |     |     ) internal pure returns (uint256 amount0, uint256 amount1) {
 178 |     |         if (sqrtRatioAX96 > sqrtRatioBX96)
 179 |     |             (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
 180 |     | 
 181 |     |         if (sqrtRatioX96 <= sqrtRatioAX96) {
 182 |     |             amount0 = getAmount0ForLiquidity(
 183 |     |                 sqrtRatioAX96,
 184 |     |                 sqrtRatioBX96,
 185 |     |                 liquidity
 186 |     |             );
 187 |     |         } else if (sqrtRatioX96 < sqrtRatioBX96) {
 188 |     |             amount0 = getAmount0ForLiquidity(
 189 |     |                 sqrtRatioX96,
 190 |     |                 sqrtRatioBX96,
 191 |     |                 liquidity
 192 |     |             );
 193 |     |             amount1 = getAmount1ForLiquidity(
 194 |     |                 sqrtRatioAX96,
 195 |     |                 sqrtRatioX96,
 196 |     |                 liquidity
 197 |     |             );
 198 |     |         } else {
 199 |     |             amount1 = getAmount1ForLiquidity(
 200 |     |                 sqrtRatioAX96,
 201 |     |                 sqrtRatioBX96,
 202 |     |                 liquidity
 203 |     |             );
 204 |     |         }
 205 |     |     }
 206 |     | }
 207 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/libraries/LowGasSafeMath.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | /// @title Optimized overflow and underflow safe math operations
  5 |     | /// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost
  6 |     | library LowGasSafeMath {
  7 |     |     /// @notice Returns x + y, reverts if sum overflows uint256
  8 |     |     /// @param x The augend
  9 |     |     /// @param y The addend
 10 |     |     /// @return z The sum of x and y
 11 |     |     function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
 12 |     |         require((z = x + y) >= x);
 13 |     |     }
 14 |     | 
 15 |     |     /// @notice Returns x - y, reverts if underflows
 16 |     |     /// @param x The minuend
 17 |     |     /// @param y The subtrahend
 18 |     |     /// @return z The difference of x and y
 19 |     |     function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
 20 |     |         require((z = x - y) <= x);
 21 |     |     }
 22 |     | 
 23 |     |     /// @notice Returns x * y, reverts if overflows
 24 |     |     /// @param x The multiplicand
 25 |     |     /// @param y The multiplier
 26 |     |     /// @return z The product of x and y
 27 |     |     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
 28 |     |         require(x == 0 || (z = x * y) / x == y);
 29 |     |     }
 30 |     | 
 31 |     |     /// @notice Returns x + y, reverts if overflows or underflows
 32 |     |     /// @param x The augend
 33 |     |     /// @param y The addend
 34 |     |     /// @return z The sum of x and y
 35 |     |     function add(int256 x, int256 y) internal pure returns (int256 z) {
 36 |     |         require((z = x + y) >= x == (y >= 0));
 37 |     |     }
 38 |     | 
 39 |     |     /// @notice Returns x - y, reverts if overflows or underflows
 40 |     |     /// @param x The minuend
 41 |     |     /// @param y The subtrahend
 42 |     |     /// @return z The difference of x and y
 43 |     |     function sub(int256 x, int256 y) internal pure returns (int256 z) {
 44 |     |         require((z = x - y) <= x == (y >= 0));
 45 |     |     }
 46 |     | }
 47 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/libraries/Path.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./BytesLib.sol";
  5 |     | 
  6 |     | /// @title Functions for manipulating path data for multihop swaps
  7 |     | library Path {
  8 |     |     using BytesLib for bytes;
  9 |     | 
 10 |     |     /// @dev The length of the bytes encoded address
 11 |     |     uint256 private constant ADDR_SIZE = 20;
 12 |     |     /// @dev The length of the bytes encoded fee
 13 |     |     uint256 private constant FEE_SIZE = 3;
 14 |     | 
 15 |     |     /// @dev The offset of a single token address and pool fee
 16 |     |     uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;
 17 |     |     /// @dev The offset of an encoded pool key
 18 |     |     uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;
 19 |     |     /// @dev The minimum length of an encoding that contains 2 or more pools
 20 |     |     uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;
 21 |     | 
 22 |     |     /// @notice Returns true iff the path contains two or more pools
 23 |     |     /// @param path The encoded swap path
 24 |     |     /// @return True if path contains two or more pools, otherwise false
 25 |     |     function hasMultiplePools(bytes memory path) internal pure returns (bool) {
 26 |     |         return path.length >= MULTIPLE_POOLS_MIN_LENGTH;
 27 |     |     }
 28 |     | 
 29 |     |     /// @notice Returns the number of pools in the path
 30 |     |     /// @param path The encoded swap path
 31 |     |     /// @return The number of pools in the path
 32 |     |     function numPools(bytes memory path) internal pure returns (uint256) {
 33 |     |         // Ignore the first token address. From then on every fee and token offset indicates a pool.
 34 |     |         return ((path.length - ADDR_SIZE) / NEXT_OFFSET);
 35 |     |     }
 36 |     | 
 37 |     |     /// @notice Decodes the first pool in path
 38 |     |     /// @param path The bytes encoded swap path
 39 |     |     /// @return tokenA The first token of the given pool
 40 |     |     /// @return tokenB The second token of the given pool
 41 |     |     /// @return fee The fee level of the pool
 42 |     |     function decodeFirstPool(bytes memory path)
 43 |     |         internal
 44 |     |         pure
 45 |     |         returns (address tokenA, address tokenB, uint24 fee)
 46 |     |     {
 47 |     |         tokenA = path.toAddress(0);
 48 |     |         fee = path.toUint24(ADDR_SIZE);
 49 |     |         tokenB = path.toAddress(NEXT_OFFSET);
 50 |     |     }
 51 |     | 
 52 |     |     /// @notice Gets the segment corresponding to the first pool in the path
 53 |     |     /// @param path The bytes encoded swap path
 54 |     |     /// @return The segment containing all data necessary to target the first pool in the path
 55 |     |     function getFirstPool(bytes memory path) internal pure returns (bytes memory) {
 56 |     |         return path.slice(0, POP_OFFSET);
 57 |     |     }
 58 |     | 
 59 |     |     /// @notice Skips a token + fee element from the buffer and returns the remainder
 60 |     |     /// @param path The swap path
 61 |     |     /// @return The remaining token + fee elements in the path
 62 |     |     function skipToken(bytes memory path) internal pure returns (bytes memory) {
 63 |     |         return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);
 64 |     |     }
 65 |     | }
 66 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/libraries/PoolAddress.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | /// @title Provides functions for deriving a pool address from the factory, tokens, and the fee
  5 |     | library PoolAddress {
  6 |     |     bytes32 internal constant POOL_INIT_CODE_HASH =
  7 |     |         0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;
  8 |     | 
  9 |     |     /// @notice The identifying key of the pool
 10 |     |     struct PoolKey {
 11 |     |         address token0;
 12 |     |         address token1;
 13 |     |         uint24 fee;
 14 |     |     }
 15 |     |     /// @notice Returns PoolKey: the ordered tokens with the matched fee levels
 16 |     |     /// @param tokenA The first token of a pool, unsorted
 17 |     |     /// @param tokenB The second token of a pool, unsorted
 18 |     |     /// @param fee The fee level of the pool
 19 |     |     /// @return Poolkey The pool details with ordered token0 and token1 assignments
 20 |     |     function getPoolKey(
 21 |     |         address tokenA,
 22 |     |         address tokenB,
 23 |     |         uint24 fee
 24 |     |     ) internal pure returns (PoolKey memory) {
 25 |     |         if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);
 26 |     |         return PoolKey({token0: tokenA, token1: tokenB, fee: fee});
 27 |     |     }
 28 |     | 
 29 |     |     /// @notice Deterministically computes the pool address given the factory and PoolKey
 30 |     |     /// @param factory The Uniswap V3 factory contract address
 31 |     |     /// @param key The PoolKey
 32 |     |     /// @return pool The contract address of the V3 pool
 33 |     |     function computeAddress(
 34 |     |         address factory,
 35 |     |         PoolKey memory key
 36 |     |     ) internal pure returns (address pool) {
 37 |     |         require(key.token0 < key.token1);
 38 |     |         pool = address(
 39 |     |             uint160(
 40 |     |                 uint256(
 41 |     |                     keccak256(
 42 |     |                         abi.encodePacked(
 43 |     |                             hex"ff",
 44 |     |                             factory,
 45 |     |                             keccak256(
 46 |     |                                 abi.encode(key.token0, key.token1, key.fee)
 47 |     |                             ),
 48 |     |                             POOL_INIT_CODE_HASH
 49 |     |                         )
 50 |     |                     )
 51 |     |                 )
 52 |     |             )
 53 |     |         );
 54 |     |     }
 55 |     | }
 56 |     | 

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/libraries/PositionKey.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.8.0;
  3 |     | 
  4 |     | library PositionKey {
  5 |     |     /// @dev Returns the key of the position in the core library
  6 |     |     function compute(
  7 |     |         address owner,
  8 |     |         int24 tickLower,
  9 |     |         int24 tickUpper
 10 |     |     ) internal pure returns (bytes32) {
 11 |     |         return keccak256(abi.encodePacked(owner, tickLower, tickUpper));
 12 |     |     }
 13 |     | }

/Users/owenthurm/Desktop/foil/packages/protocol/uniswapv3/v3-periphery/libraries/TransferHelper.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "@openzeppelin/contracts-v4/token/ERC20/IERC20.sol";
  5 |     | 
  6 |     | library TransferHelper {
  7 |     |     /// @notice Transfers tokens from the targeted address to the given destination
  8 |     |     /// @notice Errors with 'STF' if transfer fails
  9 |     |     /// @param token The contract address of the token to be transferred
 10 |     |     /// @param from The originating address from which the tokens will be transferred
 11 |     |     /// @param to The destination address of the transfer
 12 |     |     /// @param value The amount to be transferred
 13 |     |     function safeTransferFrom(
 14 |     |         address token,
 15 |     |         address from,
 16 |     |         address to,
 17 |     |         uint256 value
 18 |     |     ) internal {
 19 |     |         (bool success, bytes memory data) = token.call(
 20 |     |             abi.encodeWithSelector(
 21 |     |                 IERC20.transferFrom.selector,
 22 |     |                 from,
 23 |     |                 to,
 24 |     |                 value
 25 |     |             )
 26 |     |         );
 27 |     |         require(
 28 |     |             success && (data.length == 0 || abi.decode(data, (bool))),
 29 |     |             "STF"
 30 |     |         );
 31 |     |     }
 32 |     | 
 33 |     |     /// @notice Transfers tokens from msg.sender to a recipient
 34 |     |     /// @dev Errors with ST if transfer fails
 35 |     |     /// @param token The contract address of the token which will be transferred
 36 |     |     /// @param to The recipient of the transfer
 37 |     |     /// @param value The value of the transfer
 38 |     |     function safeTransfer(address token, address to, uint256 value) internal {
 39 |     |         (bool success, bytes memory data) = token.call(
 40 |     |             abi.encodeWithSelector(IERC20.transfer.selector, to, value)
 41 |     |         );
 42 |     |         require(
 43 |     |             success && (data.length == 0 || abi.decode(data, (bool))),
 44 |     |             "ST"
 45 |     |         );
 46 |     |     }
 47 |     | 
 48 |     |     /// @notice Approves the stipulated contract to spend the given allowance in the given token
 49 |     |     /// @dev Errors with 'SA' if transfer fails
 50 |     |     /// @param token The contract address of the token to be approved
 51 |     |     /// @param to The target of the approval
 52 |     |     /// @param value The amount of the given token the target will be allowed to spend
 53 |     |     function safeApprove(address token, address to, uint256 value) internal {
 54 |     |         (bool success, bytes memory data) = token.call(
 55 |     |             abi.encodeWithSelector(IERC20.approve.selector, to, value)
 56 |     |         );
 57 |     |         require(
 58 |     |             success && (data.length == 0 || abi.decode(data, (bool))),
 59 |     |             "SA"
 60 |     |         );
 61 |     |     }
 62 |     | 
 63 |     |     /// @notice Transfers ETH to the recipient address
 64 |     |     /// @dev Fails with `STE`
 65 |     |     /// @param to The destination of the transfer
 66 |     |     /// @param value The value to be transferred
 67 |     |     function safeTransferETH(address to, uint256 value) internal {
 68 |     |         (bool success, ) = to.call{value: value}(new bytes(0));
 69 |     |         require(success, "STE");
 70 |     |     }
 71 |     | }
 72 |     | 

