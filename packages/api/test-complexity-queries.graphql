# GraphQL Query Complexity Test Queries
# Copy these queries into your localhost:3001/graphql playground

# ============================================
# 1. SIMPLE QUERY (Should PASS - Very Low complexity ~10)
# ============================================
query SimpleMarkets {
  markets(take: 1) {
    id
    marketId
    question
  }
}

# ============================================
# 2. MODERATE QUERY (Should PASS - Low complexity ~50)
# ============================================
query ModerateMarkets {
  markets(take: 3) {
    id
    marketId
    question
    createdAt
    settled
    public
  }
}

# ============================================
# 3. WITH RELATIONS (Should PASS - Medium complexity ~100-200)
# ============================================
query MarketsWithGroup {
  markets(take: 5) {
    id
    marketId
    question
    marketGroup {
      id
      title
      description
    }
  }
}

# ============================================
# 4. NESTED LIST - POSITIONS (Should PASS - Complexity ~200-400)
# ============================================
query MarketsWithPositions {
  markets(take: 3) {
    id
    marketId
    question
    positions(take: 5) {
      id
      amount
      shares
      owner
    }
  }
}

# ============================================
# 5. DEEPLY NESTED (May PASS or FAIL depending on limit - ~500-800)
# ============================================
query DeeplyNestedMarkets {
  markets(take: 5) {
    id
    question
    positions(take: 10) {
      id
      amount
      market {
        id
        question
      }
    }
  }
}

# ============================================
# 6. HIGH COMPLEXITY (Should FAIL - Exceeds 1000)
# ============================================
query HighComplexity {
  markets(take: 10) {
    id
    question
    positions(take: 15) {
      id
      amount
      shares
      owner
      market {
        id
        question
        positions(take: 10) {
          id
          amount
        }
      }
    }
  }
}

# ============================================
# 7. EXTREME COMPLEXITY (Should FAIL - Way over limit)
# ============================================
query ExtremeComplexity {
  markets(take: 20) {
    id
    question
    marketGroup {
      id
      title
    }
    positions(take: 20) {
      id
      amount
      shares
      market {
        id
        positions(take: 15) {
          id
          amount
          market {
            id
            question
          }
        }
      }
    }
  }
}

# ============================================
# 8. MULTIPLE QUERIES (Should PASS - ~100-200)
# ============================================
query MultipleQueries {
  markets(take: 2) {
    id
    question
  }
  
  categories(take: 3) {
    id
    name
    description
  }
}

# ============================================
# 9. AGGREGATE QUERY (Should PASS - Very Low ~10-20)
# ============================================
query AggregateTest {
  aggregateMarket {
    _count {
      id
    }
  }
}

# ============================================
# 10. RESOURCES WITH PRICES (May FAIL if takes are high)
# ============================================
query ResourcesWithPrices {
  resources(take: 5) {
    id
    name
    resourcePrices(take: 10) {
      id
      price
      timestamp
    }
  }
}

# ============================================
# 11. ATTESTATIONS (Should PASS - ~100-200)
# ============================================
query AttestationsQuery {
  attestations(take: 5) {
    id
    attester
    prediction
    blockNumber
    marketId
  }
}

# ============================================
# 12. TRANSACTIONS (Should PASS - ~50-100)
# ============================================
query TransactionsQuery {
  transactions(take: 5) {
    id
    type
    amount
    blockNumber
  }
}

# ============================================
# TESTING INSTRUCTIONS:
# ============================================
# 1. Start with query #1 (SimpleMarkets) - should work fine
# 2. Progress through queries #2-5 - watch server logs for complexity values
# 3. Queries #6-7 should FAIL with "exceeds maximum cost" error
# 4. Check your server console for "Query complexity: X" logs
# 5. Adjust GRAPHQL_MAX_COMPLEXITY env var if needed
#
# Expected complexity progression:
# - Simple: ~10
# - Moderate: ~50-100
# - With Relations: ~100-200
# - Nested Lists: ~200-500
# - High/Extreme: >1000 (should fail)
