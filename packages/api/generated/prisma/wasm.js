
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Cache_candleScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  candleType: 'candleType',
  interval: 'interval',
  trailingAvgTime: 'trailingAvgTime',
  resourceSlug: 'resourceSlug',
  marketIdx: 'marketIdx',
  timestamp: 'timestamp',
  open: 'open',
  high: 'high',
  low: 'low',
  close: 'close',
  endTimestamp: 'endTimestamp',
  lastUpdatedTimestamp: 'lastUpdatedTimestamp',
  sumUsed: 'sumUsed',
  sumFeePaid: 'sumFeePaid',
  trailingStartTimestamp: 'trailingStartTimestamp',
  address: 'address',
  chainId: 'chainId',
  marketId: 'marketId'
};

exports.Prisma.Cache_paramScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  paramName: 'paramName',
  paramValueNumber: 'paramValueNumber',
  paramValueString: 'paramValueString'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  slug: 'slug'
};

exports.Prisma.Collateral_transferScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  transactionHash: 'transactionHash',
  timestamp: 'timestamp',
  owner: 'owner',
  collateral: 'collateral'
};

exports.Prisma.Crypto_pricesScalarFieldEnum = {
  id: 'id',
  ticker: 'ticker',
  price: 'price',
  timestamp: 'timestamp'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  blockNumber: 'blockNumber',
  transactionHash: 'transactionHash',
  timestamp: 'timestamp',
  logIndex: 'logIndex',
  logData: 'logData',
  marketGroupId: 'marketGroupId'
};

exports.Prisma.MarketScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  marketId: 'marketId',
  startTimestamp: 'startTimestamp',
  endTimestamp: 'endTimestamp',
  startingSqrtPriceX96: 'startingSqrtPriceX96',
  settlementPriceD18: 'settlementPriceD18',
  settled: 'settled',
  baseAssetMinPriceTick: 'baseAssetMinPriceTick',
  baseAssetMaxPriceTick: 'baseAssetMaxPriceTick',
  minPriceD18: 'minPriceD18',
  maxPriceD18: 'maxPriceD18',
  marketGroupId: 'marketGroupId',
  marketParamsFeerate: 'marketParamsFeerate',
  marketParamsAssertionliveness: 'marketParamsAssertionliveness',
  marketParamsBondcurrency: 'marketParamsBondcurrency',
  marketParamsBondamount: 'marketParamsBondamount',
  marketParamsClaimstatement: 'marketParamsClaimstatement',
  marketParamsUniswappositionmanager: 'marketParamsUniswappositionmanager',
  marketParamsUniswapswaprouter: 'marketParamsUniswapswaprouter',
  marketParamsUniswapquoter: 'marketParamsUniswapquoter',
  marketParamsOptimisticoraclev3: 'marketParamsOptimisticoraclev3',
  public: 'public',
  question: 'question',
  poolAddress: 'poolAddress',
  optionName: 'optionName',
  rules: 'rules'
};

exports.Prisma.Market_groupScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  address: 'address',
  vaultAddress: 'vaultAddress',
  isYin: 'isYin',
  chainId: 'chainId',
  deployTimestamp: 'deployTimestamp',
  deployTxnBlockNumber: 'deployTxnBlockNumber',
  owner: 'owner',
  collateralAsset: 'collateralAsset',
  resourceId: 'resourceId',
  marketParamsFeerate: 'marketParamsFeerate',
  marketParamsAssertionliveness: 'marketParamsAssertionliveness',
  marketParamsBondcurrency: 'marketParamsBondcurrency',
  marketParamsBondamount: 'marketParamsBondamount',
  marketParamsClaimstatement: 'marketParamsClaimstatement',
  marketParamsUniswappositionmanager: 'marketParamsUniswappositionmanager',
  marketParamsUniswapswaprouter: 'marketParamsUniswapswaprouter',
  marketParamsUniswapquoter: 'marketParamsUniswapquoter',
  marketParamsOptimisticoraclev3: 'marketParamsOptimisticoraclev3',
  isCumulative: 'isCumulative',
  categoryId: 'categoryId',
  question: 'question',
  baseTokenName: 'baseTokenName',
  quoteTokenName: 'quoteTokenName',
  collateralDecimals: 'collateralDecimals',
  collateralSymbol: 'collateralSymbol',
  initializationNonce: 'initializationNonce',
  factoryAddress: 'factoryAddress',
  minTradeSize: 'minTradeSize'
};

exports.Prisma.Market_priceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  timestamp: 'timestamp',
  value: 'value'
};

exports.Prisma.MigrationsScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  name: 'name'
};

exports.Prisma.PositionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  positionId: 'positionId',
  owner: 'owner',
  isLP: 'isLP',
  highPriceTick: 'highPriceTick',
  lowPriceTick: 'lowPriceTick',
  isSettled: 'isSettled',
  lpBaseToken: 'lpBaseToken',
  lpQuoteToken: 'lpQuoteToken',
  baseToken: 'baseToken',
  quoteToken: 'quoteToken',
  borrowedBaseToken: 'borrowedBaseToken',
  borrowedQuoteToken: 'borrowedQuoteToken',
  collateral: 'collateral',
  marketId: 'marketId'
};

exports.Prisma.Render_jobScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  jobId: 'jobId',
  serviceId: 'serviceId'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  slug: 'slug',
  categoryId: 'categoryId'
};

exports.Prisma.Resource_priceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  blockNumber: 'blockNumber',
  timestamp: 'timestamp',
  value: 'value',
  used: 'used',
  feePaid: 'feePaid',
  resourceId: 'resourceId'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  tradeRatioD18: 'tradeRatioD18',
  type: 'type',
  baseToken: 'baseToken',
  quoteToken: 'quoteToken',
  borrowedBaseToken: 'borrowedBaseToken',
  borrowedQuoteToken: 'borrowedQuoteToken',
  collateral: 'collateral',
  lpBaseDeltaToken: 'lpBaseDeltaToken',
  lpQuoteDeltaToken: 'lpQuoteDeltaToken',
  eventId: 'eventId',
  positionId: 'positionId',
  marketPriceId: 'marketPriceId',
  collateralTransferId: 'collateralTransferId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.transaction_type_enum = exports.$Enums.transaction_type_enum = {
  addLiquidity: 'addLiquidity',
  removeLiquidity: 'removeLiquidity',
  long: 'long',
  short: 'short',
  settledPosition: 'settledPosition'
};

exports.Prisma.ModelName = {
  cache_candle: 'cache_candle',
  cache_param: 'cache_param',
  category: 'category',
  collateral_transfer: 'collateral_transfer',
  crypto_prices: 'crypto_prices',
  event: 'event',
  market: 'market',
  market_group: 'market_group',
  market_price: 'market_price',
  migrations: 'migrations',
  position: 'position',
  render_job: 'render_job',
  resource: 'resource',
  resource_price: 'resource_price',
  transaction: 'transaction'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
