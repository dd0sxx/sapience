name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # simulate-deploy:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Install Foundry
  #       uses: foundry-rs/foundry-toolchain@v1

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "20"

  #     - name: Install pnpm
  #       run: npm install -g pnpm@9.15.4

  #     - name: Install dependencies
  #       run: pnpm install

  #     - name: Forge build
  #       run: forge build
  #       working-directory: packages/protocol

  #     - name: Simulate deploy on Sepolia
  #       id: simulate-deploy
  #       run: |
  #         set -eo pipefail
  #         pnpm run simulate-deploy:sepolia > deploy_output.log 2>&1
  #         
  #         echo "DEPLOY_OUTPUT<<EOF" >> $GITHUB_OUTPUT
  #         cat deploy_output.log >> $GITHUB_OUTPUT
  #         echo "EOF" >> $GITHUB_OUTPUT
  #       working-directory: packages/protocol

  #     - name: Check for success
  #       run: |
  #         if grep -q "ðŸ’¥" deploy_output.log; then
  #           echo "Deployment simulation successful!"
  #         elif grep -q "ELIFECYCLE" deploy_output.log; then
  #           echo "Deployment simulation failed. Full output:"
  #           cat deploy_output.log
  #           exit 1
  #         else
  #           echo "Unexpected output. Full log:"
  #           cat deploy_output.log
  #           exit 1
  #         fi
  #       working-directory: packages/protocol

  # test-contracts:
    # runs-on: ubuntu-latest

    # steps:
      # - name: Checkout repository
        # uses: actions/checkout@v3

      # - name: Install Foundry
        # uses: foundry-rs/foundry-toolchain@v1

      # - name: Set up Node.js
        # uses: actions/setup-node@v3
        # with:
          # node-version: "20"

      # - name: Install pnpm
        # run: npm install -g pnpm@9.15.4

      # - name: Install dependencies
        # run: pnpm install

      # - name: Forge build
        # run: forge build
        # working-directory: packages/protocol

      # - name: Smart contract tests
        # run: pnpm run test
        # working-directory: packages/protocol

  test-api:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.4
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma client
        run: pnpm prisma:generate
        working-directory: packages/api

      - name: Compile API
        run: pnpm run compile
        working-directory: packages/api

      - name: Run API tests
        run: pnpm test -- --run
        working-directory: packages/api